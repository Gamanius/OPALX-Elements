import os, sys, argparse, math, base64, zlib, struct

if sys.version_info < (3,0):
    range = xrange

vertices = []
numVertices = [74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 76, 74, 74, 74, 74, 76, 74, 74, 74, 74, 74, 100, 74, 74, 74]
vertices_base64 = ""
triangles = [[ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 2, 1, 0, 2, 4, 3, 2, 5, 4, 2, 0, 35, 2, 35, 5, 35, 34, 5, 5, 34, 6, 20, 19, 18, 20, 22, 21, 20, 23, 22, 20, 18, 17, 20, 17, 23, 17, 16, 23, 23, 16, 24, 38, 36, 37, 38, 39, 40, 38, 40, 41, 38, 71, 36, 38, 41, 71, 71, 41, 70, 41, 42, 70, 56, 54, 55, 56, 57, 58, 56, 58, 59, 56, 53, 54, 56, 59, 53, 53, 59, 52, 59, 60, 52, 6, 34, 7, 34, 33, 7, 42, 43, 70, 70, 43, 69, 7, 33, 8, 33, 32, 8, 43, 44, 69, 69, 44, 68, 8, 32, 9, 32, 31, 9, 44, 45, 68, 68, 45, 67, 9, 31, 10, 31, 30, 10, 45, 46, 67, 67, 46, 66, 10, 30, 11, 30, 29, 11, 46, 47, 66, 66, 47, 65, 11, 29, 12, 29, 28, 12, 47, 48, 65, 65, 48, 64, 12, 28, 13, 28, 27, 13, 48, 49, 64, 64, 49, 63, 13, 27, 14, 27, 26, 14, 49, 50, 63, 63, 50, 62, 14, 26, 15, 26, 25, 15, 50, 51, 62, 62, 51, 61, 15, 25, 16, 25, 24, 16, 51, 52, 61, 61, 52, 60, 0, 1, 37, 0, 37, 36, 1, 2, 38, 1, 38, 37, 2, 3, 39, 2, 39, 38, 3, 4, 40, 3, 40, 39, 6, 7, 43, 6, 43, 42, 7, 8, 44, 7, 44, 43, 8, 9, 45, 8, 45, 44, 9, 10, 46, 9, 46, 45, 10, 11, 47, 10, 47, 46, 11, 12, 48, 11, 48, 47, 12, 13, 49, 12, 49, 48, 13, 14, 50, 13, 50, 49, 14, 15, 51, 14, 51, 50, 15, 16, 52, 15, 52, 51, 18, 19, 55, 18, 55, 54, 19, 20, 56, 19, 56, 55, 20, 21, 57, 20, 57, 56, 21, 22, 58, 21, 58, 57, 24, 25, 61, 24, 61, 60, 25, 26, 62, 25, 62, 61, 26, 27, 63, 26, 63, 62, 27, 28, 64, 27, 64, 63, 28, 29, 65, 28, 65, 64, 29, 30, 66, 29, 66, 65, 30, 31, 67, 30, 67, 66, 31, 32, 68, 31, 68, 67, 32, 33, 69, 32, 69, 68, 33, 34, 70, 33, 70, 69, 35, 0, 34, 72, 34, 0, 72, 70, 34, 72, 36, 70, 71, 70, 36, 4, 5, 6, 4, 6, 73, 73, 6, 42, 40, 73, 42, 40, 42, 41, 17, 18, 16, 16, 18, 74, 16, 74, 52, 52, 74, 54, 53, 52, 54, 24, 22, 23, 24, 75, 22, 75, 24, 60, 58, 75, 60, 58, 60, 59], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 2, 1, 0, 2, 4, 3, 2, 5, 4, 2, 0, 35, 2, 35, 5, 35, 34, 5, 5, 34, 6, 20, 19, 18, 20, 22, 21, 20, 23, 22, 20, 18, 17, 20, 17, 23, 17, 16, 23, 23, 16, 24, 38, 36, 37, 38, 39, 40, 38, 40, 41, 38, 71, 36, 38, 41, 71, 71, 41, 70, 41, 42, 70, 56, 54, 55, 56, 57, 58, 56, 58, 59, 56, 53, 54, 56, 59, 53, 53, 59, 52, 59, 60, 52, 6, 34, 7, 34, 33, 7, 42, 43, 70, 70, 43, 69, 7, 33, 8, 33, 32, 8, 43, 44, 69, 69, 44, 68, 8, 32, 9, 32, 31, 9, 44, 45, 68, 68, 45, 67, 9, 31, 10, 31, 30, 10, 45, 46, 67, 67, 46, 66, 10, 30, 11, 30, 29, 11, 46, 47, 66, 66, 47, 65, 11, 29, 12, 29, 28, 12, 47, 48, 65, 65, 48, 64, 12, 28, 13, 28, 27, 13, 48, 49, 64, 64, 49, 63, 13, 27, 14, 27, 26, 14, 49, 50, 63, 63, 50, 62, 14, 26, 15, 26, 25, 15, 50, 51, 62, 62, 51, 61, 15, 25, 16, 25, 24, 16, 51, 52, 61, 61, 52, 60, 0, 1, 37, 0, 37, 36, 1, 2, 38, 1, 38, 37, 2, 3, 39, 2, 39, 38, 3, 4, 40, 3, 40, 39, 6, 7, 43, 6, 43, 42, 7, 8, 44, 7, 44, 43, 8, 9, 45, 8, 45, 44, 9, 10, 46, 9, 46, 45, 10, 11, 47, 10, 47, 46, 11, 12, 48, 11, 48, 47, 12, 13, 49, 12, 49, 48, 13, 14, 50, 13, 50, 49, 14, 15, 51, 14, 51, 50, 15, 16, 52, 15, 52, 51, 18, 19, 55, 18, 55, 54, 19, 20, 56, 19, 56, 55, 20, 21, 57, 20, 57, 56, 21, 22, 58, 21, 58, 57, 24, 25, 61, 24, 61, 60, 25, 26, 62, 25, 62, 61, 26, 27, 63, 26, 63, 62, 27, 28, 64, 27, 64, 63, 28, 29, 65, 28, 65, 64, 29, 30, 66, 29, 66, 65, 30, 31, 67, 30, 67, 66, 31, 32, 68, 31, 68, 67, 32, 33, 69, 32, 69, 68, 33, 34, 70, 33, 70, 69, 35, 0, 34, 72, 34, 0, 72, 70, 34, 72, 36, 70, 71, 70, 36, 4, 5, 6, 4, 6, 73, 73, 6, 42, 40, 73, 42, 40, 42, 41, 17, 18, 16, 16, 18, 74, 16, 74, 52, 52, 74, 54, 53, 52, 54, 24, 22, 23, 24, 75, 22, 75, 24, 60, 58, 75, 60, 58, 60, 59], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 2, 1, 0, 2, 4, 3, 2, 5, 4, 2, 0, 47, 2, 47, 5, 47, 46, 5, 5, 46, 6, 26, 25, 24, 26, 28, 27, 26, 29, 28, 26, 24, 23, 26, 23, 29, 23, 22, 29, 29, 22, 30, 50, 48, 49, 50, 51, 52, 50, 52, 53, 50, 95, 48, 50, 53, 95, 95, 53, 94, 53, 54, 94, 74, 72, 73, 74, 75, 76, 74, 76, 77, 74, 71, 72, 74, 77, 71, 71, 77, 70, 77, 78, 70, 6, 46, 7, 46, 45, 7, 54, 55, 94, 94, 55, 93, 7, 45, 8, 45, 44, 8, 55, 56, 93, 93, 56, 92, 8, 44, 9, 44, 43, 9, 56, 57, 92, 92, 57, 91, 9, 43, 10, 43, 42, 10, 57, 58, 91, 91, 58, 90, 10, 42, 11, 42, 41, 11, 58, 59, 90, 90, 59, 89, 11, 41, 12, 41, 40, 12, 59, 60, 89, 89, 60, 88, 12, 40, 13, 40, 39, 13, 60, 61, 88, 88, 61, 87, 13, 39, 14, 39, 38, 14, 61, 62, 87, 87, 62, 86, 14, 38, 15, 38, 37, 15, 62, 63, 86, 86, 63, 85, 15, 37, 16, 37, 36, 16, 63, 64, 85, 85, 64, 84, 16, 36, 17, 36, 35, 17, 64, 65, 84, 84, 65, 83, 17, 35, 18, 35, 34, 18, 65, 66, 83, 83, 66, 82, 18, 34, 19, 34, 33, 19, 66, 67, 82, 82, 67, 81, 19, 33, 20, 33, 32, 20, 67, 68, 81, 81, 68, 80, 20, 32, 21, 32, 31, 21, 68, 69, 80, 80, 69, 79, 21, 31, 22, 31, 30, 22, 69, 70, 79, 79, 70, 78, 0, 1, 49, 0, 49, 48, 1, 2, 50, 1, 50, 49, 2, 3, 51, 2, 51, 50, 3, 4, 52, 3, 52, 51, 6, 7, 55, 6, 55, 54, 7, 8, 56, 7, 56, 55, 8, 9, 57, 8, 57, 56, 9, 10, 58, 9, 58, 57, 10, 11, 59, 10, 59, 58, 11, 12, 60, 11, 60, 59, 12, 13, 61, 12, 61, 60, 13, 14, 62, 13, 62, 61, 14, 15, 63, 14, 63, 62, 15, 16, 64, 15, 64, 63, 16, 17, 65, 16, 65, 64, 17, 18, 66, 17, 66, 65, 18, 19, 67, 18, 67, 66, 19, 20, 68, 19, 68, 67, 20, 21, 69, 20, 69, 68, 21, 22, 70, 21, 70, 69, 24, 25, 73, 24, 73, 72, 25, 26, 74, 25, 74, 73, 26, 27, 75, 26, 75, 74, 27, 28, 76, 27, 76, 75, 30, 31, 79, 30, 79, 78, 31, 32, 80, 31, 80, 79, 32, 33, 81, 32, 81, 80, 33, 34, 82, 33, 82, 81, 34, 35, 83, 34, 83, 82, 35, 36, 84, 35, 84, 83, 36, 37, 85, 36, 85, 84, 37, 38, 86, 37, 86, 85, 38, 39, 87, 38, 87, 86, 39, 40, 88, 39, 88, 87, 40, 41, 89, 40, 89, 88, 41, 42, 90, 41, 90, 89, 42, 43, 91, 42, 91, 90, 43, 44, 92, 43, 92, 91, 44, 45, 93, 44, 93, 92, 45, 46, 94, 45, 94, 93, 47, 0, 46, 96, 46, 0, 96, 94, 46, 96, 48, 94, 95, 94, 48, 4, 5, 6, 4, 6, 97, 97, 6, 54, 52, 97, 54, 52, 54, 53, 23, 24, 22, 22, 24, 98, 22, 98, 70, 70, 98, 72, 71, 70, 72, 30, 28, 29, 30, 99, 28, 99, 30, 78, 76, 99, 78, 76, 78, 77], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38], [ 0, 2, 1, 1, 2, 38, 2, 39, 38, 0, 3, 2, 2, 3, 39, 3, 40, 39, 0, 4, 3, 3, 4, 40, 4, 41, 40, 0, 5, 4, 4, 5, 41, 5, 42, 41, 0, 6, 5, 5, 6, 42, 6, 43, 42, 0, 7, 6, 6, 7, 43, 7, 44, 43, 0, 8, 7, 7, 8, 44, 8, 45, 44, 0, 9, 8, 8, 9, 45, 9, 46, 45, 0, 10, 9, 9, 10, 46, 10, 47, 46, 0, 11, 10, 10, 11, 47, 11, 48, 47, 0, 12, 11, 11, 12, 48, 12, 49, 48, 0, 13, 12, 12, 13, 49, 13, 50, 49, 0, 14, 13, 13, 14, 50, 14, 51, 50, 0, 15, 14, 14, 15, 51, 15, 52, 51, 0, 16, 15, 15, 16, 52, 16, 53, 52, 0, 17, 16, 16, 17, 53, 17, 54, 53, 0, 18, 17, 17, 18, 54, 18, 55, 54, 0, 19, 18, 18, 19, 55, 19, 56, 55, 0, 20, 19, 19, 20, 56, 20, 57, 56, 0, 21, 20, 20, 21, 57, 21, 58, 57, 0, 22, 21, 21, 22, 58, 22, 59, 58, 0, 23, 22, 22, 23, 59, 23, 60, 59, 0, 24, 23, 23, 24, 60, 24, 61, 60, 0, 25, 24, 24, 25, 61, 25, 62, 61, 0, 26, 25, 25, 26, 62, 26, 63, 62, 0, 27, 26, 26, 27, 63, 27, 64, 63, 0, 28, 27, 27, 28, 64, 28, 65, 64, 0, 29, 28, 28, 29, 65, 29, 66, 65, 0, 30, 29, 29, 30, 66, 30, 67, 66, 0, 31, 30, 30, 31, 67, 31, 68, 67, 0, 32, 31, 31, 32, 68, 32, 69, 68, 0, 33, 32, 32, 33, 69, 33, 70, 69, 0, 34, 33, 33, 34, 70, 34, 71, 70, 0, 35, 34, 34, 35, 71, 35, 72, 71, 0, 36, 35, 35, 36, 72, 36, 73, 72, 0, 1, 36, 36, 1, 73, 1, 38, 73, 37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 73, 38]]
decoration = [[ 0.000000, 0.000000, 32.632000, 0.000000, 0.000000, 33.000000], [ 0.000000, 0.000000, 33.202000, 0.000000, 0.000000, 33.570000], [ 0.000000, 0.000000, 33.772000, 0.000000, 0.000000, 34.140000], [ 0.000000, 0.000000, 34.452500, 0.000000, 0.000000, 34.462500], [ 0.000000, 0.000000, 34.452500, 0.000000, 0.000000, 34.462500], [ 0.000000, 0.000000, 36.192100, 0.000000, 0.000000, 36.202100], [ 0.000000, 0.000000, 36.192100, 0.000000, 0.000000, 36.202100], [ 0.000000, 0.000000, 36.287600, 0.000000, 0.000000, 36.297600], [ 0.000000, 0.000000, 36.287600, 0.000000, 0.000000, 36.297600], [ 0.000000, 0.000000, 37.366700, 0.000000, 0.000000, 37.376700], [ 0.000000, 0.000000, 37.366700, 0.000000, 0.000000, 37.376700], [ 0.000000, 0.000000, 37.650200, 0.000000, 0.000000, 37.970200], [ 0.000000, 0.000000, 38.280200, 0.000000, 0.000000, 38.600200], [ -0.395788, 0.000000, 38.960843, 0.391963, 0.000000, 39.110829, -0.988798, 0.000000, 40.061300, -0.430326, 0.000000, 40.636762, 0.000000, 0.000000, 39.036200, 0.000000, 0.000000, 39.036200, -0.708206, 0.000000, 40.350428, -0.708206, 0.000000, 40.350428], [ -1.036641, 0.000000, 40.566676, -1.044993, 0.000000, 40.572175], [ -1.036641, 0.000000, 40.566676, -1.044993, 0.000000, 40.572175], [ -1.263569, 0.000000, 40.716089, -1.530839, 0.000000, 40.892064], [ -1.814812, 0.000000, 41.079038, -2.082081, 0.000000, 41.255013], [ -2.156355, 0.000000, 41.777962, -2.715029, -0.000000, 41.202293, -2.749608, 0.000000, 42.878358, -3.537585, 0.000000, 42.728011, -2.437048, 0.000000, 41.488730, -2.437048, 0.000000, 41.488730, -3.145509, 0.000000, 42.802820, -3.145509, 0.000000, 42.802820], [ -3.146012, 0.000000, 44.095275, -3.146016, 0.000000, 44.105275], [ -3.146012, 0.000000, 44.095275, -3.146016, 0.000000, 44.105275], [ -3.146197, 0.000000, 44.571775, -3.146321, 0.000000, 44.891775], [ -3.146376, 0.000000, 45.031775, -3.146500, 0.000000, 45.351775], [ -3.146554, 0.000000, 45.491775, -3.146679, 0.000000, 45.811775], [ -2.754431, 0.000000, 47.260449, -3.535466, 0.000000, 47.424722, -1.446658, 0.000000, 48.504771, -1.800106, 0.000000, 49.281470, -3.147274, 0.000000, 47.343074, -3.147274, 0.000000, 47.343074, -1.627732, 0.000000, 48.902679, -1.627732, 0.000000, 48.902679], [ 1.080171, 0.000000, 48.972104, 1.090168, 0.000000, 48.972360], [ 1.080171, 0.000000, 48.972104, 1.090168, 0.000000, 48.972360], [ 2.595470, 0.000000, 49.010953, 2.605467, 0.000000, 49.011209]]

color = [2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 2, 2, 1, 0, 0, 2, 2, 2, 1, 0, 0, 0]

index_base64 = 'eJylVlFv2zYQfs+vYGUMUACLcjIUKBLbgOMGWIBkCdJgQDfsgSZPFguJ9CjKrjf0v/dIKrYk28G2CrAl6u6+++6Od9T43cfH+cvnp1uS27KYno3DjeA1zoGJ8OiXJViGWnaVwF+1XE+iuVYWlE1etiuICA+rSWThq00dzDXhOTMV2Elts+RDRNLp2R7OSlvA9IYttoVW9EtFKlauCkAcAeM0SPfa75KEtHSTpCWruJErSyrDJ5Hjd5WmXCi6COpfKsp1meZMCVpKJTMJIrmglwgTTcdpMP6vaJwp5Zn8fwgtS/1DAItdOo5j2G07g+5yRRmShRZb8k9H4C69BpMVenNFcikEqOsDjY0UNr8iF6PRT4fCHOQyt6ekJTNLqa7I6FC0YkJItTyQfTvrLAcGlAAzZ2rNqiP0f4Cc1TXPE8at1EgR6wp9Jq9PmOZ9VsdpaJCxS2jzigd6UkyiNl9XoCBq9PrVWjNDGtsJEZrXJbYSXYK9LcA93mzvRNyFPL/uWIPCBANaK9iQm9nN5/vHX+mtfxkH5CGxpgY063o1wCx84uCNs1r5NJD4vJdjp1s1Wm0X3jIO3tvY7krTma8tYaRwBTjIvAP1kh7ok5bK3jtBHD2WSkbDjvg34Fabn+PRkCRY0iEZnQ8DufPD6qap90CFzLK66tOf68Ij0Q+I0vwdAQkQ1Qp4XSDnExgXzjz8vUFkaXSthDc6AYQILqaT2VRkZjh51hYrR+asBMOOppZ7Uc8JmgbLYBhH4R452uj2gdmcPt0NyXtc9BJOfwej4xO5Ds4os5bx3B0NRhe7nZexojpWnMZokwMUTwa4rNzmm5DLUS94F065LaHKUToYfJy9zAaD615+yEsOJJOmsjhVDEJb8G1FFkCw9AI7nbgaymxLNrnkOfGA+FaWK20sJb+AAbKBZk1YUXgVqDqeOnv/XjNsSnrnLR5QOY4wl+4X+DbZGrZ6C8vx4FH7TdaE8QkssRiKxamJjzrzq6aayNbuwgw8MTLn6VR2Gxi/DYLfP0Z/9vJ7kGvcIEay4qLf7hbPUWbEQyOP/XFfG7iITrfgPrQdLN1IA5mrETpwc+nQqs2Wvhqi9g7jX5pQKGVVyTW81XL00u3/8NeL4Fu/EQ1gwCpEu1fF86ozWF+HZWvAxm2kMDKpqdWzH+v3Wq/i0/PXw9FwAsQthh12uHeeoZJ/w+7NRiqhNxTP2Ns1uJla4UcaIuBZ4vSi4Rsj/5Wh1+z7dPf9V8c4DYfg2H/4Tb8DrvXVsg=='

def decodeVertices():
    vertices_binary = zlib.decompress(base64.b64decode(vertices_base64))
    k = 0
    for i in range(len(numVertices)):
        current = []
        for j in range(numVertices[i] * 3):
            current.append(float(struct.unpack('=d', vertices_binary[k:k+8])[0]))
            k += 8
        vertices.append(current)

def dot(a, b):
    return sum(a[i]*b[i] for i in range(len(a)))

def normalize(a):
    length = math.sqrt(dot(a, a))
    for i in range(3):
        a[i]/=length
    return a

def distance(a, b):
    c = [0] * 2
    for i in range(len(a)):
        c[i] = a[i] - b[i]
    return math.sqrt(dot(c, c))

def cross(a, b):
    c = [0, 0, 0]
    c[0] = a[1]*b[2] - a[2]*b[1]
    c[1] = a[2]*b[0] - a[0]*b[2]
    c[2] = a[0]*b[1] - a[1]*b[0]
    return c

class Quaternion:
    def __init__(self, values):
        self.R = values

    def __str__(self):
        return str(self.R)

    def __mul__(self, other):
        imagThis = self.imag()
        imagOther = other.imag()
        cro = cross(imagThis, imagOther)

        ret = ([self.R[0] * other.R[0] - dot(imagThis, imagOther)] +
               [self.R[0] * imagOther[0] + other.R[0] * imagThis[0] + cro[0],
                self.R[0] * imagOther[1] + other.R[0] * imagThis[1] + cro[1],
                self.R[0] * imagOther[2] + other.R[0] * imagThis[2] + cro[2]])

        return Quaternion(ret)

    def imag(self):
        return self.R[1:]

    def conjugate(self):
        ret = [0] * 4
        ret[0] = self.R[0]
        ret[1] = -self.R[1]
        ret[2] = -self.R[2]
        ret[3] = -self.R[3]

        return Quaternion(ret)

    def inverse(self):
        return self.conjugate()

    def rotate(self, vec3D):
        quat = Quaternion([0.0] + vec3D)
        conj = self.conjugate()

        ret = self * (quat * conj)
        return ret.R[1:]

def getQuaternion(u, ref):
    u = normalize(u)
    ref = normalize(ref)
    axis = cross(u, ref)
    normAxis = math.sqrt(dot(axis, axis))

    if normAxis < 1e-12:
        if math.abs(dot(u, ref) - 1.0) < 1e-12:
            return Quaternion([1.0, 0.0, 0.0, 0.0])

        return Quaternion([0.0, 1.0, 0.0, 0.0])

    axis = normalize(axis)
    cosAngle = math.sqrt(0.5 * (1 + dot(u, ref)))
    sinAngle = math.sqrt(1 - cosAngle * cosAngle)

    return Quaternion([cosAngle, sinAngle * axis[0], sinAngle * axis[1], sinAngle * axis[2]])

def exportVTK():
    vertices_str = ""
    triangles_str = ""
    color_str = ""
    cellTypes_str = ""
    startIdx = 0
    vertexCounter = 0
    cellCounter = 0
    lookup_table = []
    lookup_table.append([0.5, 0.5, 0.5, 0.5])
    lookup_table.append([1.0, 0.847, 0.0, 1.0])
    lookup_table.append([1.0, 0.0, 0.0, 1.0])
    lookup_table.append([0.537, 0.745, 0.525, 1.0])
    lookup_table.append([0.5, 0.5, 0.0, 1.0])
    lookup_table.append([1.0, 0.541, 0.0, 1.0])
    lookup_table.append([0.0, 0.0, 1.0, 1.0])

    decodeVertices()

    for i in range(len(vertices)):
        for j in range(0, len(vertices[i]), 3):
            vertices_str += ("%f %f %f\n" %(vertices[i][j], vertices[i][j+1], vertices[i][j+2]))
            vertexCounter += 1

        for j in range(0, len(triangles[i]), 3):
            triangles_str += ("3 %d %d %d\n" % (triangles[i][j] + startIdx, triangles[i][j+1] + startIdx, triangles[i][j+2] + startIdx))
            cellTypes_str += "5\n"
            tmp_color = lookup_table[color[i]]
            color_str += ("%f %f %f %f\n" % (tmp_color[0], tmp_color[1], tmp_color[2], tmp_color[3]))
            cellCounter += 1
        startIdx = vertexCounter

    fh = open('70MeV_Gantry2_ElementPositions.vtk','w')
    fh.write("# vtk DataFile Version 2.0\n")
    fh.write("test\nASCII\n\n")
    fh.write("DATASET UNSTRUCTURED_GRID\n")
    fh.write("POINTS " + str(vertexCounter) + " float\n")
    fh.write(vertices_str)
    fh.write("CELLS " + str(cellCounter) + " " + str(cellCounter * 4) + "\n")
    fh.write(triangles_str)
    fh.write("CELL_TYPES " + str(cellCounter) + "\n")
    fh.write(cellTypes_str)
    fh.write("CELL_DATA " + str(cellCounter) + "\n")
    fh.write("COLOR_SCALARS type 4\n")
    fh.write(color_str + "\n")
    fh.close()

def getNormal(tri_vertices):
    vec1 = [tri_vertices[1][0] - tri_vertices[0][0],
            tri_vertices[1][1] - tri_vertices[0][1],
            tri_vertices[1][2] - tri_vertices[0][2]]
    vec2 = [tri_vertices[2][0] - tri_vertices[0][0],
            tri_vertices[2][1] - tri_vertices[0][1],
            tri_vertices[2][2] - tri_vertices[0][2]]
    return normalize(cross(vec1,vec2))

def exportWeb(bgcolor):
    lookup_table = []
    lookup_table.append([0.5, 0.5, 0.5])
    lookup_table.append([1.0, 0.847, 0.0])
    lookup_table.append([1.0, 0.0, 0.0])
    lookup_table.append([0.537, 0.745, 0.525])
    lookup_table.append([0.5, 0.5, 0.0])
    lookup_table.append([1.0, 0.541, 0.0])
    lookup_table.append([0.0, 0.0, 1.0])

    decodeVertices()

    mesh = "'data:"
    mesh += "{"
    mesh += "\"autoClear\":true,"
    mesh += "\"clearColor\":[0.0000,0.0000,0.0000],"
    mesh += "\"ambientColor\":[0.0000,0.0000,0.0000],"
    mesh += "\"gravity\":[0.0000,-9.8100,0.0000],"
    mesh += "\"cameras\":["
    mesh += "{"
    mesh += "\"name\":\"Camera\","
    mesh += "\"id\":\"Camera\","
    mesh += "\"position\":[21.7936,2.2312,-85.7292],"
    mesh += "\"rotation\":[0.0432,-0.1766,-0.0668],"
    mesh += "\"fov\":0.8578,"
    mesh += "\"minZ\":10.0000,"
    mesh += "\"maxZ\":10000.0000,"
    mesh += "\"speed\":1.0000,"
    mesh += "\"inertia\":0.9000,"
    mesh += "\"checkCollisions\":false,"
    mesh += "\"applyGravity\":false,"
    mesh += "\"ellipsoid\":[0.2000,0.9000,0.2000]"
    mesh += "}],"
    mesh += "\"activeCamera\":\"Camera\","
    mesh += "\"lights\":["
    mesh += "{"
    mesh += "\"name\":\"Lamp\","
    mesh += "\"id\":\"Lamp\","
    mesh += "\"type\":0.0000,"
    mesh += "\"position\":[4.0762,34.9321,-63.5788],"
    mesh += "\"intensity\":1.0000,"
    mesh += "\"diffuse\":[1.0000,1.0000,1.0000],"
    mesh += "\"specular\":[1.0000,1.0000,1.0000]"
    mesh += "}],"
    mesh += "\"materials\":[],"
    mesh += "\"meshes\":["

    for i in range(len(triangles)):
        vertex_list = []
        indices_list = []
        normals_list = []
        color_list = []
        for j in range(0, len(triangles[i]), 3):
            tri_vertices = []
            idcs = triangles[i][j:j + 3]
            tri_vertices.append(vertices[i][3 * idcs[0]:3 * (idcs[0] + 1)])
            tri_vertices.append(vertices[i][3 * idcs[1]:3 * (idcs[1] + 1)])
            tri_vertices.append(vertices[i][3 * idcs[2]:3 * (idcs[2] + 1)])
            indices_list.append(','.join(str(n) for n in range(len(vertex_list),len(vertex_list) + 3)))
            # left hand order!
            vertex_list.append(','.join("%.5f" % (round(n,5) + 0.0) for n in tri_vertices[0]))
            vertex_list.append(','.join("%.5f" % (round(n,5) + 0.0) for n in tri_vertices[2]))
            vertex_list.append(','.join("%.5f" % (round(n,5) + 0.0) for n in tri_vertices[1]))
            normal = getNormal(tri_vertices)
            normals_list.append(','.join("%.5f" % (round(n,5) + 0.0) for n in normal * 3))
            color_list.append(','.join([str(n) for n in lookup_table[color[i]]] * 3))
        mesh += "{"
        mesh += "\"name\":\"element_" + str(i) + "\","
        mesh += "\"id\":\"element_" + str(i) + "\","
        mesh += "\"position\":[0.0,0.0,0.0],"
        mesh += "\"rotation\":[0.0,0.0,0.0],"
        mesh += "\"scaling\":[1.0,1.0,1.0],"
        mesh += "\"isVisible\":true,"
        mesh += "\"isEnabled\":true,"
        mesh += "\"useFlatShading\":false,"
        mesh += "\"checkCollisions\":false,"
        mesh += "\"billboardMode\":0,"
        mesh += "\"receiveShadows\":false,"
        mesh += "\"positions\":[" + ','.join(vertex_list) + "],"
        mesh += "\"normals\":[" + ','.join(normals_list) + "],"
        mesh += "\"indices\":[" + ','.join(indices_list) + "],"
        mesh += "\"colors\":[" + ','.join(color_list) + "],"
        mesh += "\"subMeshes\":["
        mesh += "{"
        mesh += "\"materialIndex\":0,"
        mesh += " \"verticesStart\":0,"
        mesh += " \"verticesCount\":" + str(len(triangles[i])) + ","
        mesh += " \"indexStart\":0,"
        mesh += " \"indexCount\":" + str(len(triangles[i])) + ""
        mesh += "}]"
        mesh += "}"
        mesh += ","

        del normals_list[:]
        del vertex_list[:]
        del color_list[:]
        del indices_list[:]

    mesh = mesh[:-1] + "]"
    mesh += "}'"
    index_compressed = base64.b64decode(index_base64)
    index = str(zlib.decompress(index_compressed))
    if (len(bgcolor) == 3):
        mesh += ";\n            "
        mesh += "scene.clearColor = new BABYLON.Color3(%f, %f, %f)" % (bgcolor[0], bgcolor[1], bgcolor[2])

    index = index.replace('##DATA##', mesh)
    fh = open('70MeV_Gantry2_ElementPositions.html','w')
    fh.write(index)
    fh.close()

def computeMinAngle(idx, curAngle, positions, connections, check):
    matrix = [[-math.cos(curAngle), -math.sin(curAngle)], [math.sin(curAngle), -math.cos(curAngle)]]

    minAngle = 2 * math.pi
    nextIdx = -1

    for j in connections[idx]:
        direction = [positions[j][0] - positions[idx][0],
                     positions[j][1] - positions[idx][1]]
        direction = [dot(matrix[0],direction), dot(matrix[1],direction)]

        if math.fabs(dot([1.0, 0.0], direction) / distance(positions[j], positions[idx]) - 1.0) < 1e-6: continue

        angle = math.fmod(math.atan2(direction[1],direction[0]) + 2 * math.pi, 2 * math.pi)

        if angle < minAngle:
            nextIdx = j
            minAngle = angle
        if angle == minAngle and check:
            dire =  [positions[j][0] - positions[idx][0],
                     positions[j][1] - positions[idx][1]]
            minA0 = math.atan2(dire[1], dire[0])
            minA1 = computeMinAngle(nextIdx, minA0, positions, connections, False)
            minA2 = computeMinAngle(j, minA0, positions, connections, False)
            if minA2[1] < minA2[1]:
                nextIdx = j

    if nextIdx == -1:
        nextIdx = connections[idx][0]

    return (nextIdx, minAngle)

def squashVertices(positionDict, connections):
    removedItems = []
    idxChanges = positionDict.keys()
    for i in positionDict.keys():
        if i in removedItems:
            continue
        for j in positionDict.keys():
            if j in removedItems or j == i:
                continue

            if distance(positionDict[i], positionDict[j]) < 1e-6:
                connections[j] = list(set(connections[j]))
                if i in connections[j]:
                    connections[j].remove(i)
                if j in connections[i]:
                    connections[i].remove(j)

                connections[i].extend(connections[j])
                connections[i] = list(set(connections[i]))
                connections[i].sort()

                for k in connections.keys():
                    if k == i: continue
                    if j in connections[k]:
                        idx = connections[k].index(j)
                        connections[k][idx] = i

                idxChanges[j] = i
                removedItems.append(j)

    for i in removedItems:
        del positionDict[i]
        del connections[i]

    for i in connections.keys():
        connections[i] = list(set(connections[i]))
        connections[i].sort()

    return idxChanges

def computeLineEquations(positions, connections):
    cons = set()
    for i in connections.keys():
        for j in connections[i]:
            cons.add((min(i, j), max(i, j)))

    lineEquations = {}
    for item in cons:
        a = (positions[item[1]][1] - positions[item[0]][1])
        b = -(positions[item[1]][0] - positions[item[0]][0])

        xm = 0.5 * (positions[item[0]][0] + positions[item[1]][0])
        ym = 0.5 * (positions[item[0]][1] + positions[item[1]][1])
        c = -(a * xm +  b * ym)

        lineEquations[item] = (a, b, c)

    return lineEquations

def checkPossibleSegmentIntersection(segment, positions, lineEquations, minAngle, lastIntersection):
    item1 = (min(segment), max(segment))

    (a1, b1, c1) = (0,0,0)
    A = [0]*2
    B = A

    if segment[0] == None:
        A = lastIntersection
        B = positions[segment[1]]

        a1 = B[1] - A[1]
        b1 = -(B[0] - A[0])
        xm = 0.5 * (A[0] + B[0])
        ym = 0.5 * (A[1] + B[1])
        c1 = -(a1 * xm + b1 * ym)

    else:
        A = positions[segment[0]]
        B = positions[segment[1]]

        (a1, b1, c1) = lineEquations[item1]

        if segment[1] < segment[0]:
            (a1, b1, c1) = (-a1, -b1, -c1)

    curAngle = math.atan2(a1, -b1)
    matrix = [[-math.cos(curAngle), -math.sin(curAngle)], [math.sin(curAngle), -math.cos(curAngle)]]

    origMinAngle = minAngle

    segment1 = [B[0] - A[0], B[1] - A[1], 0.0]

    intersectingSegments = []
    distanceAB = distance(A, B)
    for item2 in lineEquations.keys():
        item = item2
        C = positions[item[0]]
        D = positions[item[1]]

        if segment[0] == None:
            if (segment[1] == item[0] or
                segment[1] == item[1]): continue
        else:
            if (item1[0] == item[0] or
                item1[1] == item[0] or
                item1[0] == item[1] or
                item1[1] == item[1]): continue

        nodes = set([item1[0],item1[1],item[0],item[1]])
        if len(nodes) < 4: continue       # share same vertex

        (a2, b2, c2) = lineEquations[item]

        segment2 = [C[0] - A[0], C[1] - A[1], 0.0]
        segment3 = [D[0] - A[0], D[1] - A[1], 0.0]

        # check that C and D aren't on the same side of AB
        if cross(segment1, segment2)[2] * cross(segment1, segment3)[2] > 0.0: continue

        if cross(segment1, segment2)[2] < 0.0 or cross(segment1, segment3)[2] > 0.0:
            (C, D, a2, b2, c2) = (D, C, -a2, -b2, -c2)
            item = (item[1], item[0])

        denominator = a1 * b2 - b1 * a2
        if math.fabs(denominator) < 1e-9: continue

        px = (b1 * c2 - b2 * c1) / denominator
        py = (a2 * c1 - a1 * c2) / denominator

        distanceCD = distance(C, D)

        distanceAP = distance(A, [px, py])
        distanceBP = distance(B, [px, py])
        distanceCP = distance(C, [px, py])
        distanceDP = distance(D, [px, py])

        # check intersection is between AB and CD
        check1 = (distanceAP - 1e-6 < distanceAB and distanceBP - 1e-6 < distanceAB)
        check2 = (distanceCP - 1e-6 < distanceCD and distanceDP - 1e-6 < distanceCD)
        if not check1 or not check2: continue

        if math.fabs(dot(segment1, [D[0] - C[0], D[1] - C[1], 0.0]) / (distanceAB * distanceCD) + 1.0) < 1e-9: continue

        if ((distanceAP < 1e-6) or
            (distanceBP < 1e-6 and distanceCP < 1e-6) or
            (distanceDP < 1e-6)):
            continue

        direction = [D[0] - C[0], D[1] - C[1]]
        direction = [dot(matrix[0], direction), dot(matrix[1], direction)]
        angle = math.fmod(math.atan2(direction[1], direction[0]) + 2 * math.pi, 2 * math.pi)

        newSegment = ([px, py], item[1], distanceAP, angle)

        if distanceCP < 1e-6 and angle > origMinAngle: continue
        if distanceBP > 1e-6 and angle > math.pi: continue

        if len(intersectingSegments) == 0:
            intersectingSegments.append(newSegment)
            minAngle = angle
        else:
            if intersectingSegments[0][2] - 1e-9 > distanceAP:
                intersectingSegments[0] = newSegment
                minAngle = angle
            elif intersectingSegments[0][2] + 1e-9 > distanceAP and angle < minAngle:
                intersectingSegments[0] = newSegment
                minAngle = angle

    return intersectingSegments

def projectToPlane(normal):
    fh = open('70MeV_Gantry2_ElementPositions.gpl','w')
    normal = normalize(normal)
    ori = getQuaternion(normal, [0, 0, 1])

    left2Right = [0, 0, 1]
    if math.fabs(math.fabs(dot(normal, left2Right)) - 1) < 1e-9:
        left2Right = [1, 0, 0]
    rotL2R = ori.rotate(left2Right)
    deviation = math.atan2(rotL2R[1], rotL2R[0])
    rotBack = Quaternion([math.cos(0.5 * deviation), 0, 0, -math.sin(0.5 * deviation)])
    ori = rotBack * ori

    decodeVertices()

    for i in range(len(vertices)):
        positions = {}
        connections = {}
        for j in range(0, len(vertices[i]), 3):
            nextPos3D = ori.rotate(vertices[i][j:j+3])
            nextPos2D = nextPos3D[0:2]
            positions[j/3] = nextPos2D

        if len(positions) == 0:
            continue

        idx = 0
        maxX = positions[0][0]
        for j in positions.keys():
            if positions[j][0] > maxX:
                maxX = positions[j][0]
                idx = j
            if positions[j][0] == maxX and positions[j][1] > positions[idx][1]:
                idx = j

        for j in range(0, len(triangles[i]), 3):
            for k in range(0, 3):
                vertIdx = triangles[i][j + k]
                if not vertIdx in connections:
                    connections[vertIdx] = []
                for l in range(1, 3):
                    connections[vertIdx].append(triangles[i][j + ((k + l) % 3)])

        numConnections = 0
        for j in connections.keys():
            connections[j] = list(set(connections[j]))
            numConnections += len(connections[j])

        numConnections /= 2
        idChanges = squashVertices(positions, connections)

        lineEquations = computeLineEquations(positions, connections)

        idx = idChanges[idx]
        fh.write("%.6f    %.6f    %d\n" % (positions[idx][0], positions[idx][1], idx))

        curAngle = math.pi
        origin = idx
        count = 0
        passed = []
        while (count == 0 or distance(positions[origin], positions[idx]) > 1e-9) and not count > numConnections:
            nextGen = computeMinAngle(idx, curAngle, positions, connections, False)
            nextIdx = nextGen[0]
            direction = [positions[nextIdx][0] - positions[idx][0],
                         positions[nextIdx][1] - positions[idx][1]]
            curAngle = math.atan2(direction[1], direction[0])

            intersections = checkPossibleSegmentIntersection((idx, nextIdx), positions, lineEquations, nextGen[1], [])
            if len(intersections) > 0:
                while len(intersections) > 0 and not count > numConnections:
                    fh.write("%.6f    %.6f\n" %(intersections[0][0][0], intersections[0][0][1]))
                    count += 1
    
                    idx = intersections[0][1]
                    direction = [positions[idx][0] - intersections[0][0][0],
                                 positions[idx][1] - intersections[0][0][1]]
                    curAngle = math.atan2(direction[1], direction[0])
                    nextGen = computeMinAngle(idx, curAngle, positions, connections, False)
    
                    intersections = checkPossibleSegmentIntersection((None, idx), positions, lineEquations, nextGen[1], intersections[0][0])
            else:
                idx = nextIdx
    
            fh.write("%.6f    %.6f    %d\n" % (positions[idx][0], positions[idx][1], idx))
    
            if idx in passed:
                direction1 = [positions[idx][0] - positions[passed[-1]][0],
                              positions[idx][1] - positions[passed[-1]][1]]
                direction2 = [positions[origin][0] - positions[passed[-1]][0],
                              positions[origin][1] - positions[passed[-1]][1]]
                dist1 = distance(positions[idx], positions[passed[-1]])
                dist2 = distance(positions[origin], positions[passed[-1]])
                if dist1 * dist2 > 0.0 and math.fabs(math.fabs(dot(direction1, direction2) / (dist1 * dist2)) - 1.0) > 1e-9:
                    sys.stderr.write("error: projection cycling on element id: %d, vertex id: %d\n" %(i, idx))
                break

            passed.append(idx)
            count += 1
        fh.write("\n")

        if count > numConnections:
            sys.stderr.write("error: projection cycling on element id: %d\n" % i)

        for j in range(0, len(decoration[i]), 6):
            for k in range(j, j + 6, 3):
                nextPos3D = ori.rotate(decoration[i][k:k+3])
                fh.write("%.6f    %.6f\n" % (nextPos3D[0], nextPos3D[1]))
            fh.write("\n")

    fh.close()

parser = argparse.ArgumentParser()
parser.add_argument('--export-vtk', action='store_true')
parser.add_argument('--export-web', action='store_true')
parser.add_argument('--background', nargs=3, type=float)
parser.add_argument('--project-to-plane', action='store_true')
parser.add_argument('--normal', nargs=3, type=float)
args = parser.parse_args()

if (args.export_vtk):
    exportVTK()
    sys.exit()

if (args.export_web):
    bgcolor = []
    if (args.background):
        validBackground = True
        for comp in bgcolor:
            if comp < 0.0 or comp > 1.0:
                validBackground = False
                break
        if (validBackground):
            bgcolor = args.background
    exportWeb(bgcolor)
    sys.exit()

if (args.project_to_plane):
    normal = [0.0, 1.0, 0.0]
    if (args.normal):
        normal = args.normal
    projectToPlane(normal)
    sys.exit()

parser.print_help()
