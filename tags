!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	src/Fields/BMultipoleField.h	/^        double A;   \/\/ skewed multipole coefficient$/;"	m	struct:BMultipoleField::Pair
A	src/Structure/BoundaryGeometry.h	/^        A,         \/\/ major semi-axis of elliptic tube$/;"	e	enum:BoundaryGeometry::__anon61
A1	src/Physics/Material.h	/^            A1 = 0,$/;"	e	enum:Physics::Material::FitCoeffs
A2	src/Physics/Material.h	/^            A2,$/;"	e	enum:Physics::Material::FitCoeffs
A2mA	src/Physics/Units.h	/^    constexpr double A2mA = 1e+3;$/;"	m	namespace:Units
A3	src/Physics/Material.h	/^            A3,$/;"	e	enum:Physics::Material::FitCoeffs
A4	src/Physics/Material.h	/^            A4,$/;"	e	enum:Physics::Material::FitCoeffs
A5	src/Physics/Material.h	/^            A5,$/;"	e	enum:Physics::Material::FitCoeffs
AAutomatic	src/Expressions/AAutomatic.h	/^    AAutomatic<T>::AAutomatic(ArrayOfPtrs<T> expr):$/;"	f	class:Expressions::AAutomatic
AAutomatic	src/Expressions/AAutomatic.h	/^    AAutomatic<T>::AAutomatic(PtrToArray<T> expr):$/;"	f	class:Expressions::AAutomatic
AAutomatic	src/Expressions/AAutomatic.h	/^    AAutomatic<T>::AAutomatic(const AAutomatic<T> &rhs):$/;"	f	class:Expressions::AAutomatic
AAutomatic	src/Expressions/AAutomatic.h	/^    class AAutomatic: public ADeferred<T> {$/;"	c	namespace:Expressions
ABSBEAMLINE_ScalingFFAMagnet_H	src/AbsBeamline/ScalingFFAMagnet.h	57;"	d
ABSBEAMLINE_VerticalFFAMagnet_H	src/AbsBeamline/VerticalFFAMagnet.h	16;"	d
ABSOLUTE	src/Lines/SequenceMember.h	/^        ABSOLUTE  = 0,$/;"	e	enum:SequenceMember::PositionType
ABinary	src/Expressions/ABinary.h	/^    ABinary<T, U>::ABinary(const ABinary &rhs):$/;"	f	class:Expressions::ABinary
ABinary	src/Expressions/ABinary.h	/^    ABinary<T, U>::ABinary(const TFunction2<T, U> &function,$/;"	f	class:Expressions::ABinary
ABinary	src/Expressions/ABinary.h	/^    class ABinary: public AList<T> {$/;"	c	namespace:Expressions
AColumn	src/Expressions/AColumn.cpp	/^    AColumn::AColumn$/;"	f	class:Expressions::AColumn
AColumn	src/Expressions/AColumn.cpp	/^    AColumn::AColumn(const AColumn &rhs):$/;"	f	class:Expressions::AColumn
AColumn	src/Expressions/AColumn.h	/^    class AColumn: public OArray<double> {$/;"	c	namespace:Expressions
ADAPT_BINS_H	src/PartBunch/Binning/AdaptBins.h	26;"	d
ADAPT_BINS_HPP	src/PartBunch/Binning/AdaptBins.hpp	2;"	d
ADDITIONAL_HEADER_LINES	src/Utilities/SDDSParser/data.hpp	/^                        , ADDITIONAL_HEADER_LINES$/;"	e	enum:SDDS::data::attributes
ADeferred	src/Expressions/ADeferred.h	/^    ADeferred<T>::ADeferred():$/;"	f	class:Expressions::ADeferred
ADeferred	src/Expressions/ADeferred.h	/^    ADeferred<T>::ADeferred(ArrayOfPtrs<T> expr):$/;"	f	class:Expressions::ADeferred
ADeferred	src/Expressions/ADeferred.h	/^    ADeferred<T>::ADeferred(PtrToArray<T> expr):$/;"	f	class:Expressions::ADeferred
ADeferred	src/Expressions/ADeferred.h	/^    ADeferred<T>::ADeferred(const ADeferred<T> &rhs):$/;"	f	class:Expressions::ADeferred
ADeferred	src/Expressions/ADeferred.h	/^    ADeferred<T>::ADeferred(const std::vector<T> &val):$/;"	f	class:Expressions::ADeferred
ADeferred	src/Expressions/ADeferred.h	/^    class ADeferred: public AValue<T> {$/;"	c	namespace:Expressions
AIR_H	src/Physics/Air.h	23;"	d
ALPHA	src/Physics/ParticleProperties.h	/^    ALPHA,$/;"	m	class:ParticleType
ALUMINAAL2O3_H	src/Physics/AluminaAL2O3.h	23;"	d
ALUMINUM_H	src/Physics/Aluminum.h	23;"	d
AList	src/Expressions/AList.h	/^    AList<T>::AList():$/;"	f	class:Expressions::AList
AList	src/Expressions/AList.h	/^    AList<T>::AList(const AList<T> &rhs):$/;"	f	class:Expressions::AList
AList	src/Expressions/AList.h	/^    AList<T>::AList(const ArrayOfPtrs<T> &value):$/;"	f	class:Expressions::AList
AList	src/Expressions/AList.h	/^    class AList: public OArray<T> {$/;"	c	namespace:Expressions
AMPLITUDE_MODEL	src/Elements/OpalCavity.h	/^        AMPLITUDE_MODEL,\/\/ time dependent amplitude$/;"	e	enum:OpalCavity::__anon34
ANGLE	src/Elements/OpalCavity.h	/^        ANGLE,          \/\/ the azimuth position of the cavity$/;"	e	enum:OpalCavity::__anon34
ANGLE	src/Elements/OpalMultipoleT.h	/^        ANGLE,           \/\/ Bending angle of a sector magnet$/;"	e	enum:OpalMultipoleT::__anon48
ANTIPROTON	src/Physics/ParticleProperties.h	/^    ANTIPROTON,$/;"	m	class:ParticleType
ANY	src/AbsBeamline/ElementBase.h	/^    ANY,$/;"	m	class:ElementType
APERT	src/Elements/OpalElement.h	/^        APERT,          \/\/ The aperture data.$/;"	e	enum:OpalElement::__anon37
APVETO	src/Elements/OpalCavity.h	/^        APVETO,         \/\/ Do not use this cavity in the Autophase procedure$/;"	e	enum:OpalCavity::__anon34
APVETO	src/Elements/OpalTravelingWave.h	/^        APVETO,         \/\/ Do not use this cavity in the Autophase procedure$/;"	e	enum:OpalTravelingWave::__anon46
ARBITRARY_DOMAIN_H	src/.Solvers/ArbitraryDomain.h	29;"	d
ARRAY	src/Utilities/SDDSParser/array.hpp	/^                         , ARRAY$/;"	e	enum:SDDS::array::attributes
ARRAY_DEF_HPP_	src/Utilities/SDDSParser/array_def.hpp	18;"	d
ARRAY_HPP_	src/Utilities/SDDSParser/array.hpp	18;"	d
ARefExpr	src/Expressions/ARefExpr.h	/^    ARefExpr<T>::ARefExpr$/;"	f	class:Expressions::ARefExpr
ARefExpr	src/Expressions/ARefExpr.h	/^    ARefExpr<T>::ARefExpr(const ARefExpr<T> &rhs):$/;"	f	class:Expressions::ARefExpr
ARefExpr	src/Expressions/ARefExpr.h	/^    class ARefExpr: public OArray<T>, public Invalidator {$/;"	c	namespace:Expressions
ARow	src/Expressions/ARow.cpp	/^    ARow::ARow(const ARow &rhs):$/;"	f	class:Expressions::ARow
ARow	src/Expressions/ARow.cpp	/^    ARow::ARow(const std::string &tName, const PlaceRep &row,$/;"	f	class:Expressions::ARow
ARow	src/Expressions/ARow.h	/^    class ARow: public OArray<double> {$/;"	c	namespace:Expressions
ASCII	src/Utilities/PortableBitmapReader.h	/^        ASCII,$/;"	e	enum:PortableBitmapReader::FileType
ASCII	src/Utilities/PortableGraymapReader.h	/^        ASCII,$/;"	e	enum:PortableGraymapReader::FileType
ASCII	src/Utilities/SDDSParser/ast.hpp	/^        enum datamode { ASCII$/;"	e	enum:SDDS::ast::datamode
ASCII	tools/opal2sdds/main.cpp	/^    ASCII = SDDS_ASCII$/;"	e	enum:FORMAT	file:
ASCIIDUMP	src/BasicActions/Option.cpp	/^        ASCIIDUMP,$/;"	e	enum:__anon24::__anon25	file:
ASSOCIATE	src/Utilities/SDDSParser/associate.hpp	/^                        , ASSOCIATE$/;"	e	enum:SDDS::associate::attributes
ASSOCIATE_DEF_HPP_	src/Utilities/SDDSParser/associate_def.hpp	18;"	d
ASSOCIATE_HPP_	src/Utilities/SDDSParser/associate.hpp	18;"	d
ASTRA	src/Distribution/Distribution.h	/^    enum class EmissionModel : unsigned short { NONE, ASTRA, NONEQUIL };$/;"	m	class:Distribution::EmissionModel
AST_DEF_HPP_	src/Utilities/SDDSParser/ast_def.hpp	18;"	d
AST_HPP_	src/Utilities/SDDSParser/ast.hpp	18;"	d
ASUnary	src/Expressions/ASUnary.h	/^    ASUnary<T>::ASUnary(const ASUnary<T> &rhs):$/;"	f	class:Expressions::ASUnary
ASUnary	src/Expressions/ASUnary.h	/^    ASUnary<T>::ASUnary(const TFunction1<T, const std::vector<T>&> &function,$/;"	f	class:Expressions::ASUnary
ASUnary	src/Expressions/ASUnary.h	/^    class ASUnary: public Scalar<T> {$/;"	c	namespace:Expressions
ATable	src/Expressions/ATable.cpp	/^    ATable::ATable(const ATable &rhs):$/;"	f	class:Expressions::ATable
ATable	src/Expressions/ATable.cpp	/^    ATable::ATable(int n1, int n2, int n3):$/;"	f	class:Expressions::ATable
ATable	src/Expressions/ATable.h	/^    class ATable: public OArray<double> {$/;"	c	namespace:Expressions
AUTOPHASE	src/BasicActions/Option.cpp	/^        AUTOPHASE,$/;"	e	enum:__anon24::__anon25	file:
AUnary	src/Expressions/AUnary.h	/^    AUnary<T, U>::AUnary(const AUnary<T, U> &rhs):$/;"	f	class:Expressions::AUnary
AUnary	src/Expressions/AUnary.h	/^    AUnary<T, U>::AUnary(const TFunction1<T, U> &function, PtrToArray<U> oper):$/;"	f	class:Expressions::AUnary
AUnary	src/Expressions/AUnary.h	/^    class AUnary: public AList<T> {$/;"	c	namespace:Expressions
AValue	src/Expressions/AValue.h	/^    AValue<T>::AValue():$/;"	f	class:Expressions::AValue
AValue	src/Expressions/AValue.h	/^    AValue<T>::AValue(const AValue<T> &rhs):$/;"	f	class:Expressions::AValue
AValue	src/Expressions/AValue.h	/^    AValue<T>::AValue(const std::vector<T> &val):$/;"	f	class:Expressions::AValue
AValue	src/Expressions/AValue.h	/^    template <class T> class AValue: public AttributeBase {$/;"	c	namespace:Expressions
AZIMUTHAL_ANGLE	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.h	/^        AZIMUTHAL_ANGLE,$/;"	e	enum:OpalOffset::OpalGlobalCylindricalOffset::__anon42
A_m	src/AbsBeamline/PluginElement.h	/^    double A_m, B_m, R_m, C_m;  \/\/\/< Geometric lengths used in calculations$/;"	m	class:PluginElement
AbsFileStream	src/OpalParser/AbsFileStream.cpp	/^AbsFileStream::AbsFileStream(const std::string &name):$/;"	f	class:AbsFileStream
AbsFileStream	src/OpalParser/AbsFileStream.h	/^class AbsFileStream: public TokenStream {$/;"	c
AbsMax	src/Expressions/Expressions.cpp	/^    double AbsMax(const std::vector<double>& array) {$/;"	f	namespace:Expressions
AbstractTimeDependence	src/Algorithms/AbstractTimeDependence.h	/^class AbstractTimeDependence {$/;"	c
AbstractTracker	src/Algorithms/AbstractTracker.cpp	/^AbstractTracker::AbstractTracker(const Beamline &beamline,$/;"	f	class:AbstractTracker
AbstractTracker	src/Algorithms/AbstractTracker.h	/^class AbstractTracker: public DefaultVisitor {$/;"	c
AcceleratingField	src/Fields/AcceleratingField.h	/^typedef OscillatingField<ConstEzField> AcceleratingField;$/;"	t
Action	src/AbstractObjects/Action.cpp	/^Action::Action(const std::string &name, Action *parent):$/;"	f	class:Action
Action	src/AbstractObjects/Action.cpp	/^Action::Action(int size, const char *name, const char *help):$/;"	f	class:Action
Action	src/AbstractObjects/Action.h	/^class Action: public Object {$/;"	c
AdaptBins	src/PartBunch/Binning/AdaptBins.h	/^        AdaptBins(std::shared_ptr<BunchType> bunch, BinningSelector var_selector, bin_index_type maxBins = 10)$/;"	f	class:ParticleBinning::AdaptBins
AdaptBins	src/PartBunch/Binning/AdaptBins.h	/^    class AdaptBins {$/;"	c	namespace:ParticleBinning
Add	src/Expressions/Expressions.cpp	/^    double Add(double a, double b) {$/;"	f	namespace:Expressions
AffineTransformation	src/Utilities/MSLang/AffineTransformation.h	/^        AffineTransformation():$/;"	f	struct:mslang::AffineTransformation
AffineTransformation	src/Utilities/MSLang/AffineTransformation.h	/^        AffineTransformation(const Vector_t<double, 3>& row0,$/;"	f	struct:mslang::AffineTransformation
AffineTransformation	src/Utilities/MSLang/AffineTransformation.h	/^     struct AffineTransformation: public matrix_t {$/;"	s	namespace:mslang
Air	src/Physics/Air.h	/^        Air():$/;"	f	class:Physics::Air
Air	src/Physics/Air.h	/^    class Air: public Material {$/;"	c	namespace:Physics
AlpineManager	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    AlpineManager(size_type totalP_, int nt_, Vector_t<int, Dim>& nr_, double lbt_, std::string& solver_, std::string& stepMethod_)$/;"	f	class:AlpineManager
AlpineManager	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^class AlpineManager$/;"	c
AluminaAL2O3	src/Physics/AluminaAL2O3.h	/^        AluminaAL2O3():$/;"	f	class:Physics::AluminaAL2O3
AluminaAL2O3	src/Physics/AluminaAL2O3.h	/^    class AluminaAL2O3: public Material {$/;"	c	namespace:Physics
Aluminum	src/Physics/Aluminum.h	/^        Aluminum():$/;"	f	class:Physics::Aluminum
Aluminum	src/Physics/Aluminum.h	/^    class Aluminum: public Material {$/;"	c	namespace:Physics
And	src/Expressions/Expressions.cpp	/^    bool And(bool a, bool b) {$/;"	f	namespace:Expressions
ApertureType	src/AbsBeamline/ElementBase.h	/^enum class ApertureType : unsigned short {$/;"	c
Arbitrary Order Arbitrary Dimensional Polynomial Solve With Smoothing	src/Fields/Interpolation/polynomial_solve_with_smoothing.tex	/^\\begin{document}$/;"	s
ArbitraryDomain	src/.Solvers/ArbitraryDomain.cpp	/^ArbitraryDomain::ArbitraryDomain($/;"	f	class:ArbitraryDomain
ArbitraryDomain	src/.Solvers/ArbitraryDomain.h	/^class ArbitraryDomain : public IrregularDomain {$/;"	c
ArcTransform	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^    Euclid3D ArcTransform(double l, double h) {$/;"	f	namespace:__anon33
ArgumentExtractor	src/Utilities/MSLang/ArgumentExtractor.cpp	/^    ArgumentExtractor::ArgumentExtractor(const std::string &input):$/;"	f	class:mslang::ArgumentExtractor
ArgumentExtractor	src/Utilities/MSLang/ArgumentExtractor.h	/^    struct ArgumentExtractor {$/;"	s	namespace:mslang
ArithmeticError	src/Utilities/ArithmeticError.cpp	/^ArithmeticError::ArithmeticError$/;"	f	class:ArithmeticError
ArithmeticError	src/Utilities/ArithmeticError.cpp	/^ArithmeticError::ArithmeticError(const ArithmeticError &rhs):$/;"	f	class:ArithmeticError
ArithmeticError	src/Utilities/ArithmeticError.h	/^class ArithmeticError: public ClassicException {$/;"	c
ArrayFun	src/Expressions/Expressions.cpp	/^    typedef TFunction1<double, const std::vector<double>&> ArrayFun;$/;"	t	namespace:Expressions	file:
ArrayOfPtrs	src/AbstractObjects/Expressions.h	/^    ArrayOfPtrs<T>::ArrayOfPtrs():$/;"	f	class:Expressions::ArrayOfPtrs
ArrayOfPtrs	src/AbstractObjects/Expressions.h	/^    ArrayOfPtrs<T>::ArrayOfPtrs(const std::vector<PtrToScalar<T> > &rhs):$/;"	f	class:Expressions::ArrayOfPtrs
ArrayOfPtrs	src/AbstractObjects/Expressions.h	/^    ArrayOfPtrs<T>::ArrayOfPtrs(int n):$/;"	f	class:Expressions::ArrayOfPtrs
ArrayOfPtrs	src/AbstractObjects/Expressions.h	/^    template <class T> class ArrayOfPtrs: public std::vector<PtrToScalar<T> > {$/;"	c	namespace:Expressions
ArrayReduction	src/PartBunch/Binning/ParallelReduceTools.h	/^        ArrayReduction() { $/;"	f	struct:ParticleBinning::ArrayReduction
ArrayReduction	src/PartBunch/Binning/ParallelReduceTools.h	/^        ArrayReduction(const ArrayReduction& rhs) { $/;"	f	struct:ParticleBinning::ArrayReduction
ArrayReduction	src/PartBunch/Binning/ParallelReduceTools.h	/^    struct ArrayReduction {$/;"	s	namespace:ParticleBinning
AscendingLocationSort	src/Algorithms/PartBins.h	/^    AscendingLocationSort(int direction = 0): direction_m(direction)$/;"	f	class:AscendingLocationSort
AscendingLocationSort	src/Algorithms/PartBins.h	/^class AscendingLocationSort {$/;"	c
Astra1DDynamic	src/Fields/Astra1DDynamic.cpp	/^Astra1DDynamic::Astra1DDynamic(std::string aFilename) : Fieldmap(aFilename), FourCoefs_m(nullptr) {$/;"	f	class:Astra1DDynamic
Astra1DDynamic	src/Fields/Astra1DDynamic.h	/^class Astra1DDynamic: public Fieldmap {$/;"	c
Astra1DDynamic_fast	src/Fields/Astra1DDynamic_fast.cpp	/^Astra1DDynamic_fast::Astra1DDynamic_fast(std::string aFilename) : Astra1D_fast(aFilename) {$/;"	f	class:Astra1DDynamic_fast
Astra1DDynamic_fast	src/Fields/Astra1DDynamic_fast.h	/^class Astra1DDynamic_fast: public Astra1D_fast {$/;"	c
Astra1DElectroStatic	src/Fields/Astra1DElectroStatic.cpp	/^Astra1DElectroStatic::Astra1DElectroStatic(std::string aFilename)$/;"	f	class:Astra1DElectroStatic
Astra1DElectroStatic	src/Fields/Astra1DElectroStatic.h	/^class Astra1DElectroStatic: public Fieldmap {$/;"	c
Astra1DElectroStatic_fast	src/Fields/Astra1DElectroStatic_fast.cpp	/^Astra1DElectroStatic_fast::Astra1DElectroStatic_fast(std::string aFilename)$/;"	f	class:Astra1DElectroStatic_fast
Astra1DElectroStatic_fast	src/Fields/Astra1DElectroStatic_fast.h	/^class Astra1DElectroStatic_fast: public Astra1D_fast {$/;"	c
Astra1DMagnetoStatic	src/Fields/Astra1DMagnetoStatic.cpp	/^Astra1DMagnetoStatic::Astra1DMagnetoStatic(std::string aFilename)$/;"	f	class:Astra1DMagnetoStatic
Astra1DMagnetoStatic	src/Fields/Astra1DMagnetoStatic.h	/^class Astra1DMagnetoStatic: public Fieldmap {$/;"	c
Astra1DMagnetoStatic_fast	src/Fields/Astra1DMagnetoStatic_fast.cpp	/^Astra1DMagnetoStatic_fast::Astra1DMagnetoStatic_fast(std::string aFilename)$/;"	f	class:Astra1DMagnetoStatic_fast
Astra1DMagnetoStatic_fast	src/Fields/Astra1DMagnetoStatic_fast.h	/^class Astra1DMagnetoStatic_fast: public Astra1D_fast {$/;"	c
Astra1D_fast	src/Fields/Astra1D_fast.cpp	/^Astra1D_fast::Astra1D_fast(std::string aFilename) : Fieldmap(aFilename) {$/;"	f	class:Astra1D_fast
Astra1D_fast	src/Fields/Astra1D_fast.h	/^class Astra1D_fast: public Fieldmap {$/;"	c
AsymmetricEnge	src/AbsBeamline/EndFieldModel/AsymmetricEnge.cpp	/^AsymmetricEnge::AsymmetricEnge() : engeStart_m(new Enge()),$/;"	f	class:endfieldmodel::AsymmetricEnge
AsymmetricEnge	src/AbsBeamline/EndFieldModel/AsymmetricEnge.cpp	/^AsymmetricEnge::AsymmetricEnge(const AsymmetricEnge& rhs) $/;"	f	class:endfieldmodel::AsymmetricEnge
AsymmetricEnge	src/AbsBeamline/EndFieldModel/AsymmetricEnge.cpp	/^AsymmetricEnge::AsymmetricEnge(const std::vector<double> aStart,$/;"	f	class:endfieldmodel::AsymmetricEnge
AsymmetricEnge	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^class AsymmetricEnge : public EndFieldModel {$/;"	c	namespace:endfieldmodel
AttAdd	src/Lines/Line.cpp	/^    double AttAdd(double a, double b)$/;"	f	namespace:__anon53
Attribute	src/AbstractObjects/Attribute.cpp	/^Attribute::Attribute():$/;"	f	class:Attribute
Attribute	src/AbstractObjects/Attribute.cpp	/^Attribute::Attribute(AttributeHandler *h, AttributeBase *b):$/;"	f	class:Attribute
Attribute	src/AbstractObjects/Attribute.cpp	/^Attribute::Attribute(const Attribute &rhs):$/;"	f	class:Attribute
Attribute	src/AbstractObjects/Attribute.h	/^class Attribute {$/;"	c
Attribute	tools/opal2sdds/main.cpp	/^struct Attribute {$/;"	s	file:
AttributeBase	src/AbstractObjects/AttributeBase.cpp	/^AttributeBase::AttributeBase():$/;"	f	class:AttributeBase
AttributeBase	src/AbstractObjects/AttributeBase.h	/^class AttributeBase: public RCObject, public Invalidator {$/;"	c
AttributeHandler	src/AbstractObjects/AttributeHandler.cpp	/^AttributeHandler::AttributeHandler$/;"	f	class:AttributeHandler
AttributeHandler	src/AbstractObjects/AttributeHandler.h	/^class AttributeHandler: public RCObject {$/;"	c
AttributeSet	src/AbsBeamline/AttributeSet.cpp	/^AttributeSet::AttributeSet():$/;"	f	class:AttributeSet
AttributeSet	src/AbsBeamline/AttributeSet.cpp	/^AttributeSet::AttributeSet(const AttributeSet &rhs):$/;"	f	class:AttributeSet
AttributeSet	src/AbsBeamline/AttributeSet.h	/^class AttributeSet {$/;"	c
Attributes	src/Attributes/Attributes.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/Attributes.h	/^namespace Attributes {$/;"	n
Attributes	src/Attributes/Bool.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/Bool.h	/^namespace Attributes {$/;"	n
Attributes	src/Attributes/BoolArray.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/BoolArray.h	/^namespace Attributes {$/;"	n
Attributes	src/Attributes/Place.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/Place.h	/^namespace Attributes {$/;"	n
Attributes	src/Attributes/PredefinedString.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/PredefinedString.h	/^namespace Attributes {$/;"	n
Attributes	src/Attributes/Range.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/Range.h	/^namespace Attributes {$/;"	n
Attributes	src/Attributes/Real.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/Real.h	/^namespace Attributes {$/;"	n
Attributes	src/Attributes/RealArray.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/RealArray.h	/^namespace Attributes {$/;"	n
Attributes	src/Attributes/Reference.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/Reference.h	/^namespace Attributes {$/;"	n
Attributes	src/Attributes/String.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/String.h	/^namespace Attributes {$/;"	n
Attributes	src/Attributes/StringArray.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/StringArray.h	/^namespace Attributes {$/;"	n
Attributes	src/Attributes/TableRow.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/TableRow.h	/^namespace Attributes {$/;"	n
Attributes	src/Attributes/TokenList.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/TokenList.h	/^namespace Attributes {$/;"	n
Attributes	src/Attributes/TokenListArray.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/TokenListArray.h	/^namespace Attributes {$/;"	n
Attributes	src/Attributes/UpperCaseString.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/UpperCaseString.h	/^namespace Attributes {$/;"	n
Attributes	src/Attributes/UpperCaseStringArray.cpp	/^namespace Attributes {$/;"	n	file:
Attributes	src/Attributes/UpperCaseStringArray.h	/^namespace Attributes {$/;"	n
Avo	src/Physics/Physics.h	/^    constexpr double Avo        = 6.02214076e23;$/;"	m	namespace:Physics
B	src/Fields/BMultipoleField.h	/^        double B;   \/\/ normal multipole coefficient$/;"	m	struct:BMultipoleField::Pair
B	src/Fields/EMField.h	/^    BVector B;$/;"	m	class:EBVectors
B	src/PartBunch/ParticleContainer.hpp	/^    typename Base::particle_position_type B;$/;"	m	class:ParticleContainer
B	src/Structure/BoundaryGeometry.h	/^        B,         \/\/ minor semi-axis of ellitpic tube$/;"	e	enum:BoundaryGeometry::__anon61
B0	src/Elements/OpalVerticalFFAMagnet.h	/^        B0 = COMMON,$/;"	e	enum:OpalVerticalFFAMagnet::__anon38
B1	src/Physics/Material.h	/^            B1,$/;"	e	enum:Physics::Material::FitCoeffs
B2	src/Physics/Material.h	/^            B2,$/;"	e	enum:Physics::Material::FitCoeffs
B3	src/Physics/Material.h	/^            B3,$/;"	e	enum:Physics::Material::FitCoeffs
B4	src/Physics/Material.h	/^            B4,$/;"	e	enum:Physics::Material::FitCoeffs
B5	src/Physics/Material.h	/^            B5$/;"	e	enum:Physics::Material::FitCoeffs
BBLENGTH	src/Elements/OpalMultipoleT.h	/^        BBLENGTH,        \/\/ Distance between centre of magnet and entrance$/;"	e	enum:OpalMultipoleT::__anon48
BBOXINCR	src/Structure/FieldSolverCmd.h	/^        BBOXINCR,  \/\/ how much the boundingbox is increased$/;"	e	enum:FieldSolverCmdType::FIELDSOLVER::__anon62
BB_LENGTH	src/Elements/OpalVerticalFFAMagnet.h	/^        BB_LENGTH,$/;"	e	enum:OpalVerticalFFAMagnet::__anon38
BCFFTX	src/Structure/FieldSolverCmd.h	/^        BCFFTX,    \/\/ boundary condition in x [FFT + AMR_MG only]$/;"	e	enum:FieldSolverCmdType::FIELDSOLVER::__anon62
BCFFTY	src/Structure/FieldSolverCmd.h	/^        BCFFTY,    \/\/ boundary condition in y [FFT + AMR_MG only]$/;"	e	enum:FieldSolverCmdType::FIELDSOLVER::__anon62
BCFFTZ	src/Structure/FieldSolverCmd.h	/^        BCFFTZ,    \/\/ boundary condition in z [FFT + AMR_MG only]$/;"	e	enum:FieldSolverCmdType::FIELDSOLVER::__anon62
BCURRENT	src/Structure/Beam.cpp	/^        BCURRENT,  \/\/ Beam current in A$/;"	e	enum:__anon63::__anon64	file:
BConds_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef BConds<Vector_t, DIM, Mesh_t, Edge_t>                 BConds_t;$/;"	t	file:
BDipoleField	src/Fields/BDipoleField.cpp	/^BDipoleField::BDipoleField():$/;"	f	class:BDipoleField
BDipoleField	src/Fields/BDipoleField.h	/^class BDipoleField: public ConstBField {$/;"	c
BEAM	src/Track/TrackCmd.cpp	/^        BEAM,      \/\/ The name of beam to be used.$/;"	e	enum:__anon30::__anon31	file:
BEAM	src/Track/TrackRun.cpp	/^        BEAM,              \/\/ The beam to track$/;"	e	enum:TRACKRUN::__anon32	file:
BEAMHALOBOUNDARY	src/BasicActions/Option.cpp	/^        BEAMHALOBOUNDARY,$/;"	e	enum:__anon24::__anon25	file:
BEAMLINE	src/AbsBeamline/ElementBase.h	/^    BEAMLINE,$/;"	m	class:ElementType
BEAM_PHIINIT	src/Elements/OpalRingDefinition.h	/^        BEAM_PHIINIT,$/;"	e	enum:OpalRingDefinition::__anon39
BEAM_PRINIT	src/Elements/OpalRingDefinition.h	/^        BEAM_PRINIT,$/;"	e	enum:OpalRingDefinition::__anon39
BEAM_RINIT	src/Elements/OpalRingDefinition.h	/^        BEAM_RINIT,$/;"	e	enum:OpalRingDefinition::__anon39
BEGIN	src/Lines/SequenceMember.h	/^        BEGIN     = 4,$/;"	e	enum:SequenceMember::PositionType
BERYLLIUM_H	src/Physics/Beryllium.h	23;"	d
BFREQ	src/Structure/Beam.cpp	/^        BFREQ,     \/\/ Beam frequency in MHz$/;"	e	enum:__anon63::__anon64	file:
BGeometryBase	src/BeamlineGeometry/Geometry.h	/^class BGeometryBase {$/;"	c
BGeometryBase	src/BeamlineGeometry/Geometry.h	/^inline BGeometryBase::BGeometryBase()$/;"	f	class:BGeometryBase
BGeometryBase	src/BeamlineGeometry/Geometry.h	/^inline BGeometryBase::BGeometryBase(const BGeometryBase &)$/;"	f	class:BGeometryBase
BIGENDIAN	src/Utilities/SDDSParser/ast.hpp	/^        enum endianess { BIGENDIAN$/;"	e	enum:SDDS::ast::endianess
BINARY	src/Utilities/PortableBitmapReader.h	/^        BINARY$/;"	e	enum:PortableBitmapReader::FileType
BINARY	src/Utilities/PortableGraymapReader.h	/^        BINARY$/;"	e	enum:PortableGraymapReader::FileType
BINARY	src/Utilities/SDDSParser/ast.hpp	/^                      , BINARY};$/;"	e	enum:SDDS::ast::datamode
BINARY	tools/opal2sdds/main.cpp	/^    BINARY = SDDS_BINARY,$/;"	e	enum:FORMAT	file:
BINHISTO_HPP	src/PartBunch/Binning/BinHisto.hpp	2;"	d
BINNINGTOOLS_H	src/PartBunch/Binning/BinningTools.h	2;"	d
BIN_HISTO_H	src/PartBunch/Binning/BinHisto.h	2;"	d
BMultipoleField	src/Fields/BMultipoleField.cpp	/^BMultipoleField::BMultipoleField():$/;"	f	class:BMultipoleField
BMultipoleField	src/Fields/BMultipoleField.cpp	/^BMultipoleField::BMultipoleField(const BMultipoleField &rhs):$/;"	f	class:BMultipoleField
BMultipoleField	src/Fields/BMultipoleField.h	/^class BMultipoleField: public StaticMagneticField {$/;"	c
BOOST_RESULT_OF_USE_DECLTYPE	src/Utilities/MSLang/matheval.hpp	50;"	d
BOOST_SPIRIT_NO_PREDEFINED_TERMINALS	src/Utilities/SDDSParser/array.hpp	53;"	d
BOOST_SPIRIT_NO_PREDEFINED_TERMINALS	src/Utilities/SDDSParser/associate.hpp	57;"	d
BOOST_SPIRIT_NO_PREDEFINED_TERMINALS	src/Utilities/SDDSParser/column.hpp	31;"	d
BOOST_SPIRIT_NO_PREDEFINED_TERMINALS	src/Utilities/SDDSParser/data.hpp	28;"	d
BOOST_SPIRIT_NO_PREDEFINED_TERMINALS	src/Utilities/SDDSParser/description.hpp	29;"	d
BOOST_SPIRIT_NO_PREDEFINED_TERMINALS	src/Utilities/SDDSParser/file.hpp	37;"	d
BOOST_SPIRIT_NO_PREDEFINED_TERMINALS	src/Utilities/SDDSParser/include.hpp	34;"	d
BOOST_SPIRIT_NO_PREDEFINED_TERMINALS	src/Utilities/SDDSParser/parameter.hpp	31;"	d
BOOST_SPIRIT_NO_PREDEFINED_TERMINALS	src/Utilities/SDDSParser/version.hpp	28;"	d
BOOST_SPIRIT_QI_DEBUG	src/Utilities/SDDSParser/array.hpp	54;"	d
BOOST_SPIRIT_QI_DEBUG	src/Utilities/SDDSParser/associate.hpp	58;"	d
BOOST_SPIRIT_QI_DEBUG	src/Utilities/SDDSParser/column.hpp	32;"	d
BOOST_SPIRIT_QI_DEBUG	src/Utilities/SDDSParser/data.hpp	29;"	d
BOOST_SPIRIT_QI_DEBUG	src/Utilities/SDDSParser/description.hpp	30;"	d
BOOST_SPIRIT_QI_DEBUG	src/Utilities/SDDSParser/file.hpp	38;"	d
BOOST_SPIRIT_QI_DEBUG	src/Utilities/SDDSParser/include.hpp	35;"	d
BOOST_SPIRIT_QI_DEBUG	src/Utilities/SDDSParser/parameter.hpp	32;"	d
BOOST_SPIRIT_QI_DEBUG	src/Utilities/SDDSParser/version.hpp	29;"	d
BOOST_SPIRIT_USE_PHOENIX_V3	src/Utilities/MSLang/matheval.hpp	51;"	d
BORONCARBIDE_H	src/Physics/BoronCarbide.h	23;"	d
BOUNDARYGEOMETRY	src/Track/TrackRun.cpp	/^        BOUNDARYGEOMETRY,  \/\/ The boundary geometry$/;"	e	enum:TRACKRUN::__anon32	file:
BOUNDINGBOX_H	src/Structure/BoundingBox.h	24;"	d
BOUNDPDESTROYFQ	src/BasicActions/Option.cpp	/^        BOUNDPDESTROYFQ,$/;"	e	enum:__anon24::__anon25	file:
BOXCORNER	src/Structure/BoundaryGeometry.h	/^enum class Topology : unsigned short { RECTANGULAR, BOXCORNER, ELLIPTIC };$/;"	m	class:Topology
BSingleMultipoleField	src/Fields/BSingleMultipoleField.h	/^BSingleMultipoleField<order>::BSingleMultipoleField$/;"	f	class:BSingleMultipoleField
BSingleMultipoleField	src/Fields/BSingleMultipoleField.h	/^BSingleMultipoleField<order>::BSingleMultipoleField():$/;"	f	class:BSingleMultipoleField
BSingleMultipoleField	src/Fields/BSingleMultipoleField.h	/^class BSingleMultipoleField: public EMField {$/;"	c
BUNCH_MEAN	src/Utilities/Options.h	/^enum class DumpFrame : unsigned short { GLOBAL, BUNCH_MEAN, REFERENCE };$/;"	m	class:DumpFrame
BVector	src/Fields/EMField.cpp	/^BVector::BVector(double Bxx, double Byy, double Bzz)$/;"	f	class:BVector
BVector	src/Fields/EMField.h	/^class BVector {$/;"	c
B_m	src/AbsBeamline/PluginElement.h	/^    double A_m, B_m, R_m, C_m;  \/\/\/< Geometric lengths used in calculations$/;"	m	class:PluginElement
Base	src/Utilities/MSLang.h	/^        Base():$/;"	f	struct:mslang::Base
Base	src/Utilities/MSLang.h	/^        Base(const Base &right):$/;"	f	struct:mslang::Base
Base	src/Utilities/MSLang.h	/^    struct Base: public Function {$/;"	s	namespace:mslang
Beam	src/Structure/Beam.cpp	/^Beam::Beam()$/;"	f	class:Beam
Beam	src/Structure/Beam.cpp	/^Beam::Beam(const std::string& name, Beam* parent)$/;"	f	class:Beam
Beam	src/Structure/Beam.h	/^class Beam: public Definition {$/;"	c
BeamSequence	src/AbstractObjects/BeamSequence.cpp	/^BeamSequence::BeamSequence(const std::string &name, BeamSequence *parent):$/;"	f	class:BeamSequence
BeamSequence	src/AbstractObjects/BeamSequence.cpp	/^BeamSequence::BeamSequence(int size, const char *name, const char *help):$/;"	f	class:BeamSequence
BeamSequence	src/AbstractObjects/BeamSequence.h	/^class BeamSequence: public Element {$/;"	c
Beamline	src/Beamlines/Beamline.cpp	/^Beamline::Beamline():$/;"	f	class:Beamline
Beamline	src/Beamlines/Beamline.cpp	/^Beamline::Beamline(const Beamline &):$/;"	f	class:Beamline
Beamline	src/Beamlines/Beamline.cpp	/^Beamline::Beamline(const std::string &name):$/;"	f	class:Beamline
Beamline	src/Beamlines/Beamline.h	/^class Beamline : public ElementBase {$/;"	c
BeamlineGeometry	src/Beamlines/BeamlineGeometry.cpp	/^BeamlineGeometry::BeamlineGeometry(const Beamline &line):$/;"	f	class:BeamlineGeometry
BeamlineGeometry	src/Beamlines/BeamlineGeometry.h	/^class BeamlineGeometry: public BGeometryBase {$/;"	c
BeamlineVisitor	src/AbsBeamline/BeamlineVisitor.cpp	/^BeamlineVisitor::BeamlineVisitor()$/;"	f	class:BeamlineVisitor
BeamlineVisitor	src/AbsBeamline/BeamlineVisitor.h	/^class BeamlineVisitor {$/;"	c
Beryllium	src/Physics/Beryllium.h	/^        Beryllium():$/;"	f	class:Physics::Beryllium
Beryllium	src/Physics/Beryllium.h	/^    class Beryllium: public Material {$/;"	c	namespace:Physics
Bext_m	src/PartBunch/PartBunch.hpp	/^    double Bext_m;$/;"	m	class:PartBunch
Bf	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> Bf(size_t i) {$/;"	f	class:PartBunch
Bfield	src/AbsBeamline/Component.h	/^inline BVector Component::Bfield(const Point3D& P) const {$/;"	f	class:Component
Bfield	src/AbsBeamline/Component.h	/^inline BVector Component::Bfield(const Point3D& P, double t) const {$/;"	f	class:Component
Bfield	src/Fields/BDipoleField.cpp	/^BVector BDipoleField::Bfield(const Point3D &) const {$/;"	f	class:BDipoleField
Bfield	src/Fields/BDipoleField.cpp	/^BVector BDipoleField::Bfield(const Point3D &\/*X*\/, double) const {$/;"	f	class:BDipoleField
Bfield	src/Fields/BMultipoleField.cpp	/^BVector BMultipoleField::Bfield(const Point3D &point) const {$/;"	f	class:BMultipoleField
Bfield	src/Fields/BMultipoleField.cpp	/^BVector BMultipoleField::Bfield(const Point3D &point, double) const {$/;"	f	class:BMultipoleField
Bfield	src/Fields/BSingleMultipoleField.h	/^Bfield(const Point3D &point) const {$/;"	f	class:BSingleMultipoleField
Bfield	src/Fields/BSingleMultipoleField.h	/^Bfield(const Point3D &point, double) const {$/;"	f	class:BSingleMultipoleField
Bfield	src/Fields/ConstBzField.cpp	/^BVector ConstBzField::Bfield(const Point3D &) const {$/;"	f	class:ConstBzField
Bfield	src/Fields/ConstBzField.cpp	/^BVector ConstBzField::Bfield(const Point3D &\/*X*\/, double) const {$/;"	f	class:ConstBzField
Bfield	src/Fields/EMField.cpp	/^BVector EMField::Bfield(const Point3D &) const {$/;"	f	class:EMField
Bfield	src/Fields/EMField.cpp	/^BVector EMField::Bfield(const Point3D &X, double) const {$/;"	f	class:EMField
Bfield	src/Fields/OscillatingField.h	/^BVector OscillatingField<Field>::Bfield(const Point3D &p) const$/;"	f	class:OscillatingField
Bfield	src/Fields/OscillatingField.h	/^BVector OscillatingField<Field>::Bfield(const Point3D &p, double t) const$/;"	f	class:OscillatingField
Bin	src/PartBunch/Binning/test/alpine/ParticleContainer.hpp	/^        typename ippl::ParticleAttrib<bin_index_type> Bin; \/\/ TODO: Binning$/;"	m	class:ParticleContainer
Bin	src/PartBunch/ParticleContainer.hpp	/^    ippl::ParticleAttrib<bin_index_type> Bin;$/;"	m	class:ParticleContainer
BinRepartTimer_m	src/Algorithms/ParallelTracker.h	/^    IpplTimings::TimerRef BinRepartTimer_m;$/;"	m	class:ParallelTracker
BinomialBehaviorSplitter	src/Distribution/Distribution.h	/^    class BinomialBehaviorSplitter {$/;"	c	class:Distribution
Bool	src/Attributes/Bool.cpp	/^    Bool::Bool(const std::string &name, const std::string &help):$/;"	f	class:Attributes::Bool
Bool	src/Attributes/Bool.h	/^    class Bool: public AttributeHandler {$/;"	c	namespace:Attributes
BoolArray	src/Attributes/BoolArray.cpp	/^    BoolArray::BoolArray(const std::string &name, const std::string &help):$/;"	f	class:Attributes::BoolArray
BoolArray	src/Attributes/BoolArray.h	/^    class BoolArray: public AttributeHandler {$/;"	c	namespace:Attributes
BoolConstant	src/ValueDefinitions/BoolConstant.cpp	/^BoolConstant::BoolConstant():$/;"	f	class:BoolConstant
BoolConstant	src/ValueDefinitions/BoolConstant.cpp	/^BoolConstant::BoolConstant(const std::string &name, BoolConstant *parent):$/;"	f	class:BoolConstant
BoolConstant	src/ValueDefinitions/BoolConstant.h	/^class BoolConstant: public ValueDefinition {$/;"	c
BorisPusher	src/Steppers/BorisPusher.h	/^KOKKOS_INLINE_FUNCTION BorisPusher::BorisPusher() : itsReference(nullptr) {$/;"	f	class:BorisPusher
BorisPusher	src/Steppers/BorisPusher.h	/^KOKKOS_INLINE_FUNCTION BorisPusher::BorisPusher(const PartData& ref) : itsReference(&ref) {$/;"	f	class:BorisPusher
BorisPusher	src/Steppers/BorisPusher.h	/^class BorisPusher {$/;"	c
BoronCarbide	src/Physics/BoronCarbide.h	/^        BoronCarbide():$/;"	f	class:Physics::BoronCarbide
BoronCarbide	src/Physics/BoronCarbide.h	/^    class BoronCarbide: public Material {$/;"	c	namespace:Physics
BoundaryGeometry	src/Structure/BoundaryGeometry.cpp	/^BoundaryGeometry::BoundaryGeometry()$/;"	f	class:BoundaryGeometry
BoundaryGeometry	src/Structure/BoundaryGeometry.cpp	/^BoundaryGeometry::BoundaryGeometry(const std::string& name, BoundaryGeometry* parent)$/;"	f	class:BoundaryGeometry
BoundaryGeometry	src/Structure/BoundaryGeometry.h	/^class BoundaryGeometry : public Definition {$/;"	c
BoundingBox	src/Structure/BoundingBox.cpp	/^BoundingBox::BoundingBox()$/;"	f	class:BoundingBox
BoundingBox	src/Structure/BoundingBox.h	/^class BoundingBox {$/;"	c
BoundingBox2D	src/Utilities/MSLang/BoundingBox2D.h	/^        BoundingBox2D() : center_m(0.0), width_m(0.0), height_m(0.0) {$/;"	f	struct:mslang::BoundingBox2D
BoundingBox2D	src/Utilities/MSLang/BoundingBox2D.h	/^        BoundingBox2D(const BoundingBox2D& right)$/;"	f	struct:mslang::BoundingBox2D
BoundingBox2D	src/Utilities/MSLang/BoundingBox2D.h	/^        BoundingBox2D(const Vector_t<double, 3>& llc, const Vector_t<double, 3>& urc)$/;"	f	struct:mslang::BoundingBox2D
BoundingBox2D	src/Utilities/MSLang/BoundingBox2D.h	/^    struct BoundingBox2D {$/;"	s	namespace:mslang
Build2D	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^    void Build2D() {$/;"	f	class:PPSolveFactoryTestFixture
BuildHInvMatrix	src/Fields/Interpolation/SolveFactory.cpp	/^void SolveFactory::BuildHInvMatrix($/;"	f	class:interpolation::SolveFactory
Bx	src/Fields/BDipoleField.h	/^    double Bx, By;$/;"	m	class:BDipoleField
Bx	src/Fields/EMField.h	/^    double Bx, By, Bz;$/;"	m	class:BVector
By	src/Fields/BDipoleField.h	/^    double Bx, By;$/;"	m	class:BDipoleField
By	src/Fields/EMField.h	/^    double Bx, By, Bz;$/;"	m	class:BVector
Bz	src/Fields/ConstBzField.h	/^    double Bz;$/;"	m	class:ConstBzField
Bz	src/Fields/EMField.h	/^    double Bx, By, Bz;$/;"	m	class:BVector
Bz_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    double Bz_m = 0.;$/;"	m	class:ScalingFFAMagnet
Bz_m	src/AbsBeamline/VerticalFFAMagnet.h	/^    double Bz_m         = 0.;$/;"	m	class:VerticalFFAMagnet
C	src/Structure/BoundaryGeometry.h	/^        C,         \/\/ in case of BOXCORNER height of corner$/;"	e	enum:BoundaryGeometry::__anon61
CARBON	src/Physics/ParticleProperties.h	/^    CARBON,$/;"	m	class:ParticleType
CARTESIAN	src/BasicActions/DumpEMFields.h	/^        CARTESIAN,$/;"	m	class:DumpEMFields::CoordinateSystem
CAVITYAUTOPHASER	src/Algorithms/CavityAutophaser.h	23;"	d
CDF	src/PartBunch/Binning/test/alpine/BinningLandauDampingManager.h	/^  struct CDF{$/;"	s	struct:CustomDistributionFunctions
CENTRE_LENGTH	src/Elements/OpalVerticalFFAMagnet.h	/^        CENTRE_LENGTH,$/;"	e	enum:OpalVerticalFFAMagnet::__anon38
CHANGES_H	src/changes.h	2;"	d
CHARACTER	src/Utilities/SDDSParser/ast.hpp	/^                      , CHARACTER$/;"	e	enum:SDDS::ast::datatype
CHARGE	src/Structure/Beam.cpp	/^        CHARGE,    \/\/ The particle charge in proton charges$/;"	e	enum:__anon63::__anon64	file:
CLASS	src/BasicActions/Select.cpp	/^        CLASS,   \/\/ The class of elements to be selected.$/;"	e	enum:__anon27::__anon28	file:
CLASSIC_ABSBEAMLINE_Offset_HH	src/AbsBeamline/Offset.h	30;"	d
CLASSIC_AbsFileStream_HH	src/OpalParser/AbsFileStream.h	2;"	d
CLASSIC_AbstractTracker_HH	src/Algorithms/AbstractTracker.h	2;"	d
CLASSIC_AcceleratingField_HH	src/Fields/AcceleratingField.h	2;"	d
CLASSIC_ArithmeticError_HH	src/Utilities/ArithmeticError.h	2;"	d
CLASSIC_AstraFIELDMAP1DDYNAMICFAST_HH	src/Fields/Astra1DDynamic_fast.h	23;"	d
CLASSIC_AstraFIELDMAP1DDYNAMIC_HH	src/Fields/Astra1DDynamic.h	2;"	d
CLASSIC_AstraFIELDMAP1DELECTROSTATICFAST_HH	src/Fields/Astra1DElectroStatic_fast.h	2;"	d
CLASSIC_AstraFIELDMAP1DELECTROSTATIC_HH	src/Fields/Astra1DElectroStatic.h	2;"	d
CLASSIC_AstraFIELDMAP1DFAST_HH	src/Fields/Astra1D_fast.h	2;"	d
CLASSIC_AstraFIELDMAP1DMAGNETOSTATICFAST_HH	src/Fields/Astra1DMagnetoStatic_fast.h	2;"	d
CLASSIC_AstraFIELDMAP1DMAGNETOSTATIC_HH	src/Fields/Astra1DMagnetoStatic.h	2;"	d
CLASSIC_AttributeSet_HH	src/AbsBeamline/AttributeSet.h	2;"	d
CLASSIC_BDipoleField_HH	src/Fields/BDipoleField.h	2;"	d
CLASSIC_BEAMLINEGEOMETRY_Euclid3DGeometry_HH	src/BeamlineGeometry/Euclid3DGeometry.h	29;"	d
CLASSIC_BGeometryBase_HH	src/BeamlineGeometry/Geometry.h	2;"	d
CLASSIC_BMultipoleField_HH	src/Fields/BMultipoleField.h	2;"	d
CLASSIC_BSingleMultipoleField_HH	src/Fields/BSingleMultipoleField.h	2;"	d
CLASSIC_BeamlineGeometry_HH	src/Beamlines/BeamlineGeometry.h	2;"	d
CLASSIC_BeamlineVisitor_HH	src/AbsBeamline/BeamlineVisitor.h	34;"	d
CLASSIC_Beamline_HH	src/Beamlines/Beamline.h	2;"	d
CLASSIC_CLRangeError_HH	src/Utilities/CLRangeError.h	2;"	d
CLASSIC_Channel_HH	src/Channels/Channel.h	2;"	d
CLASSIC_ClassicException_HH	src/Utilities/ClassicException.h	2;"	d
CLASSIC_ComplexErrorFun_HH	src/Utilities/ComplexErrorFun.h	2;"	d
CLASSIC_Component_HH	src/AbsBeamline/Component.h	2;"	d
CLASSIC_CompoundStatement_HH	src/OpalParser/CompoundStatement.h	2;"	d
CLASSIC_ConstBField_HH	src/Fields/ConstBField.h	2;"	d
CLASSIC_ConstBzField_HH	src/Fields/ConstBzField.h	2;"	d
CLASSIC_ConstChannel_HH	src/Channels/ConstChannel.h	2;"	d
CLASSIC_ConstEzField_HH	src/Fields/ConstEzField.h	19;"	d
CLASSIC_ConvergenceError_HH	src/Utilities/ConvergenceError.h	2;"	d
CLASSIC_Corrector_HH	src/AbsBeamline/Corrector.h	2;"	d
CLASSIC_DefaultVisitor_HH	src/Algorithms/DefaultVisitor.h	24;"	d
CLASSIC_DirectChannel_HH	src/Channels/DirectChannel.h	2;"	d
CLASSIC_DivideError_HH	src/Utilities/DivideError.h	2;"	d
CLASSIC_DomainError_HH	src/Utilities/DomainError.h	2;"	d
CLASSIC_DriftRep_HH	src/BeamlineCore/DriftRep.h	19;"	d
CLASSIC_Drift_HH	src/AbsBeamline/Drift.h	2;"	d
CLASSIC_EMField_HH	src/Fields/EMField.h	2;"	d
CLASSIC_ElementBase_HH	src/AbsBeamline/ElementBase.h	64;"	d
CLASSIC_ElmPtr_HH	src/Beamlines/ElmPtr.h	2;"	d
CLASSIC_Euclid3D_HH	src/BeamlineGeometry/Euclid3D.h	2;"	d
CLASSIC_FIELDMAP1DDYNAMICFAST_HH	src/Fields/FM1DDynamic_fast.h	2;"	d
CLASSIC_FIELDMAP1DDYNAMIC_HH	src/Fields/FM1DDynamic.h	2;"	d
CLASSIC_FIELDMAP1DELECTROSTATICFAST_HH	src/Fields/FM1DElectroStatic_fast.h	2;"	d
CLASSIC_FIELDMAP1DELECTROSTATIC_HH	src/Fields/FM1DElectroStatic.h	2;"	d
CLASSIC_FIELDMAP1DMAGNETOSTATICFAST_HH	src/Fields/FM1DMagnetoStatic_fast.h	2;"	d
CLASSIC_FIELDMAP1DMAGNETOSTATIC_HH	src/Fields/FM1DMagnetoStatic.h	2;"	d
CLASSIC_FIELDMAP1DPROFILE1_HH	src/Fields/FM1DProfile1.h	2;"	d
CLASSIC_FIELDMAP1DPROFILE2_HH	src/Fields/FM1DProfile2.h	2;"	d
CLASSIC_FIELDMAP2DDYNAMIC_HH	src/Fields/FM2DDynamic.h	2;"	d
CLASSIC_FIELDMAP2DELECTROSTATIC_HH	src/Fields/FM2DElectroStatic.h	2;"	d
CLASSIC_FIELDMAP2DMAGNETOSTATIC_HH	src/Fields/FM2DMagnetoStatic.h	2;"	d
CLASSIC_FIELDMAP3DDYNAMIC_HH	src/Fields/FM3DDynamic.h	2;"	d
CLASSIC_FIELDMAP3DH5BLOCKBASE_H	src/Fields/FM3DH5BlockBase.h	20;"	d
CLASSIC_FIELDMAP3DH5BLOCK_H	src/Fields/FM3DH5Block.h	20;"	d
CLASSIC_FIELDMAP3DH5BLOCK_NONSCALE_H	src/Fields/FM3DH5Block_nonscale.h	20;"	d
CLASSIC_FIELDMAP3DMAGNETOSTATICH5BLOCK_H	src/Fields/FM3DMagnetoStaticH5Block.h	20;"	d
CLASSIC_FIELDMAP3DMAGNETOSTATIC_HH	src/Fields/FM3DMagnetoStatic.h	2;"	d
CLASSIC_FIELDMAPDUMMY	src/Fields/FMDummy.h	2;"	d
CLASSIC_FIELDMAP_HH	src/Fields/Fieldmap.h	2;"	d
CLASSIC_FIELDMAP_ICC	src/Fields/Fieldmap.hpp	2;"	d
CLASSIC_FIELD_H	src/Utilities/ClassicField.h	2;"	d
CLASSIC_FILTERS_HH	src/Filters/Filters.h	2;"	d
CLASSIC_FILTER_HH	src/Filters/Filter.h	2;"	d
CLASSIC_FIXED_LOW_PASS_FFT_HH	src/Filters/FixedFFTLowPass.h	2;"	d
CLASSIC_FM2DMAGNETOSTATICEXTENDED_HH	src/Fields/FM3DMagnetoStaticExtended.h	2;"	d
CLASSIC_FileStream_HH	src/OpalParser/FileStream.h	2;"	d
CLASSIC_FlaggedBeamline_HH	src/Beamlines/FlaggedBeamline.h	2;"	d
CLASSIC_FlaggedElmPtr_HH	src/Beamlines/FlaggedElmPtr.h	2;"	d
CLASSIC_FormatError_HH	src/Utilities/FormatError.h	2;"	d
CLASSIC_IndexedChannel_HH	src/Channels/IndexedChannel.h	2;"	d
CLASSIC_IndirectChannel_HH	src/Channels/IndirectChannel.h	2;"	d
CLASSIC_LogicalError_HH	src/Utilities/LogicalError.h	2;"	d
CLASSIC_MULTIPOLETBASE_H	src/AbsBeamline/MultipoleTBase.h	30;"	d
CLASSIC_MULTIPOLET_CURVED_CONST_RADIUS_H	src/AbsBeamline/MultipoleTCurvedConstRadius.h	31;"	d
CLASSIC_MULTIPOLET_CURVED_VAR_RADIUS_H	src/AbsBeamline/MultipoleTCurvedVarRadius.h	31;"	d
CLASSIC_MULTIPOLET_H	src/AbsBeamline/MultipoleT.h	30;"	d
CLASSIC_MULTIPOLET_STRAIGHT_H	src/AbsBeamline/MultipoleTStraight.h	31;"	d
CLASSIC_MacroCmd_HH	src/OpalParser/MacroCmd.h	24;"	d
CLASSIC_MacroStream_HH	src/OpalParser/MacroStream.h	2;"	d
CLASSIC_Macro_HH	src/OpalParser/Macro.h	2;"	d
CLASSIC_MarkerRep_HH	src/BeamlineCore/MarkerRep.h	2;"	d
CLASSIC_Marker_HH	src/AbsBeamline/Marker.h	2;"	d
CLASSIC_Matrix3D_HH	src/BeamlineGeometry/Matrix3D.h	2;"	d
CLASSIC_MonitorRep_HH	src/BeamlineCore/MonitorRep.h	20;"	d
CLASSIC_Monitor_HH	src/AbsBeamline/Monitor.h	19;"	d
CLASSIC_MultipoleRep_HH	src/BeamlineCore/MultipoleRep.h	19;"	d
CLASSIC_Multipole_HH	src/AbsBeamline/Multipole.h	20;"	d
CLASSIC_NullField_HH	src/Fields/NullField.h	2;"	d
CLASSIC_NullGeometry_HH	src/BeamlineGeometry/NullGeometry.h	2;"	d
CLASSIC_OpalParticle_HH	src/AbstractObjects/OpalParticle.h	19;"	d
CLASSIC_OpalParticle_HH	src/Algorithms/OpalParticle.h	19;"	d
CLASSIC_OscillatingField_HH	src/Fields/OscillatingField.h	2;"	d
CLASSIC_OverflowError_HH	src/Utilities/OverflowError.h	2;"	d
CLASSIC_OwnPtr_HH	src/MemoryManagement/OwnPtr.h	2;"	d
CLASSIC_ParseError_HH	src/Utilities/ParseError.h	2;"	d
CLASSIC_Parser_HH	src/OpalParser/Parser.h	2;"	d
CLASSIC_PartPusher_H	src/Steppers/BorisPusher.h	19;"	d
CLASSIC_Physics_HH	src/Physics/Physics.h	24;"	d
CLASSIC_PlanarArcGeometry_HH	src/BeamlineGeometry/PlanarArcGeometry.h	2;"	d
CLASSIC_PluginElement_HH	src/AbsBeamline/PluginElement.h	20;"	d
CLASSIC_Pointer_HH	src/MemoryManagement/Pointer.h	2;"	d
CLASSIC_ProbeRep_HH	src/BeamlineCore/ProbeRep.h	19;"	d
CLASSIC_Probe_HH	src/AbsBeamline/Probe.h	19;"	d
CLASSIC_RBendGeometry_HH	src/BeamlineGeometry/RBendGeometry.h	2;"	d
CLASSIC_RCObject_HH	src/MemoryManagement/RCObject.h	2;"	d
CLASSIC_RELATIVE_LOW_PASS_FFT_HH	src/Filters/RelativeFFTLowPass.h	2;"	d
CLASSIC_RFCavityRep_HH	src/BeamlineCore/RFCavityRep.h	19;"	d
CLASSIC_RFCavity_HH	src/AbsBeamline/RFCavity.h	19;"	d
CLASSIC_Rotation3D_HH	src/BeamlineGeometry/Rotation3D.h	2;"	d
CLASSIC_SAVITZKY_GOLAY_FILTER_HH	src/Filters/SavitzkyGolay.h	2;"	d
CLASSIC_STENCIL_HH	src/Filters/Stencil.h	2;"	d
CLASSIC_SimpleStatement_HH	src/OpalParser/SimpleStatement.h	2;"	d
CLASSIC_SolenoidRep_HH	src/BeamlineCore/SolenoidRep.h	19;"	d
CLASSIC_Solenoid_HH	src/AbsBeamline/Solenoid.h	2;"	d
CLASSIC_StaticElectricField_HH	src/Fields/StaticElectricField.h	2;"	d
CLASSIC_StaticMagneticField_HH	src/Fields/StaticMagneticField.h	2;"	d
CLASSIC_StraightGeometry_HH	src/BeamlineGeometry/StraightGeometry.h	2;"	d
CLASSIC_StringStream_HH	src/OpalParser/StringStream.h	2;"	d
CLASSIC_TBeamline_HH	src/Beamlines/TBeamline.h	21;"	d
CLASSIC_TokenStream_HH	src/OpalParser/TokenStream.h	2;"	d
CLASSIC_Token_HH	src/OpalParser/Token.h	2;"	d
CLASSIC_Tracker_HH	src/Algorithms/Tracker.h	63;"	d
CLASSIC_TravelingWaveRep_HH	src/BeamlineCore/TravelingWaveRep.h	19;"	d
CLASSIC_TravelingWave_HH	src/AbsBeamline/TravelingWave.h	19;"	d
CLASSIC_Units_HH	src/Physics/Units.h	19;"	d
CLASSIC_VarRadiusGeometry_HH	src/BeamlineGeometry/VarRadiusGeometry.h	29;"	d
CLASSIC_Vector3D_HH	src/BeamlineGeometry/Vector3D.h	2;"	d
CLEAR	src/BasicActions/Select.cpp	/^        CLEAR,   \/\/ If true, all selections are cleared.$/;"	e	enum:__anon27::__anon28	file:
CLOSE_FILE	src/Structure/LossDataSink.cpp	116;"	d	file:
CLOTUNEONLY	src/BasicActions/Option.cpp	/^        CLOTUNEONLY,$/;"	e	enum:__anon24::__anon25	file:
CLRangeError	src/Utilities/CLRangeError.cpp	/^CLRangeError::CLRangeError(const CLRangeError &rhs):$/;"	f	class:CLRangeError
CLRangeError	src/Utilities/CLRangeError.cpp	/^CLRangeError::CLRangeError(const std::string &meth, const std::string &msg):$/;"	f	class:CLRangeError
CLRangeError	src/Utilities/CLRangeError.h	/^class CLRangeError: public ArithmeticError {$/;"	c
COLUMN_DEF_HPP_	src/Utilities/SDDSParser/column_def.hpp	18;"	d
COLUMN_HPP_	src/Utilities/SDDSParser/column.hpp	18;"	d
COLUMN_MAJOR_ORDER	src/Utilities/SDDSParser/data.hpp	/^                        , COLUMN_MAJOR_ORDER$/;"	e	enum:SDDS::data::attributes
COMMAND	src/AbstractObjects/AttributeHandler.h	/^        COMMAND,$/;"	e	enum:AttributeHandler::OwnerType
COMMON	src/Elements/OpalElement.h	/^        COMMON$/;"	e	enum:OpalElement::__anon37
COMPUTEPERCENTILES	src/BasicActions/Option.cpp	/^        COMPUTEPERCENTILES,$/;"	e	enum:__anon24::__anon25	file:
CONIC_RECTANGULAR	src/AbsBeamline/ElementBase.h	/^    CONIC_RECTANGULAR,$/;"	m	class:ApertureType
CONSTANT	src/.Solvers/IrregularDomain.h	/^enum { CONSTANT, LINEAR, QUADRATIC };$/;"	e	enum:__anon19
CONTENTS	src/Utilities/SDDSParser/associate.hpp	/^                        , CONTENTS$/;"	e	enum:SDDS::associate::attributes
COORDINATESYSTEMTRAFO	src/Algorithms/CoordinateSystemTrafo.h	2;"	d
COORDINATE_SYSTEM	src/BasicActions/DumpEMFields.h	/^        COORDINATE_SYSTEM,$/;"	e	enum:DumpEMFields::__anon29
COORDINATE_TRANSFORM_H	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	29;"	d
COPPER_H	src/Physics/Copper.h	23;"	d
CORR	src/Distribution/Distribution.cpp	/^    enum { TYPE, FNAME, SIGMAX, SIGMAY, SIGMAZ, SIGMAPX, SIGMAPY, SIGMAPZ, CORR,$/;"	e	enum:DISTRIBUTION::__anon65	file:
CORRT	src/Distribution/Distribution.cpp	/^           CORRZ, CORRT, SIGMAT, TPULSEFWHM, TRISE, TFALL, FTOSCAMPLITUDE, FTOSCPERIODS, EMITTED, SIZE };$/;"	e	enum:DISTRIBUTION::__anon65	file:
CORRX	src/Distribution/Distribution.cpp	/^           CUTOFFPX, CUTOFFPY, CUTOFFPZ, CUTOFFX, CUTOFFY, CUTOFFLONG, CORRX, CORRY,$/;"	e	enum:DISTRIBUTION::__anon65	file:
CORRY	src/Distribution/Distribution.cpp	/^           CUTOFFPX, CUTOFFPY, CUTOFFPZ, CUTOFFX, CUTOFFY, CUTOFFLONG, CORRX, CORRY,$/;"	e	enum:DISTRIBUTION::__anon65	file:
CORRZ	src/Distribution/Distribution.cpp	/^           CORRZ, CORRT, SIGMAT, TPULSEFWHM, TRISE, TFALL, FTOSCAMPLITUDE, FTOSCPERIODS, EMITTED, SIZE };$/;"	e	enum:DISTRIBUTION::__anon65	file:
CREATE_STRINGCONSTANT	src/ValueDefinitions/StringConstant.cpp	26;"	d	file:
CSRDUMP	src/BasicActions/Option.cpp	/^        CSRDUMP,$/;"	e	enum:__anon24::__anon25	file:
CUTOFFLONG	src/Distribution/Distribution.cpp	/^           CUTOFFPX, CUTOFFPY, CUTOFFPZ, CUTOFFX, CUTOFFY, CUTOFFLONG, CORRX, CORRY,$/;"	e	enum:DISTRIBUTION::__anon65	file:
CUTOFFPX	src/Distribution/Distribution.cpp	/^           CUTOFFPX, CUTOFFPY, CUTOFFPZ, CUTOFFX, CUTOFFY, CUTOFFLONG, CORRX, CORRY,$/;"	e	enum:DISTRIBUTION::__anon65	file:
CUTOFFPY	src/Distribution/Distribution.cpp	/^           CUTOFFPX, CUTOFFPY, CUTOFFPZ, CUTOFFX, CUTOFFY, CUTOFFLONG, CORRX, CORRY,$/;"	e	enum:DISTRIBUTION::__anon65	file:
CUTOFFPZ	src/Distribution/Distribution.cpp	/^           CUTOFFPX, CUTOFFPY, CUTOFFPZ, CUTOFFX, CUTOFFY, CUTOFFLONG, CORRX, CORRY,$/;"	e	enum:DISTRIBUTION::__anon65	file:
CUTOFFX	src/Distribution/Distribution.cpp	/^           CUTOFFPX, CUTOFFPY, CUTOFFPZ, CUTOFFX, CUTOFFY, CUTOFFLONG, CORRX, CORRY,$/;"	e	enum:DISTRIBUTION::__anon65	file:
CUTOFFY	src/Distribution/Distribution.cpp	/^           CUTOFFPX, CUTOFFPY, CUTOFFPZ, CUTOFFX, CUTOFFY, CUTOFFLONG, CORRX, CORRY,$/;"	e	enum:DISTRIBUTION::__anon65	file:
CZERO	src/BasicActions/Option.cpp	/^        CZERO,$/;"	e	enum:__anon24::__anon25	file:
C_m	src/AbsBeamline/PluginElement.h	/^    double A_m, B_m, R_m, C_m;  \/\/\/< Geometric lengths used in calculations$/;"	m	class:PluginElement
Call	src/BasicActions/Call.cpp	/^Call::Call():$/;"	f	class:Call
Call	src/BasicActions/Call.cpp	/^Call::Call(const std::string& name, Call* parent):$/;"	f	class:Call
Call	src/BasicActions/Call.h	/^class Call: public Action {$/;"	c
CastsTrait	src/AbsBeamline/SpecificElementVisitor.h	/^struct CastsTrait {$/;"	s
CastsTrait	src/AbsBeamline/SpecificElementVisitor.h	/^struct CastsTrait<ELEM,ELEM> {$/;"	s
CavityAutophaser	src/Algorithms/CavityAutophaser.cpp	/^CavityAutophaser::CavityAutophaser(const PartData& ref, std::shared_ptr<Component> cavity)$/;"	f	class:CavityAutophaser
CavityAutophaser	src/Algorithms/CavityAutophaser.h	/^class CavityAutophaser {$/;"	c
CavityType	src/AbsBeamline/RFCavity.h	/^enum class CavityType : unsigned short { SW, SGSW };$/;"	c
Cell	src/AbstractObjects/Table.h	/^        Cell(Expressions::PtrToScalar<double> expr, int width, int prec):$/;"	f	struct:Table::Cell
Cell	src/AbstractObjects/Table.h	/^    struct Cell {$/;"	s	class:Table
CellArray	src/AbstractObjects/Table.h	/^    typedef std::vector<Cell> CellArray;$/;"	t	class:Table
Cell_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef Cell                                                  Cell_t;$/;"	t	file:
Center_t	src/Algorithms/PBunchDefs.h	/^typedef Cell Center_t;$/;"	t
Centering_t	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^typedef Mesh_t::DefaultCentering Centering_t;$/;"	t	file:
Channel	src/Channels/Channel.cpp	/^Channel::Channel():$/;"	f	class:Channel
Channel	src/Channels/Channel.h	/^class Channel: public ConstChannel {$/;"	c
ChargedParticles	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    ChargedParticles(PLayout& pl, Vector_t hr, Vector_t rmin, Vector_t rmax,$/;"	f	class:ChargedParticles
ChargedParticles	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^class ChargedParticles : public ippl::ParticleBase<PLayout> {$/;"	c	file:
ClassicException	src/Utilities/ClassicException.cpp	/^ClassicException::ClassicException$/;"	f	class:ClassicException
ClassicException	src/Utilities/ClassicException.cpp	/^ClassicException::ClassicException(const ClassicException &rhs):$/;"	f	class:ClassicException
ClassicException	src/Utilities/ClassicException.h	/^class ClassicException {$/;"	c
ClassicField	src/Utilities/ClassicField.cpp	/^ClassicField::ClassicField($/;"	f	class:ClassicField
ClassicField	src/Utilities/ClassicField.h	/^class ClassicField {$/;"	c
ClearReference	src/AbstractObjects/OpalData.h	/^    struct ClearReference : public ObjectFunction {$/;"	s	class:OpalData
Clone	src/Fields/Interpolation/SquarePolynomialVector.h	/^    SquarePolynomialVector* Clone() const$/;"	f	class:interpolation::SquarePolynomialVector
Coeff	src/Fields/Interpolation/PPSolveFactory.cpp	/^typedef PolynomialCoefficient Coeff;$/;"	t	namespace:interpolation	file:
Coefficient	src/Fields/Interpolation/PolynomialCoefficient.h	/^    double           Coefficient() const {return _coefficient;}$/;"	f	class:interpolation::PolynomialCoefficient
Coefficient	src/Fields/Interpolation/PolynomialCoefficient.h	/^    double           Coefficient(double           coeff ) {_coefficient = coeff;  return _coefficient;}$/;"	f	class:interpolation::PolynomialCoefficient
CoefsDeriv_m	src/Filters/SavitzkyGolay.h	/^    std::vector<double> CoefsDeriv_m;$/;"	m	class:SavitzkyGolayFilter
Coefs_m	src/Filters/SavitzkyGolay.h	/^    std::vector<double> Coefs_m;$/;"	m	class:SavitzkyGolayFilter
CollectionType	src/Structure/LossDataSink.h	/^enum class CollectionType : unsigned short { SPATIAL = 0, TEMPORAL };$/;"	c
CompactVector	src/AbsBeamline/EndFieldModel/EndFieldModel.cpp	/^std::vector< std::vector<int> > CompactVector($/;"	f	namespace:endfieldmodel
Component	src/AbsBeamline/Component.cpp	/^Component::Component() : Component("") {$/;"	f	class:Component
Component	src/AbsBeamline/Component.cpp	/^Component::Component(const Component& right)$/;"	f	class:Component
Component	src/AbsBeamline/Component.cpp	/^Component::Component(const std::string& name)$/;"	f	class:Component
Component	src/AbsBeamline/Component.h	/^class Component : public ElementBase {$/;"	c
CompoundStatement	src/OpalParser/CompoundStatement.cpp	/^CompoundStatement::CompoundStatement(TokenStream &is):$/;"	f	class:CompoundStatement
CompoundStatement	src/OpalParser/CompoundStatement.h	/^class CompoundStatement: public Statement {$/;"	c
ComputeCenteredBounds	src/Distribution/MultiVariateGaussian.hpp	/^    void ComputeCenteredBounds(){$/;"	f	class:MultiVariateGaussian
ComputeCholeskyFactorization	src/Distribution/MultiVariateGaussian.hpp	/^    void ComputeCholeskyFactorization(){$/;"	f	class:MultiVariateGaussian
ComputePotential_m	src/.Solvers/FFTPoissonSolver.h	/^    IpplTimings::TimerRef ComputePotential_m;$/;"	m	class:FFTPoissonSolver
Configure	src/OpalConfigure/Configure.cpp	/^namespace Configure {$/;"	n	file:
Configure	src/OpalConfigure/Configure.h	/^namespace Configure {$/;"	n
ConstBField	src/Fields/ConstBField.cpp	/^ConstBField::ConstBField()$/;"	f	class:ConstBField
ConstBField	src/Fields/ConstBField.h	/^class ConstBField: public StaticMagneticField {$/;"	c
ConstBzField	src/Fields/ConstBzField.cpp	/^ConstBzField::ConstBzField()$/;"	f	class:ConstBzField
ConstBzField	src/Fields/ConstBzField.h	/^class ConstBzField: public ConstBField {$/;"	c
ConstChannel	src/Channels/ConstChannel.cpp	/^ConstChannel::ConstChannel()$/;"	f	class:ConstChannel
ConstChannel	src/Channels/ConstChannel.h	/^class ConstChannel {$/;"	c
ConstEzField	src/Fields/ConstEzField.cpp	/^ConstEzField::ConstEzField()$/;"	f	class:ConstEzField
ConstEzField	src/Fields/ConstEzField.h	/^class ConstEzField: public StaticElectricField {$/;"	c
ConstIterator	src/Algorithms/.PartBunchBase.h	/^        ConstIterator() : bunch_m(nullptr), index_m(0) {$/;"	f	class:PartBunch::ConstIterator
ConstIterator	src/Algorithms/.PartBunchBase.h	/^        ConstIterator(PartBunch const* bunch, unsigned int i) : bunch_m(bunch), index_m(i) {$/;"	f	class:PartBunch::ConstIterator
ConstIterator	src/Algorithms/.PartBunchBase.h	/^    class ConstIterator {$/;"	c	class:PartBunch
ConstantFolder	src/Utilities/MSLang/matheval.hpp	/^        template <typename real_t> struct ConstantFolder {$/;"	s	namespace:matheval::detail
ConvergenceError	src/Utilities/ConvergenceError.cpp	/^ConvergenceError::ConvergenceError(const ConvergenceError &rhs):$/;"	f	class:ConvergenceError
ConvergenceError	src/Utilities/ConvergenceError.cpp	/^ConvergenceError::ConvergenceError(const std::string &meth, const std::string &msg):$/;"	f	class:ConvergenceError
ConvergenceError	src/Utilities/ConvergenceError.h	/^class ConvergenceError: public ArithmeticError {$/;"	c
CoordinateSelector	src/PartBunch/Binning/BinningTools.h	/^        CoordinateSelector(int axis_) $/;"	f	struct:ParticleBinning::CoordinateSelector
CoordinateSelector	src/PartBunch/Binning/BinningTools.h	/^    struct CoordinateSelector {$/;"	s	namespace:ParticleBinning
CoordinateSystem	src/BasicActions/DumpEMFields.h	/^    enum class CoordinateSystem: unsigned short {$/;"	c	class:DumpEMFields
CoordinateSystemTrafo	src/Algorithms/CoordinateSystemTrafo.cpp	/^CoordinateSystemTrafo::CoordinateSystemTrafo($/;"	f	class:CoordinateSystemTrafo
CoordinateSystemTrafo	src/Algorithms/CoordinateSystemTrafo.cpp	/^CoordinateSystemTrafo::CoordinateSystemTrafo()$/;"	f	class:CoordinateSystemTrafo
CoordinateSystemTrafo	src/Algorithms/CoordinateSystemTrafo.cpp	/^CoordinateSystemTrafo::CoordinateSystemTrafo(const CoordinateSystemTrafo& right)$/;"	f	class:CoordinateSystemTrafo
CoordinateSystemTrafo	src/Algorithms/CoordinateSystemTrafo.h	/^class CoordinateSystemTrafo {$/;"	c
CoordinateTransform	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^CoordinateTransform::CoordinateTransform(const CoordinateTransform &transform):$/;"	f	class:coordinatetransform::CoordinateTransform
CoordinateTransform	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^CoordinateTransform::CoordinateTransform(const double &xlab,$/;"	f	class:coordinatetransform::CoordinateTransform
CoordinateTransform	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^class CoordinateTransform {$/;"	c	namespace:coordinatetransform
Copper	src/Physics/Copper.h	/^        Copper():$/;"	f	class:Physics::Copper
Copper	src/Physics/Copper.h	/^    class Copper: public Material {$/;"	c	namespace:Physics
Corrector	src/AbsBeamline/Corrector.cpp	/^Corrector::Corrector() : Corrector("") {$/;"	f	class:Corrector
Corrector	src/AbsBeamline/Corrector.cpp	/^Corrector::Corrector(const Corrector& right)$/;"	f	class:Corrector
Corrector	src/AbsBeamline/Corrector.cpp	/^Corrector::Corrector(const std::string& name)$/;"	f	class:Corrector
Corrector	src/AbsBeamline/Corrector.h	/^class Corrector: public Component {$/;"	c
CustomDistributionFunctions	src/PartBunch/Binning/test/alpine/BinningLandauDampingManager.h	/^struct CustomDistributionFunctions {$/;"	s
CxField_t	src/.Solvers/PoissonSolver.h	/^    typedef Field<std::complex<double>, 3, Mesh_t, Center_t> CxField_t;$/;"	t	class:PoissonSolver
D1	tests/ippl_src/Field/Field.cpp	/^constexpr unsigned D1 = 1;$/;"	v
D2	tests/ippl_src/Field/Field.cpp	/^constexpr unsigned D2 = 2;$/;"	v
D3	tests/ippl_src/Field/Field.cpp	/^constexpr unsigned D3 = 3;$/;"	v
D4	tests/ippl_src/Field/Field.cpp	/^constexpr unsigned D4 = 4;$/;"	v
DATA_DEF_HPP_	src/Utilities/SDDSParser/data_def.hpp	18;"	d
DATA_HPP_	src/Utilities/SDDSParser/data.hpp	18;"	d
DECAPOLE	src/AbsBeamline/Multipole.cpp	/^    enum { DIPOLE, QUADRUPOLE, SEXTUPOLE, OCTUPOLE, DECAPOLE };$/;"	e	enum:__anon20::__anon21	file:
DECAPOLE	src/Algorithms/IndexMap.cpp	/^    DECAPOLE,$/;"	e	enum:elements	file:
DEFINITION_H	src/Fields/Definitions.h	2;"	d
DELETEONTRANSVERSEEXIT	src/Elements/OpalElement.h	/^        DELETEONTRANSVERSEEXIT, \/\/ Flag whether particles should be deleted if exit transversally$/;"	e	enum:OpalElement::__anon37
DELPARTFREQ	src/BasicActions/Option.cpp	/^        DELPARTFREQ,$/;"	e	enum:__anon24::__anon25	file:
DESCRIPTION	src/Utilities/SDDSParser/array.hpp	/^                         , DESCRIPTION$/;"	e	enum:SDDS::array::attributes
DESCRIPTION	src/Utilities/SDDSParser/associate.hpp	/^                        , DESCRIPTION$/;"	e	enum:SDDS::associate::attributes
DESCRIPTION	src/Utilities/SDDSParser/column.hpp	/^                        , DESCRIPTION$/;"	e	enum:SDDS::column::attributes
DESCRIPTION	src/Utilities/SDDSParser/parameter.hpp	/^                        , DESCRIPTION$/;"	e	enum:SDDS::parameter::attributes
DESCRIPTION_DEF_HPP_	src/Utilities/SDDSParser/description_def.hpp	18;"	d
DESCRIPTION_HPP_	src/Utilities/SDDSParser/description.hpp	18;"	d
DESIGNENERGY	src/Elements/OpalCavity.h	/^        DESIGNENERGY,   \/\/ The mean kinetic energy at exit$/;"	e	enum:OpalCavity::__anon34
DESIGNENERGY	src/Elements/OpalTravelingWave.h	/^        DESIGNENERGY,   \/\/ The mean kinetic energy at exit$/;"	e	enum:OpalTravelingWave::__anon46
DEUTERON	src/Physics/ParticleProperties.h	/^    DEUTERON,$/;"	m	class:ParticleType
DIFFERENTIAL_OPERATOR_H	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.h	29;"	d
DIFFERENTIAL_OPERATOR_TWO_H	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.h	29;"	d
DIM	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	32;"	d	file:
DIM	tests/ippl_src/Meshes/Cartesian.cpp	/^constexpr unsigned int DIM = 3;$/;"	v
DIM	tests/ippl_src/Particle/EdgeCentering.cpp	17;"	d	file:
DIMENSIONS	src/Utilities/SDDSParser/array.hpp	/^                         , DIMENSIONS$/;"	e	enum:SDDS::array::attributes
DIPOLE	src/AbsBeamline/Multipole.cpp	/^    enum { DIPOLE, QUADRUPOLE, SEXTUPOLE, OCTUPOLE, DECAPOLE };$/;"	e	enum:__anon20::__anon21	file:
DIPOLE	src/Algorithms/IndexMap.cpp	/^    DIPOLE = 0,$/;"	e	enum:elements	file:
DIPOLE	src/Structure/MeshGenerator.h	/^    enum MeshType { OTHER = 0, DIPOLE, QUADRUPOLE, SEXTUPOLE, OCTUPOLE, SOLENOID, RFCAVITY };$/;"	e	enum:MeshGenerator::MeshType
DISTRIBUTION	src/Distribution/Distribution.cpp	/^namespace DISTRIBUTION {$/;"	n	file:
DISTRIBUTION	src/Elements/OpalSource.h	/^        DISTRIBUTION = COMMON,  \/\/ The longitudinal magnetic field.$/;"	e	enum:OpalSource::__anon35
DISTRIBUTION	src/Track/TrackRun.cpp	/^        DISTRIBUTION,      \/\/ The particle distribution$/;"	e	enum:TRACKRUN::__anon32	file:
DISTRIBUTIONMOMENTS_H	src/Algorithms/DistributionMoments.h	19;"	d
DKN	src/Elements/OpalMultipole.h	/^        DKN,          \/\/ The normal field component errors.$/;"	e	enum:OpalMultipole::__anon41
DKS	src/Elements/OpalMultipole.h	/^        DKS,          \/\/ The skewed field component errors.$/;"	e	enum:OpalMultipole::__anon41
DKS	src/Elements/OpalSolenoid.h	/^        DKS,          \/\/ The longitudinal magnetic field error.$/;"	e	enum:OpalSolenoid::__anon49
DLAG	src/Elements/OpalCavity.h	/^        DLAG,           \/\/ The phase lag error.$/;"	e	enum:OpalCavity::__anon34
DLAG	src/Elements/OpalTravelingWave.h	/^        DLAG,           \/\/ The phase lag error$/;"	e	enum:OpalTravelingWave::__anon46
DOUBLE	src/Utilities/SDDSParser/ast.hpp	/^                      , DOUBLE$/;"	e	enum:SDDS::ast::datatype
DPHI	src/BasicActions/DumpEMFields.h	/^        DPHI,$/;"	e	enum:DumpEMFields::__anon29
DPHI	src/Elements/OpalElement.h	/^        DPHI,           \/\/ The rotation around x axis in rad.$/;"	e	enum:OpalElement::__anon37
DPSI	src/Elements/OpalElement.h	/^        DPSI,           \/\/ The rotation around s axis in rad.$/;"	e	enum:OpalElement::__anon37
DR	src/BasicActions/DumpEMFields.h	/^        DR,$/;"	e	enum:DumpEMFields::__anon29
DRIFT	src/AbsBeamline/ElementBase.h	/^    DRIFT,$/;"	m	class:ElementType
DRIFT	src/Lines/SequenceMember.h	/^        DRIFT     = 6,$/;"	e	enum:SequenceMember::PositionType
DT	src/BasicActions/DumpEMFields.h	/^        DT,$/;"	e	enum:DumpEMFields::__anon29
DT	src/Track/TrackCmd.cpp	/^        DT,        \/\/ The integration timestep in second.$/;"	e	enum:__anon30::__anon31	file:
DTAU	src/Track/TrackCmd.cpp	/^        DTAU,      \/\/ Only for adaptive integrator: Alternative way to set accuracy of space$/;"	e	enum:__anon30::__anon31	file:
DTHETA	src/Elements/OpalElement.h	/^        DTHETA,         \/\/ The rotation around y axis in rad.$/;"	e	enum:OpalElement::__anon37
DTSCINIT	src/Track/TrackCmd.cpp	/^        DTSCINIT,  \/\/ Only for adaptive integrator: Initial time step for space charge integration.$/;"	e	enum:__anon30::__anon31	file:
DVOLT	src/Elements/OpalCavity.h	/^        DVOLT,          \/\/ The peak voltage error.$/;"	e	enum:OpalCavity::__anon34
DVOLT	src/Elements/OpalTravelingWave.h	/^        DVOLT,          \/\/ The peak voltage error$/;"	e	enum:OpalTravelingWave::__anon46
DX	src/BasicActions/DumpEMFields.h	/^        DX,$/;"	e	enum:DumpEMFields::__anon29
DX	src/BasicActions/DumpFields.h	/^        DX,$/;"	e	enum:DumpFields::__anon26
DX	src/Elements/OpalElement.h	/^        DX,             \/\/ Misalignment in x (local coordinate system)$/;"	e	enum:OpalElement::__anon37
DX	src/Fields/Fieldmap.h	/^enum DiffDirection { DX = 0, DY, DZ };$/;"	e	enum:DiffDirection
DY	src/BasicActions/DumpEMFields.h	/^        DY,$/;"	e	enum:DumpEMFields::__anon29
DY	src/BasicActions/DumpFields.h	/^        DY,$/;"	e	enum:DumpFields::__anon26
DY	src/Elements/OpalElement.h	/^        DY,             \/\/ Misalignment in y (local coordinate system)$/;"	e	enum:OpalElement::__anon37
DY	src/Fields/Fieldmap.h	/^enum DiffDirection { DX = 0, DY, DZ };$/;"	e	enum:DiffDirection
DZ	src/BasicActions/DumpEMFields.h	/^        DZ,$/;"	e	enum:DumpEMFields::__anon29
DZ	src/BasicActions/DumpFields.h	/^        DZ,$/;"	e	enum:DumpFields::__anon26
DZ	src/Elements/OpalElement.h	/^        DZ,             \/\/ Misalignment in z (local coordinate system)$/;"	e	enum:OpalElement::__anon37
DZ	src/Fields/Fieldmap.h	/^enum DiffDirection { DX = 0, DY, DZ };$/;"	e	enum:DiffDirection
Data	src/AbstractObjects/PlaceRep.h	/^    typedef std::vector<std::pair<std::string, int> > Data;$/;"	t	class:PlaceRep
DataSink	src/Structure/DataSink.cpp	/^DataSink::DataSink() {$/;"	f	class:DataSink
DataSink	src/Structure/DataSink.cpp	/^DataSink::DataSink(H5PartWrapper* h5wrapper) : DataSink(h5wrapper, false) {$/;"	f	class:DataSink
DataSink	src/Structure/DataSink.cpp	/^DataSink::DataSink(H5PartWrapper* h5wrapper, bool restart) {$/;"	f	class:DataSink
DataSink	src/Structure/DataSink.h	/^class DataSink {$/;"	c
DebugFlags	src/Structure/BoundaryGeometry.h	/^    enum DebugFlags {$/;"	g	class:BoundaryGeometry
DefaultVisitor	src/Algorithms/DefaultVisitor.cpp	/^DefaultVisitor::DefaultVisitor(const Beamline& beamline, bool backBeam, bool backTrack)$/;"	f	class:DefaultVisitor
DefaultVisitor	src/Algorithms/DefaultVisitor.h	/^class DefaultVisitor : public BeamlineVisitor {$/;"	c
Definition	src/AbstractObjects/Definition.cpp	/^Definition::Definition(const std::string &name, Definition *parent):$/;"	f	class:Definition
Definition	src/AbstractObjects/Definition.cpp	/^Definition::Definition(int size, const char *name, const char *help):$/;"	f	class:Definition
Definition	src/AbstractObjects/Definition.h	/^class Definition: public Object {$/;"	c
Deriv	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^SquarePolynomialVector SquarePolynomialVector::Deriv(const int* derivPower) const {$/;"	f	class:interpolation::SquarePolynomialVector
DescendingLocationSort	src/Algorithms/PartBins.h	/^    DescendingLocationSort(int direction = 0): direction_m(direction)$/;"	f	class:DescendingLocationSort
DescendingLocationSort	src/Algorithms/PartBins.h	/^class DescendingLocationSort {$/;"	c
Diagonal	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<Tmplt> MMatrix<Tmplt>::Diagonal(size_t i, Tmplt diag_value, Tmplt off_diag_value)$/;"	f	class:interpolation::MMatrix
DiffDirection	src/Fields/Fieldmap.h	/^enum DiffDirection { DX = 0, DY, DZ };$/;"	g
Difference	src/Utilities/MSLang/Difference.h	/^        Difference()$/;"	f	struct:mslang::Difference
Difference	src/Utilities/MSLang/Difference.h	/^        Difference(const Difference &right):$/;"	f	struct:mslang::Difference
Difference	src/Utilities/MSLang/Difference.h	/^    struct Difference: public Function {$/;"	s	namespace:mslang
DifferentialOperator	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^DifferentialOperator::DifferentialOperator($/;"	f	class:polynomial::DifferentialOperator
DifferentialOperator	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^DifferentialOperator::DifferentialOperator():$/;"	f	class:polynomial::DifferentialOperator
DifferentialOperator	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^DifferentialOperator::DifferentialOperator(const std::size_t &xDerivatives,$/;"	f	class:polynomial::DifferentialOperator
DifferentialOperator	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.h	/^class DifferentialOperator {$/;"	c	namespace:polynomial
DifferentialOperatorTwo	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^DifferentialOperatorTwo::DifferentialOperatorTwo($/;"	f	class:polynomial::DifferentialOperatorTwo
DifferentialOperatorTwo	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^DifferentialOperatorTwo::DifferentialOperatorTwo():$/;"	f	class:polynomial::DifferentialOperatorTwo
DifferentialOperatorTwo	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.h	/^class DifferentialOperatorTwo {$/;"	c	namespace:polynomial
Dim	src/Algorithms/.PartBunch.h	/^    enum { Dim = Dimension };$/;"	e	enum:PartBunch::__anon80
Dim	src/PartBunch/Binning/test/alpine/BinningLandauDamping.cpp	/^constexpr unsigned Dim = 3;$/;"	v
Dim	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^constexpr unsigned Dim          = DIM;$/;"	v
Dim	src/PartBunch/datatypes.h	/^constexpr unsigned Dim = 3;$/;"	v
Dim	tests/ippl_src/AppTypes/Chsr-2.cpp	/^const unsigned Dim = 6;$/;"	v
Dim	tests/ippl_src/AppTypes/Operators.cpp	/^constexpr unsigned int Dim = 2;$/;"	v
Dim	tests/ippl_src/AppTypes/Vektor.cpp	/^constexpr unsigned int Dim = 3;$/;"	v
Dim	tests/ippl_src/AppTypes/VektorTz.cpp	/^const unsigned Dim = 2;$/;"	v
Dim	tests/ippl_src/Field/BCond.cpp	/^constexpr unsigned Dim = 2;$/;"	v
Dim	tests/ippl_src/Field/Field.cpp	/^constexpr unsigned Dim = 2;$/;"	v
Dim	tests/ippl_src/Index/Index.cpp	/^constexpr unsigned Dim = 2;$/;"	v
Dim3	tests/ippl_src/Meshes/Average.cpp	/^const unsigned Dim3 = 3;$/;"	v
Dimension	src/Algorithms/.PartBunchBase.h	/^    static const unsigned Dimension = Dim;$/;"	m	class:PartBunch
DirectChannel	src/Channels/DirectChannel.h	/^class DirectChannel: public Channel {$/;"	c
DirectChannel	src/Channels/DirectChannel.h	/^inline DirectChannel::DirectChannel(const DirectChannel &rhs):$/;"	f	class:DirectChannel
DirectChannel	src/Channels/DirectChannel.h	/^inline DirectChannel::DirectChannel(double &value):$/;"	f	class:DirectChannel
Directory	src/AbstractObjects/Directory.cpp	/^Directory::Directory():$/;"	f	class:Directory
Directory	src/AbstractObjects/Directory.h	/^class Directory {$/;"	c
Distribution	src/Distribution/Distribution.cpp	/^Distribution::Distribution()$/;"	f	class:Distribution
Distribution	src/Distribution/Distribution.cpp	/^Distribution::Distribution(const std::string& name, Distribution* parent)$/;"	f	class:Distribution
Distribution	src/Distribution/Distribution.h	/^class Distribution : public Definition {$/;"	c
DistributionInfo	src/Algorithms/ParallelTracker.cpp	/^struct DistributionInfo {$/;"	s	file:
DistributionMoments	src/Algorithms/DistributionMoments.cpp	/^DistributionMoments::DistributionMoments() {$/;"	f	class:DistributionMoments
DistributionMoments	src/Algorithms/DistributionMoments.h	/^class DistributionMoments {$/;"	c
DistributionMomentsTest	tests/classic_src/Algorithms/DistributionMomentsTestFixture.h	/^class DistributionMomentsTest: public ::testing::Test {$/;"	c
DistributionType	src/Distribution/Distribution.h	/^enum class DistributionType : short { NODIST = -1, GAUSS, MULTIVARIATEGAUSS, FLATTOP, FROMFILE };$/;"	c
Div	src/Expressions/Expressions.cpp	/^    double Div(double a, double b) {$/;"	f	namespace:Expressions
DivideError	src/Utilities/DivideError.cpp	/^DivideError::DivideError(const DivideError &rhs):$/;"	f	class:DivideError
DivideError	src/Utilities/DivideError.cpp	/^DivideError::DivideError(const std::string &method):$/;"	f	class:DivideError
DivideError	src/Utilities/DivideError.h	/^class DivideError: public ArithmeticError {$/;"	c
DomainError	src/Utilities/DomainError.cpp	/^DomainError::DomainError(const DomainError &rhs):$/;"	f	class:DomainError
DomainError	src/Utilities/DomainError.cpp	/^DomainError::DomainError(const std::string &meth):$/;"	f	class:DomainError
DomainError	src/Utilities/DomainError.h	/^class DomainError: public ArithmeticError {$/;"	c
Double	src/Utilities/MSLang.cpp	/^    const std::string Function::Double  = "(-?[0-9]+\\\\.?[0-9]*([Ee][+-]?[0-9]+)?)";$/;"	m	class:mslang::Function	file:
Double	src/Utilities/MSLang.h	/^        static const std::string Double;$/;"	m	struct:mslang::Function
DrInv_m	src/PartBunch/PartBunch.hpp	/^    double DrInv_m;$/;"	m	class:PartBunch
Drift	src/AbsBeamline/Drift.cpp	/^Drift::Drift():$/;"	f	class:Drift
Drift	src/AbsBeamline/Drift.cpp	/^Drift::Drift(const Drift &right):$/;"	f	class:Drift
Drift	src/AbsBeamline/Drift.cpp	/^Drift::Drift(const std::string &name):$/;"	f	class:Drift
Drift	src/AbsBeamline/Drift.h	/^class Drift : public Component {$/;"	c
DriftRep	src/BeamlineCore/DriftRep.cpp	/^DriftRep::DriftRep():$/;"	f	class:DriftRep
DriftRep	src/BeamlineCore/DriftRep.cpp	/^DriftRep::DriftRep(const DriftRep &right):$/;"	f	class:DriftRep
DriftRep	src/BeamlineCore/DriftRep.cpp	/^DriftRep::DriftRep(const std::string &name):$/;"	f	class:DriftRep
DriftRep	src/BeamlineCore/DriftRep.h	/^class DriftRep: public Drift {$/;"	c
DumpEMFields	src/BasicActions/DumpEMFields.cpp	/^DumpEMFields::DumpEMFields() :$/;"	f	class:DumpEMFields
DumpEMFields	src/BasicActions/DumpEMFields.cpp	/^DumpEMFields::DumpEMFields(const std::string& name, DumpEMFields* parent):$/;"	f	class:DumpEMFields
DumpEMFields	src/BasicActions/DumpEMFields.h	/^class DumpEMFields: public Action {$/;"	c
DumpEMFieldsTest	tests/opal_src/BasicActions/DumpEMFieldsTest.cpp	/^namespace DumpEMFieldsTest {$/;"	n	file:
DumpFields	src/BasicActions/DumpFields.cpp	/^DumpFields::DumpFields() :$/;"	f	class:DumpFields
DumpFields	src/BasicActions/DumpFields.cpp	/^DumpFields::DumpFields(const std::string& name, DumpFields* parent):$/;"	f	class:DumpFields
DumpFields	src/BasicActions/DumpFields.h	/^class DumpFields: public Action {$/;"	c
DumpFrame	src/Utilities/Options.h	/^enum class DumpFrame : unsigned short { GLOBAL, BUNCH_MEAN, REFERENCE };$/;"	c
DvDr_m	src/AbsBeamline/RFCavity.h	/^    std::unique_ptr<double[]> DvDr_m;$/;"	m	class:RFCavity
E	src/Fields/EMField.h	/^    EVector E;$/;"	m	class:EBVectors
E	src/PartBunch/Binning/test/alpine/ParticleContainer.hpp	/^        typename Base::particle_position_type E;  \/\/ electric field at particle position$/;"	m	class:ParticleContainer
E	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^        E;  \/\/ electric field at particle position$/;"	m	class:ChargedParticles	file:
E	src/PartBunch/ParticleContainer.hpp	/^    typename Base::particle_position_type E;$/;"	m	class:ParticleContainer
EANGLE	src/Elements/OpalMultipoleT.h	/^        EANGLE,          \/\/ Entrance angle$/;"	e	enum:OpalMultipoleT::__anon48
EBDUMP	src/BasicActions/Option.cpp	/^        EBDUMP,$/;"	e	enum:__anon24::__anon25	file:
EBVectors	src/Fields/EMField.cpp	/^EBVectors::EBVectors(const EVector &eField, const BVector &bField):$/;"	f	class:EBVectors
EBVectors	src/Fields/EMField.h	/^class EBVectors {$/;"	c
EBfield	src/AbsBeamline/Component.h	/^inline EBVectors Component::EBfield(const Point3D& P) const {$/;"	f	class:Component
EBfield	src/AbsBeamline/Component.h	/^inline EBVectors Component::EBfield(const Point3D& P, double t) const {$/;"	f	class:Component
EBfield	src/Fields/EMField.cpp	/^EBVectors EMField::EBfield(const Point3D &X) const {$/;"	f	class:EMField
EBfield	src/Fields/EMField.cpp	/^EBVectors EMField::EBfield(const Point3D &X, double) const {$/;"	f	class:EMField
ECHO	src/BasicActions/Option.cpp	/^        ECHO,$/;"	e	enum:__anon24::__anon25	file:
EFDMag_m	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    Field<double, Dim> EFDMag_m;$/;"	m	class:ChargedParticles	file:
EFD_m	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    Field<Vector<double, Dim>, Dim> EFD_m;$/;"	m	class:ChargedParticles	file:
ELECTRON	src/Physics/ParticleProperties.h	/^    ELECTRON,$/;"	m	class:ParticleType
ELEMEDGE	src/Elements/OpalElement.h	/^        ELEMEDGE,       \/\/ The position of the element (in path length)$/;"	e	enum:OpalElement::__anon37
ELEMENT	src/AbstractObjects/AttributeHandler.h	/^        ELEMENT,$/;"	e	enum:AttributeHandler::OwnerType
ELLIPTICAL	src/AbsBeamline/ElementBase.h	/^    ELLIPTICAL,$/;"	m	class:ApertureType
ELLIPTICAL_DOMAIN_H	src/.Solvers/EllipticDomain.h	29;"	d
EMASS	src/Physics/Physics.h	/^    constexpr double EMASS      = 9.1093837015e-31; \/\/ kg$/;"	m	namespace:Physics
EMField	src/Fields/EMField.cpp	/^EMField::EMField()$/;"	f	class:EMField
EMField	src/Fields/EMField.cpp	/^EMField::EMField(const EMField &)$/;"	f	class:EMField
EMField	src/Fields/EMField.h	/^class EMField {$/;"	c
EMITTED	src/Distribution/Distribution.cpp	/^           CORRZ, CORRT, SIGMAT, TPULSEFWHM, TRISE, TFALL, FTOSCAMPLITUDE, FTOSCPERIODS, EMITTED, SIZE };$/;"	e	enum:DISTRIBUTION::__anon65	file:
ENABLEHDF5	src/BasicActions/Option.cpp	/^        ENABLEHDF5,$/;"	e	enum:__anon24::__anon25	file:
ENABLEVTK	src/BasicActions/Option.cpp	/^        ENABLEVTK,$/;"	e	enum:__anon24::__anon25	file:
END	src/Lines/SequenceMember.h	/^        END       = 5,$/;"	e	enum:SequenceMember::PositionType
ENDFIELDMODEL_ASYMMETRICENGE_H_	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	29;"	d
ENDFIELDMODEL_ENDFIELDMODEL_H_	src/AbsBeamline/EndFieldModel/EndFieldModel.h	29;"	d
ENDFIELDMODEL_ENGE_H_	src/AbsBeamline/EndFieldModel/Enge.h	29;"	d
ENDFIELDMODEL_TANH_H_	src/AbsBeamline/EndFieldModel/Tanh.h	29;"	d
ENDIAN	src/Utilities/SDDSParser/data.hpp	/^                        , ENDIAN$/;"	e	enum:SDDS::data::attributes
END_LENGTH	src/Elements/OpalVerticalFFAMagnet.h	/^        END_LENGTH,$/;"	e	enum:OpalVerticalFFAMagnet::__anon38
END_NORMAL_X	src/Elements/OpalOffset/OpalGlobalCartesianOffset.h	/^        END_NORMAL_X,$/;"	e	enum:OpalOffset::OpalGlobalCartesianOffset::__anon44
END_NORMAL_X	src/Elements/OpalOffset/OpalLocalCartesianOffset.h	/^        END_NORMAL_X,$/;"	e	enum:OpalOffset::OpalLocalCartesianOffset::__anon45
END_NORMAL_Y	src/Elements/OpalOffset/OpalGlobalCartesianOffset.h	/^        END_NORMAL_Y,$/;"	e	enum:OpalOffset::OpalGlobalCartesianOffset::__anon44
END_NORMAL_Y	src/Elements/OpalOffset/OpalLocalCartesianOffset.h	/^        END_NORMAL_Y,$/;"	e	enum:OpalOffset::OpalLocalCartesianOffset::__anon45
END_POSITION_X	src/Elements/OpalOffset/OpalGlobalCartesianOffset.h	/^        END_POSITION_X = COMMON,$/;"	e	enum:OpalOffset::OpalGlobalCartesianOffset::__anon44
END_POSITION_X	src/Elements/OpalOffset/OpalLocalCartesianOffset.h	/^        END_POSITION_X = COMMON,$/;"	e	enum:OpalOffset::OpalLocalCartesianOffset::__anon45
END_POSITION_Y	src/Elements/OpalOffset/OpalGlobalCartesianOffset.h	/^        END_POSITION_Y,$/;"	e	enum:OpalOffset::OpalGlobalCartesianOffset::__anon44
END_POSITION_Y	src/Elements/OpalOffset/OpalLocalCartesianOffset.h	/^        END_POSITION_Y,$/;"	e	enum:OpalOffset::OpalLocalCartesianOffset::__anon45
ENERGY	src/Structure/Beam.cpp	/^        ENERGY,    \/\/ The particle energy in GeV$/;"	e	enum:__anon63::__anon64	file:
EOL	src/Algorithms/OrbitThreader.cpp	43;"	d	file:
EPS	src/Structure/BoundaryGeometry.cpp	/^constexpr double EPS = 10e-15;$/;"	v
ERROR_HANDLER_HPP_	src/Utilities/SDDSParser/error_handler.hpp	18;"	d
EVERYTHINGFINE	src/Algorithms/OrbitThreader.cpp	44;"	d	file:
EVector	src/Fields/EMField.cpp	/^EVector::EVector(double Exx, double Eyy, double Ezz)$/;"	f	class:EVector
EVector	src/Fields/EMField.h	/^class EVector {$/;"	c
EXPRESSION_H	src/Expressions/Expressions.h	2;"	d
E_m	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    VField_t<T, Dim> E_m;$/;"	m	class:FieldContainer
E_m	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    VField_t<T, Dim> *E_m;$/;"	m	class:FieldSolver
E_m	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        VField_t<T, Dim>* E_m;$/;"	m	class:LoadBalancer
E_m	src/PartBunch/FieldContainer.hpp	/^    VField_t<T, Dim> E_m;$/;"	m	class:FieldContainer
E_m	src/PartBunch/FieldSolver.hpp	/^    VField_t<T, Dim>* E_m;$/;"	m	class:FieldSolver
E_m	src/PartBunch/LoadBalancer.hpp	/^    VField_t<T, Dim>* E_m;$/;"	m	class:LoadBalancer
E_ryd	src/Physics/Physics.h	/^    constexpr double E_ryd      = 13.605693122994e-9;$/;"	m	namespace:Physics
EarlyLeaveException	src/Utilities/EarlyLeaveException.cpp	/^EarlyLeaveException::EarlyLeaveException(const EarlyLeaveException &rhs):$/;"	f	class:EarlyLeaveException
EarlyLeaveException	src/Utilities/EarlyLeaveException.cpp	/^EarlyLeaveException::EarlyLeaveException(const std::string &meth, const std::string &msg):$/;"	f	class:EarlyLeaveException
EarlyLeaveException	src/Utilities/EarlyLeaveException.h	/^class EarlyLeaveException: public ClassicException {$/;"	c
Echo	src/BasicActions/Echo.cpp	/^Echo::Echo() : Action(1, "ECHO", "The \\"ECHO\\" statement sends a message to the ECHO file.") {$/;"	f	class:Echo
Echo	src/BasicActions/Echo.cpp	/^Echo::Echo(const std::string& name, Echo* parent) : Action(name, parent) {$/;"	f	class:Echo
Echo	src/BasicActions/Echo.h	/^class Echo: public Action {$/;"	c
Edge_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef Cell                                                  Edge_t;$/;"	t	file:
Ef	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> Ef(size_t i) {$/;"	f	class:PartBunch
Efield	src/AbsBeamline/Component.h	/^inline EVector Component::Efield(const Point3D& P) const {$/;"	f	class:Component
Efield	src/AbsBeamline/Component.h	/^inline EVector Component::Efield(const Point3D& P, double t) const {$/;"	f	class:Component
Efield	src/Fields/ConstEzField.cpp	/^EVector ConstEzField::Efield(const Point3D &) const {$/;"	f	class:ConstEzField
Efield	src/Fields/ConstEzField.cpp	/^EVector ConstEzField::Efield(const Point3D &\/*P*\/, double) const {$/;"	f	class:ConstEzField
Efield	src/Fields/EMField.cpp	/^EVector EMField::Efield(const Point3D &) const {$/;"	f	class:EMField
Efield	src/Fields/EMField.cpp	/^EVector EMField::Efield(const Point3D &X, double) const {$/;"	f	class:EMField
Efield	src/Fields/OscillatingField.h	/^EVector OscillatingField<Field>::Efield(const Point3D &p) const$/;"	f	class:OscillatingField
Efield	src/Fields/OscillatingField.h	/^EVector OscillatingField<Field>::Efield(const Point3D &p, double t) const$/;"	f	class:OscillatingField
Element	src/AbstractObjects/Element.cpp	/^Element::Element(const std::string &name, Element *parent):$/;"	f	class:Element
Element	src/AbstractObjects/Element.cpp	/^Element::Element(int size, const char *name, const char *help):$/;"	f	class:Element
Element	src/AbstractObjects/Element.h	/^class Element: public Object {$/;"	c
ElementBase	src/AbsBeamline/ElementBase.cpp	/^ElementBase::ElementBase() : ElementBase("") {$/;"	f	class:ElementBase
ElementBase	src/AbsBeamline/ElementBase.cpp	/^ElementBase::ElementBase(const ElementBase& right)$/;"	f	class:ElementBase
ElementBase	src/AbsBeamline/ElementBase.cpp	/^ElementBase::ElementBase(const std::string& name)$/;"	f	class:ElementBase
ElementBase	src/AbsBeamline/ElementBase.h	/^class ElementBase : public RCObject {$/;"	c
ElementList_t	src/AbsBeamline/SpecificElementVisitor.h	/^    typedef std::list<const ELEM*> ElementList_t;$/;"	t	class:SpecificElementVisitor
ElementList_t	src/AbsBeamline/SpecificElementVisitor.h	/^    typedef std::list<const ELEM*> ElementList_t;$/;"	t	struct:CastsTrait
ElementList_t	src/AbsBeamline/SpecificElementVisitor.h	/^    typedef std::list<const ELEM1*> ElementList_t;$/;"	t	struct:CastsTrait
ElementPositionWriter	src/Structure/ElementPositionWriter.cpp	/^ElementPositionWriter::ElementPositionWriter(const std::string& fname)$/;"	f	class:ElementPositionWriter
ElementPositionWriter	src/Structure/ElementPositionWriter.h	/^class ElementPositionWriter : public SDDSWriter {$/;"	c
ElementType	src/AbsBeamline/ElementBase.h	/^enum class ElementType : unsigned short {$/;"	c
Ellipse	src/Utilities/MSLang/Ellipse.h	/^        Ellipse():$/;"	f	struct:mslang::Ellipse
Ellipse	src/Utilities/MSLang/Ellipse.h	/^        Ellipse(const Ellipse &right):$/;"	f	struct:mslang::Ellipse
Ellipse	src/Utilities/MSLang/Ellipse.h	/^    struct Ellipse: public Base {$/;"	s	namespace:mslang
EllipticDomain	src/.Solvers/EllipticDomain.cpp	/^EllipticDomain::EllipticDomain(BoundaryGeometry *bgeom, IntVector_t<double, 3> nr, Vector_t<double, 3> hr,$/;"	f	class:EllipticDomain
EllipticDomain	src/.Solvers/EllipticDomain.h	/^class EllipticDomain : public RegularDomain {$/;"	c
EllipticPointList_t	src/.Solvers/EllipticDomain.h	/^    typedef std::multimap<int, double> EllipticPointList_t;$/;"	t	class:EllipticDomain
ElmPtr	src/Beamlines/ElmPtr.cpp	/^ElmPtr::ElmPtr():$/;"	f	class:ElmPtr
ElmPtr	src/Beamlines/ElmPtr.cpp	/^ElmPtr::ElmPtr(ElementBase *elem):$/;"	f	class:ElmPtr
ElmPtr	src/Beamlines/ElmPtr.cpp	/^ElmPtr::ElmPtr(const ElmPtr &rhs):$/;"	f	class:ElmPtr
ElmPtr	src/Beamlines/ElmPtr.h	/^class ElmPtr {$/;"	c
EmissionModel	src/Distribution/Distribution.h	/^    enum class EmissionModel : unsigned short { NONE, ASTRA, NONEQUIL };$/;"	c	class:Distribution
EndFieldModel	src/AbsBeamline/EndFieldModel/EndFieldModel.h	/^class EndFieldModel {$/;"	c	namespace:endfieldmodel
Enge	src/AbsBeamline/EndFieldModel/Enge.cpp	/^Enge::Enge(const std::vector<double> a, double x0, double lambda) $/;"	f	class:endfieldmodel::Enge
Enge	src/AbsBeamline/EndFieldModel/Enge.h	/^    Enge() : _a(), _lambda(0.) {setEngeDiffIndices(10);}$/;"	f	class:endfieldmodel::Enge
Enge	src/AbsBeamline/EndFieldModel/Enge.h	/^class Enge : public EndFieldModel {$/;"	c	namespace:endfieldmodel
EngeCoefs_entry_m	src/Fields/FM1DProfile2.h	/^    double *EngeCoefs_entry_m;$/;"	m	class:FM1DProfile2
EngeCoefs_exit_m	src/Fields/FM1DProfile2.h	/^    double *EngeCoefs_exit_m;$/;"	m	class:FM1DProfile2
Entry	src/BeamlineCore/DriftRep.cpp	/^    struct Entry {$/;"	s	namespace:__anon75	file:
Entry	src/BeamlineCore/MonitorRep.cpp	/^    struct Entry {$/;"	s	namespace:__anon74	file:
Entry	src/BeamlineCore/MultipoleRep.cpp	/^    struct Entry {$/;"	s	namespace:__anon70	file:
Entry	src/BeamlineCore/ProbeRep.cpp	/^    struct Entry {$/;"	s	namespace:__anon72	file:
Entry	src/BeamlineCore/RFCavityRep.cpp	/^    struct Entry {$/;"	s	namespace:__anon71	file:
Entry	src/BeamlineCore/SolenoidRep.cpp	/^    struct Entry {$/;"	s	namespace:__anon76	file:
Entry	src/BeamlineCore/TravelingWaveRep.cpp	/^    struct Entry {$/;"	s	namespace:__anon73	file:
Eq	src/Expressions/Expressions.cpp	/^    bool Eq(double a, double b) {$/;"	f	namespace:Expressions
Estimate	src/PartBunch/Binning/test/alpine/BinningLandauDampingManager.h	/^  struct Estimate{$/;"	s	struct:CustomDistributionFunctions
Etmp	src/PartBunch/ParticleContainer.hpp	/^    typename Base::particle_position_type Etmp; \/\/ TODO: might not need this...$/;"	m	class:ParticleContainer
Etmp_m	src/PartBunch/PartBunch.hpp	/^    std::shared_ptr<VField_t<T, Dim>> Etmp_m;$/;"	m	class:PartBunch
Euclid3D	src/BeamlineGeometry/Euclid3D.cpp	/^Euclid3D::Euclid3D$/;"	f	class:Euclid3D
Euclid3D	src/BeamlineGeometry/Euclid3D.cpp	/^Euclid3D::Euclid3D(const Vector3D &vec, const Rotation3D &rot):$/;"	f	class:Euclid3D
Euclid3D	src/BeamlineGeometry/Euclid3D.h	/^class Euclid3D {$/;"	c
Euclid3D	src/BeamlineGeometry/Euclid3D.h	/^inline Euclid3D::Euclid3D():$/;"	f	class:Euclid3D
Euclid3DGeometry	src/BeamlineGeometry/Euclid3DGeometry.cpp	/^Euclid3DGeometry::Euclid3DGeometry(Euclid3D transformation)$/;"	f	class:Euclid3DGeometry
Euclid3DGeometry	src/BeamlineGeometry/Euclid3DGeometry.cpp	/^Euclid3DGeometry::Euclid3DGeometry(const Euclid3DGeometry &rhs)$/;"	f	class:Euclid3DGeometry
Euclid3DGeometry	src/BeamlineGeometry/Euclid3DGeometry.h	/^class Euclid3DGeometry : public BGeometryBase {$/;"	c
Ex	src/Fields/EMField.h	/^    double Ex, Ey, Ez;$/;"	m	class:EVector
Expression	src/Utilities/RegularExpression.cpp	/^class RegularExpression::Expression: public regex_t {};$/;"	c	class:RegularExpression	file:
Expressions	src/AbstractObjects/Expressions.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/AAutomatic.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/ABinary.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/AColumn.cpp	/^namespace Expressions {$/;"	n	file:
Expressions	src/Expressions/AColumn.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/ADeferred.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/AList.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/ARefExpr.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/ARow.cpp	/^namespace Expressions {$/;"	n	file:
Expressions	src/Expressions/ARow.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/ASUnary.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/ATable.cpp	/^namespace Expressions {$/;"	n	file:
Expressions	src/Expressions/ATable.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/AUnary.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/AValue.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/Expressions.cpp	/^namespace Expressions {$/;"	n	file:
Expressions	src/Expressions/Expressions.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/Indexer.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/SAutomatic.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/SBinary.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/SCell.cpp	/^namespace Expressions {$/;"	n	file:
Expressions	src/Expressions/SCell.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/SConstant.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/SDeferred.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/SHash.cpp	/^namespace Expressions {$/;"	n	file:
Expressions	src/Expressions/SHash.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/SNull.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/SRefAttr.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/SRefExpr.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/SUnary.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/SValue.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/TFind.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/TFunction0.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/TFunction1.h	/^namespace Expressions {$/;"	n
Expressions	src/Expressions/TFunction2.h	/^namespace Expressions {$/;"	n
Ey	src/Fields/EMField.h	/^    double Ex, Ey, Ez;$/;"	m	class:EVector
Ez	src/Fields/ConstEzField.h	/^    double Ez;$/;"	m	class:ConstEzField
Ez	src/Fields/EMField.h	/^    double Ex, Ey, Ez;$/;"	m	class:EVector
F	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^void  SquarePolynomialVector::F(const MVector<double>& point,$/;"	f	class:interpolation::SquarePolynomialVector
F	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^void  SquarePolynomialVector::F(const double*   point,    double* value)          const$/;"	f	class:interpolation::SquarePolynomialVector
FAST	src/Elements/OpalCavity.h	/^        FAST,           \/\/ Faster but less accurate$/;"	e	enum:OpalCavity::__anon34
FAST	src/Elements/OpalSolenoid.h	/^        FAST,         \/\/ Faster but less accurate$/;"	e	enum:OpalSolenoid::__anon49
FAST	src/Elements/OpalTravelingWave.h	/^        FAST,           \/\/ Faster but less accurate$/;"	e	enum:OpalTravelingWave::__anon46
FCall	src/Utilities/MSLang.cpp	/^    const std::string Function::FCall   = "([a-z_]*)\\\\((.*)";$/;"	m	class:mslang::Function	file:
FCall	src/Utilities/MSLang.h	/^        static const std::string FCall;$/;"	m	struct:mslang::Function
FFT	src/Structure/FieldSolverCmd.h	/^enum class FieldSolverCmdType : short { NONE = -1, FFT = 0 };$/;"	m	class:FieldSolverCmdType
FFTPoissonSolver	src/.Solvers/FFTPoissonSolver.cpp	/^FFTPoissonSolver::FFTPoissonSolver($/;"	f	class:FFTPoissonSolver
FFTPoissonSolver	src/.Solvers/FFTPoissonSolver.cpp	/^FFTPoissonSolver::FFTPoissonSolver(PartBunch& beam, std::string greensFunction)$/;"	f	class:FFTPoissonSolver
FFTPoissonSolver	src/.Solvers/FFTPoissonSolver.h	/^class FFTPoissonSolver : public PoissonSolver {$/;"	c
FFT_POISSON_SOLVER_H_	src/.Solvers/FFTPoissonSolver.h	22;"	d
FFT_t	src/.Solvers/FFTPoissonSolver.h	/^    typedef FFT<RCTransform, 3, double> FFT_t;$/;"	t	class:FFTPoissonSolver
FGEOM	src/Structure/BoundaryGeometry.h	/^        FGEOM,     \/\/ file holding the geometry$/;"	e	enum:BoundaryGeometry::__anon61
FIELDASSIGNOPTIMIZATION	src/.Solvers/FFTPoissonSolver.h	/^    void mirrorRhoField() FIELDASSIGNOPTIMIZATION;$/;"	m	class:FFTPoissonSolver
FIELDASSIGNOPTIMIZATION	src/.Solvers/FFTPoissonSolver.h	25;"	d
FIELDASSIGNOPTIMIZATION	src/.Solvers/FFTPoissonSolver.h	27;"	d
FIELDSOLVER	src/Structure/FieldSolverCmd.h	/^namespace FIELDSOLVER {$/;"	n	class:FieldSolverCmdType
FIELDSOLVER	src/Track/TrackRun.cpp	/^        FIELDSOLVER,       \/\/ The field solver attached$/;"	e	enum:TRACKRUN::__anon32	file:
FIELD_INDEX	src/Elements/OpalVerticalFFAMagnet.h	/^        FIELD_INDEX,$/;"	e	enum:OpalVerticalFFAMagnet::__anon38
FIELD_LENGTH	src/Utilities/SDDSParser/array.hpp	/^                         , FIELD_LENGTH$/;"	e	enum:SDDS::array::attributes
FIELD_LENGTH	src/Utilities/SDDSParser/column.hpp	/^                        , FIELD_LENGTH$/;"	e	enum:SDDS::column::attributes
FILENAME	src/Utilities/SDDSParser/associate.hpp	/^                        , FILENAME$/;"	e	enum:SDDS::associate::attributes
FILENAME	src/Utilities/SDDSParser/include.hpp	/^        enum attributes { FILENAME$/;"	e	enum:SDDS::include::attributes
FILE_DEF_HPP_	src/Utilities/SDDSParser/file_def.hpp	18;"	d
FILE_HPP_	src/Utilities/SDDSParser/file.hpp	18;"	d
FILE_NAME	src/BasicActions/DumpEMFields.h	/^        FILE_NAME,$/;"	e	enum:DumpEMFields::__anon29
FILE_NAME	src/BasicActions/DumpFields.h	/^        FILE_NAME,$/;"	e	enum:DumpFields::__anon26
FIXEDFFTLOWPASS	src/Utilities/OpalFilter.h	/^        FIXEDFFTLOWPASS,$/;"	m	class:OpalFilter::FilterType
FIXED_ROW_COUNT	src/Utilities/SDDSParser/data.hpp	/^                        , FIXED_ROW_COUNT$/;"	e	enum:SDDS::data::attributes
FIXED_VALUE	src/Utilities/SDDSParser/parameter.hpp	/^                        , FIXED_VALUE$/;"	e	enum:SDDS::parameter::attributes
FLATTOP	src/Distribution/Distribution.h	/^enum class DistributionType : short { NODIST = -1, GAUSS, MULTIVARIATEGAUSS, FLATTOP, FROMFILE };$/;"	m	class:DistributionType
FLIPX	src/Distribution/LaserProfile.h	/^    enum { FLIPX = 1, FLIPY = 2, ROTATE90 = 4, ROTATE180 = 8, ROTATE270 = 16 };$/;"	e	enum:LaserProfile::__anon66
FLIPY	src/Distribution/LaserProfile.h	/^    enum { FLIPX = 1, FLIPY = 2, ROTATE90 = 4, ROTATE180 = 8, ROTATE270 = 16 };$/;"	e	enum:LaserProfile::__anon66
FLOAT	src/Utilities/SDDSParser/ast.hpp	/^        enum datatype { FLOAT$/;"	e	enum:SDDS::ast::datatype
FL_m	src/AbstractObjects/OpalData.cpp	/^    FieldLayout_t<3>* FL_m;$/;"	m	struct:OpalDataImpl	file:
FM1DDynamic	src/Fields/FM1DDynamic.cpp	/^FM1DDynamic::FM1DDynamic(std::string aFilename) : Fieldmap(aFilename) {$/;"	f	class:FM1DDynamic
FM1DDynamic	src/Fields/FM1DDynamic.h	/^class FM1DDynamic: public Fieldmap {$/;"	c
FM1DDynamic_fast	src/Fields/FM1DDynamic_fast.cpp	/^FM1DDynamic_fast::FM1DDynamic_fast(std::string aFilename) : Fieldmap(aFilename), accuracy_m(0) {$/;"	f	class:FM1DDynamic_fast
FM1DDynamic_fast	src/Fields/FM1DDynamic_fast.h	/^class FM1DDynamic_fast: public Fieldmap {$/;"	c
FM1DElectroStatic	src/Fields/FM1DElectroStatic.cpp	/^FM1DElectroStatic::FM1DElectroStatic(std::string aFilename) : Fieldmap(aFilename) {$/;"	f	class:FM1DElectroStatic
FM1DElectroStatic	src/Fields/FM1DElectroStatic.h	/^class FM1DElectroStatic: public Fieldmap {$/;"	c
FM1DElectroStatic_fast	src/Fields/FM1DElectroStatic_fast.cpp	/^FM1DElectroStatic_fast::FM1DElectroStatic_fast(std::string aFilename)$/;"	f	class:FM1DElectroStatic_fast
FM1DElectroStatic_fast	src/Fields/FM1DElectroStatic_fast.h	/^class FM1DElectroStatic_fast: public Fieldmap {$/;"	c
FM1DMagnetoStatic	src/Fields/FM1DMagnetoStatic.cpp	/^FM1DMagnetoStatic::FM1DMagnetoStatic(std::string aFilename) : Fieldmap(aFilename) {$/;"	f	class:FM1DMagnetoStatic
FM1DMagnetoStatic	src/Fields/FM1DMagnetoStatic.h	/^class FM1DMagnetoStatic: public Fieldmap {$/;"	c
FM1DMagnetoStatic_fast	src/Fields/FM1DMagnetoStatic_fast.cpp	/^FM1DMagnetoStatic_fast::FM1DMagnetoStatic_fast(std::string aFilename) : Fieldmap(aFilename) {$/;"	f	class:FM1DMagnetoStatic_fast
FM1DMagnetoStatic_fast	src/Fields/FM1DMagnetoStatic_fast.h	/^class FM1DMagnetoStatic_fast: public Fieldmap {$/;"	c
FM1DProfile1	src/Fields/FM1DProfile1.cpp	/^FM1DProfile1::FM1DProfile1(std::string aFilename)$/;"	f	class:FM1DProfile1
FM1DProfile1	src/Fields/FM1DProfile1.h	/^class FM1DProfile1: public Fieldmap {$/;"	c
FM1DProfile2	src/Fields/FM1DProfile2.cpp	/^FM1DProfile2::FM1DProfile2(std::string aFilename)$/;"	f	class:FM1DProfile2
FM1DProfile2	src/Fields/FM1DProfile2.h	/^class FM1DProfile2: public Fieldmap {$/;"	c
FM2DDynamic	src/Fields/FM2DDynamic.cpp	/^FM2DDynamic::FM2DDynamic(std::string aFilename)$/;"	f	class:FM2DDynamic
FM2DDynamic	src/Fields/FM2DDynamic.h	/^class FM2DDynamic: public Fieldmap {$/;"	c
FM2DElectroStatic	src/Fields/FM2DElectroStatic.cpp	/^FM2DElectroStatic::FM2DElectroStatic(std::string aFilename)$/;"	f	class:FM2DElectroStatic
FM2DElectroStatic	src/Fields/FM2DElectroStatic.h	/^class FM2DElectroStatic: public Fieldmap {$/;"	c
FM2DMagnetoStatic	src/Fields/FM2DMagnetoStatic.cpp	/^FM2DMagnetoStatic::FM2DMagnetoStatic(std::string aFilename)$/;"	f	class:FM2DMagnetoStatic
FM2DMagnetoStatic	src/Fields/FM2DMagnetoStatic.h	/^class FM2DMagnetoStatic: public Fieldmap {$/;"	c
FM3DDynamic	src/Fields/FM3DDynamic.cpp	/^FM3DDynamic::FM3DDynamic(std::string aFilename)$/;"	f	class:FM3DDynamic
FM3DDynamic	src/Fields/FM3DDynamic.h	/^class FM3DDynamic: public Fieldmap {$/;"	c
FM3DH5Block	src/Fields/FM3DH5Block.cpp	/^FM3DH5Block::FM3DH5Block(std::string aFilename) : Fieldmap(aFilename) {$/;"	f	class:FM3DH5Block
FM3DH5Block	src/Fields/FM3DH5Block.h	/^class FM3DH5Block: public FM3DH5BlockBase {$/;"	c
FM3DH5BlockBase	src/Fields/FM3DH5BlockBase.h	/^    FM3DH5BlockBase ($/;"	f	class:FM3DH5BlockBase
FM3DH5BlockBase	src/Fields/FM3DH5BlockBase.h	/^class FM3DH5BlockBase: virtual public Fieldmap {$/;"	c
FM3DH5Block_nonscale	src/Fields/FM3DH5Block_nonscale.cpp	/^FM3DH5Block_nonscale::FM3DH5Block_nonscale(std::string aFilename)$/;"	f	class:FM3DH5Block_nonscale
FM3DH5Block_nonscale	src/Fields/FM3DH5Block_nonscale.h	/^class FM3DH5Block_nonscale: public FM3DH5BlockBase {$/;"	c
FM3DMagnetoStatic	src/Fields/FM3DMagnetoStatic.cpp	/^FM3DMagnetoStatic::FM3DMagnetoStatic(std::string aFilename)$/;"	f	class:FM3DMagnetoStatic
FM3DMagnetoStatic	src/Fields/FM3DMagnetoStatic.h	/^class FM3DMagnetoStatic: public Fieldmap {$/;"	c
FM3DMagnetoStaticExtended	src/Fields/FM3DMagnetoStaticExtended.cpp	/^FM3DMagnetoStaticExtended::FM3DMagnetoStaticExtended(std::string aFilename)$/;"	f	class:FM3DMagnetoStaticExtended
FM3DMagnetoStaticExtended	src/Fields/FM3DMagnetoStaticExtended.h	/^class FM3DMagnetoStaticExtended: public Fieldmap {$/;"	c
FM3DMagnetoStaticH5Block	src/Fields/FM3DMagnetoStaticH5Block.cpp	/^FM3DMagnetoStaticH5Block::FM3DMagnetoStaticH5Block(std::string aFilename)$/;"	f	class:FM3DMagnetoStaticH5Block
FM3DMagnetoStaticH5Block	src/Fields/FM3DMagnetoStaticH5Block.h	/^class FM3DMagnetoStaticH5Block: public FM3DH5BlockBase {$/;"	c
FMAPFN	src/Elements/OpalCavity.h	/^        FMAPFN,         \/\/ The filename of the fieldmap$/;"	e	enum:OpalCavity::__anon34
FMAPFN	src/Elements/OpalSolenoid.h	/^        FMAPFN,       \/\/ The Field filename$/;"	e	enum:OpalSolenoid::__anon49
FMAPFN	src/Elements/OpalTravelingWave.h	/^        FMAPFN,         \/\/ The filename of the fieldmap$/;"	e	enum:OpalTravelingWave::__anon46
FMDummy	src/Fields/FMDummy.cpp	/^FMDummy::FMDummy(std::string aFilename) : Fieldmap(aFilename), zbegin_m(0.0), zend_m(-1e-3) {$/;"	f	class:FMDummy
FMDummy	src/Fields/FMDummy.h	/^class FMDummy: public Fieldmap {$/;"	c
FNAME	src/Distribution/Distribution.cpp	/^    enum { TYPE, FNAME, SIGMAX, SIGMAY, SIGMAZ, SIGMAPX, SIGMAPY, SIGMAPZ, CORR,$/;"	e	enum:DISTRIBUTION::__anon65	file:
FORMAT	tools/opal2sdds/main.cpp	/^enum FORMAT {$/;"	g	file:
FORMAT_STRING	src/Utilities/SDDSParser/array.hpp	/^                         , FORMAT_STRING$/;"	e	enum:SDDS::array::attributes
FORMAT_STRING	src/Utilities/SDDSParser/column.hpp	/^                        , FORMAT_STRING$/;"	e	enum:SDDS::column::attributes
FORMAT_STRING	src/Utilities/SDDSParser/parameter.hpp	/^                        , FORMAT_STRING$/;"	e	enum:SDDS::parameter::attributes
FREQ	src/Elements/OpalCavity.h	/^        FREQ,           \/\/ The RF frequency.$/;"	e	enum:OpalCavity::__anon34
FREQ	src/Elements/OpalTravelingWave.h	/^        FREQ,           \/\/ The RF frequency.$/;"	e	enum:OpalTravelingWave::__anon46
FREQUENCY_MODEL	src/Elements/OpalCavity.h	/^        FREQUENCY_MODEL,\/\/ time dependent frequency$/;"	e	enum:OpalCavity::__anon34
FROM	src/Lines/SequenceMember.h	/^        FROM      = 1,$/;"	e	enum:SequenceMember::PositionType
FTOSCAMPLITUDE	src/Distribution/Distribution.cpp	/^           CORRZ, CORRT, SIGMAT, TPULSEFWHM, TRISE, TFALL, FTOSCAMPLITUDE, FTOSCPERIODS, EMITTED, SIZE };$/;"	e	enum:DISTRIBUTION::__anon65	file:
FTOSCAmplitude_m	src/Distribution/Distribution.h	/^    double FTOSCAmplitude_m;$/;"	m	class:Distribution
FTOSCPERIODS	src/Distribution/Distribution.cpp	/^           CORRZ, CORRT, SIGMAT, TPULSEFWHM, TRISE, TFALL, FTOSCAMPLITUDE, FTOSCPERIODS, EMITTED, SIZE };$/;"	e	enum:DISTRIBUTION::__anon65	file:
FTOSCPeriods_m	src/Distribution/Distribution.h	/^    double FTOSCPeriods_m;$/;"	m	class:Distribution
FULL	src/BasicActions/Select.cpp	/^        FULL,    \/\/ If true, all elements are selected.$/;"	e	enum:__anon27::__anon28	file:
FUNC_EQ	src/Structure/BoundaryGeometry.cpp	62;"	d	file:
FUNC_EQ_ZERO	src/Structure/BoundaryGeometry.cpp	65;"	d	file:
FUNC_GE	src/Structure/BoundaryGeometry.cpp	100;"	d	file:
FUNC_GE_ZERO	src/Structure/BoundaryGeometry.cpp	108;"	d	file:
FUNC_GT	src/Structure/BoundaryGeometry.cpp	116;"	d	file:
FUNC_GT_ZERO	src/Structure/BoundaryGeometry.cpp	124;"	d	file:
FUNC_LE	src/Structure/BoundaryGeometry.cpp	68;"	d	file:
FUNC_LE_ZERO	src/Structure/BoundaryGeometry.cpp	76;"	d	file:
FUNC_LT	src/Structure/BoundaryGeometry.cpp	84;"	d	file:
FUNC_LT_ZERO	src/Structure/BoundaryGeometry.cpp	92;"	d	file:
FailureTester	tests/opal_test_utilities/SilenceTest.h	/^        FailureTester(SilenceTest *st):$/;"	f	class:OpalTestUtilities::FailureTester
FailureTester	tests/opal_test_utilities/SilenceTest.h	/^    class FailureTester: public ::testing::EmptyTestEventListener {$/;"	c	namespace:OpalTestUtilities
FieldContainer	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    FieldContainer(Vector_t<T, Dim>& hr, Vector_t<T, Dim>& rmin,$/;"	f	class:FieldContainer
FieldContainer	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^class FieldContainer{$/;"	c
FieldContainer	src/PartBunch/FieldContainer.hpp	/^    FieldContainer($/;"	f	class:FieldContainer
FieldContainer	src/PartBunch/FieldContainer.hpp	/^class FieldContainer {$/;"	c
FieldDimensions	src/Algorithms/ParallelTracker.h	/^    beamline_list FieldDimensions;$/;"	m	class:ParallelTracker
FieldLayout_Cell_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef CenteredFieldLayout<DIM, Mesh_t, Cell_t>              FieldLayout_Cell_t;$/;"	t	file:
FieldLayout_Edge_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef CenteredFieldLayout<DIM, Mesh_t, Edge_t>              FieldLayout_Edge_t;$/;"	t	file:
FieldLayout_Vert_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef CenteredFieldLayout<DIM, Mesh_t, Vert_t>              FieldLayout_Vert_t;$/;"	t	file:
FieldLayout_t	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^typedef ippl::FieldLayout<Dim> FieldLayout_t;$/;"	t	file:
FieldList	src/Utilities/ClassicField.h	/^typedef std::list<ClassicField> FieldList;$/;"	t
FieldSolver	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    FieldSolver(std::string solver, Field_t<Dim> *rho, VField_t<T, Dim> *E, Field<T, Dim> *phi)$/;"	f	class:FieldSolver
FieldSolver	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^class FieldSolver : public ippl::FieldSolverBase<T, Dim> {$/;"	c
FieldSolver	src/PartBunch/FieldSolver.hpp	/^    FieldSolver(std::string solver, Field_t<Dim>* rho, VField_t<T, Dim>* E, Field<T, Dim>* phi)$/;"	f	class:FieldSolver
FieldSolver	src/PartBunch/FieldSolver.hpp	/^class FieldSolver : public ippl::FieldSolverBase<T, Dim> {$/;"	c
FieldSolverCmd	src/Structure/FieldSolverCmd.cpp	/^FieldSolverCmd::FieldSolverCmd()$/;"	f	class:FieldSolverCmd
FieldSolverCmd	src/Structure/FieldSolverCmd.cpp	/^FieldSolverCmd::FieldSolverCmd(const std::string& name, FieldSolverCmd* parent)$/;"	f	class:FieldSolverCmd
FieldSolverCmd	src/Structure/FieldSolverCmd.h	/^class FieldSolverCmd : public Definition {$/;"	c	class:FieldSolverCmdType
FieldSolverCmdType	src/Structure/FieldSolverCmd.h	/^enum class FieldSolverCmdType : short { NONE = -1, FFT = 0 };$/;"	c
Field_t	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^typedef Field<double, Dim> Field_t;$/;"	t	file:
Fieldmap	src/Fields/Fieldmap.h	/^    Fieldmap(const std::string& aFilename)$/;"	f	class:Fieldmap
Fieldmap	src/Fields/Fieldmap.h	/^class Fieldmap {$/;"	c
FieldmapDescription	src/Fields/Fieldmap.h	/^        FieldmapDescription(MapType aType, Fieldmap* aMap)$/;"	f	struct:Fieldmap::FieldmapDescription
FieldmapDescription	src/Fields/Fieldmap.h	/^    struct FieldmapDescription {$/;"	s	class:Fieldmap
FieldmapDictionary	src/Fields/Fieldmap.cpp	/^std::map<std::string, Fieldmap::FieldmapDescription> Fieldmap::FieldmapDictionary =$/;"	m	class:Fieldmap	file:
FieldmapDictionary	src/Fields/Fieldmap.h	/^    static std::map<std::string, FieldmapDescription> FieldmapDictionary;$/;"	m	class:Fieldmap
FieldstrengthBr_m	src/Fields/FM2DMagnetoStatic.h	/^    double *FieldstrengthBr_m;    \/**< 2D array with Er, read in like Ez*\/$/;"	m	class:FM2DMagnetoStatic
FieldstrengthBt_m	src/Fields/FM2DDynamic.h	/^    double *FieldstrengthBt_m;    \/**< 2D array with Er, read in like Ez*\/$/;"	m	class:FM2DDynamic
FieldstrengthBx_m	src/Fields/FM3DDynamic.h	/^    double *FieldstrengthBx_m;    \/**< 3D array with Bx *\/$/;"	m	class:FM3DDynamic
FieldstrengthBx_m	src/Fields/FM3DMagnetoStatic.h	/^    double *FieldstrengthBx_m;    \/**< 3D array with Bx *\/$/;"	m	class:FM3DMagnetoStatic
FieldstrengthBx_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    double *FieldstrengthBx_m;    \/**< 3D array with Bx, read in first along z0 - r0 to rN then z1 - r0 to rN until zN - r0 to rN  *\/$/;"	m	class:FM3DMagnetoStaticExtended
FieldstrengthBx_m	src/Fields/FM3DMagnetoStaticH5Block.h	/^    std::vector<double> FieldstrengthBx_m;    \/**< 3D array with Bx *\/$/;"	m	class:FM3DMagnetoStaticH5Block
FieldstrengthBy_m	src/Fields/FM3DDynamic.h	/^    double *FieldstrengthBy_m;    \/**< 3D array with By *\/$/;"	m	class:FM3DDynamic
FieldstrengthBy_m	src/Fields/FM3DMagnetoStatic.h	/^    double *FieldstrengthBy_m;    \/**< 3D array with By *\/$/;"	m	class:FM3DMagnetoStatic
FieldstrengthBy_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    double *FieldstrengthBy_m;    \/**< 3D array with By, read in like Bx*\/$/;"	m	class:FM3DMagnetoStaticExtended
FieldstrengthBy_m	src/Fields/FM3DMagnetoStaticH5Block.h	/^    std::vector<double> FieldstrengthBy_m;    \/**< 3D array with By *\/$/;"	m	class:FM3DMagnetoStaticH5Block
FieldstrengthBz_m	src/Fields/FM2DMagnetoStatic.h	/^    double *FieldstrengthBz_m;    \/**< 2D array with Ez, read in first along z0 - r0 to rN then z1 - r0 to rN until zN - r0 to rN  *\/$/;"	m	class:FM2DMagnetoStatic
FieldstrengthBz_m	src/Fields/FM3DDynamic.h	/^    double *FieldstrengthBz_m;    \/**< 3D array with Bz *\/$/;"	m	class:FM3DDynamic
FieldstrengthBz_m	src/Fields/FM3DMagnetoStatic.h	/^    double *FieldstrengthBz_m;    \/**< 3D array with Bz *\/$/;"	m	class:FM3DMagnetoStatic
FieldstrengthBz_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    double *FieldstrengthBz_m;    \/**< 3D array with Bz, read in like Bx*\/$/;"	m	class:FM3DMagnetoStaticExtended
FieldstrengthBz_m	src/Fields/FM3DMagnetoStaticH5Block.h	/^    std::vector<double> FieldstrengthBz_m;    \/**< 3D array with Bz *\/$/;"	m	class:FM3DMagnetoStaticH5Block
FieldstrengthEr_m	src/Fields/FM2DDynamic.h	/^    double *FieldstrengthEr_m;    \/**< 2D array with Er, read in like Ez*\/$/;"	m	class:FM2DDynamic
FieldstrengthEr_m	src/Fields/FM2DElectroStatic.h	/^    double *FieldstrengthEr_m;    \/**< 2D array with Er, read in like Ez*\/$/;"	m	class:FM2DElectroStatic
FieldstrengthEx_m	src/Fields/FM3DDynamic.h	/^    double *FieldstrengthEx_m;    \/**< 3D array with Ex *\/$/;"	m	class:FM3DDynamic
FieldstrengthEx_m	src/Fields/FM3DH5BlockBase.h	/^    std::vector<double> FieldstrengthEx_m;    \/**< 3D array with Ex *\/$/;"	m	class:FM3DH5BlockBase
FieldstrengthEy_m	src/Fields/FM3DDynamic.h	/^    double *FieldstrengthEy_m;    \/**< 3D array with Ey *\/$/;"	m	class:FM3DDynamic
FieldstrengthEy_m	src/Fields/FM3DH5BlockBase.h	/^    std::vector<double> FieldstrengthEy_m;    \/**< 3D array with Ey *\/$/;"	m	class:FM3DH5BlockBase
FieldstrengthEz_m	src/Fields/FM2DDynamic.h	/^    double *FieldstrengthEz_m;    \/**< 2D array with Ez, read in first along z0 - r0 to rN then z1 - r0 to rN until zN - r0 to rN  *\/$/;"	m	class:FM2DDynamic
FieldstrengthEz_m	src/Fields/FM2DElectroStatic.h	/^    double *FieldstrengthEz_m;    \/**< 2D array with Ez, read in first along z0 - r0 to rN then z1 - r0 to rN until zN - r0 to rN  *\/$/;"	m	class:FM2DElectroStatic
FieldstrengthEz_m	src/Fields/FM3DDynamic.h	/^    double *FieldstrengthEz_m;    \/**< 3D array with Ez *\/$/;"	m	class:FM3DDynamic
FieldstrengthEz_m	src/Fields/FM3DH5BlockBase.h	/^    std::vector<double> FieldstrengthEz_m;    \/**< 3D array with Ez *\/$/;"	m	class:FM3DH5BlockBase
FieldstrengthHx_m	src/Fields/FM3DH5Block.h	/^    std::vector<double> FieldstrengthHx_m;    \/**< 3D array with Hx *\/$/;"	m	class:FM3DH5Block
FieldstrengthHx_m	src/Fields/FM3DH5Block_nonscale.h	/^    std::vector<double> FieldstrengthHx_m;    \/**< 3D array with Hx *\/$/;"	m	class:FM3DH5Block_nonscale
FieldstrengthHy_m	src/Fields/FM3DH5Block.h	/^    std::vector<double> FieldstrengthHy_m;    \/**< 3D array with Hy *\/$/;"	m	class:FM3DH5Block
FieldstrengthHy_m	src/Fields/FM3DH5Block_nonscale.h	/^    std::vector<double> FieldstrengthHy_m;    \/**< 3D array with Hy *\/$/;"	m	class:FM3DH5Block_nonscale
FieldstrengthHz_m	src/Fields/FM3DH5Block.h	/^    std::vector<double> FieldstrengthHz_m;    \/**< 3D array with Hz *\/$/;"	m	class:FM3DH5Block
FieldstrengthHz_m	src/Fields/FM3DH5Block_nonscale.h	/^    std::vector<double> FieldstrengthHz_m;    \/**< 3D array with Hz *\/$/;"	m	class:FM3DH5Block_nonscale
FileStream	src/OpalParser/FileStream.cpp	/^FileStream::FileStream(const std::string& name) : AbsFileStream(name), is(name.c_str()) {$/;"	f	class:FileStream
FileStream	src/OpalParser/FileStream.h	/^class FileStream: public AbsFileStream {$/;"	c
FileType	src/Utilities/PortableBitmapReader.h	/^    enum FileType {$/;"	g	class:PortableBitmapReader
FileType	src/Utilities/PortableGraymapReader.h	/^    enum FileType {$/;"	g	class:PortableGraymapReader
Filename_m	src/Fields/Fieldmap.h	/^    std::string Filename_m;$/;"	m	class:Fieldmap
Filename_m	src/Fields/SectorField.h	/^    std::string Filename_m;$/;"	m	class:SectorField
Filter	src/Filters/Filter.h	/^    Filter() { ;}$/;"	f	class:Filter
Filter	src/Filters/Filter.h	/^class Filter {$/;"	c
FilterType	src/Utilities/OpalFilter.h	/^    enum class FilterType: unsigned short {$/;"	c	class:OpalFilter
FitCoeffs	src/Physics/Material.h	/^        enum FitCoeffs {$/;"	g	class:Physics::Material
FixedFFTLowPassFilter	src/Filters/FixedFFTLowPass.cpp	/^FixedFFTLowPassFilter::FixedFFTLowPassFilter(const int &N):$/;"	f	class:FixedFFTLowPassFilter
FixedFFTLowPassFilter	src/Filters/FixedFFTLowPass.h	/^class FixedFFTLowPassFilter: public Filter {$/;"	c
FlaggedBeamline	src/Beamlines/FlaggedBeamline.h	/^typedef TBeamline<FlaggedElmPtr> FlaggedBeamline;$/;"	t
FlaggedElmPtr	src/Beamlines/FlaggedElmPtr.cpp	/^FlaggedElmPtr::FlaggedElmPtr$/;"	f	class:FlaggedElmPtr
FlaggedElmPtr	src/Beamlines/FlaggedElmPtr.cpp	/^FlaggedElmPtr::FlaggedElmPtr():$/;"	f	class:FlaggedElmPtr
FlaggedElmPtr	src/Beamlines/FlaggedElmPtr.cpp	/^FlaggedElmPtr::FlaggedElmPtr(const FlaggedElmPtr &rhs):$/;"	f	class:FlaggedElmPtr
FlaggedElmPtr	src/Beamlines/FlaggedElmPtr.h	/^class FlaggedElmPtr: public ElmPtr {$/;"	c
Flagger	src/Algorithms/Flagger.cpp	/^Flagger::Flagger(const Beamline &beamline, bool set):$/;"	f	class:Flagger
Flagger	src/Algorithms/Flagger.h	/^class Flagger: public DefaultVisitor {$/;"	c
FlatTop	src/Distribution/FlatTop.hpp	/^    FlatTop(std::shared_ptr<ParticleContainer_t> &pc, std::shared_ptr<FieldContainer_t> &fc, std::shared_ptr<Distribution_t> &opalDist)$/;"	f	class:FlatTop
FlatTop	src/Distribution/FlatTop.hpp	/^class FlatTop : public SamplingBase {$/;"	c
FlatTopProfile	src/Distribution/FlatTop.hpp	/^    double FlatTopProfile(double t){$/;"	f	class:FlatTop
FormatError	src/Utilities/FormatError.cpp	/^FormatError::FormatError(const FormatError &rhs):$/;"	f	class:FormatError
FormatError	src/Utilities/FormatError.cpp	/^FormatError::FormatError(const std::string &meth, const std::string &msg):$/;"	f	class:FormatError
FormatError	src/Utilities/FormatError.h	/^class FormatError: public ClassicException {$/;"	c
FourCoefs_m	src/Fields/Astra1DDynamic.h	/^    double *__restrict__ FourCoefs_m;$/;"	m	class:Astra1DDynamic
FourCoefs_m	src/Fields/Astra1DElectroStatic.h	/^    double *FourCoefs_m;$/;"	m	class:Astra1DElectroStatic
FourCoefs_m	src/Fields/Astra1DMagnetoStatic.h	/^    double *FourCoefs_m;$/;"	m	class:Astra1DMagnetoStatic
Function	src/Utilities/MSLang.h	/^    struct Function {$/;"	s	namespace:mslang
GAMMA	src/Structure/Beam.cpp	/^        GAMMA,     \/\/ ENERGY \/ MASS$/;"	e	enum:__anon63::__anon64	file:
GAPWIDTH	src/Elements/OpalCavity.h	/^        GAPWIDTH,       \/\/ constant gap width of cavity$/;"	e	enum:OpalCavity::__anon34
GAS	src/Elements/OpalVacuum.h	/^        GAS = COMMON, \/\/ Type of gas for residual vacuum$/;"	e	enum:OpalVacuum::__anon36
GAUSS	src/Distribution/Distribution.h	/^enum class DistributionType : short { NODIST = -1, GAUSS, MULTIVARIATEGAUSS, FLATTOP, FROMFILE };$/;"	m	class:DistributionType
GCS_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef GuardCellSizes<DIM>                                   GCS_t;$/;"	t	file:
GENERALCLASSICEXCEPTION_H	src/Utilities/GeneralClassicException.h	2;"	d
GENERATED	src/Lines/SequenceMember.h	/^        GENERATED = 3$/;"	e	enum:SequenceMember::MemberType
GEOMETRY	src/Elements/OpalCavity.h	/^        GEOMETRY,       \/\/ geometry of boundary$/;"	e	enum:OpalCavity::__anon34
GEOMETRY	src/Elements/OpalDrift.h	/^         GEOMETRY = COMMON,  \/\/ geometry of boundary, one more enum member besides the common ones in OpalElement.$/;"	e	enum:OpalDrift::__anon50
GET_NUM_STEPS	src/Structure/LossDataSink.cpp	87;"	d	file:
GHz2Hz	src/Physics/Units.h	/^    constexpr double GHz2Hz = 1e+9;$/;"	m	namespace:Units
GIT_VERSION	src/OPALrevision.h	1;"	d
GLOBAL	src/Lines/SequenceMember.h	/^        GLOBAL    = 1,$/;"	e	enum:SequenceMember::MemberType
GLOBAL	src/Utilities/Options.h	/^enum class DumpFrame : unsigned short { GLOBAL, BUNCH_MEAN, REFERENCE };$/;"	m	class:DumpFrame
GOLD_H	src/Physics/Gold.h	23;"	d
GRAPHITER6710_H	src/Physics/GraphiteR6710.h	23;"	d
GRAPHITE_H	src/Physics/Graphite.h	23;"	d
GREENSF	src/Structure/FieldSolverCmd.h	/^        GREENSF,   \/\/ holds greensfunction to be used [FFT + P3M only]$/;"	e	enum:FieldSolverCmdType::FIELDSOLVER::__anon62
GROUP_NAME	src/Utilities/SDDSParser/array.hpp	/^                         , GROUP_NAME$/;"	e	enum:SDDS::array::attributes
GSLERRORHANDLING_H	src/GSLErrorHandling.h	17;"	d
GUARDCELLSIZE	tests/ippl_src/Particle/EdgeCentering.cpp	16;"	d	file:
Gaussian	src/Distribution/Gaussian.hpp	/^    Gaussian(std::shared_ptr<ParticleContainer_t> &pc, std::shared_ptr<FieldContainer_t> &fc, std::shared_ptr<Distribution_t> &opalDist)$/;"	f	class:Gaussian
Gaussian	src/Distribution/Gaussian.hpp	/^class Gaussian : public SamplingBase {$/;"	c
GaussianLikeBehavior	src/Distribution/Distribution.h	/^    class GaussianLikeBehavior : public BinomialBehaviorSplitter {$/;"	c	class:Distribution
Ge	src/Expressions/Expressions.cpp	/^    bool Ge(double a, double b) {$/;"	f	namespace:Expressions
GeV2MeV	src/Physics/Units.h	/^    constexpr double GeV2MeV = GeV2eV * eV2MeV;$/;"	m	namespace:Units
GeV2eV	src/Physics/Units.h	/^    constexpr double GeV2eV = 1e+9;$/;"	m	namespace:Units
GeV2keV	src/Physics/Units.h	/^    constexpr double GeV2keV = GeV2eV * eV2keV;$/;"	m	namespace:Units
GeV2kg	src/Physics/Units.h	/^    constexpr double GeV2kg = 1.0e+9 * Physics::q_e \/ Physics::c \/ Physics::c;$/;"	m	namespace:Units
General Multipole extension	src/AbsBeamline/multipole_t.tex	/^\\clearpage$/;"	s
GeneralClassicException	src/Utilities/GeneralClassicException.cpp	/^GeneralClassicException::GeneralClassicException(const GeneralClassicException &rhs):$/;"	f	class:GeneralClassicException
GeneralClassicException	src/Utilities/GeneralClassicException.cpp	/^GeneralClassicException::GeneralClassicException(const std::string &meth, const std::string &msg):$/;"	f	class:GeneralClassicException
GeneralClassicException	src/Utilities/GeneralClassicException.h	/^class GeneralClassicException:public ClassicException$/;"	c
Generalised Indexing and Notation	src/Fields/Interpolation/polynomial_solve_with_smoothing.tex	/^Below I outline the mathematical foundation for higher order polynomial solving.$/;"	b
GetCoefficientsAsMatrix	src/Fields/Interpolation/SquarePolynomialVector.h	/^    MMatrix<double>                    GetCoefficientsAsMatrix() const$/;"	f	class:interpolation::SquarePolynomialVector
Gold	src/Physics/Gold.h	/^        Gold():$/;"	f	class:Physics::Gold
Gold	src/Physics/Gold.h	/^    class Gold: public Material {$/;"	c	namespace:Physics
Graphite	src/Physics/Graphite.h	/^        Graphite():$/;"	f	class:Physics::Graphite
Graphite	src/Physics/Graphite.h	/^    class Graphite: public Material {$/;"	c	namespace:Physics
GraphiteR6710	src/Physics/GraphiteR6710.h	/^        GraphiteR6710():$/;"	f	class:Physics::GraphiteR6710
GraphiteR6710	src/Physics/GraphiteR6710.h	/^    class GraphiteR6710: public Material {$/;"	c	namespace:Physics
GreaterThan	src/AbsBeamline/EndFieldModel/EndFieldModel.cpp	/^bool GreaterThan(std::vector<int> v1, std::vector<int> v2) {$/;"	f	namespace:endfieldmodel
GreensFunctionTimer_m	src/.Solvers/FFTPoissonSolver.h	/^    IpplTimings::TimerRef GreensFunctionTimer_m;$/;"	m	class:FFTPoissonSolver
Gt	src/Expressions/Expressions.cpp	/^    bool Gt(double a, double b) {$/;"	f	namespace:Expressions
GuardCell_Edge_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef ZeroGuardsAndZeroFace<Vector_t, DIM, Mesh_t, Edge_t>  GuardCell_Edge_t;$/;"	t	file:
H2P	src/Physics/ParticleProperties.h	/^    H2P,$/;"	m	class:ParticleType
H3P	src/Physics/ParticleProperties.h	/^    H3P,$/;"	m	class:ParticleType
H5PartTimer_m	src/Structure/H5Writer.h	/^    IpplTimings::TimerRef H5PartTimer_m;$/;"	m	class:H5Writer
H5PartWrapper	src/Structure/H5PartWrapper.cpp	/^H5PartWrapper::H5PartWrapper($/;"	f	class:H5PartWrapper
H5PartWrapper	src/Structure/H5PartWrapper.cpp	/^H5PartWrapper::H5PartWrapper(const std::string& fileName, h5_int32_t flags)$/;"	f	class:H5PartWrapper
H5PartWrapper	src/Structure/H5PartWrapper.h	/^class H5PartWrapper {$/;"	c
H5PartWrapperForPT	src/Structure/H5PartWrapperForPT.cpp	/^H5PartWrapperForPT::H5PartWrapperForPT($/;"	f	class:H5PartWrapperForPT
H5PartWrapperForPT	src/Structure/H5PartWrapperForPT.cpp	/^H5PartWrapperForPT::H5PartWrapperForPT(const std::string& fileName, h5_int32_t flags)$/;"	f	class:H5PartWrapperForPT
H5PartWrapperForPT	src/Structure/H5PartWrapperForPT.h	/^class H5PartWrapperForPT : public H5PartWrapper {$/;"	c
H5TypesCHAR	src/Structure/H5PartWrapper.cpp	/^    const h5_int64_t H5TypesCHAR   = H5_STRING_T;$/;"	m	namespace:__anon58	file:
H5TypesDOUBLE	src/Structure/H5PartWrapper.cpp	/^    const h5_int64_t H5TypesDOUBLE = H5_FLOAT64_T;$/;"	m	namespace:__anon58	file:
H5TypesFLOAT	src/Structure/H5PartWrapper.cpp	/^    const h5_int64_t H5TypesFLOAT  = H5_FLOAT32_T;$/;"	m	namespace:__anon58	file:
H5TypesINT32	src/Structure/H5PartWrapper.cpp	/^    const h5_int64_t H5TypesINT32  = H5_INT32_T;$/;"	m	namespace:__anon58	file:
H5TypesINT64	src/Structure/H5PartWrapper.cpp	/^    const h5_int64_t H5TypesINT64  = H5_INT64_T;$/;"	m	namespace:__anon58	file:
H5Writer	src/Structure/H5Writer.cpp	/^H5Writer::H5Writer(H5PartWrapper* h5wrapper, bool restart)$/;"	f	class:H5Writer
H5Writer	src/Structure/H5Writer.h	/^class H5Writer {$/;"	c
H5call_m	src/Structure/H5Writer.h	/^    int H5call_m;$/;"	m	class:H5Writer
H5call_m	src/Structure/LossDataSink.h	/^    h5_int64_t H5call_m;$/;"	m	class:LossDataSink
H5file_m	src/Structure/LossDataSink.h	/^    h5_file_t H5file_m;$/;"	m	class:LossDataSink
HALOSHIFT	src/BasicActions/Option.cpp	/^        HALOSHIFT,$/;"	e	enum:__anon24::__anon25	file:
HAPERT	src/Elements/OpalMultipoleT.h	/^        HAPERT,          \/\/ Aperture horizontal dimension$/;"	e	enum:OpalMultipoleT::__anon48
HARMONIC_NUMBER	src/Elements/OpalRingDefinition.h	/^        HARMONIC_NUMBER,$/;"	e	enum:OpalRingDefinition::__anon39
HEIGHT_NEG_EXTENT	src/Elements/OpalVerticalFFAMagnet.h	/^        HEIGHT_NEG_EXTENT,$/;"	e	enum:OpalVerticalFFAMagnet::__anon38
HEIGHT_POS_EXTENT	src/Elements/OpalVerticalFFAMagnet.h	/^        HEIGHT_POS_EXTENT,$/;"	e	enum:OpalVerticalFFAMagnet::__anon38
HITMATERIAL	src/Algorithms/OrbitThreader.cpp	42;"	d	file:
HMINUS	src/Physics/ParticleProperties.h	/^    HMINUS,$/;"	m	class:ParticleType
HX	src/Fields/FM3DMagnetoStatic.h	/^           HX = 4,  \/\/ high X$/;"	e	enum:FM3DMagnetoStatic::__anon67
HX	src/Fields/FM3DMagnetoStaticExtended.h	/^           HX = 4,$/;"	e	enum:FM3DMagnetoStaticExtended::__anon68
HY	src/Fields/FM3DMagnetoStatic.h	/^           HY = 2,  \/\/ high Y$/;"	e	enum:FM3DMagnetoStatic::__anon67
HY	src/Fields/FM3DMagnetoStaticExtended.h	/^           HY = 2,$/;"	e	enum:FM3DMagnetoStaticExtended::__anon68
HYDROGEN	src/Physics/ParticleProperties.h	/^    HYDROGEN,$/;"	m	class:ParticleType
HZ	src/Fields/FM3DMagnetoStatic.h	/^           HZ = 1}; \/\/ high Z$/;"	e	enum:FM3DMagnetoStatic::__anon67
HZ	src/Fields/FM3DMagnetoStaticExtended.h	/^           HZ = 1};$/;"	e	enum:FM3DMagnetoStaticExtended::__anon68
HasInVariable	src/Fields/Interpolation/PolynomialCoefficient.h	/^    bool             HasInVariable(int var) const {for(unsigned int i=0; i<_inVarByVec.size(); i++) if(_inVarByVec[i] == var) return true; return false;}$/;"	f	class:interpolation::PolynomialCoefficient
Help	src/BasicActions/Help.cpp	/^Help::Help()$/;"	f	class:Help
Help	src/BasicActions/Help.cpp	/^Help::Help(const std::string& name, Help* parent) : Action(name, parent) {$/;"	f	class:Help
Help	src/BasicActions/Help.h	/^class Help: public Action {$/;"	c
HistoReductionMode	src/PartBunch/Binning/ParallelReduceTools.h	/^    enum class HistoReductionMode {$/;"	c	namespace:ParticleBinning
Histogram	src/PartBunch/Binning/BinHisto.h	/^        Histogram(const Histogram& other) {$/;"	f	class:ParticleBinning::Histogram
Histogram	src/PartBunch/Binning/BinHisto.h	/^        Histogram(std::string debug_name, bin_index_type numBins, value_type totalBinWidth)$/;"	f	class:ParticleBinning::Histogram
Histogram	src/PartBunch/Binning/BinHisto.h	/^    class Histogram {$/;"	c	namespace:ParticleBinning
HostArrayReduction	src/PartBunch/Binning/ParallelReduceTools.h	/^        HostArrayReduction() { $/;"	f	struct:ParticleBinning::HostArrayReduction
HostArrayReduction	src/PartBunch/Binning/ParallelReduceTools.h	/^        HostArrayReduction(const HostArrayReduction& rhs) { $/;"	f	struct:ParticleBinning::HostArrayReduction
HostArrayReduction	src/PartBunch/Binning/ParallelReduceTools.h	/^    struct HostArrayReduction {$/;"	s	namespace:ParticleBinning
Hz2GHz	src/Physics/Units.h	/^    constexpr double Hz2GHz = 1 \/ GHz2Hz;$/;"	m	namespace:Units
Hz2MHz	src/Physics/Units.h	/^    constexpr double Hz2MHz = 1 \/ MHz2Hz;$/;"	m	namespace:Units
IDEALIZED	src/BasicActions/Option.cpp	/^        IDEALIZED,$/;"	e	enum:__anon24::__anon25	file:
IField_t	src/.Solvers/PoissonSolver.h	/^    typedef Field<int, 3, Mesh_t, Center_t> IField_t;$/;"	t	class:PoissonSolver
IMMEDIATE	src/Lines/SequenceMember.h	/^        IMMEDIATE = 7$/;"	e	enum:SequenceMember::PositionType
INCLUDE	src/Utilities/SDDSParser/include.hpp	/^                        , INCLUDE$/;"	e	enum:SDDS::include::attributes
INCLUDE_DEF_HPP_	src/Utilities/SDDSParser/include_def.hpp	18;"	d
INCLUDE_HPP_	src/Utilities/SDDSParser/include.hpp	18;"	d
INFO	src/BasicActions/Option.cpp	/^        INFO,$/;"	e	enum:__anon24::__anon25	file:
INSIDE	src/Structure/BoundaryGeometry.cpp	416;"	d	file:
INSIDEPOINT	src/Structure/BoundaryGeometry.h	/^        INSIDEPOINT,$/;"	e	enum:BoundaryGeometry::__anon61
INTERSECTION_TESTS	src/Structure/BoundaryGeometry.h	/^    enum INTERSECTION_TESTS { SEGMENT, RAY, LINE };$/;"	g	class:BoundaryGeometry
INVALID	src/AbstractObjects/OpalParticle.h	/^    enum { X, Y, L, INVALID };$/;"	e	enum:OpalParticle::__anon17
INVALID	src/Algorithms/OpalParticle.h	/^    enum { X, Y, L, INVALID };$/;"	e	enum:OpalParticle::__anon79
IO	src/Fields/SectorMagneticFieldMap.h	/^class SectorMagneticFieldMap::IO {$/;"	c	class:SectorMagneticFieldMap
IPPLINFOWRAPPER_H	src/Structure/IpplInfoWrapper.h	2;"	d
IPPL_ALPINE_MANAGER_H	src/PartBunch/Binning/test/alpine/AlpineManager.h	2;"	d
IPPL_FIELD_CONTAINER_H	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	2;"	d
IPPL_FIELD_SOLVER_H	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	2;"	d
IPPL_FLAT_TOP_H	src/Distribution/FlatTop.hpp	2;"	d
IPPL_GAUSSIAN_H	src/Distribution/Gaussian.hpp	2;"	d
IPPL_LANDAU_DAMPING_MANAGER_H	src/PartBunch/Binning/test/alpine/BinningLandauDampingManager.h	2;"	d
IPPL_LOAD_BALANCER_H	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	2;"	d
IPPL_MULTI_VARIATE_GAUSSIAN_H	src/Distribution/MultiVariateGaussian.hpp	2;"	d
IPPL_PARTICLE_CONTAINER_H	src/PartBunch/Binning/test/alpine/ParticleContainer.hpp	2;"	d
IPPL_SAMPLING_BASE_H	src/Distribution/SamplingBase.hpp	2;"	d
IRREGULAR_DOMAIN_H	src/.Solvers/IrregularDomain.h	27;"	d
IS_CENTRE	src/AbstractObjects/Element.h	/^        IS_CENTRE,        \/\/ Reference point is at element centre$/;"	e	enum:Element::ReferenceType
IS_CLOSED	src/Elements/OpalRingDefinition.h	/^        IS_CLOSED,$/;"	e	enum:OpalRingDefinition::__anon39
IS_DELIMITER	src/OpalParser/Token.h	/^        IS_DELIMITER,$/;"	e	enum:Token::Type
IS_ENTRY	src/AbstractObjects/Element.h	/^        IS_ENTRY,         \/\/ Reference point is at element entrance.$/;"	e	enum:Element::ReferenceType
IS_EOF	src/OpalParser/Token.h	/^        IS_EOF,$/;"	e	enum:Token::Type
IS_ERROR	src/OpalParser/Token.h	/^        IS_ERROR,$/;"	e	enum:Token::Type
IS_EXIT	src/AbstractObjects/Element.h	/^        IS_EXIT           \/\/ Reference point is at element exit.$/;"	e	enum:Element::ReferenceType
IS_INTEGER	src/OpalParser/Token.h	/^        IS_INTEGER,$/;"	e	enum:Token::Type
IS_REAL	src/OpalParser/Token.h	/^        IS_REAL,$/;"	e	enum:Token::Type
IS_STRING	src/OpalParser/Token.h	/^        IS_STRING$/;"	e	enum:Token::Type
IS_WORD	src/OpalParser/Token.h	/^        IS_WORD,$/;"	e	enum:Token::Type
Ia	src/Physics/Physics.h	/^    constexpr double Ia         = 17.045148e+03;$/;"	m	namespace:Physics
Identity	src/BeamlineGeometry/Matrix3D.cpp	/^Matrix3D Matrix3D::Identity() {$/;"	f	class:Matrix3D
Identity	src/BeamlineGeometry/Rotation3D.cpp	/^Rotation3D Rotation3D::Identity() {$/;"	f	class:Rotation3D
IfStatement	src/OpalParser/IfStatement.cpp	/^IfStatement::IfStatement(const Parser& parser, TokenStream& is)$/;"	f	class:IfStatement
IfStatement	src/OpalParser/IfStatement.h	/^class IfStatement: public Statement {$/;"	c
InVariables	src/Fields/Interpolation/PolynomialCoefficient.h	/^    std::vector<int> InVariables() const {return _inVarByVec;}$/;"	f	class:interpolation::PolynomialCoefficient
InVariables	src/Fields/Interpolation/PolynomialCoefficient.h	/^    std::vector<int> InVariables(std::vector<int> inVar ) {_inVarByVec  = inVar;  return _inVarByVec;}$/;"	f	class:interpolation::PolynomialCoefficient
IndexByPower	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^std::vector<int> SquarePolynomialVector::IndexByPower(int index, int point_dim) {$/;"	f	class:interpolation::SquarePolynomialVector
IndexByPowerRecursive	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^void SquarePolynomialVector::IndexByPowerRecursive(std::vector<int> check, size_t check_index, size_t poly_power, std::vector<std::vector<int> >& nearby_points) {$/;"	f	class:interpolation::SquarePolynomialVector
IndexByVector	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^std::vector<int> SquarePolynomialVector::IndexByVector(int index, int point_dim) {$/;"	f	class:interpolation::SquarePolynomialVector
IndexMap	src/Algorithms/IndexMap.cpp	/^IndexMap::IndexMap():$/;"	f	class:IndexMap
IndexMap	src/Algorithms/IndexMap.h	/^class IndexMap$/;"	c
IndexTriplet	src/Fields/FM3DH5BlockBase.h	/^        IndexTriplet():$/;"	f	struct:FM3DH5BlockBase::IndexTriplet
IndexTriplet	src/Fields/FM3DH5BlockBase.h	/^    struct IndexTriplet {$/;"	s	class:FM3DH5BlockBase
IndexTriplet	src/Fields/FM3DMagnetoStatic.h	/^        IndexTriplet():$/;"	f	struct:FM3DMagnetoStatic::IndexTriplet
IndexTriplet	src/Fields/FM3DMagnetoStatic.h	/^    struct IndexTriplet {$/;"	s	class:FM3DMagnetoStatic
IndexTriplet	src/Fields/FM3DMagnetoStaticExtended.h	/^        IndexTriplet():$/;"	f	struct:FM3DMagnetoStaticExtended::IndexTriplet
IndexTriplet	src/Fields/FM3DMagnetoStaticExtended.h	/^    struct IndexTriplet {$/;"	s	class:FM3DMagnetoStaticExtended
IndexedChannel	src/Channels/IndexedChannel.h	/^IndexedChannel<T>::IndexedChannel(T &object, double(T::*get)(int) const,$/;"	f	class:IndexedChannel
IndexedChannel	src/Channels/IndexedChannel.h	/^IndexedChannel<T>::IndexedChannel(const IndexedChannel &rhs):$/;"	f	class:IndexedChannel
IndexedChannel	src/Channels/IndexedChannel.h	/^template <class T> class IndexedChannel: public Channel {$/;"	c
Indexer	src/Expressions/Indexer.h	/^    Indexer<T>::Indexer(PtrToArray<T> left, PtrToScalar<double> right):$/;"	f	class:Expressions::Indexer
Indexer	src/Expressions/Indexer.h	/^    Indexer<T>::Indexer(const Indexer &rhs):$/;"	f	class:Expressions::Indexer
Indexer	src/Expressions/Indexer.h	/^    class Indexer: public Scalar<T> {$/;"	c	namespace:Expressions
IndirectChannel	src/Channels/IndirectChannel.h	/^IndirectChannel<T>::IndirectChannel(T &object, double(T::*get)() const,$/;"	f	class:IndirectChannel
IndirectChannel	src/Channels/IndirectChannel.h	/^IndirectChannel<T>::IndirectChannel(const IndirectChannel &rhs):$/;"	f	class:IndirectChannel
IndirectChannel	src/Channels/IndirectChannel.h	/^template <class T> class IndirectChannel: public Channel {$/;"	c
InputMomentumUnits	src/Distribution/Distribution.h	/^    enum class InputMomentumUnits : unsigned short { NONE, EVOVERC };$/;"	c	class:Distribution
IntPixel_t	src/Utilities/MSLang/Mask.h	/^        typedef std::pair<IntPoint, IntPoint> IntPixel_t;$/;"	t	struct:mslang::Mask
IntPoint	src/Utilities/MSLang/Mask.h	/^            IntPoint(int x, int y):$/;"	f	struct:mslang::Mask::IntPoint
IntPoint	src/Utilities/MSLang/Mask.h	/^        struct IntPoint {$/;"	s	struct:mslang::Mask
IntVector_t	src/.Solvers/IrregularDomain.h	/^    typedef Vector_t<int, 3> IntVector_t<double, 3>;$/;"	t	class:IrregularDomain
Interpolator3dGridTo1d	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^Interpolator3dGridTo1d::Interpolator3dGridTo1d()$/;"	f	class:interpolation::Interpolator3dGridTo1d
Interpolator3dGridTo1d	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^Interpolator3dGridTo1d::Interpolator3dGridTo1d(ThreeDGrid* grid, double ***F)$/;"	f	class:interpolation::Interpolator3dGridTo1d
Interpolator3dGridTo1d	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^class Interpolator3dGridTo1d : public VectorMap {$/;"	c	namespace:interpolation
Interpolator3dGridTo3d	src/Fields/Interpolation/Interpolator3dGridTo3d.cpp	/^Interpolator3dGridTo3d::Interpolator3dGridTo3d$/;"	f	class:interpolation::Interpolator3dGridTo3d
Interpolator3dGridTo3d	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^class Interpolator3dGridTo3d : public VectorMap {$/;"	c	namespace:interpolation
Interpolator3dGridTo3d	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^inline Interpolator3dGridTo3d::Interpolator3dGridTo3d(ThreeDGrid* grid,$/;"	f	class:interpolation::Interpolator3dGridTo3d
Intersection	src/Utilities/MSLang/Intersection.h	/^        Intersection()$/;"	f	struct:mslang::Intersection
Intersection	src/Utilities/MSLang/Intersection.h	/^        Intersection(const Intersection &right):$/;"	f	struct:mslang::Intersection
Intersection	src/Utilities/MSLang/Intersection.h	/^    struct Intersection: public Function {$/;"	s	namespace:mslang
Invalidator	src/AbstractObjects/Invalidator.h	/^class Invalidator {$/;"	c
Inverse	src/BeamlineGeometry/Euclid3D.h	/^inline Euclid3D Inverse(const Euclid3D &t) {$/;"	f
IpplInfoWrapper	src/Structure/IpplInfoWrapper.cpp	/^IpplInfoWrapper::IpplInfoWrapper($/;"	f	class:IpplInfoWrapper
IpplInfoWrapper	src/Structure/IpplInfoWrapper.h	/^class IpplInfoWrapper {$/;"	c
IrregularDomain	src/.Solvers/IrregularDomain.cpp	/^IrregularDomain::IrregularDomain(const IntVector_t<double, 3>& nr, const Vector_t<double, 3>& hr,$/;"	f	class:IrregularDomain
IrregularDomain	src/.Solvers/IrregularDomain.h	/^class IrregularDomain {$/;"	c
IterableEquality	src/AbsBeamline/EndFieldModel/EndFieldModel.h	/^bool IterableEquality(TEMP_ITER a_begin, TEMP_ITER a_end, TEMP_ITER b_begin,$/;"	f	namespace:endfieldmodel
IterableEquality	src/AbsBeamline/EndFieldModel/EndFieldModel.h	/^bool IterableEquality(const TEMP_CLASS& a, const TEMP_CLASS& b) {$/;"	f	namespace:endfieldmodel
Iterator	src/Fields/Interpolation/Mesh.h	/^class Mesh::Iterator {$/;"	c	class:interpolation::Mesh
KAPTON_H	src/Physics/Kapton.h	23;"	d
KN	src/Elements/OpalMultipole.h	/^        KN = COMMON,  \/\/ The normal field components.$/;"	e	enum:OpalMultipole::__anon41
KS	src/Elements/OpalMultipole.h	/^        KS,           \/\/ The skewed field components.$/;"	e	enum:OpalMultipole::__anon41
KS	src/Elements/OpalSolenoid.h	/^        KS = COMMON,  \/\/ The longitudinal magnetic field.$/;"	e	enum:OpalSolenoid::__anon49
KahanAccumulation	src/Utilities/Util.cpp	/^    KahanAccumulation::KahanAccumulation() : sum(0.0), correction(0.0) {$/;"	f	class:Util::KahanAccumulation
KahanAccumulation	src/Utilities/Util.h	/^    struct KahanAccumulation {$/;"	s	namespace:Util
Kapton	src/Physics/Kapton.h	/^        Kapton():$/;"	f	class:Physics::Kapton
Kapton	src/Physics/Kapton.h	/^    class Kapton: public Material {$/;"	c	namespace:Physics
Kokkos	src/PartBunch/Binning/ParallelReduceTools.h	/^namespace Kokkos {  $/;"	n
L	src/AbstractObjects/OpalParticle.h	/^    enum { X, Y, L, INVALID };$/;"	e	enum:OpalParticle::__anon17
L	src/Algorithms/OpalParticle.h	/^    enum { X, Y, L, INVALID };$/;"	e	enum:OpalParticle::__anon79
L1	src/Structure/BoundaryGeometry.h	/^        L1,        \/\/ in case of BOXCORNER first part of geometry with height B$/;"	e	enum:BoundaryGeometry::__anon61
L2	src/Structure/BoundaryGeometry.h	/^        L2,        \/\/ in case of BOXCORNER second part of geometry with height B-C$/;"	e	enum:BoundaryGeometry::__anon61
L2Norm	src/PartBunch/PartBunch.hpp	/^KOKKOS_INLINE_FUNCTION typename T::value_type L2Norm(T& x) {$/;"	f
LAG	src/Elements/OpalCavity.h	/^        LAG,            \/\/ The phase lag.$/;"	e	enum:OpalCavity::__anon34
LAG	src/Elements/OpalTravelingWave.h	/^        LAG,            \/\/ The phase lag.$/;"	e	enum:OpalTravelingWave::__anon46
LAT_PHIINIT	src/Elements/OpalRingDefinition.h	/^        LAT_PHIINIT,$/;"	e	enum:OpalRingDefinition::__anon39
LAT_RINIT	src/Elements/OpalRingDefinition.h	/^        LAT_RINIT = COMMON,$/;"	e	enum:OpalRingDefinition::__anon39
LAT_THETAINIT	src/Elements/OpalRingDefinition.h	/^        LAT_THETAINIT,$/;"	e	enum:OpalRingDefinition::__anon39
LBalWriter	src/Structure/LBalWriter.cpp	/^LBalWriter::LBalWriter(const std::string& fname, bool restart) : SDDSWriter(fname, restart) {$/;"	f	class:LBalWriter
LBalWriter	src/Structure/LBalWriter.h	/^class LBalWriter : public SDDSWriter {$/;"	c
LENGTH	src/Elements/OpalElement.h	/^        LENGTH,         \/\/ The element length.$/;"	e	enum:OpalElement::__anon37
LENGTH	src/Elements/OpalOffset/OpalLocalCylindricalOffset.h	/^        LENGTH,$/;"	e	enum:OpalOffset::OpalLocalCylindricalOffset::__anon43
LENGTH	src/Lines/Line.cpp	/^        LENGTH,      \/\/ The line length.$/;"	e	enum:__anon53::__anon54	file:
LENGTH	src/Lines/Sequence.cpp	/^        LENGTH,  \/\/ The total sequence length.$/;"	e	enum:__anon51::__anon52	file:
LENGTH	src/Structure/BoundaryGeometry.h	/^        LENGTH,    \/\/ length of elliptic tube or boxcorner$/;"	e	enum:BoundaryGeometry::__anon61
LERP	src/Structure/BoundaryGeometry.cpp	565;"	d	file:
LERP	src/Structure/BoundaryGeometry.cpp	570;"	d	file:
LF2	src/Steppers/LF2.h	/^    LF2(const FieldFunction& fieldfunc) : Stepper<FieldFunction, Arguments ...>(fieldfunc) { }$/;"	f	class:LF2
LF2	src/Steppers/LF2.h	/^class LF2 : public Stepper<FieldFunction, Arguments...> {$/;"	c
LF2_H	src/Steppers/LF2.h	19;"	d
LFRINGE	src/Elements/OpalMultipoleT.h	/^        LFRINGE,         \/\/ Length of left fringe field$/;"	e	enum:OpalMultipoleT::__anon48
LINE	src/BasicActions/Select.cpp	/^        LINE,    \/\/ The line to be affected.$/;"	e	enum:__anon27::__anon28	file:
LINE	src/Structure/BoundaryGeometry.h	/^    enum INTERSECTION_TESTS { SEGMENT, RAY, LINE };$/;"	e	enum:BoundaryGeometry::INTERSECTION_TESTS
LINE	src/Track/TrackCmd.cpp	/^        LINE,      \/\/ The name of lattice to be tracked.$/;"	e	enum:__anon30::__anon31	file:
LINEAR	src/.Solvers/IrregularDomain.h	/^enum { CONSTANT, LINEAR, QUADRATIC };$/;"	e	enum:__anon19
LINES_PER_ROW	src/Utilities/SDDSParser/data.hpp	/^                        , LINES_PER_ROW$/;"	e	enum:SDDS::data::attributes
LITTLEENDIAN	src/Utilities/SDDSParser/ast.hpp	/^                       , LITTLEENDIAN};$/;"	e	enum:SDDS::ast::endianess
LOCAL	src/Lines/SequenceMember.h	/^        LOCAL     = 2,$/;"	e	enum:SequenceMember::MemberType
LOGBENDTRAJECTORY	src/BasicActions/Option.cpp	/^        LOGBENDTRAJECTORY,$/;"	e	enum:__anon24::__anon25	file:
LONG	src/Utilities/SDDSParser/ast.hpp	/^                      , LONG$/;"	e	enum:SDDS::ast::datatype
LOSSDATASINK_H_	src/Structure/LossDataSink.h	19;"	d
LTrans	src/PartBunch/Binning/AdaptBins.hpp	/^    VField_t<T, Dim>& AdaptBins<BunchType, BinningSelector>::LTrans(VField_t<T, Dim>& field, const bin_index_type& currentBin) {$/;"	f	class:ParticleBinning::AdaptBins
LX	src/Fields/FM3DMagnetoStatic.h	/^    enum { LX = 0,  \/\/ low X$/;"	e	enum:FM3DMagnetoStatic::__anon67
LX	src/Fields/FM3DMagnetoStaticExtended.h	/^    enum { LX = 0,$/;"	e	enum:FM3DMagnetoStaticExtended::__anon68
LY	src/Fields/FM3DMagnetoStatic.h	/^           LY = 0,  \/\/ low Y$/;"	e	enum:FM3DMagnetoStatic::__anon67
LY	src/Fields/FM3DMagnetoStaticExtended.h	/^           LY = 0,$/;"	e	enum:FM3DMagnetoStaticExtended::__anon68
LZ	src/Fields/FM3DMagnetoStatic.h	/^           LZ = 0,  \/\/ low Z$/;"	e	enum:FM3DMagnetoStatic::__anon67
LZ	src/Fields/FM3DMagnetoStaticExtended.h	/^           LZ = 0,$/;"	e	enum:FM3DMagnetoStaticExtended::__anon68
L_m	src/Distribution/MultiVariateGaussian.hpp	/^    Matrix_t L_m;$/;"	m	class:MultiVariateGaussian
LandauDampingManager	src/PartBunch/Binning/test/alpine/BinningLandauDampingManager.h	/^    LandauDampingManager(size_type totalP_, int nt_, Vector_t<int, Dim> &nr_,$/;"	f	class:LandauDampingManager
LandauDampingManager	src/PartBunch/Binning/test/alpine/BinningLandauDampingManager.h	/^class LandauDampingManager : public AlpineManager<T, Dim> {$/;"	c
LaserProfile	src/Distribution/LaserProfile.cpp	/^LaserProfile::LaserProfile($/;"	f	class:LaserProfile
LaserProfile	src/Distribution/LaserProfile.h	/^class LaserProfile {$/;"	c
Layout_t	src/Algorithms/PBunchDefs.h	/^typedef ippl::ParticleSpatialLayout< double, 3, Mesh_t  > Layout_t;$/;"	t
Le	src/Expressions/Expressions.cpp	/^    bool Le(double a, double b) {$/;"	f	namespace:Expressions
LeapFrogStep	src/PartBunch/Binning/test/alpine/BinningLandauDampingManager.h	/^    void LeapFrogStep(){$/;"	f	class:LandauDampingManager
Line	src/Lines/Line.cpp	/^Line::Line():$/;"	f	class:Line
Line	src/Lines/Line.cpp	/^Line::Line(const std::string &name, Line *parent):$/;"	f	class:Line
Line	src/Lines/Line.h	/^class Line: public BeamSequence {$/;"	c
LineTemplate	src/Lines/LineTemplate.cpp	/^LineTemplate::LineTemplate():$/;"	f	class:LineTemplate
LineTemplate	src/Lines/LineTemplate.cpp	/^LineTemplate::LineTemplate(const std::string &name, Object *parent):$/;"	f	class:LineTemplate
LineTemplate	src/Lines/LineTemplate.h	/^class LineTemplate: public Macro {$/;"	c
LoadBalancer	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        LoadBalancer(double lbs, std::shared_ptr<FieldContainer<T,Dim>> &fc, std::shared_ptr<ParticleContainer<T, Dim>> &pc, std::shared_ptr<FieldSolver_t> &fs)$/;"	f	class:LoadBalancer
LoadBalancer	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^class LoadBalancer{$/;"	c
LoadBalancer	src/PartBunch/LoadBalancer.hpp	/^    LoadBalancer($/;"	f	class:LoadBalancer
LoadBalancer	src/PartBunch/LoadBalancer.hpp	/^class LoadBalancer {$/;"	c
LoadFieldMap	tests/classic_src/AbsBeamline/SBend3DTest.cpp	/^    LoadFieldMap(std::string name, int polynomial_order, int smoothing_order,$/;"	f	class:LoadFieldMap
LoadFieldMap	tests/classic_src/AbsBeamline/SBend3DTest.cpp	/^class LoadFieldMap {$/;"	c	file:
LogicalError	src/Utilities/LogicalError.cpp	/^LogicalError::LogicalError(const LogicalError &rhs):$/;"	f	class:LogicalError
LogicalError	src/Utilities/LogicalError.cpp	/^LogicalError::LogicalError(const std::string &meth, const std::string &msg):$/;"	f	class:LogicalError
LogicalError	src/Utilities/LogicalError.h	/^class LogicalError: public ClassicException {$/;"	c
LossDataSink	src/Structure/LossDataSink.cpp	/^LossDataSink::LossDataSink(const LossDataSink& rhs)$/;"	f	class:LossDataSink
LossDataSink	src/Structure/LossDataSink.cpp	/^LossDataSink::LossDataSink(std::string outfn, bool hdf5Save, CollectionType collectionType)$/;"	f	class:LossDataSink
LossDataSink	src/Structure/LossDataSink.h	/^class LossDataSink {$/;"	c
Lt	src/Expressions/Expressions.cpp	/^    bool Lt(double a, double b) {$/;"	f	namespace:Expressions
M	src/BeamlineGeometry/Euclid3D.h	/^inline double Euclid3D::M(int row, int col) const {$/;"	f	class:Euclid3D
M	src/PartBunch/ParticleContainer.hpp	/^    ippl::ParticleAttrib<double> M;$/;"	m	class:ParticleContainer
MAD_Flagger_HH	src/Algorithms/Flagger.h	2;"	d
MAD_PartData_HH	src/Algorithms/PartData.h	2;"	d
MAD_Random_HH	src/Utilities/ClassicRandom.h	2;"	d
MAD_Statement_HH	src/OpalParser/Statement.h	2;"	d
MAP_ORDER	src/Track/TrackCmd.cpp	/^        MAP_ORDER,       \/\/ Truncation order of maps for ThickTracker (default: 1 (linear))$/;"	e	enum:__anon30::__anon31	file:
MARKER	src/AbsBeamline/ElementBase.h	/^    MARKER,$/;"	m	class:ElementType
MASS	src/Structure/Beam.cpp	/^        MASS,      \/\/ The particle rest mass in GeV$/;"	e	enum:__anon63::__anon64	file:
MATERIAL_H	src/Physics/Material.h	19;"	d
MAXFORDER	src/Elements/OpalMultipoleT.h	/^        MAXFORDER,       \/\/ Maximum order in the field expansion$/;"	e	enum:OpalMultipoleT::__anon48
MAXSTEPS	src/Track/TrackCmd.cpp	/^        MAXSTEPS,  \/\/ The maximum timesteps we integrate$/;"	e	enum:__anon30::__anon31	file:
MAXXORDER	src/Elements/OpalMultipoleT.h	/^        MAXXORDER,       \/\/ Maximum order in x in polynomial expansions$/;"	e	enum:OpalMultipoleT::__anon48
MAX_HORIZONTAL_POWER	src/Elements/OpalVerticalFFAMagnet.h	/^        MAX_HORIZONTAL_POWER,$/;"	e	enum:OpalVerticalFFAMagnet::__anon38
MAX_NUM_INSTANCES	src/AbstractObjects/OpalData.cpp	50;"	d	file:
MAX_R	src/Elements/OpalRingDefinition.h	/^        MAX_R,$/;"	e	enum:OpalRingDefinition::__anon39
MDependentBehavior	src/Distribution/Distribution.h	/^        MDependentBehavior(const MDependentBehavior& rhs) : ami_m(rhs.ami_m) {$/;"	f	class:Distribution::MDependentBehavior
MDependentBehavior	src/Distribution/Distribution.h	/^        MDependentBehavior(double a) {$/;"	f	class:Distribution::MDependentBehavior
MDependentBehavior	src/Distribution/Distribution.h	/^    class MDependentBehavior : public BinomialBehaviorSplitter {$/;"	c	class:Distribution
MEMORYDUMP	src/BasicActions/Option.cpp	/^        MEMORYDUMP,$/;"	e	enum:__anon24::__anon25	file:
MESHER_H	src/Utilities/Mesher.h	2;"	d
MESHGENERATOR_H_	src/Structure/MeshGenerator.h	12;"	d
METHOD	src/Track/TrackRun.cpp	/^        METHOD,            \/\/ Tracking method to use.$/;"	e	enum:TRACKRUN::__anon32	file:
MHz2Hz	src/Physics/Units.h	/^    constexpr double MHz2Hz = 1e+6;$/;"	m	namespace:Units
MINBINEMITTED	src/BasicActions/Option.cpp	/^        MINBINEMITTED,$/;"	e	enum:__anon24::__anon25	file:
MINSTEPFORREBIN	src/BasicActions/Option.cpp	/^        MINSTEPFORREBIN,$/;"	e	enum:__anon24::__anon25	file:
MIN_R	src/Elements/OpalRingDefinition.h	/^        MIN_R,$/;"	e	enum:OpalRingDefinition::__anon39
MMatrix	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<Tmplt>::MMatrix() : _matrix(nullptr)$/;"	f	class:interpolation::MMatrix
MMatrix	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<Tmplt>::MMatrix(size_t i, size_t j )$/;"	f	class:interpolation::MMatrix
MMatrix	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<Tmplt>::MMatrix(size_t i, size_t j, Tmplt  value    )$/;"	f	class:interpolation::MMatrix
MMatrix	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<Tmplt>::MMatrix(size_t i, size_t j, Tmplt* data_beg ) : _matrix(nullptr)$/;"	f	class:interpolation::MMatrix
MMatrix	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<double>::MMatrix( const MMatrix<double>& mm ) : _matrix(nullptr)$/;"	f	class:interpolation::MMatrix
MMatrix	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<m_complex>::MMatrix( const MMatrix<m_complex>& mm ) : _matrix(nullptr)$/;"	f	class:interpolation::MMatrix
MMatrix	src/Fields/Interpolation/MMatrix.h	/^class MMatrix$/;"	c	namespace:interpolation
MODE	src/Elements/OpalTravelingWave.h	/^        MODE,           \/\/ The phase shift between cells$/;"	e	enum:OpalTravelingWave::__anon46
MODE	src/Utilities/SDDSParser/data.hpp	/^        enum attributes { MODE$/;"	e	enum:SDDS::data::attributes
MOLYBDENUM_H	src/Physics/Molybdenum.h	23;"	d
MONITOR	src/Algorithms/IndexMap.cpp	/^    MONITOR,$/;"	e	enum:elements	file:
MSLANG_AFFINETRANSFORMATION_H	src/Utilities/MSLang/AffineTransformation.h	2;"	d
MSLANG_ARGUMENTEXTRACTOR_H	src/Utilities/MSLang/ArgumentExtractor.h	2;"	d
MSLANG_BOUNDINGBOX_H	src/Utilities/MSLang/BoundingBox2D.h	22;"	d
MSLANG_DIFFERENCE_H	src/Utilities/MSLang/Difference.h	2;"	d
MSLANG_ELLIPSE_H	src/Utilities/MSLang/Ellipse.h	2;"	d
MSLANG_H	src/Utilities/MSLang.h	2;"	d
MSLANG_INTERSECTION_H	src/Utilities/MSLang/Intersection.h	2;"	d
MSLANG_MASK_H	src/Utilities/MSLang/Mask.h	2;"	d
MSLANG_MATHEVAL_H	src/Utilities/MSLang/matheval.h	2;"	d
MSLANG_POLYGON_H	src/Utilities/MSLang/Polygon.h	2;"	d
MSLANG_QUADTREE_H	src/Utilities/MSLang/QuadTree.h	2;"	d
MSLANG_RECTANGLE_H	src/Utilities/MSLang/Rectangle.h	2;"	d
MSLANG_REPEAT_H	src/Utilities/MSLang/Repeat.h	2;"	d
MSLANG_ROTATION_H	src/Utilities/MSLang/Rotation.h	2;"	d
MSLANG_SHEAR_H	src/Utilities/MSLang/Shear.h	2;"	d
MSLANG_SYMMETRICDIFFERENCE_H	src/Utilities/MSLang/SymmetricDifference.h	2;"	d
MSLANG_TRANSLATE_H	src/Utilities/MSLang/Translation.h	2;"	d
MSLANG_TRIANGLE_H	src/Utilities/MSLang/Triangle.h	2;"	d
MSLANG_UNION_H	src/Utilities/MSLang/Union.h	2;"	d
MTSSUBSTEPS	src/BasicActions/Option.cpp	/^        MTSSUBSTEPS,$/;"	e	enum:__anon24::__anon25	file:
MULTIPOLE	src/AbsBeamline/ElementBase.h	/^    MULTIPOLE,$/;"	m	class:ElementType
MULTIPOLE	src/Algorithms/IndexMap.cpp	/^    MULTIPOLE,$/;"	e	enum:elements	file:
MULTIPOLET	src/AbsBeamline/ElementBase.h	/^    MULTIPOLET,$/;"	m	class:ElementType
MULTIVARIATEGAUSS	src/Distribution/Distribution.h	/^enum class DistributionType : short { NODIST = -1, GAUSS, MULTIVARIATEGAUSS, FLATTOP, FROMFILE };$/;"	m	class:DistributionType
MUON	src/Physics/ParticleProperties.h	/^    MUON,$/;"	m	class:ParticleType
MVector	src/Fields/Interpolation/MVector.cpp	/^MVector<Tmplt>::MVector( const MVector<Tmplt>& mv) : _vector(nullptr)$/;"	f	class:interpolation::MVector
MVector	src/Fields/Interpolation/MVector.cpp	/^MVector<Tmplt>::MVector( size_t i ) : _vector(nullptr)$/;"	f	class:interpolation::MVector
MVector	src/Fields/Interpolation/MVector.cpp	/^MVector<Tmplt>::MVector( size_t size, Tmplt  value ) : _vector(nullptr)$/;"	f	class:interpolation::MVector
MVector	src/Fields/Interpolation/MVector.h	/^  MVector( const Tmplt* ta_beg, const Tmplt* ta_end ) : _vector(nullptr) { build_vector(ta_beg, ta_end); } \/\/copy from data and put it in the vector$/;"	f	class:interpolation::MVector
MVector	src/Fields/Interpolation/MVector.h	/^  MVector( std::vector<Tmplt> tv) : _vector(nullptr)         { build_vector(&tv[0], &tv.back()+1); }$/;"	f	class:interpolation::MVector
MVector	src/Fields/Interpolation/MVector.h	/^  MVector() : _vector(nullptr)                               {;}$/;"	f	class:interpolation::MVector
MVector	src/Fields/Interpolation/MVector.h	/^class MVector$/;"	c	namespace:interpolation
MVector_h	src/Fields/Interpolation/MVector.h	29;"	d
MVpm2Vpm	src/Physics/Units.h	/^    constexpr double MVpm2Vpm = 1 \/ Vpm2MVpm;$/;"	m	namespace:Units
MXMYZ	src/Fields/Fieldmap.h	/^    MXMYZ,$/;"	e	enum:SwapType
MXYMZ	src/Fields/Fieldmap.h	/^    MXYMZ,$/;"	e	enum:SwapType
MYLAR_H	src/Physics/Mylar.h	23;"	d
MYXZ	src/Fields/Fieldmap.h	/^    MYXZ,$/;"	e	enum:SwapType
MZYX	src/Fields/Fieldmap.h	/^    MZYX$/;"	e	enum:SwapType
Macro	src/OpalParser/Macro.cpp	/^Macro::Macro(const std::string &name, Object *parent):$/;"	f	class:Macro
Macro	src/OpalParser/Macro.cpp	/^Macro::Macro(int size, const char *name, const char *help):$/;"	f	class:Macro
Macro	src/OpalParser/Macro.h	/^class Macro: public Object {$/;"	c
MacroCmd	src/OpalParser/MacroCmd.cpp	/^MacroCmd::MacroCmd():$/;"	f	class:MacroCmd
MacroCmd	src/OpalParser/MacroCmd.cpp	/^MacroCmd::MacroCmd(const std::string &name, MacroCmd *parent):$/;"	f	class:MacroCmd
MacroCmd	src/OpalParser/MacroCmd.h	/^class MacroCmd: public Macro {$/;"	c
MacroStream	src/OpalParser/MacroStream.cpp	/^MacroStream::MacroStream(const std::string &macName):$/;"	f	class:MacroStream
MacroStream	src/OpalParser/MacroStream.h	/^class MacroStream: public TokenStream {$/;"	c
MakePolyVector	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^MVector<double>& SquarePolynomialVector::MakePolyVector($/;"	f	class:interpolation::SquarePolynomialVector
MakePolyVector	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^double* SquarePolynomialVector::MakePolyVector(const double* point, double* polyVector) const$/;"	f	class:interpolation::SquarePolynomialVector
MakeSquareDerivVector	src/Fields/Interpolation/SolveFactory.cpp	/^std::vector<double> SolveFactory::MakeSquareDerivVector($/;"	f	class:interpolation::SolveFactory
MakeSquareVector	src/Fields/Interpolation/SolveFactory.cpp	/^std::vector<double> SolveFactory::MakeSquareVector(std::vector<double> x) {$/;"	f	class:interpolation::SolveFactory
Map	src/Fields/Fieldmap.h	/^        Fieldmap* Map;$/;"	m	struct:Fieldmap::FieldmapDescription
MapType	src/Fields/Fieldmap.h	/^enum MapType {$/;"	g
Marker	src/AbsBeamline/Marker.cpp	/^Marker::Marker():$/;"	f	class:Marker
Marker	src/AbsBeamline/Marker.cpp	/^Marker::Marker(const Marker &right):$/;"	f	class:Marker
Marker	src/AbsBeamline/Marker.cpp	/^Marker::Marker(const std::string &name):$/;"	f	class:Marker
Marker	src/AbsBeamline/Marker.h	/^class Marker: public Component {$/;"	c
MarkerRep	src/BeamlineCore/MarkerRep.cpp	/^MarkerRep::MarkerRep():$/;"	f	class:MarkerRep
MarkerRep	src/BeamlineCore/MarkerRep.cpp	/^MarkerRep::MarkerRep(const MarkerRep &right):$/;"	f	class:MarkerRep
MarkerRep	src/BeamlineCore/MarkerRep.cpp	/^MarkerRep::MarkerRep(const std::string &name):$/;"	f	class:MarkerRep
MarkerRep	src/BeamlineCore/MarkerRep.h	/^class MarkerRep: public Marker {$/;"	c
Mask	src/Utilities/MSLang/Mask.h	/^    struct Mask: public Function {$/;"	s	namespace:mslang
Material	src/Physics/Material.h	/^        Material(double atomicNumber,$/;"	f	class:Physics::Material
Material	src/Physics/Material.h	/^    class Material {$/;"	c	namespace:Physics
Matrix3D	src/BeamlineGeometry/Matrix3D.cpp	/^Matrix3D::Matrix3D(const Vector3D &a, const Vector3D &b, const Vector3D &c) {$/;"	f	class:Matrix3D
Matrix3D	src/BeamlineGeometry/Matrix3D.cpp	/^Matrix3D::Matrix3D(double x11, double x12, double x13,$/;"	f	class:Matrix3D
Matrix3D	src/BeamlineGeometry/Matrix3D.h	/^class Matrix3D {$/;"	c
Matrix3D	src/BeamlineGeometry/Matrix3D.h	/^inline Matrix3D::Matrix3D() {$/;"	f	class:Matrix3D
Max	src/Expressions/Expressions.cpp	/^    double Max(double a, double b) {$/;"	f	namespace:Expressions
MaxPhasesT	src/AbstractObjects/OpalData.h	/^typedef std::pair<std::string, double> MaxPhasesT;$/;"	t
Maxa	src/Expressions/Expressions.cpp	/^    double Maxa(const std::vector<double>& array) {$/;"	f	namespace:Expressions
MaxwellTest	tests/opal_test_utilities/Maxwell.cpp	/^MaxwellTest::MaxwellTest(Vector_t dR, double \/*dt*\/, Component* field) :$/;"	f	class:MaxwellTest
MaxwellTest	tests/opal_test_utilities/Maxwell.h	/^class MaxwellTest {$/;"	c
MeV2GeV	src/Physics/Units.h	/^    constexpr double MeV2GeV = 1 \/ GeV2MeV;$/;"	m	namespace:Units
MeV2eV	src/Physics/Units.h	/^    constexpr double MeV2eV = 1e+6;$/;"	m	namespace:Units
MeV2keV	src/Physics/Units.h	/^    constexpr double MeV2keV = MeV2eV * eV2keV;$/;"	m	namespace:Units
MemberType	src/Lines/SequenceMember.h	/^    enum MemberType {$/;"	g	class:SequenceMember
MemoryProfiler	src/Structure/MemoryProfiler.cpp	/^MemoryProfiler::MemoryProfiler(const std::string& fname, bool restart)$/;"	f	class:MemoryProfiler
MemoryProfiler	src/Structure/MemoryProfiler.h	/^class MemoryProfiler : public SDDSWriter {$/;"	c
Mesh	src/Fields/Interpolation/Mesh.h	/^class Mesh {$/;"	c	namespace:interpolation
MeshData	src/Structure/MeshGenerator.h	/^class MeshData {$/;"	c
MeshGenerator	src/Structure/MeshGenerator.cpp	/^MeshGenerator::MeshGenerator() : elements_m() {$/;"	f	class:MeshGenerator
MeshGenerator	src/Structure/MeshGenerator.h	/^class MeshGenerator {$/;"	c
MeshType	src/Structure/MeshGenerator.h	/^    enum MeshType { OTHER = 0, DIPOLE, QUADRUPOLE, SEXTUPOLE, OCTUPOLE, SOLENOID, RFCAVITY };$/;"	g	class:MeshGenerator
Mesh_t	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^typedef ippl::UniformCartesian<double, Dim> Mesh_t;$/;"	t	file:
Mesh_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef UniformCartesian<DIM>                                 Mesh_t;$/;"	t	file:
Mesher	src/Utilities/Mesher.cpp	/^Mesher::Mesher(std::vector<Vector_t<double, 3>> &vertices):$/;"	f	class:Mesher
Mesher	src/Utilities/Mesher.h	/^class Mesher {$/;"	c
Min	src/Expressions/Expressions.cpp	/^    double Min(double a, double b) {$/;"	f	namespace:Expressions
Mina	src/Expressions/Expressions.cpp	/^    double Mina(const std::vector<double>& array) {$/;"	f	namespace:Expressions
MockComponent	tests/opal_src/Utilities/MockComponent.h	/^    MockComponent() : Component("MockComponent"), geom_m(nullptr) {$/;"	f	class:MockComponent
MockComponent	tests/opal_src/Utilities/MockComponent.h	/^    MockComponent(const MockComponent& rhs)$/;"	f	class:MockComponent
MockComponent	tests/opal_src/Utilities/MockComponent.h	/^class MockComponent : public Component {$/;"	c
MockComponent2	tests/opal_src/Utilities/MockComponent.h	/^    MockComponent2() : Component("MockComponent"), geom_m(nullptr), refB(1,2,3) {$/;"	f	class:MockComponent2
MockComponent2	tests/opal_src/Utilities/MockComponent.h	/^    MockComponent2(const MockComponent2& rhs)$/;"	f	class:MockComponent2
MockComponent2	tests/opal_src/Utilities/MockComponent.h	/^class MockComponent2 : public Component {$/;"	c
Mod	src/Expressions/Expressions.cpp	/^    double Mod(double a, double b) {$/;"	f	namespace:Expressions
Molybdenum	src/Physics/Molybdenum.h	/^        Molybdenum():$/;"	f	class:Physics::Molybdenum
Molybdenum	src/Physics/Molybdenum.h	/^    class Molybdenum: public Material {$/;"	c	namespace:Physics
Monitor	src/AbsBeamline/Monitor.cpp	/^Monitor::Monitor() : Monitor("") {$/;"	f	class:Monitor
Monitor	src/AbsBeamline/Monitor.cpp	/^Monitor::Monitor(const Monitor& right)$/;"	f	class:Monitor
Monitor	src/AbsBeamline/Monitor.cpp	/^Monitor::Monitor(const std::string& name)$/;"	f	class:Monitor
Monitor	src/AbsBeamline/Monitor.h	/^class Monitor : public Component {$/;"	c
MonitorRep	src/BeamlineCore/MonitorRep.cpp	/^MonitorRep::MonitorRep():$/;"	f	class:MonitorRep
MonitorRep	src/BeamlineCore/MonitorRep.cpp	/^MonitorRep::MonitorRep(const MonitorRep &right):$/;"	f	class:MonitorRep
MonitorRep	src/BeamlineCore/MonitorRep.cpp	/^MonitorRep::MonitorRep(const std::string &name):$/;"	f	class:MonitorRep
MonitorRep	src/BeamlineCore/MonitorRep.h	/^class MonitorRep: public Monitor {$/;"	c
MonitorStatisticsWriter	src/Structure/MonitorStatisticsWriter.cpp	/^MonitorStatisticsWriter::MonitorStatisticsWriter(const std::string& fname, bool restart)$/;"	f	class:MonitorStatisticsWriter
MonitorStatisticsWriter	src/Structure/MonitorStatisticsWriter.h	/^class MonitorStatisticsWriter : public SDDSWriter {$/;"	c
Mpy	src/Expressions/Expressions.cpp	/^    double Mpy(double a, double b) {$/;"	f	namespace:Expressions
MultiVariateGaussian	src/Distribution/MultiVariateGaussian.hpp	/^    MultiVariateGaussian(std::shared_ptr<ParticleContainer_t> &pc, std::shared_ptr<FieldContainer_t> &fc, std::shared_ptr<Distribution_t> &opalDist)$/;"	f	class:MultiVariateGaussian
MultiVariateGaussian	src/Distribution/MultiVariateGaussian.hpp	/^class MultiVariateGaussian : public SamplingBase {$/;"	c
Multipole	src/AbsBeamline/Multipole.cpp	/^Multipole::Multipole() : Multipole("") {$/;"	f	class:Multipole
Multipole	src/AbsBeamline/Multipole.cpp	/^Multipole::Multipole(const Multipole& right)$/;"	f	class:Multipole
Multipole	src/AbsBeamline/Multipole.cpp	/^Multipole::Multipole(const std::string& name)$/;"	f	class:Multipole
Multipole	src/AbsBeamline/Multipole.h	/^class Multipole : public Component {$/;"	c
MultipoleRep	src/BeamlineCore/MultipoleRep.cpp	/^MultipoleRep::MultipoleRep():$/;"	f	class:MultipoleRep
MultipoleRep	src/BeamlineCore/MultipoleRep.cpp	/^MultipoleRep::MultipoleRep(const MultipoleRep &multipole):$/;"	f	class:MultipoleRep
MultipoleRep	src/BeamlineCore/MultipoleRep.cpp	/^MultipoleRep::MultipoleRep(const std::string &name):$/;"	f	class:MultipoleRep
MultipoleRep	src/BeamlineCore/MultipoleRep.h	/^class MultipoleRep: public Multipole {$/;"	c
MultipoleT	src/AbsBeamline/MultipoleT.cpp	/^MultipoleT::MultipoleT(const MultipoleT& right)$/;"	f	class:MultipoleT
MultipoleT	src/AbsBeamline/MultipoleT.cpp	/^MultipoleT::MultipoleT(const std::string& name)$/;"	f	class:MultipoleT
MultipoleT	src/AbsBeamline/MultipoleT.h	/^class MultipoleT : public Component {$/;"	c
MultipoleTBase	src/AbsBeamline/MultipoleTBase.cpp	/^MultipoleTBase::MultipoleTBase():$/;"	f	class:MultipoleTBase
MultipoleTBase	src/AbsBeamline/MultipoleTBase.cpp	/^MultipoleTBase::MultipoleTBase(const MultipoleTBase &right):$/;"	f	class:MultipoleTBase
MultipoleTBase	src/AbsBeamline/MultipoleTBase.cpp	/^MultipoleTBase::MultipoleTBase(const std::string &name):$/;"	f	class:MultipoleTBase
MultipoleTBase	src/AbsBeamline/MultipoleTBase.h	/^class MultipoleTBase : public Component {$/;"	c
MultipoleTCurvedConstRadius	src/AbsBeamline/MultipoleTCurvedConstRadius.cpp	/^MultipoleTCurvedConstRadius::MultipoleTCurvedConstRadius($/;"	f	class:MultipoleTCurvedConstRadius
MultipoleTCurvedConstRadius	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^class MultipoleTCurvedConstRadius: public MultipoleTBase {$/;"	c
MultipoleTCurvedVarRadius	src/AbsBeamline/MultipoleTCurvedVarRadius.cpp	/^MultipoleTCurvedVarRadius::MultipoleTCurvedVarRadius($/;"	f	class:MultipoleTCurvedVarRadius
MultipoleTCurvedVarRadius	src/AbsBeamline/MultipoleTCurvedVarRadius.cpp	/^MultipoleTCurvedVarRadius::MultipoleTCurvedVarRadius(const std::string &name):$/;"	f	class:MultipoleTCurvedVarRadius
MultipoleTCurvedVarRadius	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^class MultipoleTCurvedVarRadius: public MultipoleTBase {$/;"	c
MultipoleTStraight	src/AbsBeamline/MultipoleTStraight.cpp	/^MultipoleTStraight::MultipoleTStraight(const MultipoleTStraight &right):$/;"	f	class:MultipoleTStraight
MultipoleTStraight	src/AbsBeamline/MultipoleTStraight.cpp	/^MultipoleTStraight::MultipoleTStraight(const std::string &name):$/;"	f	class:MultipoleTStraight
MultipoleTStraight	src/AbsBeamline/MultipoleTStraight.h	/^class MultipoleTStraight: public MultipoleTBase {$/;"	c
Mylar	src/Physics/Mylar.h	/^        Mylar():$/;"	f	class:Physics::Mylar
Mylar	src/Physics/Mylar.h	/^    class Mylar: public Material {$/;"	c	namespace:Physics
NAME	src/Utilities/SDDSParser/array.hpp	/^        enum attributes { NAME$/;"	e	enum:SDDS::array::attributes
NAME	src/Utilities/SDDSParser/associate.hpp	/^        enum attributes { NAME$/;"	e	enum:SDDS::associate::attributes
NAME	src/Utilities/SDDSParser/column.hpp	/^        enum attributes { NAME$/;"	e	enum:SDDS::column::attributes
NAME	src/Utilities/SDDSParser/parameter.hpp	/^        enum attributes { NAME$/;"	e	enum:SDDS::parameter::attributes
NDGrid	src/Fields/Interpolation/NDGrid.cpp	/^NDGrid::NDGrid() : coord_m(), maps_m(), constantSpacing_m(false)  {$/;"	f	class:interpolation::NDGrid
NDGrid	src/Fields/Interpolation/NDGrid.cpp	/^NDGrid::NDGrid(const NDGrid& rhs) : coord_m(rhs.coord_m), maps_m(rhs.maps_m),$/;"	f	class:interpolation::NDGrid
NDGrid	src/Fields/Interpolation/NDGrid.cpp	/^NDGrid::NDGrid(int nDimensions, int* size, double* spacing, double* min)$/;"	f	class:interpolation::NDGrid
NDGrid	src/Fields/Interpolation/NDGrid.cpp	/^NDGrid::NDGrid(std::vector< std::vector<double> > gridCoordinates)$/;"	f	class:interpolation::NDGrid
NDGrid	src/Fields/Interpolation/NDGrid.cpp	/^NDGrid::NDGrid(std::vector<int> size, std::vector<const double *> gridCoordinates)$/;"	f	class:interpolation::NDGrid
NDGrid	src/Fields/Interpolation/NDGrid.h	/^class NDGrid : public Mesh {$/;"	c	namespace:interpolation
NDGridTest	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^    NDGridTest() : grid_m(nullptr) {$/;"	f	class:ndgridtest::NDGridTest
NDGridTest	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^class NDGridTest : public ::testing::Test {$/;"	c	namespace:ndgridtest	file:
NDIdx_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef NDIndex<DIM>                                          NDIdx_t;$/;"	t	file:
NEXT	src/Lines/SequenceMember.h	/^        NEXT      = 3,$/;"	e	enum:SequenceMember::PositionType
NFREQ	src/Utilities/OpalFilter.cpp	/^        NFREQ,      \/\/ Number of frequencies in fixedFFTLowPass filter$/;"	e	enum:__anon55::__anon56	file:
NLEFT	src/Utilities/OpalFilter.cpp	/^        NLEFT,      \/\/ Number of points to the left in S-G filter$/;"	e	enum:__anon55::__anon56	file:
NLEFT_DEFAULT	src/Utilities/OpalFilter.cpp	35;"	d	file:
NLHS	src/BasicActions/Option.cpp	/^        NLHS,$/;"	e	enum:__anon24::__anon25	file:
NODIST	src/Distribution/Distribution.h	/^enum class DistributionType : short { NODIST = -1, GAUSS, MULTIVARIATEGAUSS, FLATTOP, FROMFILE };$/;"	m	class:DistributionType
NONE	src/AbstractObjects/AttributeHandler.h	/^        NONE};$/;"	e	enum:AttributeHandler::OwnerType
NONE	src/Distribution/Distribution.h	/^    enum class EmissionModel : unsigned short { NONE, ASTRA, NONEQUIL };$/;"	m	class:Distribution::EmissionModel
NONE	src/Distribution/Distribution.h	/^    enum class InputMomentumUnits : unsigned short { NONE, EVOVERC };$/;"	m	class:Distribution::InputMomentumUnits
NONE	src/Structure/FieldSolverCmd.h	/^enum class FieldSolverCmdType : short { NONE = -1, FFT = 0 };$/;"	m	class:FieldSolverCmdType
NONE	src/Track/TrackRun.h	/^    enum class RunMethod : unsigned short { NONE, PARALLEL };$/;"	m	class:TrackRun::RunMethod
NO_ROW_COUNT	src/Utilities/SDDSParser/data.hpp	/^                        , NO_ROW_COUNT$/;"	e	enum:SDDS::data::attributes
NPART	src/Structure/Beam.cpp	/^        NPART,     \/\/ Number of particles per bunch$/;"	e	enum:__anon63::__anon64	file:
NPOINTS	src/Utilities/OpalFilter.cpp	/^        NPOINTS,    \/\/ Number of points in Savitzky-Golay filter$/;"	e	enum:__anon55::__anon56	file:
NPOINTS_DEFAULT	src/Utilities/OpalFilter.cpp	34;"	d	file:
NRIGHT	src/Utilities/OpalFilter.cpp	/^        NRIGHT,     \/\/ Number of points to the right in S-G filter$/;"	e	enum:__anon55::__anon56	file:
NRIGHT_DEFAULT	src/Utilities/OpalFilter.cpp	36;"	d	file:
NSLICES	src/Elements/OpalDrift.h	/^         NSLICES,            \/\/ The number of slices \/ steps per element for map tracking$/;"	e	enum:OpalDrift::__anon50
NUMBLOCKS	src/BasicActions/Option.cpp	/^        NUMBLOCKS,$/;"	e	enum:__anon24::__anon25	file:
NUMCELLS	src/Elements/OpalTravelingWave.h	/^        NUMCELLS,       \/\/ Number of cells in a TW structure$/;"	e	enum:OpalTravelingWave::__anon46
NX	src/Structure/FieldSolverCmd.h	/^        NX,        \/\/ mesh sixe in x$/;"	e	enum:FieldSolverCmdType::FIELDSOLVER::__anon62
NY	src/Structure/FieldSolverCmd.h	/^        NY,        \/\/ mesh sixe in y$/;"	e	enum:FieldSolverCmdType::FIELDSOLVER::__anon62
NZ	src/Structure/FieldSolverCmd.h	/^        NZ,        \/\/ mesh sixe in z$/;"	e	enum:FieldSolverCmdType::FIELDSOLVER::__anon62
N_m	src/Utilities/MSLang/Repeat.h	/^        unsigned int N_m;$/;"	m	struct:mslang::Repeat
NameMap	src/AbsBeamline/AttributeSet.h	/^    typedef std::map<std::string, double, std::less<std::string> > NameMap;$/;"	t	class:AttributeSet
Ne	src/Expressions/Expressions.cpp	/^    bool Ne(double a, double b) {$/;"	f	namespace:Expressions
Neg	src/Expressions/Expressions.cpp	/^    double Neg(double a) {$/;"	f	namespace:Expressions
NewLineAdder	tests/Main.cpp	/^class NewLineAdder: public ::testing::EmptyTestEventListener {$/;"	c	file:
Norm	src/Algorithms/Quaternion.hpp	/^inline double Quaternion::Norm() const {$/;"	f	class:Quaternion
NormalComponentErrors	src/AbsBeamline/Multipole.h	/^    std::vector<double> NormalComponentErrors;$/;"	m	class:Multipole
NormalComponents	src/AbsBeamline/Multipole.h	/^    std::vector<double> NormalComponents;$/;"	m	class:Multipole
NullField	src/Fields/NullField.cpp	/^NullField::NullField()$/;"	f	class:NullField
NullField	src/Fields/NullField.cpp	/^NullField::NullField(const NullField & rhs):$/;"	f	class:NullField
NullField	src/Fields/NullField.h	/^class NullField: public EMField {$/;"	c
NullGeometry	src/BeamlineGeometry/NullGeometry.h	/^class NullGeometry: public BGeometryBase {$/;"	c
NullGeometry	src/BeamlineGeometry/NullGeometry.h	/^inline NullGeometry::NullGeometry()$/;"	f	class:NullGeometry
NullGeometry	src/BeamlineGeometry/NullGeometry.h	/^inline NullGeometry::NullGeometry(const NullGeometry & o) : BGeometryBase(o)$/;"	f	class:NullGeometry
NumberOfPolynomialCoefficients	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^unsigned int SquarePolynomialVector::NumberOfPolynomialCoefficients(int pointDimension, int order) {$/;"	f	class:interpolation::SquarePolynomialVector
NumberPointsLeft_m	src/Filters/SavitzkyGolay.h	/^    int NumberPointsLeft_m;$/;"	m	class:SavitzkyGolayFilter
NumberPointsRight_m	src/Filters/SavitzkyGolay.h	/^    int NumberPointsRight_m;$/;"	m	class:SavitzkyGolayFilter
NumberPoints_m	src/Filters/SavitzkyGolay.h	/^    int NumberPoints_m;$/;"	m	class:SavitzkyGolayFilter
OArray	src/AbstractObjects/Expressions.h	/^    OArray<T>::OArray()$/;"	f	class:Expressions::OArray
OArray	src/AbstractObjects/Expressions.h	/^    OArray<T>::OArray(const OArray<T> &)$/;"	f	class:Expressions::OArray
OArray	src/AbstractObjects/Expressions.h	/^    template <class T> class OArray {$/;"	c	namespace:Expressions
OCTUPOLE	src/AbsBeamline/Multipole.cpp	/^    enum { DIPOLE, QUADRUPOLE, SEXTUPOLE, OCTUPOLE, DECAPOLE };$/;"	e	enum:__anon20::__anon21	file:
OCTUPOLE	src/Algorithms/IndexMap.cpp	/^    OCTUPOLE,$/;"	e	enum:elements	file:
OCTUPOLE	src/Structure/MeshGenerator.h	/^    enum MeshType { OTHER = 0, DIPOLE, QUADRUPOLE, SEXTUPOLE, OCTUPOLE, SOLENOID, RFCAVITY };$/;"	e	enum:MeshGenerator::MeshType
OFF	src/AbsBeamline/Corrector.h	/^        OFF,$/;"	e	enum:Corrector::Plane
OFF	src/AbsBeamline/Monitor.h	/^        OFF,$/;"	e	enum:Monitor::Plane
OK	src/Utilities/RegularExpression.cpp	/^bool RegularExpression::OK() const {$/;"	f	class:RegularExpression
OPALFieldSolver_m	src/PartBunch/PartBunch.hpp	/^    std::shared_ptr<FieldSolverCmd> OPALFieldSolver_m;$/;"	m	class:PartBunch
OPALTimer	src/Utilities/Timer.cpp	/^namespace OPALTimer {$/;"	n	file:
OPALTimer	src/Utilities/Timer.h	/^namespace OPALTimer {$/;"	n
OPALXMAIN	src/Main.cpp	/^namespace OPALXMAIN {$/;"	n	file:
OPAL_AAutomatic_HH	src/Expressions/AAutomatic.h	2;"	d
OPAL_ABinary_HH	src/Expressions/ABinary.h	2;"	d
OPAL_AColumn_HH	src/Expressions/AColumn.h	2;"	d
OPAL_ADeferred_HH	src/Expressions/ADeferred.h	2;"	d
OPAL_AList_HH	src/Expressions/AList.h	2;"	d
OPAL_ARefExpr_HH	src/Expressions/ARefExpr.h	2;"	d
OPAL_ARow_HH	src/Expressions/ARow.h	2;"	d
OPAL_ASUnary_HH	src/Expressions/ASUnary.h	2;"	d
OPAL_ATable_HH	src/Expressions/ATable.h	2;"	d
OPAL_AUnary_HH	src/Expressions/AUnary.h	2;"	d
OPAL_AValue_HH	src/Expressions/AValue.h	2;"	d
OPAL_Action_HH	src/AbstractObjects/Action.h	2;"	d
OPAL_AttributeBase_HH	src/AbstractObjects/AttributeBase.h	2;"	d
OPAL_AttributeHandler_HH	src/AbstractObjects/AttributeHandler.h	2;"	d
OPAL_Attribute_HH	src/AbstractObjects/Attribute.h	2;"	d
OPAL_Attributes_HH	src/Attributes/Attributes.h	2;"	d
OPAL_BASICACTIONS_DUMPEMFIELDS_HH	src/BasicActions/DumpEMFields.h	20;"	d
OPAL_BEAMLINE_H	src/Elements/OpalBeamline.h	19;"	d
OPAL_BeamSequence_HH	src/AbstractObjects/BeamSequence.h	2;"	d
OPAL_Beam_HH	src/Structure/Beam.h	21;"	d
OPAL_Bins_HH	src/Algorithms/PartBins.h	20;"	d
OPAL_BoolArray_HH	src/Attributes/BoolArray.h	2;"	d
OPAL_BoolConstant_HH	src/ValueDefinitions/BoolConstant.h	19;"	d
OPAL_Bool_HH	src/Attributes/Bool.h	2;"	d
OPAL_COMPILE_OPTIONS	src/OPALconfig.h	11;"	d
OPAL_Call_HH	src/BasicActions/Call.h	19;"	d
OPAL_Configure_HH	src/OpalConfigure/Configure.h	26;"	d
OPAL_DUMPFIELDS_HH	src/BasicActions/DumpFields.h	19;"	d
OPAL_Definition_HH	src/AbstractObjects/Definition.h	2;"	d
OPAL_Directory_HH	src/AbstractObjects/Directory.h	2;"	d
OPAL_Distribution_HH	src/Distribution/Distribution.h	19;"	d
OPAL_EARLY_LEAVE_EXCEPTION_H	src/Utilities/EarlyLeaveException.h	14;"	d
OPAL_ELEMENTS_OpalOffset_OpalGlobalCartesianOffset_HH	src/Elements/OpalOffset/OpalGlobalCartesianOffset.h	30;"	d
OPAL_ELEMENTS_OpalOffset_OpalGlobalCylindricalOffset_HH	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.h	30;"	d
OPAL_ELEMENTS_OpalOffset_OpalLocalCartesianOffset_HH	src/Elements/OpalOffset/OpalLocalCartesianOffset.h	30;"	d
OPAL_ELEMENTS_OpalOffset_OpalLocalCylindricalOffset_HH	src/Elements/OpalOffset/OpalLocalCylindricalOffset.h	30;"	d
OPAL_ELEMENT_POSITION_WRITER_H	src/Structure/ElementPositionWriter.h	2;"	d
OPAL_Echo_HH	src/BasicActions/Echo.h	19;"	d
OPAL_Element_HH	src/AbstractObjects/Element.h	31;"	d
OPAL_Expressions_HH	src/AbstractObjects/Expressions.h	45;"	d
OPAL_FIELD_CONTAINER_H	src/PartBunch/FieldContainer.hpp	2;"	d
OPAL_FIELD_SOLVER_H	src/PartBunch/FieldSolver.hpp	2;"	d
OPAL_FILTER_HH	src/Utilities/OpalFilter.h	21;"	d
OPAL_FieldSolver_HH	src/Structure/FieldSolverCmd.h	22;"	d
OPAL_H5PARTWRAPPERFORPT_H	src/Structure/H5PartWrapperForPT.h	19;"	d
OPAL_H5PARTWRAPPER_H	src/Structure/H5PartWrapper.h	2;"	d
OPAL_H5_WRITER_H	src/Structure/H5Writer.h	19;"	d
OPAL_Help_HH	src/BasicActions/Help.h	19;"	d
OPAL_INDEXMAP_H	src/Algorithms/IndexMap.h	24;"	d
OPAL_IfStatement_HH	src/OpalParser/IfStatement.h	2;"	d
OPAL_Indexer_HH	src/Expressions/Indexer.h	2;"	d
OPAL_Invalidator_HH	src/AbstractObjects/Invalidator.h	2;"	d
OPAL_LASERPROFILE_HH	src/Distribution/LaserProfile.h	2;"	d
OPAL_LBAL_WRITER_H	src/Structure/LBalWriter.h	20;"	d
OPAL_LOAD_BALANCER_H	src/PartBunch/LoadBalancer.hpp	2;"	d
OPAL_LineTemplate_HH	src/Lines/LineTemplate.h	25;"	d
OPAL_Line_HH	src/Lines/Line.h	22;"	d
OPAL_MATRIX_HH	src/Algorithms/BoostMatrix.h	19;"	d
OPAL_MATRIX_HH	src/Algorithms/Matrix.h	2;"	d
OPAL_MEMORY_PROFILER_H	src/Structure/MemoryProfiler.h	22;"	d
OPAL_MONITOR_STATISTICS_WRITER_H	src/Structure/MonitorStatisticsWriter.h	19;"	d
OPAL_OPALMULTIPOLET_HH	src/Elements/OpalMultipoleT.h	30;"	d
OPAL_OPALSOURCE_HH	src/Elements/OpalSource.h	19;"	d
OPAL_OPALVERTICALFFAMAGNET_H	src/Elements/OpalVerticalFFAMagnet.h	19;"	d
OPAL_ORBITTHREADER_H	src/Algorithms/OrbitThreader.h	23;"	d
OPAL_ObjectFunction_HH	src/AbstractObjects/ObjectFunction.h	2;"	d
OPAL_Object_HH	src/AbstractObjects/Object.h	2;"	d
OPAL_OpalCavity_HH	src/Elements/OpalCavity.h	19;"	d
OPAL_OpalData_HH	src/AbstractObjects/OpalData.h	23;"	d
OPAL_OpalDrift_HH	src/Elements/OpalDrift.h	19;"	d
OPAL_OpalElement_HH	src/Elements/OpalElement.h	19;"	d
OPAL_OpalException_HH	src/Utilities/OpalException.h	2;"	d
OPAL_OpalMarker_HH	src/Elements/OpalMarker.h	2;"	d
OPAL_OpalMonitor_HH	src/Elements/OpalMonitor.h	19;"	d
OPAL_OpalMultipole_HH	src/Elements/OpalMultipole.h	19;"	d
OPAL_OpalParser_HH	src/OpalParser/OpalParser.h	2;"	d
OPAL_OpalProbe_HH	src/Elements/OpalProbe.h	19;"	d
OPAL_OpalRingDefinition_HH	src/Elements/OpalRingDefinition.h	29;"	d
OPAL_OpalSolenoid_HH	src/Elements/OpalSolenoid.h	19;"	d
OPAL_OpalTravelingWave_HH	src/Elements/OpalTravelingWave.h	19;"	d
OPAL_OpalVacuum_HH	src/Elements/OpalVacuum.h	23;"	d
OPAL_Option_HH	src/BasicActions/Option.h	21;"	d
OPAL_PARTICLE_CONTAINER_H	src/PartBunch/ParticleContainer.hpp	3;"	d
OPAL_PROJECT_NAME	src/OPALconfig.h	2;"	d
OPAL_PROJECT_VERSION	src/OPALconfig.h	5;"	d
OPAL_PSystem_HH	src/BasicActions/PSystem.h	19;"	d
OPAL_ParallelTracker_HH	src/Algorithms/ParallelTracker.h	23;"	d
OPAL_PartBunch_HH	src/Algorithms/.PartBunch.h	20;"	d
OPAL_PlaceRep_HH	src/AbstractObjects/PlaceRep.h	2;"	d
OPAL_Place_HH	src/Attributes/Place.h	2;"	d
OPAL_PredefinedString_HH	src/Attributes/PredefinedString.h	20;"	d
OPAL_QUATERNION_H	src/Algorithms/Quaternion.hpp	2;"	d
OPAL_Quit_HH	src/BasicActions/Quit.h	19;"	d
OPAL_RangeRep_HH	src/AbstractObjects/RangeRep.h	2;"	d
OPAL_RangeSelector_HH	src/Tables/RangeSelector.h	21;"	d
OPAL_Range_HH	src/Attributes/Range.h	2;"	d
OPAL_RealArray_HH	src/Attributes/RealArray.h	2;"	d
OPAL_RealConstant_HH	src/ValueDefinitions/RealConstant.h	19;"	d
OPAL_RealVariable_HH	src/ValueDefinitions/RealVariable.h	19;"	d
OPAL_RealVector_HH	src/ValueDefinitions/RealVector.h	19;"	d
OPAL_Real_HH	src/Attributes/Real.h	2;"	d
OPAL_Reference_HH	src/Attributes/Reference.h	2;"	d
OPAL_RegularExpression_HH	src/Utilities/RegularExpression.h	2;"	d
OPAL_Replacer_HH	src/Lines/Replacer.h	2;"	d
OPAL_SAutomatic_HH	src/Expressions/SAutomatic.h	2;"	d
OPAL_SBinary_HH	src/Expressions/SBinary.h	2;"	d
OPAL_SCell_HH	src/Expressions/SCell.h	2;"	d
OPAL_SConstant_HH	src/Expressions/SConstant.h	2;"	d
OPAL_SDDS_WRITER_H	src/Structure/SDDSWriter.h	20;"	d
OPAL_SDeferred_HH	src/Expressions/SDeferred.h	2;"	d
OPAL_SFunction_HH	src/Expressions/SFunction.h	2;"	d
OPAL_SHash_HH	src/Expressions/SHash.h	2;"	d
OPAL_SNull_HH	src/Expressions/SNull.h	2;"	d
OPAL_SRefAttr_HH	src/Expressions/SRefAttr.h	2;"	d
OPAL_SRefExpr_HH	src/Expressions/SRefExpr.h	2;"	d
OPAL_STAT_BASE_WRITER_H	src/Structure/StatBaseWriter.h	22;"	d
OPAL_STAT_WRITER_H	src/Structure/StatWriter.h	20;"	d
OPAL_SUnary_HH	src/Expressions/SUnary.h	2;"	d
OPAL_SValue_HH	src/Expressions/SValue.h	2;"	d
OPAL_Select_HH	src/BasicActions/Select.h	19;"	d
OPAL_Selector_HH	src/Tables/Selector.h	19;"	d
OPAL_SequenceMember_HH	src/Lines/SequenceMember.h	2;"	d
OPAL_SequenceParser_HH	src/Lines/SequenceParser.h	2;"	d
OPAL_SequenceTemplate_HH	src/Lines/SequenceTemplate.h	25;"	d
OPAL_Sequence_HH	src/Lines/Sequence.h	22;"	d
OPAL_Stop_HH	src/BasicActions/Stop.h	19;"	d
OPAL_StringArray_HH	src/Attributes/StringArray.h	2;"	d
OPAL_StringConstant_HH	src/ValueDefinitions/StringConstant.h	19;"	d
OPAL_String_HH	src/Attributes/String.h	2;"	d
OPAL_System_HH	src/BasicActions/System.h	19;"	d
OPAL_TFind_HH	src/Expressions/TFind.h	2;"	d
OPAL_TFunction0_HH	src/Expressions/TFunction0.h	2;"	d
OPAL_TFunction1_HH	src/Expressions/TFunction1.h	2;"	d
OPAL_TFunction2_HH	src/Expressions/TFunction2.h	2;"	d
OPAL_TYPES_HH	src/OPALTypes.h	2;"	d
OPAL_TableRowRep_HH	src/AbstractObjects/TableRowRep.h	2;"	d
OPAL_TableRow_HH	src/Attributes/TableRow.h	2;"	d
OPAL_Table_HH	src/AbstractObjects/Table.h	2;"	d
OPAL_Timer_HH	src/Utilities/Timer.h	2;"	d
OPAL_Title_HH	src/BasicActions/Title.h	19;"	d
OPAL_TokenListArray_HH	src/Attributes/TokenListArray.h	2;"	d
OPAL_TokenList_HH	src/Attributes/TokenList.h	2;"	d
OPAL_TrackCmd_HH	src/Track/TrackCmd.h	19;"	d
OPAL_TrackEnd_HH	src/Track/TrackEnd.h	2;"	d
OPAL_TrackParser_HH	src/Track/TrackParser.h	22;"	d
OPAL_TrackRun_HH	src/Track/TrackRun.h	19;"	d
OPAL_Track_HH	src/Track/Track.h	21;"	d
OPAL_UpperCaseStringArray_HH	src/Attributes/UpperCaseStringArray.h	20;"	d
OPAL_UpperCaseString_HH	src/Attributes/UpperCaseString.h	20;"	d
OPAL_VERSION_MAJOR	src/OPALconfig.h	6;"	d
OPAL_VERSION_MINOR	src/OPALconfig.h	7;"	d
OPAL_VERSION_PATCH	src/OPALconfig.h	8;"	d
OPAL_ValueDefinition_HH	src/AbstractObjects/ValueDefinition.h	2;"	d
OPAL_Value_HH	src/BasicActions/Value.h	19;"	d
OPAL_WhileStatement_HH	src/OpalParser/WhileStatement.h	2;"	d
OPALdist_m	src/PartBunch/PartBunch.hpp	/^    std::shared_ptr<Distribution> OPALdist_m;$/;"	m	class:PartBunch
OPEN_FILE	src/Structure/LossDataSink.cpp	107;"	d	file:
OPTIONS_HH	src/Utilities/Options.h	20;"	d
ORB	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^typedef ippl::OrthogonalRecursiveBisection<Field<double, Dim>> ORB;$/;"	t	file:
ORIENTATION	src/Elements/OpalElement.h	/^        ORIENTATION,    \/\/ The orientation of the element (Tait Bryan angles)$/;"	e	enum:OpalElement::__anon37
ORIENTATION	src/Lines/Line.cpp	/^        ORIENTATION,      \/\/ The orientation of the particle source$/;"	e	enum:__anon53::__anon54	file:
ORIGIN	src/Elements/OpalElement.h	/^        ORIGIN,         \/\/ The location of the element in floor coordinates$/;"	e	enum:OpalElement::__anon37
ORIGIN	src/Lines/Line.cpp	/^        ORIGIN,      \/\/ The location of the particle source$/;"	e	enum:__anon53::__anon54	file:
OTHER	src/Algorithms/IndexMap.cpp	/^    OTHER,$/;"	e	enum:elements	file:
OTHER	src/Structure/MeshGenerator.h	/^    enum MeshType { OTHER = 0, DIPOLE, QUADRUPOLE, SEXTUPOLE, OCTUPOLE, SOLENOID, RFCAVITY };$/;"	e	enum:MeshGenerator::MeshType
OUTFN	src/Elements/OpalElement.h	/^        OUTFN,          \/\/ Output filename$/;"	e	enum:OpalElement::__anon37
OUTSIDE	src/Structure/BoundaryGeometry.cpp	417;"	d	file:
Object	src/AbstractObjects/Object.cpp	/^Object::Object(const std::string &name, Object *parent):$/;"	f	class:Object
Object	src/AbstractObjects/Object.cpp	/^Object::Object(int size, const char *name, const char *help):$/;"	f	class:Object
Object	src/AbstractObjects/Object.h	/^class Object: public RCObject {$/;"	c
ObjectDir	src/AbstractObjects/Directory.h	/^ObjectDir;$/;"	t
ObjectFunction	src/AbstractObjects/ObjectFunction.h	/^struct ObjectFunction {$/;"	s
Offset	src/AbsBeamline/Offset.cpp	/^Offset::Offset() : Offset("") {$/;"	f	class:Offset
Offset	src/AbsBeamline/Offset.cpp	/^Offset::Offset(const Offset& rhs)$/;"	f	class:Offset
Offset	src/AbsBeamline/Offset.cpp	/^Offset::Offset(const std::string& name) : Component(name), _is_local(false), geometry_m(nullptr) {$/;"	f	class:Offset
Offset	src/AbsBeamline/Offset.cpp	/^Offset::Offset(std::string name, const Offset& rhs)$/;"	f	class:Offset
Offset	src/AbsBeamline/Offset.h	/^class Offset : public Component {$/;"	c
OffsetFactory	tests/classic_src/AbsBeamline/RingTest.cpp	/^    OffsetFactory(double radius=1., int start=0, double thetaSum=-1.) {$/;"	f	class:OffsetFactory
OffsetFactory	tests/classic_src/AbsBeamline/RingTest.cpp	/^class OffsetFactory {$/;"	c	file:
OnTestPartResult	tests/Main.cpp	/^    virtual void OnTestPartResult(const ::testing::TestPartResult &test_part_result) {$/;"	f	class:NewLineAdder	file:
OnTestPartResult	tests/opal_test_utilities/SilenceTest.h	/^        virtual void OnTestPartResult(const ::testing::TestPartResult &test_part_result) {$/;"	f	class:OpalTestUtilities::FailureTester
Online	src/AbsBeamline/Component.cpp	/^bool Component::Online() {$/;"	f	class:Component
OpalBeamline	src/Elements/OpalBeamline.cpp	/^OpalBeamline::OpalBeamline() : elements_m(), prepared_m(false) {$/;"	f	class:OpalBeamline
OpalBeamline	src/Elements/OpalBeamline.cpp	/^OpalBeamline::OpalBeamline(const Vector_t<double, 3>& origin, const Quaternion& rotation)$/;"	f	class:OpalBeamline
OpalBeamline	src/Elements/OpalBeamline.h	/^class OpalBeamline {$/;"	c
OpalCavity	src/Elements/OpalCavity.cpp	/^OpalCavity::OpalCavity():$/;"	f	class:OpalCavity
OpalCavity	src/Elements/OpalCavity.cpp	/^OpalCavity::OpalCavity(const std::string &name, OpalCavity *parent):$/;"	f	class:OpalCavity
OpalCavity	src/Elements/OpalCavity.h	/^class OpalCavity: public OpalElement {$/;"	c
OpalData	src/AbstractObjects/OpalData.cpp	/^OpalData::OpalData() {$/;"	f	class:OpalData
OpalData	src/AbstractObjects/OpalData.h	/^class OpalData {$/;"	c
OpalDataImpl	src/AbstractObjects/OpalData.cpp	/^OpalDataImpl::OpalDataImpl()$/;"	f	class:OpalDataImpl
OpalDataImpl	src/AbstractObjects/OpalData.cpp	/^struct OpalDataImpl {$/;"	s	file:
OpalDrift	src/Elements/OpalDrift.cpp	/^OpalDrift::OpalDrift():$/;"	f	class:OpalDrift
OpalDrift	src/Elements/OpalDrift.cpp	/^OpalDrift::OpalDrift(const std::string& name, OpalDrift* parent):$/;"	f	class:OpalDrift
OpalDrift	src/Elements/OpalDrift.h	/^class OpalDrift: public OpalElement {$/;"	c
OpalElement	src/Elements/OpalElement.cpp	/^OpalElement::OpalElement(const std::string& name, OpalElement* parent):$/;"	f	class:OpalElement
OpalElement	src/Elements/OpalElement.cpp	/^OpalElement::OpalElement(int size, const char* name, const char* help):$/;"	f	class:OpalElement
OpalElement	src/Elements/OpalElement.h	/^class OpalElement: public Element {$/;"	c
OpalElement	src/Lines/SequenceMember.h	/^    std::shared_ptr<Element> OpalElement;$/;"	m	class:SequenceMember
OpalException	src/Utilities/OpalException.cpp	/^OpalException::OpalException(const OpalException &rhs):$/;"	f	class:OpalException
OpalException	src/Utilities/OpalException.cpp	/^OpalException::OpalException(const std::string &meth, const std::string &msg):$/;"	f	class:OpalException
OpalException	src/Utilities/OpalException.h	/^class OpalException: public ClassicException {$/;"	c
OpalFilter	src/Utilities/OpalFilter.cpp	/^OpalFilter::OpalFilter()$/;"	f	class:OpalFilter
OpalFilter	src/Utilities/OpalFilter.cpp	/^OpalFilter::OpalFilter(const std::string& name, OpalFilter* parent)$/;"	f	class:OpalFilter
OpalFilter	src/Utilities/OpalFilter.h	/^class OpalFilter: public Definition {$/;"	c
OpalGlobalCartesianOffset	src/Elements/OpalOffset/OpalGlobalCartesianOffset.cpp	/^OpalGlobalCartesianOffset::OpalGlobalCartesianOffset()$/;"	f	class:OpalOffset::OpalGlobalCartesianOffset
OpalGlobalCartesianOffset	src/Elements/OpalOffset/OpalGlobalCartesianOffset.cpp	/^OpalGlobalCartesianOffset::OpalGlobalCartesianOffset(const std::string &name, OpalGlobalCartesianOffset *parent):$/;"	f	class:OpalOffset::OpalGlobalCartesianOffset
OpalGlobalCartesianOffset	src/Elements/OpalOffset/OpalGlobalCartesianOffset.h	/^class OpalGlobalCartesianOffset : public OpalElement {$/;"	c	namespace:OpalOffset
OpalGlobalCylindricalOffset	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.cpp	/^OpalGlobalCylindricalOffset::OpalGlobalCylindricalOffset()$/;"	f	class:OpalOffset::OpalGlobalCylindricalOffset
OpalGlobalCylindricalOffset	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.cpp	/^OpalGlobalCylindricalOffset::OpalGlobalCylindricalOffset(const std::string &name, OpalGlobalCylindricalOffset *parent):$/;"	f	class:OpalOffset::OpalGlobalCylindricalOffset
OpalGlobalCylindricalOffset	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.h	/^class OpalGlobalCylindricalOffset : public OpalElement {$/;"	c	namespace:OpalOffset
OpalLocalCartesianOffset	src/Elements/OpalOffset/OpalLocalCartesianOffset.cpp	/^OpalLocalCartesianOffset::OpalLocalCartesianOffset()$/;"	f	class:OpalOffset::OpalLocalCartesianOffset
OpalLocalCartesianOffset	src/Elements/OpalOffset/OpalLocalCartesianOffset.cpp	/^OpalLocalCartesianOffset::OpalLocalCartesianOffset(const std::string &name, OpalLocalCartesianOffset *parent):$/;"	f	class:OpalOffset::OpalLocalCartesianOffset
OpalLocalCartesianOffset	src/Elements/OpalOffset/OpalLocalCartesianOffset.h	/^class OpalLocalCartesianOffset : public OpalElement {$/;"	c	namespace:OpalOffset
OpalLocalCylindricalOffset	src/Elements/OpalOffset/OpalLocalCylindricalOffset.cpp	/^OpalLocalCylindricalOffset::OpalLocalCylindricalOffset()$/;"	f	class:OpalOffset::OpalLocalCylindricalOffset
OpalLocalCylindricalOffset	src/Elements/OpalOffset/OpalLocalCylindricalOffset.cpp	/^OpalLocalCylindricalOffset::OpalLocalCylindricalOffset(const std::string &name, OpalLocalCylindricalOffset *parent):$/;"	f	class:OpalOffset::OpalLocalCylindricalOffset
OpalLocalCylindricalOffset	src/Elements/OpalOffset/OpalLocalCylindricalOffset.h	/^class OpalLocalCylindricalOffset : public OpalElement {$/;"	c	namespace:OpalOffset
OpalMarker	src/Elements/OpalMarker.cpp	/^OpalMarker::OpalMarker():$/;"	f	class:OpalMarker
OpalMarker	src/Elements/OpalMarker.cpp	/^OpalMarker::OpalMarker(const std::string &name, OpalMarker *parent):$/;"	f	class:OpalMarker
OpalMarker	src/Elements/OpalMarker.h	/^class OpalMarker: public OpalElement {$/;"	c
OpalMonitor	src/Elements/OpalMonitor.cpp	/^OpalMonitor::OpalMonitor():$/;"	f	class:OpalMonitor
OpalMonitor	src/Elements/OpalMonitor.cpp	/^OpalMonitor::OpalMonitor(const std::string& name, OpalMonitor* parent):$/;"	f	class:OpalMonitor
OpalMonitor	src/Elements/OpalMonitor.h	/^class OpalMonitor: public OpalElement {$/;"	c
OpalMultipole	src/Elements/OpalMultipole.cpp	/^OpalMultipole::OpalMultipole():$/;"	f	class:OpalMultipole
OpalMultipole	src/Elements/OpalMultipole.cpp	/^OpalMultipole::OpalMultipole(const std::string &name, OpalMultipole *parent):$/;"	f	class:OpalMultipole
OpalMultipole	src/Elements/OpalMultipole.h	/^class OpalMultipole: public OpalElement {$/;"	c
OpalMultipoleT	src/Elements/OpalMultipoleT.cpp	/^OpalMultipoleT::OpalMultipoleT():$/;"	f	class:OpalMultipoleT
OpalMultipoleT	src/Elements/OpalMultipoleT.cpp	/^OpalMultipoleT::OpalMultipoleT(const std::string &name, $/;"	f	class:OpalMultipoleT
OpalMultipoleT	src/Elements/OpalMultipoleT.h	/^class OpalMultipoleT: public OpalElement {$/;"	c
OpalOffset	src/Elements/OpalOffset/OpalGlobalCartesianOffset.cpp	/^namespace OpalOffset {$/;"	n	file:
OpalOffset	src/Elements/OpalOffset/OpalGlobalCartesianOffset.h	/^namespace OpalOffset {$/;"	n
OpalOffset	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.cpp	/^namespace OpalOffset {$/;"	n	file:
OpalOffset	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.h	/^namespace OpalOffset {$/;"	n
OpalOffset	src/Elements/OpalOffset/OpalLocalCartesianOffset.cpp	/^namespace OpalOffset {$/;"	n	file:
OpalOffset	src/Elements/OpalOffset/OpalLocalCartesianOffset.h	/^namespace OpalOffset {$/;"	n
OpalOffset	src/Elements/OpalOffset/OpalLocalCylindricalOffset.cpp	/^namespace OpalOffset {$/;"	n	file:
OpalOffset	src/Elements/OpalOffset/OpalLocalCylindricalOffset.h	/^namespace OpalOffset {$/;"	n
OpalParser	src/OpalParser/OpalParser.cpp	/^OpalParser::OpalParser() : stopFlag(false) {$/;"	f	class:OpalParser
OpalParser	src/OpalParser/OpalParser.h	/^class OpalParser: public Parser {$/;"	c
OpalParticle	src/AbstractObjects/OpalParticle.cpp	/^OpalParticle::OpalParticle()$/;"	f	class:OpalParticle
OpalParticle	src/AbstractObjects/OpalParticle.cpp	/^OpalParticle::OpalParticle(int64_t id,$/;"	f	class:OpalParticle
OpalParticle	src/AbstractObjects/OpalParticle.h	/^class OpalParticle {$/;"	c
OpalParticle	src/Algorithms/OpalParticle.cpp	/^OpalParticle::OpalParticle($/;"	f	class:OpalParticle
OpalParticle	src/Algorithms/OpalParticle.cpp	/^OpalParticle::OpalParticle() {$/;"	f	class:OpalParticle
OpalParticle	src/Algorithms/OpalParticle.h	/^class OpalParticle {$/;"	c
OpalProbe	src/Elements/OpalProbe.cpp	/^OpalProbe::OpalProbe() : OpalElement(SIZE, "PROBE", "The \\"PROBE\\" element defines a Probe.") {$/;"	f	class:OpalProbe
OpalProbe	src/Elements/OpalProbe.cpp	/^OpalProbe::OpalProbe(const std::string& name, OpalProbe* parent) : OpalElement(name, parent) {$/;"	f	class:OpalProbe
OpalProbe	src/Elements/OpalProbe.h	/^class OpalProbe : public OpalElement {$/;"	c
OpalRingDefinition	src/Elements/OpalRingDefinition.cpp	/^OpalRingDefinition::OpalRingDefinition()$/;"	f	class:OpalRingDefinition
OpalRingDefinition	src/Elements/OpalRingDefinition.cpp	/^OpalRingDefinition::OpalRingDefinition(const std::string& name, OpalRingDefinition* parent)$/;"	f	class:OpalRingDefinition
OpalRingDefinition	src/Elements/OpalRingDefinition.h	/^class OpalRingDefinition: public OpalElement {$/;"	c
OpalSolenoid	src/Elements/OpalSolenoid.cpp	/^OpalSolenoid::OpalSolenoid():$/;"	f	class:OpalSolenoid
OpalSolenoid	src/Elements/OpalSolenoid.cpp	/^OpalSolenoid::OpalSolenoid(const std::string &name, OpalSolenoid *parent):$/;"	f	class:OpalSolenoid
OpalSolenoid	src/Elements/OpalSolenoid.h	/^class OpalSolenoid: public OpalElement {$/;"	c
OpalSource	src/Elements/OpalSource.h	/^class OpalSource: public OpalElement {$/;"	c
OpalTestUtilities	tests/opal_test_utilities/SilenceTest.h	/^namespace OpalTestUtilities {$/;"	n
OpalTravelingWave	src/Elements/OpalTravelingWave.cpp	/^OpalTravelingWave::OpalTravelingWave():$/;"	f	class:OpalTravelingWave
OpalTravelingWave	src/Elements/OpalTravelingWave.cpp	/^OpalTravelingWave::OpalTravelingWave(const std::string &name, OpalTravelingWave *parent):$/;"	f	class:OpalTravelingWave
OpalTravelingWave	src/Elements/OpalTravelingWave.h	/^class OpalTravelingWave: public OpalElement {$/;"	c
OpalVacuum	src/Elements/OpalVacuum.cpp	/^OpalVacuum::OpalVacuum():$/;"	f	class:OpalVacuum
OpalVacuum	src/Elements/OpalVacuum.cpp	/^OpalVacuum::OpalVacuum(const std::string& name, OpalVacuum* parent):$/;"	f	class:OpalVacuum
OpalVacuum	src/Elements/OpalVacuum.h	/^class OpalVacuum: public OpalElement {$/;"	c
OpalVerticalFFAMagnet	src/Elements/OpalVerticalFFAMagnet.cpp	/^OpalVerticalFFAMagnet::OpalVerticalFFAMagnet() :$/;"	f	class:OpalVerticalFFAMagnet
OpalVerticalFFAMagnet	src/Elements/OpalVerticalFFAMagnet.cpp	/^OpalVerticalFFAMagnet::OpalVerticalFFAMagnet(const std::string &name,$/;"	f	class:OpalVerticalFFAMagnet
OpalVerticalFFAMagnet	src/Elements/OpalVerticalFFAMagnet.h	/^class OpalVerticalFFAMagnet : public OpalElement {$/;"	c
OpenMode	src/AbstractObjects/OpalData.h	/^    enum class OpenMode : unsigned short { UNDEFINED, WRITE, APPEND };$/;"	c	class:OpalData
Option	src/BasicActions/Option.cpp	/^Option::Option()$/;"	f	class:Option
Option	src/BasicActions/Option.cpp	/^Option::Option(const std::string& name, Option* parent) : Action(name, parent) {$/;"	f	class:Option
Option	src/BasicActions/Option.h	/^class Option: public Action {$/;"	c
Options	src/Utilities/Options.cpp	/^namespace Options {$/;"	n	file:
Options	src/Utilities/Options.h	/^namespace Options {$/;"	n
Or	src/Expressions/Expressions.cpp	/^    bool Or(bool a, bool b) {$/;"	f	namespace:Expressions
OrbitThreader	src/Algorithms/OrbitThreader.cpp	/^OrbitThreader::OrbitThreader($/;"	f	class:OrbitThreader
OrbitThreader	src/Algorithms/OrbitThreader.h	/^class OrbitThreader$/;"	c
OscillatingField	src/Fields/OscillatingField.h	/^OscillatingField<Field>::OscillatingField(): Field()$/;"	f	class:OscillatingField
OscillatingField	src/Fields/OscillatingField.h	/^template < class Field > class OscillatingField: public Field {$/;"	c
OutOfBounds	src/Algorithms/IndexMap.h	/^        OutOfBounds(const OutOfBounds &rhs):$/;"	f	class:IndexMap::OutOfBounds
OutOfBounds	src/Algorithms/IndexMap.h	/^        OutOfBounds(const std::string &meth, const std::string &msg):$/;"	f	class:IndexMap::OutOfBounds
OutOfBounds	src/Algorithms/IndexMap.h	/^    class OutOfBounds: public OpalException {$/;"	c	class:IndexMap
OutVariable	src/Fields/Interpolation/PolynomialCoefficient.h	/^    int              OutVariable() const {return _outVar;}$/;"	f	class:interpolation::PolynomialCoefficient
OutVariable	src/Fields/Interpolation/PolynomialCoefficient.h	/^    int              OutVariable(int              outVar) {_outVar      = outVar; return _outVar;}$/;"	f	class:interpolation::PolynomialCoefficient
OverflowError	src/Utilities/OverflowError.cpp	/^OverflowError::OverflowError(const OverflowError &rhs):$/;"	f	class:OverflowError
OverflowError	src/Utilities/OverflowError.cpp	/^OverflowError::OverflowError(const std::string &meth):$/;"	f	class:OverflowError
OverflowError	src/Utilities/OverflowError.h	/^class OverflowError: public ArithmeticError {$/;"	c
OwnPtr	src/MemoryManagement/OwnPtr.h	/^class OwnPtr {$/;"	c
OwnPtr	src/MemoryManagement/OwnPtr.h	/^inline OwnPtr<Object>::OwnPtr():$/;"	f	class:OwnPtr
OwnPtr	src/MemoryManagement/OwnPtr.h	/^inline OwnPtr<Object>::OwnPtr(Object *obj):$/;"	f	class:OwnPtr
OwnPtr	src/MemoryManagement/OwnPtr.h	/^inline OwnPtr<Object>::OwnPtr(const OwnPtr<Object> &rhs):$/;"	f	class:OwnPtr
OwnerType	src/AbstractObjects/AttributeHandler.h	/^    enum OwnerType {$/;"	g	class:AttributeHandler
P	src/PartBunch/Binning/test/alpine/ParticleContainer.hpp	/^        typename Base::particle_position_type P;  \/\/ particle velocity$/;"	m	class:ParticleContainer
P	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    typename ippl::ParticleBase<PLayout>::particle_position_type P;  \/\/ particle velocity$/;"	m	class:ChargedParticles	file:
P	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> P(size_t i) {$/;"	f	class:PartBunch
P	src/PartBunch/ParticleContainer.hpp	/^    typename Base::particle_position_type P;$/;"	m	class:ParticleContainer
P	tests/ippl_src/Particle/EdgeCentering.cpp	/^    ParticleAttrib< Vector_t >   P;$/;"	m	class:PartBunch	file:
PACKAGE_BUGREPORT	src/OPALconfig.h	14;"	d
PARALLEL_REDUCE_TOOLS_H	src/PartBunch/Binning/ParallelReduceTools.h	2;"	d
PARAMETER_DEF_HPP_	src/Utilities/SDDSParser/parameter_def.hpp	18;"	d
PARAMETER_HPP_	src/Utilities/SDDSParser/parameter.hpp	18;"	d
PARFFTX	src/Structure/FieldSolverCmd.h	/^        PARFFTX,   \/\/ parallelized grid in x$/;"	e	enum:FieldSolverCmdType::FIELDSOLVER::__anon62
PARFFTY	src/Structure/FieldSolverCmd.h	/^        PARFFTY,   \/\/ parallelized grid in y$/;"	e	enum:FieldSolverCmdType::FIELDSOLVER::__anon62
PARFFTZ	src/Structure/FieldSolverCmd.h	/^        PARFFTZ,   \/\/ parallelized grid in z$/;"	e	enum:FieldSolverCmdType::FIELDSOLVER::__anon62
PARTBUNCH_H	src/PartBunch/PartBunch.hpp	2;"	d
PARTICLE	src/Structure/Beam.cpp	/^        PARTICLE,  \/\/ The particle name$/;"	e	enum:__anon63::__anon64	file:
PARTICLEMATTERINTERACTION	src/Elements/OpalElement.h	/^        PARTICLEMATTERINTERACTION, \/\/ The particle mater interaction handler to be used$/;"	e	enum:OpalElement::__anon37
PARTICLEPROPERTIES_H	src/Physics/ParticleProperties.h	19;"	d
PART_BUNCH_BASE_H	src/Algorithms/.PartBunchBase.h	19;"	d
PART_BUNCH_BASE_HPP	src/Algorithms/.PartBunchBase.hpp	19;"	d
PATH	src/Utilities/SDDSParser/associate.hpp	/^                        , PATH$/;"	e	enum:SDDS::associate::attributes
PATTERN	src/BasicActions/Select.cpp	/^        PATTERN, \/\/ The regular expression for matching names.$/;"	e	enum:__anon27::__anon28	file:
PBUNCHDEFS_H	src/Algorithms/PBunchDefs.h	2;"	d
PC	src/Structure/Beam.cpp	/^        PC,        \/\/ The particle momentum in GeV\/c$/;"	e	enum:__anon63::__anon64	file:
PCHARGE	src/Physics/Physics.h	/^    constexpr double PCHARGE    = 1.602176634e-19; \/\/ C$/;"	m	namespace:Physics
PDF	src/PartBunch/Binning/test/alpine/BinningLandauDampingManager.h	/^  struct PDF{$/;"	s	struct:CustomDistributionFunctions
PDIS	src/Elements/OpalCavity.h	/^        PDIS,           \/\/ perpendicular distance from symmetric line of cavity gap to machine center$/;"	e	enum:OpalCavity::__anon34
PEAKFINDER_H	src/Structure/PeakFinder.h	23;"	d
PHASE_MODEL	src/Elements/OpalCavity.h	/^        PHASE_MODEL,    \/\/ time dependent phase$/;"	e	enum:OpalCavity::__anon34
PHI	src/Elements/OpalElement.h	/^        PHI,            \/\/ The rotation about the x-axis$/;"	e	enum:OpalElement::__anon37
PHI	src/Lines/Line.cpp	/^        PHI,$/;"	e	enum:__anon53::__anon54	file:
PHI0	src/Elements/OpalCavity.h	/^        PHI0,           \/\/ initial phase of cavity$/;"	e	enum:OpalCavity::__anon34
PHI_START	src/BasicActions/DumpEMFields.h	/^        PHI_START,$/;"	e	enum:DumpEMFields::__anon29
PHI_STEPS	src/BasicActions/DumpEMFields.h	/^        PHI_STEPS,$/;"	e	enum:DumpEMFields::__anon29
PID_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef ParticleSpatialLayout<double, DIM>::ParticleIndex_t   PID_t;$/;"	t	file:
PL_m	src/AbstractObjects/OpalData.cpp	/^    PLayout_t<double, 3>* PL_m;$/;"	m	struct:OpalDataImpl	file:
PLayout_t	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^typedef ippl::ParticleSpatialLayout<double, Dim> PLayout_t;$/;"	t	file:
PLayout_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef ParticleSpatialLayout< double, DIM, Mesh_t>           PLayout_t;$/;"	t	file:
PMAPFN	src/Elements/OpalVacuum.h	/^        PMAPFN,       \/\/ The filename of the mid-plane pressure map$/;"	e	enum:OpalVacuum::__anon36
PMASS	src/Physics/Physics.h	/^    constexpr double PMASS      = 1.67262192369e-27; \/\/ kg$/;"	m	namespace:Physics
POISSON_SOLVER_H_	src/.Solvers/PoissonSolver.h	2;"	d
POLYNOMIAL_H	src/AbsBeamline/MultipoleTFunctions/Polynomial.h	29;"	d
POLYNOMIAL_SUM_H	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.h	29;"	d
POLYORDER	src/Utilities/OpalFilter.cpp	/^        POLYORDER,  \/\/ Polynomial order in S-G Filter$/;"	e	enum:__anon55::__anon56	file:
POLYORDER_DEFAULT	src/Utilities/OpalFilter.cpp	37;"	d	file:
PORTABLEBITMAPRREADER_H	src/Utilities/PortableBitmapReader.h	2;"	d
PORTABLEGRAYMAPRREADER_H	src/Utilities/PortableGraymapReader.h	2;"	d
POSITRON	src/Physics/ParticleProperties.h	/^    POSITRON,$/;"	m	class:ParticleType
PPSolveFactory	src/Fields/Interpolation/PPSolveFactory.cpp	/^PPSolveFactory::PPSolveFactory(Mesh* points,$/;"	f	class:interpolation::PPSolveFactory
PPSolveFactory	src/Fields/Interpolation/PPSolveFactory.h	/^class PPSolveFactory {$/;"	c	namespace:interpolation
PPSolveFactoryTestFixture	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^    PPSolveFactoryTestFixture() {$/;"	f	class:PPSolveFactoryTestFixture
PPSolveFactoryTestFixture	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^class PPSolveFactoryTestFixture : public ::testing::Test {$/;"	c	file:
PRESSURE	src/Elements/OpalVacuum.h	/^        PRESSURE,     \/\/ Pressure in mbar$/;"	e	enum:OpalVacuum::__anon36
PREVIOUS	src/Lines/SequenceMember.h	/^        PREVIOUS  = 2,$/;"	e	enum:SequenceMember::PositionType
PROBE	src/AbsBeamline/ElementBase.h	/^    PROBE,$/;"	m	class:ElementType
PROG_NAME	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^constexpr const char* PROG_NAME = "PIC" xstr(DIM) "d";$/;"	v
PROTON	src/Physics/ParticleProperties.h	/^    PROTON,$/;"	m	class:ParticleType
PSCALE	src/Elements/OpalVacuum.h	/^        PSCALE,       \/\/ A scalar to scale the P-field$/;"	e	enum:OpalVacuum::__anon36
PSDUMPEACHTURN	src/BasicActions/Option.cpp	/^        PSDUMPEACHTURN,$/;"	e	enum:__anon24::__anon25	file:
PSDUMPFRAME	src/BasicActions/Option.cpp	/^        PSDUMPFRAME,$/;"	e	enum:__anon24::__anon25	file:
PSDUMPFREQ	src/BasicActions/Option.cpp	/^        PSDUMPFREQ,$/;"	e	enum:__anon24::__anon25	file:
PSI	src/Elements/OpalElement.h	/^        PSI,            \/\/ The rotation about the z-axis$/;"	e	enum:OpalElement::__anon37
PSI	src/Lines/Line.cpp	/^        PSI,$/;"	e	enum:__anon53::__anon54	file:
PSystem	src/BasicActions/PSystem.cpp	/^PSystem::PSystem()$/;"	f	class:PSystem
PSystem	src/BasicActions/PSystem.cpp	/^PSystem::PSystem(const std::string& name, PSystem* parent) : Action(name, parent) {$/;"	f	class:PSystem
PSystem	src/BasicActions/PSystem.h	/^class PSystem: public Action {$/;"	c
PT	src/Algorithms/AbstractTracker.h	/^    enum { X, PX, Y, PY, T, PT };$/;"	e	enum:AbstractTracker::__anon81
PX	src/Algorithms/AbstractTracker.h	/^    enum { X, PX, Y, PY, T, PT };$/;"	e	enum:AbstractTracker::__anon81
PY	src/Algorithms/AbstractTracker.h	/^    enum { X, PX, Y, PY, T, PT };$/;"	e	enum:AbstractTracker::__anon81
P_m	src/AbstractObjects/OpalParticle.h	/^    Vector_t<double, 3> P_m;$/;"	m	class:OpalParticle
P_m	src/Algorithms/OpalParticle.h	/^    Vector_t<double, 3> P_m;$/;"	m	class:OpalParticle
Pair	src/Fields/BMultipoleField.cpp	/^inline BMultipoleField::Pair::Pair()$/;"	f	class:BMultipoleField::Pair
Pair	src/Fields/BMultipoleField.cpp	/^inline BMultipoleField::Pair::Pair(const Pair &rhs)$/;"	f	class:BMultipoleField::Pair
Pair	src/Fields/BMultipoleField.cpp	/^inline BMultipoleField::Pair::Pair(double normal, double skewed)$/;"	f	class:BMultipoleField::Pair
Pair	src/Fields/BMultipoleField.h	/^    struct Pair {$/;"	s	class:BMultipoleField
ParallelReduce	src/PartBunch/Binning/ParallelReduceTools.h	/^        ParallelReduce,    \/\/ Force usage of parallel_reduce if binCount <= maxArrSize$/;"	m	class:ParticleBinning::HistoReductionMode
ParallelTracker	src/Algorithms/ParallelTracker.cpp	/^ParallelTracker::ParallelTracker($/;"	f	class:ParallelTracker
ParallelTracker	src/Algorithms/ParallelTracker.h	/^class ParallelTracker : public Tracker {$/;"	c
ParseError	src/Utilities/ParseError.cpp	/^ParseError::ParseError(const ParseError &rhs):$/;"	f	class:ParseError
ParseError	src/Utilities/ParseError.cpp	/^ParseError::ParseError(const std::string &meth, const std::string &msg):$/;"	f	class:ParseError
ParseError	src/Utilities/ParseError.h	/^class ParseError: public ClassicException {$/;"	c
Parser	src/OpalParser/Parser.h	/^Parser::Parser()$/;"	f	class:Parser
Parser	src/OpalParser/Parser.h	/^class Parser {$/;"	c
Parser	src/Utilities/MSLang/matheval.hpp	/^    class Parser$/;"	c	namespace:matheval
PartBins	src/Algorithms/PartBins.cpp	/^PartBins::PartBins(int bins, int sbins)$/;"	f	class:PartBins
PartBins	src/Algorithms/PartBins.h	/^class PartBins {$/;"	c
PartBunch	src/Algorithms/.PartBunch.cpp	/^PartBunch::PartBunch(const PartData *ref): \/\/ Layout is set using setSolver()$/;"	f	class:PartBunch
PartBunch	src/Algorithms/.PartBunch.h	/^class PartBunch : public PartBunch_t {$/;"	c
PartBunch	src/Algorithms/.PartBunchBase.h	/^class PartBunch : std::enable_shared_from_this<PartBunch<T, Dim>> {$/;"	c
PartBunch	src/Algorithms/.PartBunchBase.hpp	/^PartBunch<T, Dim>::PartBunch(AbstractParticle<T, Dim>* pb, const PartData* ref)$/;"	f	class:PartBunch
PartBunch	src/PartBunch/PartBunch.hpp	/^    PartBunch($/;"	f	class:PartBunch
PartBunch	src/PartBunch/PartBunch.hpp	/^class PartBunch$/;"	c
PartBunch	tests/ippl_src/Particle/EdgeCentering.cpp	/^    PartBunch():$/;"	f	class:PartBunch
PartBunch	tests/ippl_src/Particle/EdgeCentering.cpp	/^    PartBunch(PLayout_t *pl):$/;"	f	class:PartBunch
PartBunch	tests/ippl_src/Particle/EdgeCentering.cpp	/^class PartBunch: public IpplParticleBase<PLayout_t> {$/;"	c	file:
PartData	src/Algorithms/PartData.cpp	/^PartData::PartData() {$/;"	f	class:PartData
PartData	src/Algorithms/PartData.cpp	/^PartData::PartData(double q, double m, double momentum) {$/;"	f	class:PartData
PartData	src/Algorithms/PartData.h	/^class PartData {$/;"	c
ParticleBinning	src/PartBunch/Binning/AdaptBins.h	/^namespace ParticleBinning {$/;"	n
ParticleBinning	src/PartBunch/Binning/AdaptBins.hpp	/^namespace ParticleBinning {$/;"	n
ParticleBinning	src/PartBunch/Binning/BinHisto.h	/^namespace ParticleBinning {$/;"	n
ParticleBinning	src/PartBunch/Binning/BinHisto.hpp	/^namespace ParticleBinning {$/;"	n
ParticleBinning	src/PartBunch/Binning/BinningTools.h	/^namespace ParticleBinning {$/;"	n
ParticleBinning	src/PartBunch/Binning/ParallelReduceTools.h	/^namespace ParticleBinning {$/;"	n
ParticleContainer	src/PartBunch/Binning/test/alpine/ParticleContainer.hpp	/^        ParticleContainer(Mesh_t<Dim>& mesh, FieldLayout_t<Dim>& FL)$/;"	f	class:ParticleContainer
ParticleContainer	src/PartBunch/Binning/test/alpine/ParticleContainer.hpp	/^class ParticleContainer : public ippl::ParticleBase<ippl::ParticleSpatialLayout<T, Dim>>{$/;"	c
ParticleContainer	src/PartBunch/ParticleContainer.hpp	/^    ParticleContainer(Mesh_t<Dim>& mesh, FieldLayout_t<Dim>& FL) : pl_m(FL, mesh), distMoments_m() {$/;"	f	class:ParticleContainer
ParticleContainer	src/PartBunch/ParticleContainer.hpp	/^class ParticleContainer : public ippl::ParticleBase<ippl::ParticleSpatialLayout<T, Dim>> {$/;"	c
ParticleOrigin	src/Physics/ParticleProperties.h	/^enum class ParticleOrigin: unsigned short {$/;"	c
ParticleProperties	src/Physics/ParticleProperties.h	/^class ParticleProperties {$/;"	c
ParticleType	src/Physics/ParticleProperties.h	/^enum class ParticleType: short {$/;"	c
Particles	tests/ippl_src/Particle/ParticleDebug.cpp	/^    Particles(ParticleSpatialLayout<double,3>* psl) :$/;"	f	class:Particles
Particles	tests/ippl_src/Particle/ParticleDebug.cpp	/^class Particles: public IpplParticleBase< ParticleSpatialLayout<double, 3> > {$/;"	c	file:
PeakFinder	src/Structure/PeakFinder.cpp	/^PeakFinder::PeakFinder(std::string outfn, double min, double max, double binWidth, bool singlemode)$/;"	f	class:PeakFinder
PeakFinder	src/Structure/PeakFinder.h	/^class PeakFinder {$/;"	c
PeriodicFace_Edge_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef PeriodicFace<Vector_t, DIM, Mesh_t, Edge_t>           PeriodicFace_Edge_t;$/;"	t	file:
Phi	src/PartBunch/ParticleContainer.hpp	/^    ippl::ParticleAttrib<double> Phi;$/;"	m	class:ParticleContainer
Physics	src/Physics/Air.h	/^namespace Physics {$/;"	n
Physics	src/Physics/AluminaAL2O3.h	/^namespace Physics {$/;"	n
Physics	src/Physics/Aluminum.h	/^namespace Physics {$/;"	n
Physics	src/Physics/Beryllium.h	/^namespace Physics {$/;"	n
Physics	src/Physics/BoronCarbide.h	/^namespace Physics {$/;"	n
Physics	src/Physics/Copper.h	/^namespace Physics {$/;"	n
Physics	src/Physics/Gold.h	/^namespace Physics {$/;"	n
Physics	src/Physics/Graphite.h	/^namespace Physics {$/;"	n
Physics	src/Physics/GraphiteR6710.h	/^namespace Physics {$/;"	n
Physics	src/Physics/Kapton.h	/^namespace Physics {$/;"	n
Physics	src/Physics/Material.h	/^namespace Physics {$/;"	n
Physics	src/Physics/Molybdenum.h	/^namespace Physics {$/;"	n
Physics	src/Physics/Mylar.h	/^namespace Physics {$/;"	n
Physics	src/Physics/Physics.h	/^namespace Physics {$/;"	n
Physics	src/Physics/Titanium.h	/^namespace Physics {$/;"	n
Physics	src/Physics/Water.h	/^namespace Physics {$/;"	n
Place	src/Attributes/Place.cpp	/^    Place::Place(const std::string &name, const std::string &help):$/;"	f	class:Attributes::Place
Place	src/Attributes/Place.h	/^    class Place: public AttributeHandler {$/;"	c	namespace:Attributes
PlaceRep	src/AbstractObjects/PlaceRep.cpp	/^PlaceRep::PlaceRep():$/;"	f	class:PlaceRep
PlaceRep	src/AbstractObjects/PlaceRep.cpp	/^PlaceRep::PlaceRep(const PlaceRep &rhs):$/;"	f	class:PlaceRep
PlaceRep	src/AbstractObjects/PlaceRep.cpp	/^PlaceRep::PlaceRep(const std::string &def):$/;"	f	class:PlaceRep
PlaceRep	src/AbstractObjects/PlaceRep.h	/^class PlaceRep {$/;"	c
PlanarArcGeometry	src/BeamlineGeometry/PlanarArcGeometry.h	/^class PlanarArcGeometry : public BGeometryBase {$/;"	c
PlanarArcGeometry	src/BeamlineGeometry/PlanarArcGeometry.h	/^inline PlanarArcGeometry::PlanarArcGeometry(const PlanarArcGeometry &rhs):$/;"	f	class:PlanarArcGeometry
PlanarArcGeometry	src/BeamlineGeometry/PlanarArcGeometry.h	/^inline PlanarArcGeometry::PlanarArcGeometry(double l, double hh):$/;"	f	class:PlanarArcGeometry
PlanarArcGeometry	src/BeamlineGeometry/PlanarArcGeometry.h	/^inline PlanarArcGeometry::PlanarArcGeometry(double phi):$/;"	f	class:PlanarArcGeometry
Plane	src/AbsBeamline/Corrector.h	/^    enum Plane {$/;"	g	class:Corrector
Plane	src/AbsBeamline/Monitor.h	/^    enum Plane {$/;"	g	class:Monitor
PlotInterpolation	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^class PlotInterpolation(object):$/;"	c
PluginElemTimer_m	src/Algorithms/ParallelTracker.h	/^    IpplTimings::TimerRef PluginElemTimer_m;$/;"	m	class:ParallelTracker
PluginElement	src/AbsBeamline/PluginElement.cpp	/^PluginElement::PluginElement() : PluginElement("") {$/;"	f	class:PluginElement
PluginElement	src/AbsBeamline/PluginElement.cpp	/^PluginElement::PluginElement(const PluginElement& right) : Component(right) {$/;"	f	class:PluginElement
PluginElement	src/AbsBeamline/PluginElement.cpp	/^PluginElement::PluginElement(const std::string& name) : Component(name) {$/;"	f	class:PluginElement
PluginElement	src/AbsBeamline/PluginElement.h	/^class PluginElement : public Component {$/;"	c
Point	src/AbsBeamline/Component.h	/^struct Point {$/;"	s
Point	src/Structure/BoundaryGeometry.cpp	48;"	d	file:
Point3D	src/Fields/EMField.cpp	/^Point3D::Point3D(double xx, double yy, double zz)$/;"	f	class:Point3D
Point3D	src/Fields/EMField.h	/^class Point3D {$/;"	c
PointDimension	src/Fields/Interpolation/SquarePolynomialVector.h	/^    unsigned int PointDimension()         const {return _pointDim;}$/;"	f	class:interpolation::SquarePolynomialVector
PointID	src/Structure/BoundaryGeometry.cpp	47;"	d	file:
PointList_t	src/.Solvers/ArbitraryDomain.h	/^    typedef std::multimap< std::tuple<int, int, int>, double > PointList_t;$/;"	t	class:ArbitraryDomain
Pointer	src/MemoryManagement/Pointer.h	/^class Pointer {$/;"	c
Pointer	src/MemoryManagement/Pointer.h	/^inline Pointer<Object>::Pointer():$/;"	f	class:Pointer
Pointer	src/MemoryManagement/Pointer.h	/^inline Pointer<Object>::Pointer(Object *obj):$/;"	f	class:Pointer
Pointer	src/MemoryManagement/Pointer.h	/^inline Pointer<Object>::Pointer(const Pointer<Object> &rhs):$/;"	f	class:Pointer
Points_m	src/Structure/BoundaryGeometry.h	/^    std::vector<Vector_t<double, 3>> Points_m;  \/\/ geometry point coordinates$/;"	m	class:BoundaryGeometry
PoissonSolver	src/.Solvers/PoissonSolver.h	/^class PoissonSolver {$/;"	c
Polygon	src/Utilities/MSLang/Polygon.h	/^    struct Polygon: public Function {$/;"	s	namespace:mslang
Polynomial	src/AbsBeamline/MultipoleTFunctions/Polynomial.cpp	/^Polynomial::Polynomial() {$/;"	f	class:polynomial::Polynomial
Polynomial	src/AbsBeamline/MultipoleTFunctions/Polynomial.cpp	/^Polynomial::Polynomial(const Polynomial &poly) {$/;"	f	class:polynomial::Polynomial
Polynomial	src/AbsBeamline/MultipoleTFunctions/Polynomial.cpp	/^Polynomial::Polynomial(const std::vector<int> &coefficients) {$/;"	f	class:polynomial::Polynomial
Polynomial	src/AbsBeamline/MultipoleTFunctions/Polynomial.h	/^class Polynomial {$/;"	c	namespace:polynomial
Polynomial Solve with Smoothing	src/Fields/Interpolation/polynomial_solve_with_smoothing.tex	/^presumption has been made on the dimension or order of the fit.$/;"	b
Polynomial Solve with no Smoothing	src/Fields/Interpolation/polynomial_solve_with_smoothing.tex	/^\\end{equation}$/;"	b
PolynomialCoefficient	src/Fields/Interpolation/PolynomialCoefficient.h	/^    PolynomialCoefficient(const PolynomialCoefficient& pc)$/;"	f	class:interpolation::PolynomialCoefficient
PolynomialCoefficient	src/Fields/Interpolation/PolynomialCoefficient.h	/^    PolynomialCoefficient(std::vector<int> inVariablesByVector,$/;"	f	class:interpolation::PolynomialCoefficient
PolynomialCoefficient	src/Fields/Interpolation/PolynomialCoefficient.h	/^class PolynomialCoefficient$/;"	c	namespace:interpolation
PolynomialCoefficient_h	src/Fields/Interpolation/PolynomialCoefficient.h	29;"	d
PolynomialOrder	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^unsigned int SquarePolynomialVector::PolynomialOrder() const {$/;"	f	class:interpolation::SquarePolynomialVector
PolynomialOrder_m	src/Filters/SavitzkyGolay.h	/^    int PolynomialOrder_m;$/;"	m	class:SavitzkyGolayFilter
PolynomialPatch	src/Fields/Interpolation/PolynomialPatch.cpp	/^PolynomialPatch::PolynomialPatch()$/;"	f	class:interpolation::PolynomialPatch
PolynomialPatch	src/Fields/Interpolation/PolynomialPatch.cpp	/^PolynomialPatch::PolynomialPatch(Mesh* grid_points,$/;"	f	class:interpolation::PolynomialPatch
PolynomialPatch	src/Fields/Interpolation/PolynomialPatch.h	/^class PolynomialPatch : public VectorMap {$/;"	c	namespace:interpolation
PolynomialPatch_hh	src/Fields/Interpolation/PolynomialPatch.h	33;"	d
PolynomialSolve	src/Fields/Interpolation/SolveFactory.cpp	/^SquarePolynomialVector* SolveFactory::PolynomialSolve($/;"	f	class:interpolation::SolveFactory
PolynomialSum	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^PolynomialSum::PolynomialSum() {$/;"	f	class:polynomial::PolynomialSum
PolynomialSum	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^PolynomialSum::PolynomialSum(const PolynomialSum &polynomialSum):$/;"	f	class:polynomial::PolynomialSum
PolynomialSum	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^PolynomialSum::PolynomialSum(const TwoPolynomial &polynomial) {$/;"	f	class:polynomial::PolynomialSum
PolynomialSum	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.h	/^class PolynomialSum {$/;"	c	namespace:polynomial
PolynomialTimeDependence	src/Algorithms/PolynomialTimeDependence.h	/^    PolynomialTimeDependence() {}$/;"	f	class:PolynomialTimeDependence
PolynomialTimeDependence	src/Algorithms/PolynomialTimeDependence.h	/^    PolynomialTimeDependence(std::vector<double> ptd) : coeffs(ptd) {}$/;"	f	class:PolynomialTimeDependence
PolynomialTimeDependence	src/Algorithms/PolynomialTimeDependence.h	/^class PolynomialTimeDependence : public AbstractTimeDependence {$/;"	c
PortableBitmapReader	src/Utilities/PortableBitmapReader.cpp	/^PortableBitmapReader::PortableBitmapReader(const std::string &input) {$/;"	f	class:PortableBitmapReader
PortableBitmapReader	src/Utilities/PortableBitmapReader.h	/^class PortableBitmapReader {$/;"	c
PortableGraymapReader	src/Utilities/PortableGraymapReader.cpp	/^PortableGraymapReader::PortableGraymapReader(const std::string &input) {$/;"	f	class:PortableGraymapReader
PortableGraymapReader	src/Utilities/PortableGraymapReader.h	/^class PortableGraymapReader {$/;"	c
PositionType	src/Lines/SequenceMember.h	/^    enum PositionType {$/;"	g	class:SequenceMember
Ppos_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef ParticleSpatialLayout<double, DIM>::ParticlePos_t     Ppos_t;$/;"	t	file:
PredefinedString	src/Attributes/PredefinedString.cpp	/^    PredefinedString::PredefinedString(const std::string &name,$/;"	f	class:Attributes::PredefinedString
PredefinedString	src/Attributes/PredefinedString.h	/^    class PredefinedString: public AttributeHandler {$/;"	c	namespace:Attributes
PrintContainer	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^void SquarePolynomialVector::PrintContainer(std::ostream& out, const Container& container, char T_separator, char str_separator, int length, bool pad_at_start)$/;"	f	class:interpolation::SquarePolynomialVector
PrintHeader	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^void SquarePolynomialVector::PrintHeader(std::ostream& out, char int_separator, char str_separator, int length, bool pad_at_start) const$/;"	f	class:interpolation::SquarePolynomialVector
PrintHeaders	src/Fields/Interpolation/SquarePolynomialVector.h	/^    static void PrintHeaders(bool willPrintHeaders) {_printHeaders = willPrintHeaders;}$/;"	f	class:interpolation::SquarePolynomialVector
Probe	src/AbsBeamline/Probe.cpp	/^Probe::Probe() : Probe("") {$/;"	f	class:Probe
Probe	src/AbsBeamline/Probe.cpp	/^Probe::Probe(const Probe& right) : PluginElement(right), step_m(right.step_m) {$/;"	f	class:Probe
Probe	src/AbsBeamline/Probe.cpp	/^Probe::Probe(const std::string& name) : PluginElement(name), step_m(0.0) {$/;"	f	class:Probe
Probe	src/AbsBeamline/Probe.h	/^class Probe: public PluginElement {$/;"	c
ProbeRep	src/BeamlineCore/ProbeRep.cpp	/^ProbeRep::ProbeRep():$/;"	f	class:ProbeRep
ProbeRep	src/BeamlineCore/ProbeRep.cpp	/^ProbeRep::ProbeRep(const ProbeRep &right):$/;"	f	class:ProbeRep
ProbeRep	src/BeamlineCore/ProbeRep.cpp	/^ProbeRep::ProbeRep(const std::string &name):$/;"	f	class:ProbeRep
ProbeRep	src/BeamlineCore/ProbeRep.h	/^class ProbeRep: public Probe {$/;"	c
Pscalar_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef ParticleAttrib<double>                                Pscalar_t;$/;"	t	file:
PtrToArray	src/AbstractObjects/Expressions.h	/^    PtrToArray<T>::PtrToArray():$/;"	f	class:Expressions::PtrToArray
PtrToArray	src/AbstractObjects/Expressions.h	/^    PtrToArray<T>::PtrToArray(OArray<T> *rhs):$/;"	f	class:Expressions::PtrToArray
PtrToArray	src/AbstractObjects/Expressions.h	/^    PtrToArray<T>::PtrToArray(const PtrToArray &rhs):$/;"	f	class:Expressions::PtrToArray
PtrToArray	src/AbstractObjects/Expressions.h	/^    template <class T> class PtrToArray:$/;"	c	namespace:Expressions
PtrToScalar	src/AbstractObjects/Expressions.h	/^    PtrToScalar<T>::PtrToScalar():$/;"	f	class:Expressions::PtrToScalar
PtrToScalar	src/AbstractObjects/Expressions.h	/^    PtrToScalar<T>::PtrToScalar(Scalar<T> *rhs):$/;"	f	class:Expressions::PtrToScalar
PtrToScalar	src/AbstractObjects/Expressions.h	/^    PtrToScalar<T>::PtrToScalar(const PtrToScalar &rhs):$/;"	f	class:Expressions::PtrToScalar
PtrToScalar	src/AbstractObjects/Expressions.h	/^    template <class T> class PtrToScalar:$/;"	c	namespace:Expressions
Q	src/PartBunch/ParticleContainer.hpp	/^    ippl::ParticleAttrib<double> Q;$/;"	m	class:ParticleContainer
Q	tests/ippl_src/Particle/EdgeCentering.cpp	/^    ParticleAttrib< double >     Q;$/;"	m	class:PartBunch	file:
QRDecomposition	src/Fields/FM1DProfile2.cpp	/^namespace QRDecomposition {$/;"	n	file:
QRDecomposition	src/Fields/FM1DProfile2.h	/^namespace QRDecomposition {$/;"	n
QUADRATIC	src/.Solvers/IrregularDomain.h	/^enum { CONSTANT, LINEAR, QUADRATIC };$/;"	e	enum:__anon19
QUADRUPOLE	src/AbsBeamline/Multipole.cpp	/^    enum { DIPOLE, QUADRUPOLE, SEXTUPOLE, OCTUPOLE, DECAPOLE };$/;"	e	enum:__anon20::__anon21	file:
QUADRUPOLE	src/Algorithms/IndexMap.cpp	/^    QUADRUPOLE,$/;"	e	enum:elements	file:
QUADRUPOLE	src/Structure/MeshGenerator.h	/^    enum MeshType { OTHER = 0, DIPOLE, QUADRUPOLE, SEXTUPOLE, OCTUPOLE, SOLENOID, RFCAVITY };$/;"	e	enum:MeshGenerator::MeshType
Q_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    double Q_m;$/;"	m	class:AlpineManager
Q_m	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    double Q_m;$/;"	m	class:ChargedParticles	file:
QuadTree	src/Utilities/MSLang/QuadTree.cpp	/^    QuadTree::QuadTree(const QuadTree &right):$/;"	f	class:mslang::QuadTree
QuadTree	src/Utilities/MSLang/QuadTree.h	/^        QuadTree():$/;"	f	struct:mslang::QuadTree
QuadTree	src/Utilities/MSLang/QuadTree.h	/^        QuadTree(int l, const BoundingBox2D &b):$/;"	f	struct:mslang::QuadTree
QuadTree	src/Utilities/MSLang/QuadTree.h	/^    struct QuadTree {$/;"	s	namespace:mslang
Quaternion	src/Algorithms/Quaternion.cpp	/^Quaternion::Quaternion(const matrix_t& M) : ippl::Vector<double, 4>(0.0) {$/;"	f	class:Quaternion
Quaternion	src/Algorithms/Quaternion.hpp	/^class Quaternion : public ippl::Vector<double, 4> {$/;"	c
Quaternion	src/Algorithms/Quaternion.hpp	/^inline Quaternion::Quaternion($/;"	f	class:Quaternion
Quaternion	src/Algorithms/Quaternion.hpp	/^inline Quaternion::Quaternion() : Vector<double, 4>(1.0, 0.0, 0.0, 0.0) {$/;"	f	class:Quaternion
Quaternion	src/Algorithms/Quaternion.hpp	/^inline Quaternion::Quaternion(const Quaternion& quat) : Vector<double, 4>(quat) {$/;"	f	class:Quaternion
Quaternion	src/Algorithms/Quaternion.hpp	/^inline Quaternion::Quaternion(const double& realPart, const ippl::Vector<double, 3>& vec)$/;"	f	class:Quaternion
Quaternion	src/Algorithms/Quaternion.hpp	/^inline Quaternion::Quaternion(const ippl::Vector<double, 3>& vec)$/;"	f	class:Quaternion
Quaternion_t	src/Algorithms/Quaternion.hpp	/^typedef Quaternion Quaternion_t;$/;"	t
Quit	src/BasicActions/Quit.cpp	/^Quit::Quit(): Action(0, "QUIT",$/;"	f	class:Quit
Quit	src/BasicActions/Quit.cpp	/^Quit::Quit(const std::string& name, Quit* parent):$/;"	f	class:Quit
Quit	src/BasicActions/Quit.h	/^class Quit: public Action {$/;"	c
R	src/BeamlineGeometry/Euclid3D.h	/^    Rotation3D R;              \/\/ The rotation.$/;"	m	class:Euclid3D
R	src/BeamlineGeometry/Rotation3D.h	/^    Matrix3D R;$/;"	m	class:Rotation3D
R	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> R(size_t i) {$/;"	f	class:PartBunch
RADIUS	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.h	/^        RADIUS = COMMON,$/;"	e	enum:OpalOffset::OpalGlobalCylindricalOffset::__anon42
RANGE	src/BasicActions/Select.cpp	/^        RANGE,   \/\/ The range to be considered.$/;"	e	enum:__anon27::__anon28	file:
RAY	src/Structure/BoundaryGeometry.h	/^    enum INTERSECTION_TESTS { SEGMENT, RAY, LINE };$/;"	e	enum:BoundaryGeometry::INTERSECTION_TESTS
RBEND	src/AbsBeamline/ElementBase.h	/^    RBEND,$/;"	m	class:ElementType
RBEND3D	src/AbsBeamline/ElementBase.h	/^    RBEND3D,$/;"	m	class:ElementType
RBendGeometry	src/BeamlineGeometry/RBendGeometry.cpp	/^RBendGeometry::RBendGeometry(const RBendGeometry &rhs):$/;"	f	class:RBendGeometry
RBendGeometry	src/BeamlineGeometry/RBendGeometry.cpp	/^RBendGeometry::RBendGeometry(double length, double angle):$/;"	f	class:RBendGeometry
RBendGeometry	src/BeamlineGeometry/RBendGeometry.h	/^class RBendGeometry : public StraightGeometry {$/;"	c
RCObject	src/MemoryManagement/RCObject.h	/^class RCObject {$/;"	c
RCObject	src/MemoryManagement/RCObject.h	/^inline RCObject::RCObject():$/;"	f	class:RCObject
RCObject	src/MemoryManagement/RCObject.h	/^inline RCObject::RCObject(const RCObject &\/*rhs*\/):$/;"	f	class:RCObject
READDATA	src/Structure/H5PartWrapper.h	35;"	d
READDATA	tools/opal2sdds/main.cpp	29;"	d	file:
READFILEATTRIB	src/Structure/H5PartWrapper.h	21;"	d
READFILEATTRIB	tools/opal2sdds/main.cpp	30;"	d	file:
READSTEPATTRIB	src/Structure/H5PartWrapper.h	28;"	d
READSTEPATTRIB	tools/opal2sdds/main.cpp	31;"	d	file:
READ_BUFFER_LENGTH	src/Fields/Fieldmap.h	4;"	d
REBINFREQ	src/BasicActions/Option.cpp	/^        REBINFREQ,$/;"	e	enum:__anon24::__anon25	file:
RECTANGULAR	src/AbsBeamline/ElementBase.h	/^    RECTANGULAR,$/;"	m	class:ApertureType
RECTANGULAR	src/Structure/BoundaryGeometry.h	/^enum class Topology : unsigned short { RECTANGULAR, BOXCORNER, ELLIPTIC };$/;"	m	class:Topology
RECTANGULAR_DOMAIN_H	src/.Solvers/RectangularDomain.h	28;"	d
RECURSION_RELATION_H	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.h	29;"	d
RECURSION_RELATION_TWO_H	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	29;"	d
RECYCLEBLOCKS	src/BasicActions/Option.cpp	/^        RECYCLEBLOCKS,$/;"	e	enum:__anon24::__anon25	file:
REFER	src/Lines/Sequence.cpp	/^        REFER,   \/\/ The reference position for members.$/;"	e	enum:__anon51::__anon52	file:
REFPOS	src/Lines/Sequence.cpp	/^        REFPOS,  \/\/ The reference position for the sequence.$/;"	e	enum:__anon51::__anon52	file:
REGISTER_PARSE_TYPE	src/Fields/Fieldmap.cpp	47;"	d	file:
REGULAR	src/Physics/ParticleProperties.h	/^    REGULAR,$/;"	m	class:ParticleOrigin
REGULAR_DOMAIN_H	src/.Solvers/RegularDomain.h	20;"	d
RELATIVEFFTLOWPASS	src/Utilities/OpalFilter.h	/^        RELATIVEFFTLOWPASS,$/;"	m	class:OpalFilter::FilterType
REMOTEPARTDEL	src/BasicActions/Option.cpp	/^        REMOTEPARTDEL,$/;"	e	enum:__anon24::__anon25	file:
REPARTFREQ	src/BasicActions/Option.cpp	/^        REPARTFREQ,$/;"	e	enum:__anon24::__anon25	file:
REPORTONERROR	src/Structure/H5PartWrapper.h	20;"	d
REPORTONERROR	tools/opal2sdds/main.cpp	28;"	d	file:
RFCAVITY	src/AbsBeamline/ElementBase.h	/^    RFCAVITY,$/;"	m	class:ElementType
RFCAVITY	src/Algorithms/IndexMap.cpp	/^    RFCAVITY,$/;"	e	enum:elements	file:
RFCAVITY	src/Structure/MeshGenerator.h	/^    enum MeshType { OTHER = 0, DIPOLE, QUADRUPOLE, SEXTUPOLE, OCTUPOLE, SOLENOID, RFCAVITY };$/;"	e	enum:MeshGenerator::MeshType
RFCavity	src/AbsBeamline/RFCavity.cpp	/^RFCavity::RFCavity() : RFCavity("") {$/;"	f	class:RFCavity
RFCavity	src/AbsBeamline/RFCavity.cpp	/^RFCavity::RFCavity(const RFCavity& right)$/;"	f	class:RFCavity
RFCavity	src/AbsBeamline/RFCavity.cpp	/^RFCavity::RFCavity(const std::string& name)$/;"	f	class:RFCavity
RFCavity	src/AbsBeamline/RFCavity.h	/^class RFCavity : public Component {$/;"	c
RFCavityRep	src/BeamlineCore/RFCavityRep.cpp	/^RFCavityRep::RFCavityRep():$/;"	f	class:RFCavityRep
RFCavityRep	src/BeamlineCore/RFCavityRep.cpp	/^RFCavityRep::RFCavityRep(const RFCavityRep &right):$/;"	f	class:RFCavityRep
RFCavityRep	src/BeamlineCore/RFCavityRep.cpp	/^RFCavityRep::RFCavityRep(const std::string &name):$/;"	f	class:RFCavityRep
RFCavityRep	src/BeamlineCore/RFCavityRep.h	/^class RFCavityRep: public RFCavity {$/;"	c
RFFREQ	src/Elements/OpalRingDefinition.h	/^        RFFREQ,$/;"	e	enum:OpalRingDefinition::__anon39
RFRINGE	src/Elements/OpalMultipoleT.h	/^        RFRINGE,         \/\/ Length of right fringe field$/;"	e	enum:OpalMultipoleT::__anon48
RHODUMP	src/BasicActions/Option.cpp	/^        RHODUMP,$/;"	e	enum:__anon24::__anon25	file:
RING	src/AbsBeamline/ElementBase.h	/^    RING,$/;"	m	class:ElementType
RING_H	src/AbsBeamline/Ring.h	29;"	d
RING_SECTION_H	src/Utilities/RingSection.h	29;"	d
RK4	src/Steppers/RK4.h	/^    RK4(const FieldFunction& fieldfunc) : Stepper<FieldFunction, Arguments ...>(fieldfunc) { }$/;"	f	class:RK4
RK4	src/Steppers/RK4.h	/^class RK4 : public Stepper<FieldFunction, Arguments...> {$/;"	c
RK4_H	src/Steppers/RK4.h	19;"	d
RMAX	src/Elements/OpalCavity.h	/^        RMAX,           \/\/ Maximal Radius$/;"	e	enum:OpalCavity::__anon34
RMIN	src/Elements/OpalCavity.h	/^        RMIN,           \/\/ Minimal Radius$/;"	e	enum:OpalCavity::__anon34
RNGTYPE	src/BasicActions/Option.cpp	/^        RNGTYPE,$/;"	e	enum:__anon24::__anon25	file:
RNormal_m	src/AbsBeamline/RFCavity.h	/^    std::unique_ptr<double[]> RNormal_m;$/;"	m	class:RFCavity
ROTATE180	src/Distribution/LaserProfile.h	/^    enum { FLIPX = 1, FLIPY = 2, ROTATE90 = 4, ROTATE180 = 8, ROTATE270 = 16 };$/;"	e	enum:LaserProfile::__anon66
ROTATE270	src/Distribution/LaserProfile.h	/^    enum { FLIPX = 1, FLIPY = 2, ROTATE90 = 4, ROTATE180 = 8, ROTATE270 = 16 };$/;"	e	enum:LaserProfile::__anon66
ROTATE90	src/Distribution/LaserProfile.h	/^    enum { FLIPX = 1, FLIPY = 2, ROTATE90 = 4, ROTATE180 = 8, ROTATE270 = 16 };$/;"	e	enum:LaserProfile::__anon66
ROTATION	src/Elements/OpalMultipoleT.h	/^        ROTATION,        \/\/ Rotation angle about central axis for skew elements$/;"	e	enum:OpalMultipoleT::__anon48
R_START	src/BasicActions/DumpEMFields.h	/^        R_START,$/;"	e	enum:DumpEMFields::__anon29
R_STEPS	src/BasicActions/DumpEMFields.h	/^        R_STEPS,$/;"	e	enum:DumpEMFields::__anon29
R_m	src/AbsBeamline/PluginElement.h	/^    double A_m, B_m, R_m, C_m;  \/\/\/< Geometric lengths used in calculations$/;"	m	class:PluginElement
R_m	src/AbstractObjects/OpalParticle.h	/^    Vector_t<double, 3> R_m;$/;"	m	class:OpalParticle
R_m	src/Algorithms/OpalParticle.h	/^    Vector_t<double, 3> R_m;$/;"	m	class:OpalParticle
Random	src/Utilities/ClassicRandom.cpp	/^Random::Random() {$/;"	f	class:Random
Random	src/Utilities/ClassicRandom.cpp	/^Random::Random(int seed) {$/;"	f	class:Random
Random	src/Utilities/ClassicRandom.h	/^class Random {$/;"	c
Range	src/Algorithms/IndexMap.h	/^    struct Range$/;"	s	class:IndexMap
Range	src/Attributes/Range.cpp	/^    Range::Range(const std::string &name, const std::string &help):$/;"	f	class:Attributes::Range
Range	src/Attributes/Range.h	/^    class Range: public AttributeHandler {$/;"	c	namespace:Attributes
RangeRep	src/AbstractObjects/RangeRep.cpp	/^RangeRep::RangeRep():$/;"	f	class:RangeRep
RangeRep	src/AbstractObjects/RangeRep.cpp	/^RangeRep::RangeRep(PlaceRep &fst, PlaceRep &lst):$/;"	f	class:RangeRep
RangeRep	src/AbstractObjects/RangeRep.cpp	/^RangeRep::RangeRep(const RangeRep &rep):$/;"	f	class:RangeRep
RangeRep	src/AbstractObjects/RangeRep.h	/^class RangeRep {$/;"	c
RangeSelector	src/Tables/RangeSelector.cpp	/^RangeSelector::RangeSelector(const Beamline &beamline, const RangeRep &range):$/;"	f	class:RangeSelector
RangeSelector	src/Tables/RangeSelector.h	/^class RangeSelector: public DefaultVisitor {$/;"	c
Ray	src/Structure/BoundaryGeometry.cpp	/^    Ray() {$/;"	f	class:Ray
Ray	src/Structure/BoundaryGeometry.cpp	/^    Ray(Vector_t<double, 3> o, Vector_t<double, 3> d) {$/;"	f	class:Ray
Ray	src/Structure/BoundaryGeometry.cpp	/^    Ray(const Ray& r) {$/;"	f	class:Ray
Ray	src/Structure/BoundaryGeometry.cpp	/^class Ray {$/;"	c	file:
Real	src/Attributes/Real.cpp	/^    Real::Real(const std::string &name, const std::string &help):$/;"	f	class:Attributes::Real
Real	src/Attributes/Real.h	/^    class Real: public AttributeHandler {$/;"	c	namespace:Attributes
RealArray	src/Attributes/RealArray.cpp	/^    RealArray::RealArray(const std::string &name, const std::string &help):$/;"	f	class:Attributes::RealArray
RealArray	src/Attributes/RealArray.h	/^    class RealArray: public AttributeHandler {$/;"	c	namespace:Attributes
RealConstant	src/ValueDefinitions/RealConstant.cpp	/^RealConstant::RealConstant()$/;"	f	class:RealConstant
RealConstant	src/ValueDefinitions/RealConstant.cpp	/^RealConstant::RealConstant(const std::string& name, RealConstant* parent)$/;"	f	class:RealConstant
RealConstant	src/ValueDefinitions/RealConstant.cpp	/^RealConstant::RealConstant(const std::string& name, RealConstant* parent, double value)$/;"	f	class:RealConstant
RealConstant	src/ValueDefinitions/RealConstant.h	/^class RealConstant: public ValueDefinition {$/;"	c
RealVariable	src/ValueDefinitions/RealVariable.cpp	/^RealVariable::RealVariable():$/;"	f	class:RealVariable
RealVariable	src/ValueDefinitions/RealVariable.cpp	/^RealVariable::RealVariable(const std::string &name, RealVariable *parent):$/;"	f	class:RealVariable
RealVariable	src/ValueDefinitions/RealVariable.cpp	/^RealVariable::RealVariable(const std::string &name, RealVariable *parent,$/;"	f	class:RealVariable
RealVariable	src/ValueDefinitions/RealVariable.h	/^class RealVariable: public ValueDefinition {$/;"	c
RealVector	src/ValueDefinitions/RealVector.cpp	/^RealVector::RealVector():$/;"	f	class:RealVector
RealVector	src/ValueDefinitions/RealVector.cpp	/^RealVector::RealVector(const std::string &name, RealVector *parent):$/;"	f	class:RealVector
RealVector	src/ValueDefinitions/RealVector.h	/^class RealVector: public ValueDefinition {$/;"	c
Rebin	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::Rebin() {$/;"	f	class:PartBunch
Rebin	src/PartBunch/PartBunch.hpp	/^    void Rebin() {$/;"	f	class:PartBunch
Rectangle	src/Utilities/MSLang/Rectangle.h	/^        Rectangle():$/;"	f	struct:mslang::Rectangle
Rectangle	src/Utilities/MSLang/Rectangle.h	/^        Rectangle(const Rectangle &right):$/;"	f	struct:mslang::Rectangle
Rectangle	src/Utilities/MSLang/Rectangle.h	/^    struct Rectangle: public Base {$/;"	s	namespace:mslang
RectangularDomain	src/.Solvers/RectangularDomain.h	/^class RectangularDomain : public RegularDomain {$/;"	c
RecursionRelation	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.cpp	/^RecursionRelation::RecursionRelation(): power_m(0), highestXorder_m(10) {$/;"	f	class:polynomial::RecursionRelation
RecursionRelation	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.cpp	/^RecursionRelation::RecursionRelation(const RecursionRelation &doperator):$/;"	f	class:polynomial::RecursionRelation
RecursionRelation	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.cpp	/^RecursionRelation::RecursionRelation(const std::size_t &power,$/;"	f	class:polynomial::RecursionRelation
RecursionRelation	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.h	/^class RecursionRelation {$/;"	c	namespace:polynomial
RecursionRelationTwo	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.cpp	/^RecursionRelationTwo::RecursionRelationTwo($/;"	f	class:polynomial::RecursionRelationTwo
RecursionRelationTwo	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.cpp	/^RecursionRelationTwo::RecursionRelationTwo(): power_m(0), highestXorder_m(10) {$/;"	f	class:polynomial::RecursionRelationTwo
RecursionRelationTwo	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.cpp	/^RecursionRelationTwo::RecursionRelationTwo(const std::size_t &power,$/;"	f	class:polynomial::RecursionRelationTwo
RecursionRelationTwo	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^class RecursionRelationTwo {$/;"	c	namespace:polynomial
ReductionVariantHelper	src/PartBunch/Binning/ParallelReduceTools.h	/^    struct ReductionVariantHelper<SizeType, IndexType, std::integer_sequence<IndexType, Sizes...>> {$/;"	s	namespace:ParticleBinning
RefCounter	src/Fields/Fieldmap.h	/^        unsigned int RefCounter;$/;"	m	struct:Fieldmap::FieldmapDescription
RefList	src/Lines/SequenceParser.h	/^    typedef std::list<Reference> RefList;$/;"	t	class:SequenceParser
RefPartBunch_m	src/AbsBeamline/Component.h	/^    PartBunch_t* RefPartBunch_m;$/;"	m	class:Component
RefPartP_m	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> RefPartP_m;$/;"	m	class:PartBunch
RefPartP_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> RefPartP_m;$/;"	m	struct:SetStatistics
RefPartP_m	src/Structure/LossDataSink.h	/^    std::vector<Vector_t<double, 3>> RefPartP_m;$/;"	m	class:LossDataSink
RefPartR_m	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> RefPartR_m;$/;"	m	class:PartBunch
RefPartR_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> RefPartR_m;$/;"	m	struct:SetStatistics
RefPartR_m	src/Structure/LossDataSink.h	/^    std::vector<Vector_t<double, 3>> RefPartR_m;$/;"	m	class:LossDataSink
Reference	src/Attributes/Reference.cpp	/^    Reference::Reference(const std::string &name, const std::string &help):$/;"	f	class:Attributes::Reference
Reference	src/Attributes/Reference.h	/^    class Reference: public AttributeHandler {$/;"	c	namespace:Attributes
Reference	src/Lines/SequenceParser.h	/^        Reference(): fromName()$/;"	f	struct:SequenceParser::Reference
Reference	src/Lines/SequenceParser.h	/^        Reference(std::string name, SequenceMember *member): fromName(name)$/;"	f	struct:SequenceParser::Reference
Reference	src/Lines/SequenceParser.h	/^    struct Reference {$/;"	s	class:SequenceParser
ReferenceType	src/AbstractObjects/Element.h	/^    enum ReferenceType {$/;"	g	class:Element
RegularDomain	src/.Solvers/RegularDomain.cpp	/^RegularDomain::RegularDomain(const IntVector_t<double, 3>& nr,$/;"	f	class:RegularDomain
RegularDomain	src/.Solvers/RegularDomain.h	/^class RegularDomain : public IrregularDomain {$/;"	c
RegularExpression	src/Utilities/RegularExpression.cpp	/^RegularExpression::RegularExpression(const RegularExpression &rhs):$/;"	f	class:RegularExpression
RegularExpression	src/Utilities/RegularExpression.cpp	/^RegularExpression::RegularExpression(const std::string &pattern, bool ignore):$/;"	f	class:RegularExpression
RegularExpression	src/Utilities/RegularExpression.h	/^class RegularExpression {$/;"	c
RelativeFFTLowPassFilter	src/Filters/RelativeFFTLowPass.cpp	/^RelativeFFTLowPassFilter::RelativeFFTLowPassFilter(const double &threshold):$/;"	f	class:RelativeFFTLowPassFilter
RelativeFFTLowPassFilter	src/Filters/RelativeFFTLowPass.h	/^class RelativeFFTLowPassFilter: public Filter {$/;"	c
Repeat	src/Utilities/MSLang/Repeat.h	/^    struct Repeat: public Function {$/;"	s	namespace:mslang
Replacer	src/Lines/Replacer.cpp	/^Replacer::Replacer(const Beamline &beamline,$/;"	f	class:Replacer
Replacer	src/Lines/Replacer.h	/^class Replacer: public DefaultVisitor {$/;"	c
Ring	src/AbsBeamline/Ring.cpp	/^Ring::Ring(const Ring& ring)$/;"	f	class:Ring
Ring	src/AbsBeamline/Ring.cpp	/^Ring::Ring(std::string ring)$/;"	f	class:Ring
Ring	src/AbsBeamline/Ring.h	/^class Ring : public Component {$/;"	c
RingSection	src/Utilities/RingSection.cpp	/^RingSection::RingSection()$/;"	f	class:RingSection
RingSection	src/Utilities/RingSection.cpp	/^RingSection::RingSection(const RingSection& rhs)$/;"	f	class:RingSection
RingSection	src/Utilities/RingSection.h	/^class RingSection {$/;"	c
RingSectionList	src/Utilities/RingSection.h	/^typedef std::vector<RingSection*> RingSectionList;$/;"	t
Rmsa	src/Expressions/Expressions.cpp	/^    double Rmsa(const std::vector<double>& array) {$/;"	f	namespace:Expressions
Rotation	src/Utilities/MSLang/Rotation.h	/^    struct Rotation: public Function {$/;"	s	namespace:mslang
Rotation3D	src/BeamlineGeometry/Rotation3D.cpp	/^Rotation3D::Rotation3D(double vx, double vy, double vz):$/;"	f	class:Rotation3D
Rotation3D	src/BeamlineGeometry/Rotation3D.h	/^class Rotation3D {$/;"	c
Rotation3D	src/BeamlineGeometry/Rotation3D.h	/^inline Rotation3D::Rotation3D():$/;"	f	class:Rotation3D
RunMethod	src/Track/TrackRun.h	/^    enum class RunMethod : unsigned short { NONE, PARALLEL };$/;"	c	class:TrackRun
S	src/Structure/BoundaryGeometry.h	/^        S,         \/\/ start of the geometry$/;"	e	enum:BoundaryGeometry::__anon61
SAVITZKYGOLAY	src/Utilities/OpalFilter.h	/^        SAVITZKYGOLAY,$/;"	m	class:OpalFilter::FilterType
SAutomatic	src/Expressions/SAutomatic.h	/^    SAutomatic<T>::SAutomatic(PtrToScalar<T> expr):$/;"	f	class:Expressions::SAutomatic
SAutomatic	src/Expressions/SAutomatic.h	/^    SAutomatic<T>::SAutomatic(const SAutomatic<T> &rhs):$/;"	f	class:Expressions::SAutomatic
SAutomatic	src/Expressions/SAutomatic.h	/^    template <class T> class SAutomatic: public SDeferred<T> {$/;"	c	namespace:Expressions
SBEND	src/AbsBeamline/ElementBase.h	/^    SBEND,$/;"	m	class:ElementType
SBinary	src/Expressions/SBinary.h	/^    SBinary<T, U>::SBinary(const SBinary &rhs):$/;"	f	class:Expressions::SBinary
SBinary	src/Expressions/SBinary.h	/^    SBinary<T, U>::SBinary(const TFunction2<T, U> &function,$/;"	f	class:Expressions::SBinary
SBinary	src/Expressions/SBinary.h	/^    class SBinary: public Scalar<T> {$/;"	c	namespace:Expressions
SCALE	src/Elements/OpalRingDefinition.h	/^        SCALE,$/;"	e	enum:OpalRingDefinition::__anon39
SCSOLVEFREQ	src/BasicActions/Option.cpp	/^        SCSOLVEFREQ,$/;"	e	enum:__anon24::__anon25	file:
SCell	src/Expressions/SCell.cpp	/^    SCell::SCell$/;"	f	class:Expressions::SCell
SCell	src/Expressions/SCell.h	/^    class SCell: public Scalar<double> {$/;"	c	namespace:Expressions
SConstant	src/Expressions/SConstant.h	/^    SConstant<T>::SConstant(T val):$/;"	f	class:Expressions::SConstant
SConstant	src/Expressions/SConstant.h	/^    template <class T> class SConstant: public Scalar<T> {$/;"	c	namespace:Expressions
SDDS	src/Utilities/SDDSParser.h	/^namespace SDDS {$/;"	n
SDDS	src/Utilities/SDDSParser/array.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/array.hpp	/^namespace SDDS {$/;"	n
SDDS	src/Utilities/SDDSParser/array_def.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/associate.hpp	/^                        , SDDS$/;"	e	enum:SDDS::associate::attributes
SDDS	src/Utilities/SDDSParser/associate.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/associate.hpp	/^namespace SDDS {$/;"	n
SDDS	src/Utilities/SDDSParser/associate_def.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/ast.hpp	/^namespace SDDS {$/;"	n
SDDS	src/Utilities/SDDSParser/ast_def.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/column.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/column.hpp	/^namespace SDDS {$/;"	n
SDDS	src/Utilities/SDDSParser/column_def.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/data.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/data.hpp	/^namespace SDDS {$/;"	n
SDDS	src/Utilities/SDDSParser/data_def.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/description.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/description.hpp	/^namespace SDDS {$/;"	n
SDDS	src/Utilities/SDDSParser/description_def.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/error_handler.hpp	/^namespace SDDS$/;"	n
SDDS	src/Utilities/SDDSParser/file.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/file.hpp	/^namespace SDDS {$/;"	n
SDDS	src/Utilities/SDDSParser/file_def.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/include.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/include.hpp	/^namespace SDDS {$/;"	n
SDDS	src/Utilities/SDDSParser/include_def.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/parameter.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/parameter.hpp	/^namespace SDDS {$/;"	n
SDDS	src/Utilities/SDDSParser/parameter_def.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/skipper.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/version.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDS	src/Utilities/SDDSParser/version.hpp	/^namespace SDDS {$/;"	n
SDDS	src/Utilities/SDDSParser/version_def.hpp	/^namespace SDDS { namespace parser$/;"	n
SDDSColumn	src/Structure/SDDSColumn.cpp	/^SDDSColumn::SDDSColumn(const std::string& name,$/;"	f	class:SDDSColumn
SDDSColumn	src/Structure/SDDSColumn.h	/^class SDDSColumn {$/;"	c
SDDSColumnSet	src/Structure/SDDSColumnSet.h	/^SDDSColumnSet::SDDSColumnSet()$/;"	f	class:SDDSColumnSet
SDDSColumnSet	src/Structure/SDDSColumnSet.h	/^class SDDSColumnSet {$/;"	c
SDDSParser	src/Utilities/SDDSParser.cpp	/^SDDS::SDDSParser::SDDSParser():$/;"	f	class:SDDS::SDDSParser
SDDSParser	src/Utilities/SDDSParser.cpp	/^SDDS::SDDSParser::SDDSParser(const std::string &input):$/;"	f	class:SDDS::SDDSParser
SDDSParser	src/Utilities/SDDSParser.h	/^    class SDDSParser {$/;"	c	namespace:SDDS
SDDSParserException	src/Utilities/SDDSParser/SDDSParserException.h	/^    SDDSParserException(const std::string &meth, const std::string &descr) {$/;"	f	class:SDDSParserException
SDDSParserException	src/Utilities/SDDSParser/SDDSParserException.h	/^class SDDSParserException {$/;"	c
SDDSWRITERCOLUMNSET_H	src/Structure/SDDSColumnSet.h	19;"	d
SDDSWRITERCOLUMN_H	src/Structure/SDDSColumn.h	19;"	d
SDDSWriter	src/Structure/SDDSWriter.cpp	/^SDDSWriter::SDDSWriter(const std::string& fname, bool restart)$/;"	f	class:SDDSWriter
SDDSWriter	src/Structure/SDDSWriter.h	/^class SDDSWriter {$/;"	c
SDeferred	src/Expressions/SDeferred.h	/^    SDeferred<T>::SDeferred(PtrToScalar<T> expr):$/;"	f	class:Expressions::SDeferred
SDeferred	src/Expressions/SDeferred.h	/^    SDeferred<T>::SDeferred(const SDeferred<T> &rhs):$/;"	f	class:Expressions::SDeferred
SDeferred	src/Expressions/SDeferred.h	/^    class SDeferred: public SValue<T> {$/;"	c	namespace:Expressions
SECONDARY	src/Physics/ParticleProperties.h	/^    SECONDARY,$/;"	m	class:ParticleOrigin
SEED	src/BasicActions/Option.cpp	/^        SEED,$/;"	e	enum:__anon24::__anon25	file:
SEGMENT	src/Structure/BoundaryGeometry.h	/^    enum INTERSECTION_TESTS { SEGMENT, RAY, LINE };$/;"	e	enum:BoundaryGeometry::INTERSECTION_TESTS
SET_NUM_PARTICLES	src/Structure/LossDataSink.cpp	96;"	d	file:
SET_STEP	src/Structure/LossDataSink.cpp	78;"	d	file:
SEXTUPOLE	src/AbsBeamline/Multipole.cpp	/^    enum { DIPOLE, QUADRUPOLE, SEXTUPOLE, OCTUPOLE, DECAPOLE };$/;"	e	enum:__anon20::__anon21	file:
SEXTUPOLE	src/Algorithms/IndexMap.cpp	/^    SEXTUPOLE,$/;"	e	enum:elements	file:
SEXTUPOLE	src/Structure/MeshGenerator.h	/^    enum MeshType { OTHER = 0, DIPOLE, QUADRUPOLE, SEXTUPOLE, OCTUPOLE, SOLENOID, RFCAVITY };$/;"	e	enum:MeshGenerator::MeshType
SField_Cell_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef Field<double, DIM, Mesh_t, Cell_t>                    SField_Cell_t;$/;"	t	file:
SField_Vert_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef Field<double, DIM, Mesh_t, Vert_t>                    SField_Vert_t;$/;"	t	file:
SFunction	src/Expressions/SFunction.cpp	/^SFunction::SFunction() {$/;"	f	class:SFunction
SFunction	src/Expressions/SFunction.h	/^class SFunction {$/;"	c
SHORT	src/Utilities/SDDSParser/ast.hpp	/^                      , SHORT$/;"	e	enum:SDDS::ast::datatype
SHash	src/Expressions/SHash.cpp	/^    SHash::SHash(const ATable &table):$/;"	f	class:Expressions::SHash
SHash	src/Expressions/SHash.cpp	/^    SHash::SHash(const SHash &rhs):$/;"	f	class:Expressions::SHash
SHash	src/Expressions/SHash.h	/^    class SHash: public Scalar<double> {$/;"	c	namespace:Expressions
SIGMAPX	src/Distribution/Distribution.cpp	/^    enum { TYPE, FNAME, SIGMAX, SIGMAY, SIGMAZ, SIGMAPX, SIGMAPY, SIGMAPZ, CORR,$/;"	e	enum:DISTRIBUTION::__anon65	file:
SIGMAPY	src/Distribution/Distribution.cpp	/^    enum { TYPE, FNAME, SIGMAX, SIGMAY, SIGMAZ, SIGMAPX, SIGMAPY, SIGMAPZ, CORR,$/;"	e	enum:DISTRIBUTION::__anon65	file:
SIGMAPZ	src/Distribution/Distribution.cpp	/^    enum { TYPE, FNAME, SIGMAX, SIGMAY, SIGMAZ, SIGMAPX, SIGMAPY, SIGMAPZ, CORR,$/;"	e	enum:DISTRIBUTION::__anon65	file:
SIGMAT	src/Distribution/Distribution.cpp	/^           CORRZ, CORRT, SIGMAT, TPULSEFWHM, TRISE, TFALL, FTOSCAMPLITUDE, FTOSCPERIODS, EMITTED, SIZE };$/;"	e	enum:DISTRIBUTION::__anon65	file:
SIGMAX	src/Distribution/Distribution.cpp	/^    enum { TYPE, FNAME, SIGMAX, SIGMAY, SIGMAZ, SIGMAPX, SIGMAPY, SIGMAPZ, CORR,$/;"	e	enum:DISTRIBUTION::__anon65	file:
SIGMAY	src/Distribution/Distribution.cpp	/^    enum { TYPE, FNAME, SIGMAX, SIGMAY, SIGMAZ, SIGMAPX, SIGMAPY, SIGMAPZ, CORR,$/;"	e	enum:DISTRIBUTION::__anon65	file:
SIGMAZ	src/Distribution/Distribution.cpp	/^    enum { TYPE, FNAME, SIGMAX, SIGMAY, SIGMAZ, SIGMAPX, SIGMAPY, SIGMAPZ, CORR,$/;"	e	enum:DISTRIBUTION::__anon65	file:
SIGN3	src/Structure/BoundaryGeometry.cpp	/^static inline int SIGN3(Vector_t<double, 3> A) {$/;"	f	file:
SIZE	src/Algorithms/IndexMap.cpp	/^    SIZE$/;"	e	enum:elements	file:
SIZE	src/BasicActions/DumpEMFields.h	/^        SIZE$/;"	e	enum:DumpEMFields::__anon29
SIZE	src/BasicActions/DumpFields.h	/^        SIZE$/;"	e	enum:DumpFields::__anon26
SIZE	src/BasicActions/Option.cpp	/^        SIZE$/;"	e	enum:__anon24::__anon25	file:
SIZE	src/BasicActions/Select.cpp	/^        SIZE$/;"	e	enum:__anon27::__anon28	file:
SIZE	src/Distribution/Distribution.cpp	/^           CORRZ, CORRT, SIGMAT, TPULSEFWHM, TRISE, TFALL, FTOSCAMPLITUDE, FTOSCPERIODS, EMITTED, SIZE };$/;"	e	enum:DISTRIBUTION::__anon65	file:
SIZE	src/Elements/OpalCavity.h	/^        SIZE$/;"	e	enum:OpalCavity::__anon34
SIZE	src/Elements/OpalDrift.h	/^         SIZE$/;"	e	enum:OpalDrift::__anon50
SIZE	src/Elements/OpalMultipole.h	/^        SIZE$/;"	e	enum:OpalMultipole::__anon41
SIZE	src/Elements/OpalMultipoleT.h	/^        SIZE             \/\/ size of the enum$/;"	e	enum:OpalMultipoleT::__anon48
SIZE	src/Elements/OpalOffset/OpalGlobalCartesianOffset.h	/^        SIZE \/\/ size of the enum$/;"	e	enum:OpalOffset::OpalGlobalCartesianOffset::__anon44
SIZE	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.h	/^        SIZE \/\/ size of the enum$/;"	e	enum:OpalOffset::OpalGlobalCylindricalOffset::__anon42
SIZE	src/Elements/OpalOffset/OpalLocalCartesianOffset.h	/^        SIZE \/\/ size of the enum$/;"	e	enum:OpalOffset::OpalLocalCartesianOffset::__anon45
SIZE	src/Elements/OpalOffset/OpalLocalCylindricalOffset.h	/^        SIZE \/\/ size of the enum$/;"	e	enum:OpalOffset::OpalLocalCylindricalOffset::__anon43
SIZE	src/Elements/OpalProbe.h	/^        SIZE$/;"	e	enum:OpalProbe::__anon40
SIZE	src/Elements/OpalRingDefinition.h	/^        SIZE \/\/ size of the enum$/;"	e	enum:OpalRingDefinition::__anon39
SIZE	src/Elements/OpalSolenoid.h	/^        SIZE$/;"	e	enum:OpalSolenoid::__anon49
SIZE	src/Elements/OpalSource.h	/^        SIZE$/;"	e	enum:OpalSource::__anon35
SIZE	src/Elements/OpalTravelingWave.h	/^        SIZE$/;"	e	enum:OpalTravelingWave::__anon46
SIZE	src/Elements/OpalVacuum.h	/^        SIZE$/;"	e	enum:OpalVacuum::__anon36
SIZE	src/Elements/OpalVerticalFFAMagnet.h	/^        SIZE \/\/ size of the enum$/;"	e	enum:OpalVerticalFFAMagnet::__anon38
SIZE	src/Lines/Line.cpp	/^        SIZE$/;"	e	enum:__anon53::__anon54	file:
SIZE	src/Lines/Sequence.cpp	/^        SIZE$/;"	e	enum:__anon51::__anon52	file:
SIZE	src/Structure/Beam.cpp	/^        SIZE$/;"	e	enum:__anon63::__anon64	file:
SIZE	src/Structure/BoundaryGeometry.h	/^        SIZE$/;"	e	enum:BoundaryGeometry::__anon61
SIZE	src/Structure/FieldSolverCmd.h	/^        SIZE$/;"	e	enum:FieldSolverCmdType::FIELDSOLVER::__anon62
SIZE	src/Track/TrackCmd.cpp	/^        SIZE$/;"	e	enum:__anon30::__anon31	file:
SIZE	src/Track/TrackRun.cpp	/^        SIZE$/;"	e	enum:TRACKRUN::__anon32	file:
SIZE	src/Utilities/OpalFilter.cpp	/^        SIZE$/;"	e	enum:__anon55::__anon56	file:
SKIPPER_HPP_	src/Utilities/SDDSParser/skipper.hpp	18;"	d
SNull	src/Expressions/SNull.h	/^    SNull<T>::SNull(const SNull<T> &rhs):$/;"	f	class:Expressions::SNull
SNull	src/Expressions/SNull.h	/^    SNull<T>::SNull(const TFunction0<T> &function):$/;"	f	class:Expressions::SNull
SNull	src/Expressions/SNull.h	/^    class SNull: public Scalar<T> {$/;"	c	namespace:Expressions
SOLENOID	src/AbsBeamline/ElementBase.h	/^    SOLENOID,$/;"	m	class:ElementType
SOLENOID	src/Algorithms/IndexMap.cpp	/^    SOLENOID,$/;"	e	enum:elements	file:
SOLENOID	src/Structure/MeshGenerator.h	/^    enum MeshType { OTHER = 0, DIPOLE, QUADRUPOLE, SEXTUPOLE, OCTUPOLE, SOLENOID, RFCAVITY };$/;"	e	enum:MeshGenerator::MeshType
SPATIAL	src/Structure/LossDataSink.h	/^enum class CollectionType : unsigned short { SPATIAL = 0, TEMPORAL };$/;"	m	class:CollectionType
SPECIFICELEMENTVISITOR_H	src/AbsBeamline/SpecificElementVisitor.h	19;"	d
SPTDUMPFREQ	src/BasicActions/Option.cpp	/^        SPTDUMPFREQ,$/;"	e	enum:__anon24::__anon25	file:
SQR	src/Structure/BoundaryGeometry.cpp	46;"	d	file:
SRefAttr	src/Expressions/SRefAttr.h	/^    SRefAttr<T>::SRefAttr$/;"	f	class:Expressions::SRefAttr
SRefAttr	src/Expressions/SRefAttr.h	/^    SRefAttr<T>::SRefAttr(const SRefAttr &rhs):$/;"	f	class:Expressions::SRefAttr
SRefAttr	src/Expressions/SRefAttr.h	/^    class SRefAttr: public AttributeBase {$/;"	c	namespace:Expressions
SRefExpr	src/Expressions/SRefExpr.h	/^    SRefExpr<T>::SRefExpr$/;"	f	class:Expressions::SRefExpr
SRefExpr	src/Expressions/SRefExpr.h	/^    SRefExpr<T>::SRefExpr(const SRefExpr<T> &rhs):$/;"	f	class:Expressions::SRefExpr
SRefExpr	src/Expressions/SRefExpr.h	/^    class SRefExpr: public Scalar<T>, public Invalidator {$/;"	c	namespace:Expressions
STATDUMPFREQ	src/BasicActions/Option.cpp	/^        STATDUMPFREQ,$/;"	e	enum:__anon24::__anon25	file:
STATEMENT	src/AbstractObjects/AttributeHandler.h	/^        STATEMENT,$/;"	e	enum:AttributeHandler::OwnerType
STEP	src/Elements/OpalProbe.h	/^        STEP,             \/\/ Step size of the probe$/;"	e	enum:OpalProbe::__anon40
STEPPERS_H	src/Steppers/Steppers.h	19;"	d
STEPPER_H	src/Steppers/Stepper.h	19;"	d
STEPSIZECONFIG_H	src/Algorithms/StepSizeConfig.h	21;"	d
STEPSPERTURN	src/Track/TrackCmd.cpp	/^        STEPSPERTURN,    \/\/ Return the timsteps per revolution period. ONLY available for OPAL-cycl.$/;"	e	enum:__anon30::__anon31	file:
STOP	src/Elements/OpalVacuum.h	/^        STOP,         \/\/ whether the secondary particles are tracked$/;"	e	enum:OpalVacuum::__anon36
STRING	src/Utilities/SDDSParser/ast.hpp	/^                      , STRING };$/;"	e	enum:SDDS::ast::datatype
SUB_COMMAND	src/AbstractObjects/AttributeHandler.h	/^        SUB_COMMAND,$/;"	e	enum:AttributeHandler::OwnerType
SUnary	src/Expressions/SUnary.h	/^    SUnary<T, U>::SUnary(const SUnary<T, U> &rhs):$/;"	f	class:Expressions::SUnary
SUnary	src/Expressions/SUnary.h	/^    SUnary<T, U>::SUnary(const TFunction1<T, U> &function,$/;"	f	class:Expressions::SUnary
SUnary	src/Expressions/SUnary.h	/^    class SUnary: public Scalar<T> {$/;"	c	namespace:Expressions
SValue	src/Expressions/SValue.h	/^    SValue<T>::SValue():$/;"	f	class:Expressions::SValue
SValue	src/Expressions/SValue.h	/^    SValue<T>::SValue(const SValue<T> &rhs):$/;"	f	class:Expressions::SValue
SValue	src/Expressions/SValue.h	/^    SValue<T>::SValue(const T &val):$/;"	f	class:Expressions::SValue
SValue	src/Expressions/SValue.h	/^    template <class T> class SValue: public AttributeBase {$/;"	c	namespace:Expressions
SW	src/AbsBeamline/RFCavity.h	/^enum class CavityType : unsigned short { SW, SGSW };$/;"	m	class:CavityType
SYMBOL	src/Utilities/SDDSParser/array.hpp	/^                         , SYMBOL$/;"	e	enum:SDDS::array::attributes
SYMBOL	src/Utilities/SDDSParser/column.hpp	/^                        , SYMBOL$/;"	e	enum:SDDS::column::attributes
SYMBOL	src/Utilities/SDDSParser/parameter.hpp	/^                        , SYMBOL$/;"	e	enum:SDDS::parameter::attributes
SYMMETRY	src/Elements/OpalRingDefinition.h	/^        SYMMETRY,$/;"	e	enum:OpalRingDefinition::__anon39
SamplingBase	src/Distribution/SamplingBase.hpp	/^        SamplingBase(std::shared_ptr<ParticleContainer_t> &pc, std::shared_ptr<FieldContainer_t> &fc, std::shared_ptr<Distribution_t> &dist)$/;"	f	class:SamplingBase
SamplingBase	src/Distribution/SamplingBase.hpp	/^class SamplingBase{$/;"	c
SavitzkyGolayFilter	src/Filters/SavitzkyGolay.cpp	/^SavitzkyGolayFilter::SavitzkyGolayFilter(int np, int nl, int nr, int m):$/;"	f	class:SavitzkyGolayFilter
SavitzkyGolayFilter	src/Filters/SavitzkyGolay.h	/^class SavitzkyGolayFilter: public Filter {$/;"	c
Scalar	src/AbstractObjects/Expressions.h	/^    Scalar<T>::Scalar()$/;"	f	class:Expressions::Scalar
Scalar	src/AbstractObjects/Expressions.h	/^    Scalar<T>::Scalar(const Scalar<T> &)$/;"	f	class:Expressions::Scalar
Scalar	src/AbstractObjects/Expressions.h	/^    template <class T> class Scalar {$/;"	c	namespace:Expressions
ScalingFFAMagnet	src/AbsBeamline/ScalingFFAMagnet.cpp	/^ScalingFFAMagnet::ScalingFFAMagnet(const ScalingFFAMagnet& right)$/;"	f	class:ScalingFFAMagnet
ScalingFFAMagnet	src/AbsBeamline/ScalingFFAMagnet.cpp	/^ScalingFFAMagnet::ScalingFFAMagnet(const std::string& name)$/;"	f	class:ScalingFFAMagnet
ScalingFFAMagnet	src/AbsBeamline/ScalingFFAMagnet.h	/^class ScalingFFAMagnet : public Component {$/;"	c
ScalingFFAMagnetTest	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    ScalingFFAMagnetTest() : sector_m(nullptr), fout_m(), silencer_m() {$/;"	f	class:ScalingFFAMagnetTest
ScalingFFAMagnetTest	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^class ScalingFFAMagnetTest : public ::testing::Test {$/;"	c	file:
SectorField	src/Fields/SectorField.cpp	/^SectorField::SectorField(const std::string& \/*file_name*\/)$/;"	f	class:SectorField
SectorField	src/Fields/SectorField.h	/^class SectorField {$/;"	c
SectorMagneticFieldMap	src/Fields/SectorMagneticFieldMap.cpp	/^SectorMagneticFieldMap::SectorMagneticFieldMap$/;"	f	class:SectorMagneticFieldMap
SectorMagneticFieldMap	src/Fields/SectorMagneticFieldMap.cpp	/^SectorMagneticFieldMap::SectorMagneticFieldMap(std::string file_name,$/;"	f	class:SectorMagneticFieldMap
SectorMagneticFieldMap	src/Fields/SectorMagneticFieldMap.h	/^class SectorMagneticFieldMap : public SectorField {$/;"	c
Select	src/BasicActions/Select.cpp	/^Select::Select():$/;"	f	class:Select
Select	src/BasicActions/Select.cpp	/^Select::Select(const std::string& name, Select* parent):$/;"	f	class:Select
Select	src/BasicActions/Select.h	/^class Select: public Action {$/;"	c
Selector	src/Tables/Selector.cpp	/^Selector::Selector(const Beamline &bl, const RangeRep &range,$/;"	f	class:Selector
Selector	src/Tables/Selector.h	/^class Selector: public RangeSelector {$/;"	c
Sequence	src/Lines/Sequence.cpp	/^Sequence::Sequence()$/;"	f	class:Sequence
Sequence	src/Lines/Sequence.cpp	/^Sequence::Sequence(const std::string& name, Sequence* parent)$/;"	f	class:Sequence
Sequence	src/Lines/Sequence.h	/^class Sequence: public BeamSequence {$/;"	c
SequenceMember	src/Lines/SequenceMember.cpp	/^SequenceMember::SequenceMember():$/;"	f	class:SequenceMember
SequenceMember	src/Lines/SequenceMember.cpp	/^SequenceMember::SequenceMember(const SequenceMember &rhs):$/;"	f	class:SequenceMember
SequenceMember	src/Lines/SequenceMember.h	/^class SequenceMember: public FlaggedElmPtr {$/;"	c
SequenceParser	src/Lines/SequenceParser.cpp	/^SequenceParser::SequenceParser(Sequence *seq):$/;"	f	class:SequenceParser
SequenceParser	src/Lines/SequenceParser.h	/^class SequenceParser: public OpalParser {$/;"	c
SequenceTemplate	src/Lines/SequenceTemplate.cpp	/^SequenceTemplate::SequenceTemplate():$/;"	f	class:SequenceTemplate
SequenceTemplate	src/Lines/SequenceTemplate.cpp	/^SequenceTemplate::SequenceTemplate(const std::string &name, Object *parent):$/;"	f	class:SequenceTemplate
SequenceTemplate	src/Lines/SequenceTemplate.h	/^class SequenceTemplate: public Macro {$/;"	c
SetCoefficients	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^void SquarePolynomialVector::SetCoefficients(MMatrix<double> coeff)$/;"	f	class:interpolation::SquarePolynomialVector
SetCoefficients	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^void SquarePolynomialVector::SetCoefficients(int pointDim, MMatrix<double> coeff) {$/;"	f	class:interpolation::SquarePolynomialVector
SetCoefficients	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^void SquarePolynomialVector::SetCoefficients(std::vector<PolynomialCoefficient> coeff) {$/;"	f	class:interpolation::SquarePolynomialVector
SetStatistics	src/Structure/LossDataSink.cpp	/^SetStatistics::SetStatistics()$/;"	f	class:SetStatistics
SetStatistics	src/Structure/LossDataSink.h	/^struct SetStatistics {$/;"	s
SetUp	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    void SetUp( ) {$/;"	f	class:ScalingFFAMagnetTest
SetUp	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^    void SetUp( ) {$/;"	f	class:VerticalFFAMagnetTest
SetUp	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^    void SetUp( ) {$/;"	f	class:ndgridtest::NDGridTest
SetUpTestCase	tests/classic_src/Algorithms/DistributionMomentsTestFixture.cpp	/^void DistributionMomentsTest::SetUpTestCase()$/;"	f	class:DistributionMomentsTest
Shear	src/Utilities/MSLang/Shear.h	/^    struct Shear: public Function {$/;"	s	namespace:mslang
Sign	src/Expressions/Expressions.cpp	/^    double Sign(double a) {$/;"	f	namespace:Expressions
SilenceTest	tests/opal_test_utilities/SilenceTest.cpp	/^OpalTestUtilities::SilenceTest::SilenceTest():$/;"	f	class:OpalTestUtilities::SilenceTest
SilenceTest	tests/opal_test_utilities/SilenceTest.h	/^    class SilenceTest {$/;"	c	namespace:OpalTestUtilities
SimpleStatement	src/OpalParser/SimpleStatement.cpp	/^SimpleStatement::SimpleStatement(const std::string &name, TokenList &list):$/;"	f	class:SimpleStatement
SimpleStatement	src/OpalParser/SimpleStatement.cpp	/^SimpleStatement::SimpleStatement(const std::string &name, int line):$/;"	f	class:SimpleStatement
SimpleStatement	src/OpalParser/SimpleStatement.h	/^class SimpleStatement: public Statement {$/;"	c
SkewComponentErrors	src/AbsBeamline/Multipole.h	/^    std::vector<double> SkewComponentErrors;$/;"	m	class:Multipole
SkewComponents	src/AbsBeamline/Multipole.h	/^    std::vector<double> SkewComponents;$/;"	m	class:Multipole
Solenoid	src/AbsBeamline/Solenoid.cpp	/^Solenoid::Solenoid() : Solenoid("") {$/;"	f	class:Solenoid
Solenoid	src/AbsBeamline/Solenoid.cpp	/^Solenoid::Solenoid(const Solenoid& right)$/;"	f	class:Solenoid
Solenoid	src/AbsBeamline/Solenoid.cpp	/^Solenoid::Solenoid(const std::string& name)$/;"	f	class:Solenoid
Solenoid	src/AbsBeamline/Solenoid.h	/^class Solenoid : public Component {$/;"	c
SolenoidRep	src/BeamlineCore/SolenoidRep.cpp	/^SolenoidRep::SolenoidRep():$/;"	f	class:SolenoidRep
SolenoidRep	src/BeamlineCore/SolenoidRep.cpp	/^SolenoidRep::SolenoidRep(const SolenoidRep &right):$/;"	f	class:SolenoidRep
SolenoidRep	src/BeamlineCore/SolenoidRep.cpp	/^SolenoidRep::SolenoidRep(const std::string &name):$/;"	f	class:SolenoidRep
SolenoidRep	src/BeamlineCore/SolenoidRep.h	/^class SolenoidRep: public Solenoid {$/;"	c
SolveFactory	src/Fields/Interpolation/SolveFactory.cpp	/^SolveFactory::SolveFactory(int smoothing_order,$/;"	f	class:interpolation::SolveFactory
SolveFactory	src/Fields/Interpolation/SolveFactory.h	/^class SolveFactory {$/;"	c	namespace:interpolation
SolveFactoryTestFixture	tests/classic_src/Fields/Interpolation/SolveFactoryTest.cpp	/^class SolveFactoryTestFixture : public ::testing::Test {$/;"	c	file:
SolveFactory_hh	src/Fields/Interpolation/SolveFactory.h	32;"	d
SortAsc	src/Utilities/ClassicField.h	/^    static bool SortAsc(const ClassicField &fle1, const ClassicField &fle2) {$/;"	f	class:ClassicField
Sp	src/PartBunch/ParticleContainer.hpp	/^    ippl::ParticleAttrib<short> Sp;$/;"	m	class:ParticleContainer
SpaceTransform	src/Fields/Interpolation/PolynomialCoefficient.cpp	/^void PolynomialCoefficient::SpaceTransform(std::vector<int> space_in,$/;"	f	class:interpolation::PolynomialCoefficient
SpecializedGreensFunction	src/.Solvers/FFTPoissonSolver.cpp	/^struct SpecializedGreensFunction {};$/;"	s	file:
SpecializedGreensFunction	src/.Solvers/FFTPoissonSolver.cpp	/^struct SpecializedGreensFunction<3> {$/;"	s	file:
SpecificElementVisitor	src/AbsBeamline/SpecificElementVisitor.h	/^SpecificElementVisitor<ELEM>::SpecificElementVisitor(const Beamline &beamline):$/;"	f	class:SpecificElementVisitor
SpecificElementVisitor	src/AbsBeamline/SpecificElementVisitor.h	/^class SpecificElementVisitor: public BeamlineVisitor {$/;"	c
SplineTimeDependence	src/Algorithms/SplineTimeDependence.cpp	/^SplineTimeDependence::SplineTimeDependence() : spline_m(nullptr), acc_m(nullptr) {$/;"	f	class:SplineTimeDependence
SplineTimeDependence	src/Algorithms/SplineTimeDependence.cpp	/^SplineTimeDependence::SplineTimeDependence(const SplineTimeDependence& \/*rhs*\/)$/;"	f	class:SplineTimeDependence
SplineTimeDependence	src/Algorithms/SplineTimeDependence.cpp	/^SplineTimeDependence::SplineTimeDependence(size_t splineOrder,$/;"	f	class:SplineTimeDependence
SplineTimeDependence	src/Algorithms/SplineTimeDependence.h	/^class SplineTimeDependence : public AbstractTimeDependence {$/;"	c
SplineTimeDependenceTest	tests/classic_src/Algorithms/SplineTimeDependenceTest.cpp	/^    SplineTimeDependenceTest() : times_m(10), values_m(10) {$/;"	f	class:SplineTimeDependenceTest
SplineTimeDependenceTest	tests/classic_src/Algorithms/SplineTimeDependenceTest.cpp	/^class SplineTimeDependenceTest : public ::testing::Test { $/;"	c	file:
SquarePolynomialVector	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^SquarePolynomialVector::SquarePolynomialVector (const SquarePolynomialVector& pv)$/;"	f	class:interpolation::SquarePolynomialVector
SquarePolynomialVector	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^SquarePolynomialVector::SquarePolynomialVector()$/;"	f	class:interpolation::SquarePolynomialVector
SquarePolynomialVector	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^SquarePolynomialVector::SquarePolynomialVector(int numberOfInputVariables, MMatrix<double> polynomialCoefficients)$/;"	f	class:interpolation::SquarePolynomialVector
SquarePolynomialVector	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^SquarePolynomialVector::SquarePolynomialVector(std::vector<PolynomialCoefficient> coefficients)$/;"	f	class:interpolation::SquarePolynomialVector
SquarePolynomialVector	src/Fields/Interpolation/SquarePolynomialVector.h	/^class SquarePolynomialVector {$/;"	c	namespace:interpolation
SquarePolynomialVector_hh	src/Fields/Interpolation/SquarePolynomialVector.h	29;"	d
Standard	src/PartBunch/Binning/ParallelReduceTools.h	/^        Standard,          \/\/ Default auto selection$/;"	m	class:ParticleBinning::HistoReductionMode
StatBaseWriter	src/Structure/StatBaseWriter.cpp	/^StatBaseWriter::StatBaseWriter(const std::string& fname, bool restart)$/;"	f	class:StatBaseWriter
StatBaseWriter	src/Structure/StatBaseWriter.h	/^class StatBaseWriter : public SDDSWriter {$/;"	c
StatMarkerTimer_m	src/Structure/DataSink.h	/^    IpplTimings::TimerRef StatMarkerTimer_m;$/;"	m	class:DataSink
StatWriter	src/Structure/StatWriter.cpp	/^StatWriter::StatWriter(const std::string& fname, bool restart) : StatBaseWriter(fname, restart) {$/;"	f	class:StatWriter
StatWriter	src/Structure/StatWriter.h	/^class StatWriter : public StatBaseWriter {$/;"	c
Statement	src/OpalParser/Statement.cpp	/^Statement::Statement(const std::string &name, TokenList &list):$/;"	f	class:Statement
Statement	src/OpalParser/Statement.cpp	/^Statement::Statement(const std::string &name, int line):$/;"	f	class:Statement
Statement	src/OpalParser/Statement.h	/^class Statement {$/;"	c
StaticElectricField	src/Fields/StaticElectricField.cpp	/^StaticElectricField::StaticElectricField()$/;"	f	class:StaticElectricField
StaticElectricField	src/Fields/StaticElectricField.h	/^class StaticElectricField: public EMField {$/;"	c
StaticMagneticField	src/Fields/StaticMagneticField.cpp	/^StaticMagneticField::StaticMagneticField()$/;"	f	class:StaticMagneticField
StaticMagneticField	src/Fields/StaticMagneticField.h	/^class StaticMagneticField: public EMField {$/;"	c
Stencil	src/.Solvers/IrregularDomain.h	/^    struct Stencil {$/;"	s	class:IrregularDomain
StencilFilter	src/Filters/Stencil.h	/^    StencilFilter() { ;}$/;"	f	class:StencilFilter
StencilFilter	src/Filters/Stencil.h	/^class StencilFilter: public Filter {$/;"	c
StencilIndex_t	src/.Solvers/IrregularDomain.h	/^    typedef Stencil<int> StencilIndex_t;$/;"	t	class:IrregularDomain
StencilValue_t	src/.Solvers/IrregularDomain.h	/^    typedef Stencil<double> StencilValue_t;$/;"	t	class:IrregularDomain
StepSizeConfig	src/Algorithms/StepSizeConfig.h	/^StepSizeConfig::StepSizeConfig():$/;"	f	class:StepSizeConfig
StepSizeConfig	src/Algorithms/StepSizeConfig.h	/^StepSizeConfig::StepSizeConfig(const StepSizeConfig &right):$/;"	f	class:StepSizeConfig
StepSizeConfig	src/Algorithms/StepSizeConfig.h	/^class StepSizeConfig {$/;"	c
Stepper	src/Steppers/Stepper.h	/^    Stepper(const FieldFunction& fieldfunc) : fieldfunc_m(fieldfunc) {$/;"	f	class:Stepper
Stepper	src/Steppers/Stepper.h	/^class Stepper {$/;"	c
Steppers	src/Steppers/Steppers.h	/^namespace Steppers {$/;"	n
SteptoLastInj_m	src/PartBunch/PartBunch.hpp	/^    int SteptoLastInj_m;$/;"	m	class:PartBunch
Stop	src/BasicActions/Stop.cpp	/^Stop::Stop(): Action(0, "STOP",$/;"	f	class:Stop
Stop	src/BasicActions/Stop.cpp	/^Stop::Stop(const std::string& name, Stop* parent):$/;"	f	class:Stop
Stop	src/BasicActions/Stop.h	/^class Stop: public Action {$/;"	c
StraightGeometry	src/BeamlineGeometry/StraightGeometry.h	/^class StraightGeometry : public BGeometryBase {$/;"	c
StraightGeometry	src/BeamlineGeometry/StraightGeometry.h	/^inline StraightGeometry::StraightGeometry(const StraightGeometry &right):$/;"	f	class:StraightGeometry
StraightGeometry	src/BeamlineGeometry/StraightGeometry.h	/^inline StraightGeometry::StraightGeometry(double l): len(l)$/;"	f	class:StraightGeometry
String	src/Attributes/String.cpp	/^    String::String(const std::string &name, const std::string &help):$/;"	f	class:Attributes::String
String	src/Attributes/String.h	/^    class String: public AttributeHandler {$/;"	c	namespace:Attributes
StringArray	src/Attributes/StringArray.cpp	/^    StringArray::StringArray(const std::string &name, const std::string &help):$/;"	f	class:Attributes::StringArray
StringArray	src/Attributes/StringArray.h	/^    class StringArray: public AttributeHandler {$/;"	c	namespace:Attributes
StringConstant	src/ValueDefinitions/StringConstant.cpp	/^StringConstant::StringConstant($/;"	f	class:StringConstant
StringConstant	src/ValueDefinitions/StringConstant.cpp	/^StringConstant::StringConstant()$/;"	f	class:StringConstant
StringConstant	src/ValueDefinitions/StringConstant.cpp	/^StringConstant::StringConstant(const std::string& name, StringConstant* parent)$/;"	f	class:StringConstant
StringConstant	src/ValueDefinitions/StringConstant.h	/^class StringConstant: public ValueDefinition {$/;"	c
StringStream	src/OpalParser/StringStream.cpp	/^StringStream::StringStream(const std::string &str):$/;"	f	class:StringStream
StringStream	src/OpalParser/StringStream.h	/^class StringStream: public TokenStream {$/;"	c
StringToSymmetry	src/Fields/SectorMagneticFieldMap.cpp	/^SectorMagneticFieldMap::symmetry SectorMagneticFieldMap::StringToSymmetry$/;"	f	class:SectorMagneticFieldMap
Sub	src/Expressions/Expressions.cpp	/^    double Sub(double a, double b) {$/;"	f	namespace:Expressions
SwapType	src/Fields/Fieldmap.h	/^enum SwapType {$/;"	g
SymmetricDifference	src/Utilities/MSLang/SymmetricDifference.h	/^        SymmetricDifference()$/;"	f	struct:mslang::SymmetricDifference
SymmetricDifference	src/Utilities/MSLang/SymmetricDifference.h	/^        SymmetricDifference(const SymmetricDifference &right):$/;"	f	struct:mslang::SymmetricDifference
SymmetricDifference	src/Utilities/MSLang/SymmetricDifference.h	/^    struct SymmetricDifference: public Function {$/;"	s	namespace:mslang
SymmetryToString	src/Fields/SectorMagneticFieldMap.cpp	/^std::string SectorMagneticFieldMap::SymmetryToString$/;"	f	class:SectorMagneticFieldMap
System	src/BasicActions/System.cpp	/^System::System()$/;"	f	class:System
System	src/BasicActions/System.cpp	/^System::System(const std::string& name, System* parent) : Action(name, parent) {$/;"	f	class:System
System	src/BasicActions/System.h	/^class System: public Action {$/;"	c
T	src/Algorithms/AbstractTracker.h	/^    enum { X, PX, Y, PY, T, PT };$/;"	e	enum:AbstractTracker::__anon81
T	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<double> MMatrix<double>::T()     const$/;"	f	class:interpolation::MMatrix
T	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<m_complex> MMatrix<m_complex>::T()     const$/;"	f	class:interpolation::MMatrix
T	src/Fields/Interpolation/MVector.cpp	/^MMatrix<Tmplt> MVector<Tmplt>::T() const$/;"	f	class:interpolation::MVector
T	tests/ippl_src/AppTypes/Chsr-2.cpp	/^typedef double T;$/;"	t	file:
T0	src/Track/TrackCmd.cpp	/^        T0,        \/\/ The elapsed time (sec) of the bunch$/;"	e	enum:__anon30::__anon31	file:
T1DDynamic	src/Fields/Fieldmap.h	/^    T1DDynamic,$/;"	e	enum:MapType
T1DElectroStatic	src/Fields/Fieldmap.h	/^    T1DElectroStatic,$/;"	e	enum:MapType
T1DMagnetoStatic	src/Fields/Fieldmap.h	/^    T1DMagnetoStatic,$/;"	e	enum:MapType
T1DProfile1	src/Fields/Fieldmap.h	/^    T1DProfile1,$/;"	e	enum:MapType
T1DProfile2	src/Fields/Fieldmap.h	/^    T1DProfile2,$/;"	e	enum:MapType
T2DDynamic	src/Fields/Fieldmap.h	/^    T2DDynamic,$/;"	e	enum:MapType
T2DDynamic_cspline	src/Fields/Fieldmap.h	/^    T2DDynamic_cspline,$/;"	e	enum:MapType
T2DElectroStatic	src/Fields/Fieldmap.h	/^    T2DElectroStatic,$/;"	e	enum:MapType
T2DElectroStatic_cspline	src/Fields/Fieldmap.h	/^    T2DElectroStatic_cspline,$/;"	e	enum:MapType
T2DMagnetoStatic	src/Fields/Fieldmap.h	/^    T2DMagnetoStatic,$/;"	e	enum:MapType
T2DMagnetoStatic_cspline	src/Fields/Fieldmap.h	/^    T2DMagnetoStatic_cspline,$/;"	e	enum:MapType
T2kG	src/Physics/Units.h	/^    constexpr double T2kG = 1e+1;$/;"	m	namespace:Units
T3DDynamic	src/Fields/Fieldmap.h	/^    T3DDynamic,$/;"	e	enum:MapType
T3DDynamicH5Block	src/Fields/Fieldmap.h	/^    T3DDynamicH5Block$/;"	e	enum:MapType
T3DElectroStatic	src/Fields/Fieldmap.h	/^    T3DElectroStatic,$/;"	e	enum:MapType
T3DMagnetoStatic	src/Fields/Fieldmap.h	/^    T3DMagnetoStatic,$/;"	e	enum:MapType
T3DMagnetoStaticH5Block	src/Fields/Fieldmap.h	/^    T3DMagnetoStaticH5Block,$/;"	e	enum:MapType
T3DMagnetoStatic_Extended	src/Fields/Fieldmap.h	/^    T3DMagnetoStatic_Extended,$/;"	e	enum:MapType
TANGENTIAL_OFFSET	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.h	/^        TANGENTIAL_OFFSET,$/;"	e	enum:OpalOffset::OpalGlobalCylindricalOffset::__anon42
TANH_INTEGRAL	src/AbsBeamline/MultipoleTFunctions/tanhDeriv.h	29;"	d
TAstraDynamic	src/Fields/Fieldmap.h	/^    TAstraDynamic,$/;"	e	enum:MapType
TAstraElectroStatic	src/Fields/Fieldmap.h	/^    TAstraElectroStatic,$/;"	e	enum:MapType
TAstraMagnetoStatic	src/Fields/Fieldmap.h	/^    TAstraMagnetoStatic,$/;"	e	enum:MapType
TBeamline	src/Beamlines/TBeamline.h	/^TBeamline<T>::TBeamline()$/;"	f	class:TBeamline
TBeamline	src/Beamlines/TBeamline.h	/^TBeamline<T>::TBeamline(const TBeamline<T>& rhs)$/;"	f	class:TBeamline
TBeamline	src/Beamlines/TBeamline.h	/^TBeamline<T>::TBeamline(const std::string& name)$/;"	f	class:TBeamline
TBeamline	src/Beamlines/TBeamline.h	/^class TBeamline : public Beamline, public std::list<T> {$/;"	c
TELL	src/BasicActions/Option.cpp	/^        TELL,$/;"	e	enum:__anon24::__anon25	file:
TEMPERATURE	src/Elements/OpalVacuum.h	/^        TEMPERATURE,  \/\/ Temperature of residual gas$/;"	e	enum:OpalVacuum::__anon36
TEST	tests/classic_src/AbsBeamline/DipoleFieldTest.cpp	/^TEST(Maxwell, Zeros)$/;"	f
TEST	tests/classic_src/AbsBeamline/DipoleFieldTest.cpp	/^TEST(Quad, Quadrupole)$/;"	f
TEST	tests/classic_src/AbsBeamline/MultipoleTTest.cpp	/^TEST(MultipoleTTest, CurvedConstRadius) {$/;"	f
TEST	tests/classic_src/AbsBeamline/MultipoleTTest.cpp	/^TEST(MultipoleTTest, CurvedMagnet) {$/;"	f
TEST	tests/classic_src/AbsBeamline/MultipoleTTest.cpp	/^TEST(MultipoleTTest, CurvedVarRadius) {$/;"	f
TEST	tests/classic_src/AbsBeamline/MultipoleTTest.cpp	/^TEST(MultipoleTTest, Maxwell) {$/;"	f
TEST	tests/classic_src/AbsBeamline/MultipoleTTest.cpp	/^TEST(MultipoleTTest, Straight) {$/;"	f
TEST	tests/classic_src/AbsBeamline/OffsetTest.cpp	/^TEST(OffsetTest, TestBends) {$/;"	f
TEST	tests/classic_src/AbsBeamline/OffsetTest.cpp	/^TEST(OffsetTest, TestConstructDestruct) {$/;"	f
TEST	tests/classic_src/AbsBeamline/OffsetTest.cpp	/^TEST(OffsetTest, TestCopy) {$/;"	f
TEST	tests/classic_src/AbsBeamline/OffsetTest.cpp	/^TEST(OffsetTest, TestGetSet) {$/;"	f
TEST	tests/classic_src/AbsBeamline/OffsetTest.cpp	/^TEST(OffsetTest, TestGlobalCartesianOffset) {$/;"	f
TEST	tests/classic_src/AbsBeamline/OffsetTest.cpp	/^TEST(OffsetTest, TestGlobalCylindricalOffset) {$/;"	f
TEST	tests/classic_src/AbsBeamline/OffsetTest.cpp	/^TEST(OffsetTest, TestLocalCartesianOffset) {$/;"	f
TEST	tests/classic_src/AbsBeamline/OffsetTest.cpp	/^TEST(OffsetTest, TestLocalCylindricalOffset) {$/;"	f
TEST	tests/classic_src/AbsBeamline/OffsetTest.cpp	/^TEST(OffsetTest, TestRotateGetTheta) {$/;"	f
TEST	tests/classic_src/AbsBeamline/OffsetTest.cpp	/^TEST(OffsetTest, TestUpdateIdentityTransforms) {$/;"	f
TEST	tests/classic_src/AbsBeamline/OffsetTest.cpp	/^TEST(OffsetTest, TestUpdateRotations) {$/;"	f
TEST	tests/classic_src/AbsBeamline/OffsetTest.cpp	/^TEST(OffsetTest, TestUpdateRotationsNotXY) {$/;"	f
TEST	tests/classic_src/AbsBeamline/PolynomialTest.cpp	/^TEST (PolynomialTest, DifferentialOperatorTwo) {$/;"	f
TEST	tests/classic_src/AbsBeamline/PolynomialTest.cpp	/^TEST (PolynomialTest, PolynomialSum) {$/;"	f
TEST	tests/classic_src/AbsBeamline/PolynomialTest.cpp	/^TEST (PolynomialTest, RecursionRelation) {$/;"	f
TEST	tests/classic_src/AbsBeamline/PolynomialTest.cpp	/^TEST (PolynomialTest, RecursionRelationTwo) {$/;"	f
TEST	tests/classic_src/AbsBeamline/PolynomialTest.cpp	/^TEST (PolynomialTest, TanhDeriv) {$/;"	f
TEST	tests/classic_src/AbsBeamline/PolynomialTest.cpp	/^TEST (PolynomialTest, TwoPolynomial) {$/;"	f
TEST	tests/classic_src/AbsBeamline/PolynomialTest.cpp	/^TEST(PolynomialTest, DifferentialOperator) {$/;"	f
TEST	tests/classic_src/AbsBeamline/PolynomialTest.cpp	/^TEST(PolynomialTest, Polynomial) {$/;"	f
TEST	tests/classic_src/AbsBeamline/RingTest.cpp	/^TEST(RingTest, TestAppend1) {$/;"	f
TEST	tests/classic_src/AbsBeamline/RingTest.cpp	/^TEST(RingTest, TestAppend2) {$/;"	f
TEST	tests/classic_src/AbsBeamline/RingTest.cpp	/^TEST(RingTest, TestAppend3) {$/;"	f
TEST	tests/classic_src/AbsBeamline/RingTest.cpp	/^TEST(RingTest, TestApply) {$/;"	f
TEST	tests/classic_src/AbsBeamline/RingTest.cpp	/^TEST(RingTest, TestApply2) {$/;"	f
TEST	tests/classic_src/AbsBeamline/RingTest.cpp	/^TEST(RingTest, TestApply3) {$/;"	f
TEST	tests/classic_src/AbsBeamline/RingTest.cpp	/^TEST(RingTest, TestConstructDestruct) {$/;"	f
TEST	tests/classic_src/AbsBeamline/RingTest.cpp	/^TEST(RingTest, TestLatticeRInitPhiInit) {$/;"	f
TEST	tests/classic_src/AbsBeamline/SBend3DTest.cpp	/^TEST(SBend3DTest, GeometryTest2) {$/;"	f
TEST	tests/classic_src/AbsBeamline/SBend3DTest.cpp	/^TEST(SBend3DTest, SBend3DBadFileTest) {$/;"	f
TEST	tests/classic_src/AbsBeamline/SBend3DTest.cpp	/^TEST(SBend3DTest, SBend3DFieldTest) {$/;"	f
TEST	tests/classic_src/AbsBeamline/SBend3DTest.cpp	/^TEST(SBend3DTest, SBend3DGeometryTest) {$/;"	f
TEST	tests/classic_src/AbsBeamline/SBend3DTest.cpp	/^TEST(SBend3DTest, SBend3DPolyPatchTest) {$/;"	f
TEST	tests/classic_src/AbsBeamline/TrimCoilTest.cpp	/^TEST(TrimCoil, TrimCoilBFit)$/;"	f
TEST	tests/classic_src/AbsBeamline/TrimCoilTest.cpp	/^TEST(TrimCoil, TrimCoilBFitZeros)$/;"	f
TEST	tests/classic_src/AbsBeamline/TrimCoilTest.cpp	/^TEST(TrimCoil, TrimCoilMirrored)$/;"	f
TEST	tests/classic_src/AbsBeamline/TrimCoilTest.cpp	/^TEST(TrimCoil, TrimCoilPhaseFit)$/;"	f
TEST	tests/classic_src/AbsBeamline/UndulatorTest.cpp	/^TEST(UndulatorTest, TestApplyFullWaveSolver) {$/;"	f
TEST	tests/classic_src/AbsBeamline/UndulatorTest.cpp	/^TEST(UndulatorTest, TestBends) {$/;"	f
TEST	tests/classic_src/AbsBeamline/UndulatorTest.cpp	/^TEST(UndulatorTest, TestConstructorAndGets) {$/;"	f
TEST	tests/classic_src/AbsBeamline/UndulatorTest.cpp	/^TEST(UndulatorTest, TestGetSet) {$/;"	f
TEST	tests/classic_src/AbsBeamline/VariableRFCavityTest.cpp	/^TEST(VariableRFCavityTest, TestApplyBoundingBox) {$/;"	f
TEST	tests/classic_src/AbsBeamline/VariableRFCavityTest.cpp	/^TEST(VariableRFCavityTest, TestApplyField) {$/;"	f
TEST	tests/classic_src/AbsBeamline/VariableRFCavityTest.cpp	/^TEST(VariableRFCavityTest, TestAssignmentNull) {$/;"	f
TEST	tests/classic_src/AbsBeamline/VariableRFCavityTest.cpp	/^TEST(VariableRFCavityTest, TestAssignmentValue) {$/;"	f
TEST	tests/classic_src/AbsBeamline/VariableRFCavityTest.cpp	/^TEST(VariableRFCavityTest, TestBends) {$/;"	f
TEST	tests/classic_src/AbsBeamline/VariableRFCavityTest.cpp	/^TEST(VariableRFCavityTest, TestClone) {$/;"	f
TEST	tests/classic_src/AbsBeamline/VariableRFCavityTest.cpp	/^TEST(VariableRFCavityTest, TestConstructorEtc) {$/;"	f
TEST	tests/classic_src/AbsBeamline/VariableRFCavityTest.cpp	/^TEST(VariableRFCavityTest, TestGetGeometry) {$/;"	f
TEST	tests/classic_src/AbsBeamline/VariableRFCavityTest.cpp	/^TEST(VariableRFCavityTest, TestGetSet) {$/;"	f
TEST	tests/classic_src/AbsBeamline/VariableRFCavityTest.cpp	/^TEST(VariableRFCavityTest, TestInitialiseFinalise) {$/;"	f
TEST	tests/classic_src/Algorithms/PolynomialTimeDependenceTest.cpp	/^TEST(PolynomialTimeDependenceTest, PolynomialTimeDependenceTest) {$/;"	f
TEST	tests/classic_src/Algorithms/PolynomialTimeDependenceTest.cpp	/^TEST(PolynomialTimeDependenceTest, TDMapNameLookupTest) {$/;"	f
TEST	tests/classic_src/Algorithms/PolynomialTimeDependenceTest.cpp	/^TEST(PolynomialTimeDependenceTest, TDMapTest) {$/;"	f
TEST	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^TEST(PPSolveFactoryTest, TestNearbyPointsSquares) {$/;"	f
TEST	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^TEST(PPSolveFactoryTest, TestThreeDSolveSinCos) {$/;"	f
TEST	tests/classic_src/Fields/Interpolation/PolynomialPatchTest.cpp	/^TEST(PolynomialPatchTest, TestPolynomialPatch) {$/;"	f
TEST	tests/classic_src/Fields/Interpolation/SolveFactoryTest.cpp	/^TEST(SolveFactoryTest, TestSolveDerivs) {$/;"	f
TEST	tests/classic_src/Fields/Interpolation/SolveFactoryTest.cpp	/^TEST(SolveFactoryTest, TestSolveNoDerivs) {$/;"	f
TEST	tests/classic_src/Fields/Interpolation/SquarePolynomialVectorTest.cpp	/^TEST(SquarePolynomialVectorTest, TestConstructorDestructor) {$/;"	f
TEST	tests/classic_src/Fields/Interpolation/SquarePolynomialVectorTest.cpp	/^TEST(SquarePolynomialVectorTest, TestDeriv) {$/;"	f
TEST	tests/classic_src/Fields/Interpolation/SquarePolynomialVectorTest.cpp	/^TEST(SquarePolynomialVectorTest, TestF) {$/;"	f
TEST	tests/classic_src/Fields/Interpolation/SquarePolynomialVectorTest.cpp	/^TEST(SquarePolynomialVectorTest, TestMakePolyVector) {$/;"	f
TEST	tests/classic_src/Fields/Interpolation/ThreeDGridTest.cpp	/^TEST(ThreeDGridTest, LowerBoundTest) {$/;"	f	namespace:threegridtest
TEST	tests/classic_src/Solvers/GreenWakeFunctionTest.cpp	/^TEST(GreenWakeFunctionTest, TestApply)$/;"	f
TEST	tests/classic_src/Structure/BoundingBoxTest.cpp	/^TEST(BoundingBoxTest, InsideTest) {$/;"	f
TEST	tests/classic_src/Structure/BoundingBoxTest.cpp	/^TEST(BoundingBoxTest, IntersectionTest) {$/;"	f
TEST	tests/classic_src/Utilities/PortableBitmapReaderTest.cpp	/^TEST(PBMReaderTest, SimpleAsciiTest) {$/;"	f
TEST	tests/classic_src/Utilities/PortableBitmapReaderTest.cpp	/^TEST(PBMReaderTest, SimpleBinaryTest) {$/;"	f
TEST	tests/classic_src/Utilities/PortableGraymapReaderTest.cpp	/^TEST(PGMReaderTest, SimpleAscii16Test) {$/;"	f
TEST	tests/classic_src/Utilities/PortableGraymapReaderTest.cpp	/^TEST(PGMReaderTest, SimpleAscii8Test) {$/;"	f
TEST	tests/classic_src/Utilities/PortableGraymapReaderTest.cpp	/^TEST(PGMReaderTest, SimpleBinary16Test) {$/;"	f
TEST	tests/classic_src/Utilities/PortableGraymapReaderTest.cpp	/^TEST(PGMReaderTest, SimpleBinary8Test) {$/;"	f
TEST	tests/classic_src/Utilities/RingSectionTest.cpp	/^TEST(RingSectionTest, TestConstructDestruct) {$/;"	f
TEST	tests/classic_src/Utilities/RingSectionTest.cpp	/^TEST(RingSectionTest, TestDoesOverlap) {$/;"	f
TEST	tests/classic_src/Utilities/RingSectionTest.cpp	/^TEST(RingSectionTest, TestGetFieldValue) {$/;"	f
TEST	tests/classic_src/Utilities/RingSectionTest.cpp	/^TEST(RingSectionTest, TestGetVirtualBoundingBox) {$/;"	f
TEST	tests/classic_src/Utilities/RingSectionTest.cpp	/^TEST(RingSectionTest, TestIsOnOrPastStartPlane) {$/;"	f
TEST	tests/classic_src/Utilities/RingSectionTest.cpp	/^TEST(RingSectionTest, TestIsPastEndPlane) {$/;"	f
TEST	tests/ippl_src/AppTypes/Chsr-2.cpp	/^TEST(AppTypes, Chsr2)$/;"	f
TEST	tests/ippl_src/AppTypes/Operators.cpp	/^TEST(AppTypes, Operators)$/;"	f
TEST	tests/ippl_src/AppTypes/Tensor.cpp	/^TEST(Tensor, Tensor)$/;"	f
TEST	tests/ippl_src/AppTypes/Vektor.cpp	/^TEST(Vektor, dot)$/;"	f
TEST	tests/ippl_src/AppTypes/VektorTz.cpp	/^TEST(Vektor, tz)$/;"	f
TEST	tests/ippl_src/Field/BCond.cpp	/^TEST(Field, BC)$/;"	f
TEST	tests/ippl_src/Field/BCond.cpp	/^TEST(Field, BCSimple)$/;"	f
TEST	tests/ippl_src/Field/BCond.cpp	/^TEST(Field, BCSimple2)$/;"	f
TEST	tests/ippl_src/Field/BCond.cpp	/^TEST(Field, Left)$/;"	f
TEST	tests/ippl_src/Field/Cell.cpp	/^TEST(Field, CelllToTenzorCell)$/;"	f
TEST	tests/ippl_src/Field/Cell.cpp	/^TEST(Field,CellToVertex2D)$/;"	f
TEST	tests/ippl_src/Field/Cell.cpp	/^TEST(Field,CellToVertex3D)$/;"	f
TEST	tests/ippl_src/Field/Cell.cpp	/^TEST(Field,VertexToCell)$/;"	f
TEST	tests/ippl_src/Field/DataConnect.cpp	/^TEST(Field, DataConnect2D)$/;"	f
TEST	tests/ippl_src/Field/DataConnect.cpp	/^TEST(Field, DataConnect3D)$/;"	f
TEST	tests/ippl_src/Field/Eureka.cpp	/^TEST(Field, Eureka)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, Balance)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, Bool)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, Component)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, Compressed)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, FiveFields)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, Float)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, FlyerCode)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, MinMax)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, Patches)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, Reduce)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, Reduceloc)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, Repartition)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, ScalarIndexing)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, SimpleTest1)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, SimpleTest2)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, SimpleTest3)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, SimpleTest5)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, SimpleTest7)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, SimpleTest8)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, Single)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, SubReadTest)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, Subdivide)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, Transpose)$/;"	f
TEST	tests/ippl_src/Field/Field.cpp	/^TEST(Field, Transpose2)$/;"	f
TEST	tests/ippl_src/Field/FieldDebug.cpp	/^TEST(Field, FieldDebug)$/;"	f
TEST	tests/ippl_src/Field/FieldDebug2.cpp	/^TEST(Field, FieldDebug2)$/;"	f
TEST	tests/ippl_src/Field/FunctionFace.cpp	/^TEST(Field, FunctionFace)$/;"	f
TEST	tests/ippl_src/Field/Periodic.cpp	/^TEST(Field, PeriodicBC)$/;"	f
TEST	tests/ippl_src/Index/Index.cpp	/^TEST(Index, SIndex)$/;"	f
TEST	tests/ippl_src/Index/Index.cpp	/^TEST(Index, SOffset)$/;"	f
TEST	tests/ippl_src/Index/Index.cpp	/^TEST(Index, SubField)$/;"	f
TEST	tests/ippl_src/Index/Index.cpp	/^TEST(Index, VertCell)$/;"	f
TEST	tests/ippl_src/Meshes/Average.cpp	/^TEST(Meshes, Average)$/;"	f
TEST	tests/ippl_src/Meshes/Cartesian.cpp	/^TEST(Meshes, Cartesian)$/;"	f
TEST	tests/ippl_src/Meshes/CartesianCentering.cpp	/^TEST(Meshes, CartesianCentering)$/;"	f
TEST	tests/ippl_src/Particle/EdgeCentering.cpp	/^TEST(FieldLayoutTest, DISABLED_EdgeTest_1) {$/;"	f
TEST	tests/ippl_src/Particle/ParticleDebug.cpp	/^TEST(Particle, ParticleDebug)$/;"	f
TEST	tests/opal_src/Attributes/PredefinedStringTest.cpp	/^TEST(PredefinedStringTest, TestDistributionType) {$/;"	f
TEST	tests/opal_src/BasicActions/DumpEMFieldsTest.cpp	/^TEST(DumpEMFieldsTest, ConstructorDestructor) {$/;"	f	namespace:DumpEMFieldsTest
TEST	tests/opal_src/BasicActions/DumpEMFieldsTest.cpp	/^TEST(DumpEMFieldsTest, executeTest) {$/;"	f	namespace:DumpEMFieldsTest
TEST	tests/opal_src/BasicActions/DumpEMFieldsTest.cpp	/^TEST(DumpEMFieldsTest, writeFieldsCartTest) {$/;"	f	namespace:DumpEMFieldsTest
TEST	tests/opal_src/BasicActions/DumpEMFieldsTest.cpp	/^TEST(DumpEMFieldsTest, writeFieldsCylTest) {$/;"	f	namespace:DumpEMFieldsTest
TEST	tests/opal_src/BasicActions/DumpFieldsTest.cpp	/^TEST(DumpFieldsTest, ConstructorDestructor) {$/;"	f	namespace:test
TEST	tests/opal_src/BasicActions/DumpFieldsTest.cpp	/^TEST(DumpFieldsTest, executeTest) {$/;"	f	namespace:test
TEST	tests/opal_src/BasicActions/DumpFieldsTest.cpp	/^TEST(DumpFieldsTest, writeFieldsTest) {$/;"	f	namespace:test
TEST	tests/opal_src/Distribution/BinomialTest.cpp	/^TEST(BinomialTest, FullSigmaTest1) {$/;"	f
TEST	tests/opal_src/Distribution/BinomialTest.cpp	/^TEST(BinomialTest, FullSigmaTest2) {$/;"	f
TEST	tests/opal_src/Distribution/GaussTest.cpp	/^TEST(GaussTest, FullSigmaTest1) {$/;"	f
TEST	tests/opal_src/Distribution/GaussTest.cpp	/^TEST(GaussTest, FullSigmaTest2) {$/;"	f
TEST	tests/opal_src/Elements/OpalPolynomialTimeDependenceTest.cpp	/^TEST(OpalPolynomialTimeDependenceTest, ConstructorTest) {$/;"	f
TEST	tests/opal_src/Elements/OpalPolynomialTimeDependenceTest.cpp	/^TEST(OpalPolynomialTimeDependenceTest, PrintTest) {$/;"	f
TEST	tests/opal_src/Elements/OpalPolynomialTimeDependenceTest.cpp	/^TEST(OpalPolynomialTimeDependenceTest, UpdateTest) {$/;"	f
TEST	tests/opal_src/Elements/OpalSplineTimeDependenceTest.cpp	/^TEST(OpalSplineSplineDependenceTest, PrintTest) {$/;"	f
TEST	tests/opal_src/Elements/OpalSplineTimeDependenceTest.cpp	/^TEST(OpalSplineTimeDependenceTest, ConstructorTest) {$/;"	f
TEST	tests/opal_src/Elements/OpalVariableRFCavityFringeFieldTest.cpp	/^TEST(OpalVariableRFCavityFringeFieldTest, TestConstructorDestructor) {$/;"	f
TEST	tests/opal_src/Elements/OpalVariableRFCavityTest.cpp	/^TEST(OpalVariableRFCavityTest, TestConstructorDestructor) {$/;"	f
TEST	tests/opal_src/Elements/OpalVariableRFCavityTest.cpp	/^TEST(OpalVariableRFCavityTest, TestFillRegisteredAttributes) {$/;"	f
TEST	tests/opal_src/Elements/OpalVariableRFCavityTest.cpp	/^TEST(OpalVariableRFCavityTest, TestUpdate) {$/;"	f
TEST	tests/opal_src/Sample/GaussianSampleTest.cpp	/^TEST(GaussSampleTest, ChainTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^TEST_F(ScalingFFAMagnetTest, AzimuthalBoundingBoxTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^TEST_F(ScalingFFAMagnetTest, BTwoDTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^TEST_F(ScalingFFAMagnetTest, ConstructorTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^TEST_F(ScalingFFAMagnetTest, ConvergenceEndLengthTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^TEST_F(ScalingFFAMagnetTest, ConvergenceOrderHackedTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^TEST_F(ScalingFFAMagnetTest, ConvergenceOrderTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^TEST_F(ScalingFFAMagnetTest, ConvergenceYTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^TEST_F(ScalingFFAMagnetTest, DFCoefficientsTanDeltaTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^TEST_F(ScalingFFAMagnetTest, DFCoefficientsTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^TEST_F(ScalingFFAMagnetTest, GeometryTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^TEST_F(ScalingFFAMagnetTest, PlacementTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^TEST_F(ScalingFFAMagnetTest, RadialBoundingBoxTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^TEST_F(ScalingFFAMagnetTest, TanhTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^TEST_F(ScalingFFAMagnetTest, VerticalBoundingBoxTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^TEST_F(VariableRFCavityFringeFieldTest, TestApplyBoundingBox) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^TEST_F(VariableRFCavityFringeFieldTest, TestAssignment) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^TEST_F(VariableRFCavityFringeFieldTest, TestClone) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^TEST_F(VariableRFCavityFringeFieldTest, TestConstructor) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^TEST_F(VariableRFCavityFringeFieldTest, TestCopyConstructor) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^TEST_F(VariableRFCavityFringeFieldTest, TestField) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^TEST_F(VariableRFCavityFringeFieldTest, TestMaxwell) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^TEST_F(VariableRFCavityFringeFieldTest, TestOrder) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^TEST_F(VariableRFCavityFringeFieldTest, TestSetGet) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^TEST_F(VerticalFFAMagnetTest, BoundingBoxTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^TEST_F(VerticalFFAMagnetTest, CoefficientsTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^TEST_F(VerticalFFAMagnetTest, ConstructorTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^TEST_F(VerticalFFAMagnetTest, MaxwellTest) {$/;"	f
TEST_F	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^TEST_F(VerticalFFAMagnetTest, MidplaneFieldTest) {$/;"	f
TEST_F	tests/classic_src/Algorithms/DistributionMomentsTest.cpp	/^TEST_F(DistributionMomentsTest, FullDispersionTest) {$/;"	f
TEST_F	tests/classic_src/Algorithms/DistributionMomentsTest.cpp	/^TEST_F(DistributionMomentsTest, FullEnergyTest) {$/;"	f
TEST_F	tests/classic_src/Algorithms/DistributionMomentsTest.cpp	/^TEST_F(DistributionMomentsTest, FullMomentumTest) {$/;"	f
TEST_F	tests/classic_src/Algorithms/DistributionMomentsTest.cpp	/^TEST_F(DistributionMomentsTest, FullNormalizeEmittanceTest) {$/;"	f
TEST_F	tests/classic_src/Algorithms/DistributionMomentsTest.cpp	/^TEST_F(DistributionMomentsTest, FullPositionTest) {$/;"	f
TEST_F	tests/classic_src/Algorithms/DistributionMomentsTest.cpp	/^TEST_F(DistributionMomentsTest, NinetyFivePercentile) {$/;"	f
TEST_F	tests/classic_src/Algorithms/DistributionMomentsTest.cpp	/^TEST_F(DistributionMomentsTest, NinetyNinePercentile) {$/;"	f
TEST_F	tests/classic_src/Algorithms/DistributionMomentsTest.cpp	/^TEST_F(DistributionMomentsTest, NinetyNine_NinetyNinePercentile) {$/;"	f
TEST_F	tests/classic_src/Algorithms/DistributionMomentsTest.cpp	/^TEST_F(DistributionMomentsTest, NormalizedEmittanceAt68Percentile) {$/;"	f
TEST_F	tests/classic_src/Algorithms/DistributionMomentsTest.cpp	/^TEST_F(DistributionMomentsTest, NormalizedEmittanceAt95Percentile) {$/;"	f
TEST_F	tests/classic_src/Algorithms/DistributionMomentsTest.cpp	/^TEST_F(DistributionMomentsTest, NormalizedEmittanceAt99Percentile) {$/;"	f
TEST_F	tests/classic_src/Algorithms/DistributionMomentsTest.cpp	/^TEST_F(DistributionMomentsTest, NormalizedEmittanceAt99_99Percentile) {$/;"	f
TEST_F	tests/classic_src/Algorithms/DistributionMomentsTest.cpp	/^TEST_F(DistributionMomentsTest, SixtyEightPercentile) {$/;"	f
TEST_F	tests/classic_src/Algorithms/SplineTimeDependenceTest.cpp	/^TEST_F(SplineTimeDependenceTest, ConstructorTest) {$/;"	f
TEST_F	tests/classic_src/Algorithms/SplineTimeDependenceTest.cpp	/^TEST_F(SplineTimeDependenceTest, CubicLookupTest) {$/;"	f
TEST_F	tests/classic_src/Algorithms/SplineTimeDependenceTest.cpp	/^TEST_F(SplineTimeDependenceTest, LinearLookupTest) {$/;"	f
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, BeginEndTest) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, Constructor1Test) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, Constructor2Test) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, Constructor3Test) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, CoordLowerBoundTest) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, CoordTest) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, CoordVectorTest) {  \/\/ and newCoordArray$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, CpyConstructorTest) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, DefaultConstructorTest) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, DualTest) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, GetNearestTest) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, GetPositionTest) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, GetSetConstantSpacingTest) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, IsOutOfBoundsBeginTest) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, IsOutOfBoundsEndTest) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, LowerBoundTest) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, MinMaxTest) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, SetCoordTest) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^TEST_F(NDGridTest, ToIntegerTest) {$/;"	f	namespace:ndgridtest
TEST_F	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^TEST_F(PPSolveFactoryTestFixture, TestSolvePolynomialLinear) {$/;"	f
TEST_F	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^TEST_F(PPSolveFactoryTestFixture, TestSolvePolynomialQuadratic) {$/;"	f
TEST_F	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^TEST_F(PPSolveFactoryTestFixture, TestSolvePolynomialQuadratic1DSmoothed) {$/;"	f
TEST_F	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^TEST_F(PPSolveFactoryTestFixture, TestSolvePolynomialQuadratic2DSmoothed) {$/;"	f
TFALL	src/Distribution/Distribution.cpp	/^           CORRZ, CORRT, SIGMAT, TPULSEFWHM, TRISE, TFALL, FTOSCAMPLITUDE, FTOSCPERIODS, EMITTED, SIZE };$/;"	e	enum:DISTRIBUTION::__anon65	file:
TFunction0	src/Expressions/TFunction0.h	/^    template <class T> struct TFunction0 {$/;"	s	namespace:Expressions
TFunction1	src/Expressions/TFunction1.h	/^    template <class T, class U> struct TFunction1 {$/;"	s	namespace:Expressions
TFunction2	src/Expressions/TFunction2.h	/^    template <class T, class U> struct TFunction2 {$/;"	s	namespace:Expressions
THETA	src/Elements/OpalElement.h	/^        THETA,          \/\/ The rotation about the y-axis$/;"	e	enum:OpalElement::__anon37
THETA	src/Lines/Line.cpp	/^        THETA,$/;"	e	enum:__anon53::__anon54	file:
THETA_IN	src/Elements/OpalOffset/OpalLocalCylindricalOffset.h	/^        THETA_IN = COMMON,$/;"	e	enum:OpalOffset::OpalLocalCylindricalOffset::__anon43
THETA_OUT	src/Elements/OpalOffset/OpalLocalCylindricalOffset.h	/^        THETA_OUT,$/;"	e	enum:OpalOffset::OpalLocalCylindricalOffset::__anon43
THRESHOLD	src/Utilities/OpalFilter.cpp	/^        THRESHOLD,  \/\/ Relative threshold for amplitude of frequency in relativeFFTLowPass$/;"	e	enum:__anon55::__anon56	file:
TIMEINTEGRATOR	src/Track/TrackCmd.cpp	/^        TIMEINTEGRATOR,  \/\/ the name of time integrator$/;"	e	enum:__anon30::__anon31	file:
TITANIUM_H	src/Physics/Titanium.h	23;"	d
TLine	src/Lines/Sequence.h	/^    typedef TBeamline<SequenceMember> TLine;$/;"	t	class:Sequence
TLine	src/Lines/SequenceParser.h	/^    typedef Sequence::TLine TLine;$/;"	t	class:SequenceParser
TOPO	src/Structure/BoundaryGeometry.h	/^        TOPO,      \/\/ RECTANGULAR, BOXCORNER, ELLIPTIC if FGEOM is selected TOPO is over-written$/;"	e	enum:BoundaryGeometry::__anon61
TP	src/Elements/OpalMultipoleT.h	/^        TP = COMMON,     \/\/ Transverse field components$/;"	e	enum:OpalMultipoleT::__anon48
TPULSEFWHM	src/Distribution/Distribution.cpp	/^           CORRZ, CORRT, SIGMAT, TPULSEFWHM, TRISE, TFALL, FTOSCAMPLITUDE, FTOSCPERIODS, EMITTED, SIZE };$/;"	e	enum:DISTRIBUTION::__anon65	file:
TPartInside_m	src/Structure/BoundaryGeometry.h	/^    IpplTimings::TimerRef TPartInside_m;  \/\/ particle inside$/;"	m	class:BoundaryGeometry
TRACE	src/BasicActions/Option.cpp	/^        TRACE,$/;"	e	enum:__anon24::__anon25	file:
TRACKBACK	src/Track/TrackRun.cpp	/^        TRACKBACK,         \/\/ In case we run the beam backwards$/;"	e	enum:TRACKRUN::__anon32	file:
TRACKRUN	src/Track/TrackRun.cpp	/^namespace TRACKRUN {$/;"	n	file:
TRANSPARENT	src/Elements/OpalSource.h	/^        TRANSPARENT,$/;"	e	enum:OpalSource::__anon35
TRAVELINGWAVE	src/AbsBeamline/ElementBase.h	/^    TRAVELINGWAVE,$/;"	m	class:ElementType
TRILINEAR	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^  enum interpolationAlgorithm {TRILINEAR};$/;"	e	enum:interpolation::Interpolator3dGridTo3d::interpolationAlgorithm
TRISE	src/Distribution/Distribution.cpp	/^           CORRZ, CORRT, SIGMAT, TPULSEFWHM, TRISE, TFALL, FTOSCAMPLITUDE, FTOSCPERIODS, EMITTED, SIZE };$/;"	e	enum:DISTRIBUTION::__anon65	file:
TRayTrace_m	src/Structure/BoundaryGeometry.h	/^    IpplTimings::TimerRef TRayTrace_m;    \/\/ ray tracing$/;"	m	class:BoundaryGeometry
TURNS	src/Track/TrackRun.cpp	/^        TURNS,             \/\/ The number of turns to be tracked, we keep that for the moment$/;"	e	enum:TRACKRUN::__anon32	file:
TWO_POLYNOMIAL_H	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	29;"	d
TYPE	src/BasicActions/Select.cpp	/^        TYPE,    \/\/ The type name of elements to be selected.$/;"	e	enum:__anon27::__anon28	file:
TYPE	src/Distribution/Distribution.cpp	/^    enum { TYPE, FNAME, SIGMAX, SIGMAY, SIGMAZ, SIGMAPX, SIGMAPY, SIGMAPZ, CORR,$/;"	e	enum:DISTRIBUTION::__anon65	file:
TYPE	src/Elements/OpalElement.h	/^        TYPE,           \/\/ The design type.$/;"	e	enum:OpalElement::__anon37
TYPE	src/Lines/Line.cpp	/^        TYPE,        \/\/ The type attribute.$/;"	e	enum:__anon53::__anon54	file:
TYPE	src/Lines/Sequence.cpp	/^        TYPE,    \/\/ The design type.$/;"	e	enum:__anon51::__anon52	file:
TYPE	src/Structure/FieldSolverCmd.h	/^        TYPE,      \/\/ The field solver name$/;"	e	enum:FieldSolverCmdType::FIELDSOLVER::__anon62
TYPE	src/Utilities/OpalFilter.cpp	/^        TYPE,       \/\/ The type of filter$/;"	e	enum:__anon55::__anon56	file:
TYPE	src/Utilities/SDDSParser/array.hpp	/^                         , TYPE$/;"	e	enum:SDDS::array::attributes
TYPE	src/Utilities/SDDSParser/column.hpp	/^                        , TYPE$/;"	e	enum:SDDS::column::attributes
TYPE	src/Utilities/SDDSParser/parameter.hpp	/^                        , TYPE$/;"	e	enum:SDDS::parameter::attributes
T_START	src/BasicActions/DumpEMFields.h	/^        T_START,$/;"	e	enum:DumpEMFields::__anon29
T_STEPS	src/BasicActions/DumpEMFields.h	/^        T_STEPS,$/;"	e	enum:DumpEMFields::__anon29
Table	src/AbstractObjects/Table.cpp	/^Table::Table(const std::string &name, Table *parent):$/;"	f	class:Table
Table	src/AbstractObjects/Table.cpp	/^Table::Table(int size, const char *name, const char *help):$/;"	f	class:Table
Table	src/AbstractObjects/Table.h	/^class Table: public Object {$/;"	c
TableRow	src/Attributes/TableRow.cpp	/^    TableRow::TableRow(const std::string &name, const std::string &help):$/;"	f	class:Attributes::TableRow
TableRow	src/Attributes/TableRow.h	/^    class TableRow: public AttributeHandler {$/;"	c	namespace:Attributes
TableRowRep	src/AbstractObjects/TableRowRep.cpp	/^TableRowRep::TableRowRep():$/;"	f	class:TableRowRep
TableRowRep	src/AbstractObjects/TableRowRep.cpp	/^TableRowRep::TableRowRep(const TableRowRep &rhs):$/;"	f	class:TableRowRep
TableRowRep	src/AbstractObjects/TableRowRep.cpp	/^TableRowRep::TableRowRep(const std::string &tab, const PlaceRep &row):$/;"	f	class:TableRowRep
TableRowRep	src/AbstractObjects/TableRowRep.h	/^class TableRowRep {$/;"	c
Tanh	src/AbsBeamline/EndFieldModel/Tanh.cpp	/^Tanh::Tanh(double x0, double lambda, int max_index) : _x0(x0), _lambda(lambda) {$/;"	f	class:endfieldmodel::Tanh
Tanh	src/AbsBeamline/EndFieldModel/Tanh.h	/^    Tanh() : _x0(0.), _lambda(0.) {setTanhDiffIndices(12);}$/;"	f	class:endfieldmodel::Tanh
Tanh	src/AbsBeamline/EndFieldModel/Tanh.h	/^    Tanh(const Tanh& rhs) : _x0(rhs._x0), _lambda(rhs._lambda) {}$/;"	f	class:endfieldmodel::Tanh
Tanh	src/AbsBeamline/EndFieldModel/Tanh.h	/^class Tanh : public EndFieldModel {$/;"	c	namespace:endfieldmodel
TeamBased	src/PartBunch/Binning/ParallelReduceTools.h	/^        TeamBased,         \/\/ Force team-based\/atomic reduction if gpu enabled$/;"	m	class:ParticleBinning::HistoReductionMode
TearDown	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    void TearDown( ) {$/;"	f	class:ScalingFFAMagnetTest
TearDown	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^    void TearDown( ) {$/;"	f	class:VerticalFFAMagnetTest
TearDown	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^    void TearDown( ) {$/;"	f	class:ndgridtest::NDGridTest
Tesla	src/AbsBeamline/VerticalFFAMagnet.h	/^    const double Tesla = 10.;$/;"	m	class:VerticalFFAMagnet
TestElement	tests/opal_src/Elements/OpalPolynomialTimeDependenceTest.cpp	/^    TestElement() : ElementBase(), base(nullptr), type("") {}$/;"	f	class:TestElement
TestElement	tests/opal_src/Elements/OpalPolynomialTimeDependenceTest.cpp	/^class TestElement : public ElementBase {$/;"	c	file:
TestName	src/PartBunch/Binning/test/alpine/BinningLandauDamping.cpp	/^const char* TestName   = "LandauDamping";$/;"	v
TfastIsInside_m	src/Structure/BoundaryGeometry.h	/^    IpplTimings::TimerRef TfastIsInside_m;$/;"	m	class:BoundaryGeometry
Tgauss	src/Expressions/Expressions.cpp	/^    double Tgauss(double a) {$/;"	f	namespace:Expressions
ThreeDGrid	src/Fields/Interpolation/ThreeDGrid.cpp	/^ThreeDGrid::ThreeDGrid()$/;"	f	class:interpolation::ThreeDGrid
ThreeDGrid	src/Fields/Interpolation/ThreeDGrid.cpp	/^ThreeDGrid::ThreeDGrid(double dX, double dY, double dZ,$/;"	f	class:interpolation::ThreeDGrid
ThreeDGrid	src/Fields/Interpolation/ThreeDGrid.cpp	/^ThreeDGrid::ThreeDGrid(int xSize, const double *x,$/;"	f	class:interpolation::ThreeDGrid
ThreeDGrid	src/Fields/Interpolation/ThreeDGrid.cpp	/^ThreeDGrid::ThreeDGrid(std::vector<double> x,$/;"	f	class:interpolation::ThreeDGrid
ThreeDGrid	src/Fields/Interpolation/ThreeDGrid.h	/^class ThreeDGrid : public Mesh {$/;"	c	namespace:interpolation
Timer	src/Utilities/Timer.cpp	/^    Timer::Timer() {$/;"	f	class:OPALTimer::Timer
Timer	src/Utilities/Timer.h	/^    class Timer {$/;"	c	namespace:OPALTimer
Tinitialize_m	src/Structure/BoundaryGeometry.h	/^    IpplTimings::TimerRef Tinitialize_m;  \/\/ initialize geometry$/;"	m	class:BoundaryGeometry
TisInside_m	src/Structure/BoundaryGeometry.h	/^    IpplTimings::TimerRef TisInside_m;$/;"	m	class:BoundaryGeometry
Titanium	src/Physics/Titanium.h	/^        Titanium():$/;"	f	class:Physics::Titanium
Titanium	src/Physics/Titanium.h	/^    class Titanium: public Material {$/;"	c	namespace:Physics
Title	src/BasicActions/Title.cpp	/^Title::Title():$/;"	f	class:Title
Title	src/BasicActions/Title.cpp	/^Title::Title(const std::string& name, Title* parent):$/;"	f	class:Title
Title	src/BasicActions/Title.h	/^class Title: public Action {$/;"	c
Token	src/OpalParser/Token.cpp	/^Token::Token$/;"	f	class:Token
Token	src/OpalParser/Token.cpp	/^Token::Token():$/;"	f	class:Token
Token	src/OpalParser/Token.cpp	/^Token::Token(const Token &rhs):$/;"	f	class:Token
Token	src/OpalParser/Token.cpp	/^Token::Token(const std::string &fil, int lin, Type typ, char value):$/;"	f	class:Token
Token	src/OpalParser/Token.cpp	/^Token::Token(const std::string &fil, int lin, Type typ, const char *value):$/;"	f	class:Token
Token	src/OpalParser/Token.h	/^class Token {$/;"	c
TokenList	src/Attributes/TokenList.cpp	/^    TokenList::TokenList(const std::string &name, const std::string &help):$/;"	f	class:Attributes::TokenList
TokenList	src/Attributes/TokenList.h	/^    class TokenList: public AttributeHandler {$/;"	c	namespace:Attributes
TokenList	src/OpalParser/MacroStream.h	/^    typedef std::list<Token> TokenList;$/;"	t	class:MacroStream
TokenList	src/OpalParser/Statement.h	/^    typedef std::list<Token> TokenList;$/;"	t	class:Statement
TokenListArray	src/Attributes/TokenListArray.cpp	/^    TokenListArray::TokenListArray(const std::string &name, const std::string &help):$/;"	f	class:Attributes::TokenListArray
TokenListArray	src/Attributes/TokenListArray.h	/^    class TokenListArray: public AttributeHandler {$/;"	c	namespace:Attributes
TokenStream	src/OpalParser/TokenStream.cpp	/^TokenStream::TokenStream(const std::string &name):$/;"	f	class:TokenStream
TokenStream	src/OpalParser/TokenStream.h	/^class TokenStream: public RCObject {$/;"	c
Topology	src/Structure/BoundaryGeometry.h	/^enum class Topology : unsigned short { RECTANGULAR, BOXCORNER, ELLIPTIC };$/;"	c
Track	src/Track/Track.cpp	/^Track::Track($/;"	f	class:Track
Track	src/Track/Track.h	/^class Track {$/;"	c
TrackCmd	src/Track/TrackCmd.cpp	/^TrackCmd::TrackCmd() : Action(SIZE, "TRACK", "The \\"TRACK\\" command initiates tracking.") {$/;"	f	class:TrackCmd
TrackCmd	src/Track/TrackCmd.cpp	/^TrackCmd::TrackCmd(const std::string& name, TrackCmd* parent) : Action(name, parent) {$/;"	f	class:TrackCmd
TrackCmd	src/Track/TrackCmd.h	/^class TrackCmd: public Action {$/;"	c
TrackEnd	src/Track/TrackEnd.cpp	/^TrackEnd::TrackEnd():$/;"	f	class:TrackEnd
TrackEnd	src/Track/TrackEnd.cpp	/^TrackEnd::TrackEnd(const std::string &name, TrackEnd *parent):$/;"	f	class:TrackEnd
TrackEnd	src/Track/TrackEnd.h	/^class TrackEnd: public Action {$/;"	c
TrackParser	src/Track/TrackParser.cpp	/^TrackParser::TrackParser():$/;"	f	class:TrackParser
TrackParser	src/Track/TrackParser.h	/^class TrackParser: public OpalParser {$/;"	c
TrackRun	src/Track/TrackRun.cpp	/^TrackRun::TrackRun()$/;"	f	class:TrackRun
TrackRun	src/Track/TrackRun.cpp	/^TrackRun::TrackRun(const std::string& name, TrackRun* parent)$/;"	f	class:TrackRun
TrackRun	src/Track/TrackRun.h	/^class TrackRun : public Action {$/;"	c
Tracker	src/Algorithms/Tracker.cpp	/^Tracker::Tracker($/;"	f	class:Tracker
Tracker	src/Algorithms/Tracker.cpp	/^Tracker::Tracker(const Beamline& beamline, const PartData& reference, bool backBeam, bool backTrack)$/;"	f	class:Tracker
Tracker	src/Algorithms/Tracker.h	/^class Tracker : public AbstractTracker {$/;"	c
Translation	src/Utilities/MSLang/Translation.h	/^    struct Translation: public Function {$/;"	s	namespace:mslang
TravelingWave	src/AbsBeamline/TravelingWave.cpp	/^TravelingWave::TravelingWave() : TravelingWave("") {$/;"	f	class:TravelingWave
TravelingWave	src/AbsBeamline/TravelingWave.cpp	/^TravelingWave::TravelingWave(const TravelingWave& right)$/;"	f	class:TravelingWave
TravelingWave	src/AbsBeamline/TravelingWave.cpp	/^TravelingWave::TravelingWave(const std::string& name)$/;"	f	class:TravelingWave
TravelingWave	src/AbsBeamline/TravelingWave.h	/^class TravelingWave : public RFCavity {$/;"	c
TravelingWaveRep	src/BeamlineCore/TravelingWaveRep.cpp	/^TravelingWaveRep::TravelingWaveRep():$/;"	f	class:TravelingWaveRep
TravelingWaveRep	src/BeamlineCore/TravelingWaveRep.cpp	/^TravelingWaveRep::TravelingWaveRep(const TravelingWaveRep &right):$/;"	f	class:TravelingWaveRep
TravelingWaveRep	src/BeamlineCore/TravelingWaveRep.cpp	/^TravelingWaveRep::TravelingWaveRep(const std::string &name):$/;"	f	class:TravelingWaveRep
TravelingWaveRep	src/BeamlineCore/TravelingWaveRep.h	/^class TravelingWaveRep: public TravelingWave {$/;"	c
TriAreas_m	src/Structure/BoundaryGeometry.h	/^    std::vector<double> TriAreas_m;                 \/\/ area of triangles$/;"	m	class:BoundaryGeometry
TriLinearInterpolator	src/Fields/Interpolation/TriLinearInterpolator.cpp	/^TriLinearInterpolator::TriLinearInterpolator(const TriLinearInterpolator& lhs):$/;"	f	class:interpolation::TriLinearInterpolator
TriLinearInterpolator	src/Fields/Interpolation/TriLinearInterpolator.h	/^TriLinearInterpolator::TriLinearInterpolator(ThreeDGrid *grid, double ***F)$/;"	f	class:interpolation::TriLinearInterpolator
TriLinearInterpolator	src/Fields/Interpolation/TriLinearInterpolator.h	/^class TriLinearInterpolator : public Interpolator3dGridTo1d {$/;"	c	namespace:interpolation
TriNormals_m	src/Structure/BoundaryGeometry.h	/^    std::vector<Vector_t<double, 3>> TriNormals_m;  \/\/ oriented normal vector of triangles$/;"	m	class:BoundaryGeometry
Triangle	src/Structure/BoundaryGeometry.cpp	/^    Triangle($/;"	f	class:Triangle
Triangle	src/Structure/BoundaryGeometry.cpp	/^    Triangle() {$/;"	f	class:Triangle
Triangle	src/Structure/BoundaryGeometry.cpp	/^class Triangle {$/;"	c	file:
Triangle	src/Utilities/MSLang/Triangle.h	/^        Triangle():$/;"	f	struct:mslang::Triangle
Triangle	src/Utilities/MSLang/Triangle.h	/^        Triangle(const Triangle &right):$/;"	f	struct:mslang::Triangle
Triangle	src/Utilities/MSLang/Triangle.h	/^    struct Triangle: public Base {$/;"	s	namespace:mslang
Triangles_m	src/Structure/BoundaryGeometry.h	/^        Triangles_m;  \/\/ boundary faces defined via point IDs$/;"	m	class:BoundaryGeometry
TwoPolynomial	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^TwoPolynomial::TwoPolynomial(): maxXorder_m(0), maxSorder_m(0) {$/;"	f	class:polynomial::TwoPolynomial
TwoPolynomial	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^TwoPolynomial::TwoPolynomial(const TwoPolynomial &poly):$/;"	f	class:polynomial::TwoPolynomial
TwoPolynomial	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^TwoPolynomial::TwoPolynomial(const std::vector<std::vector<int>> &coefficients):$/;"	f	class:polynomial::TwoPolynomial
TwoPolynomial	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^class TwoPolynomial {$/;"	c	namespace:polynomial
Type	src/Fields/Fieldmap.h	/^        MapType Type;$/;"	m	struct:Fieldmap::FieldmapDescription
Type	src/Fields/Fieldmap.h	/^    MapType Type;$/;"	m	class:Fieldmap
Type	src/OpalParser/Token.h	/^    enum Type {$/;"	g	class:Token
TypeParseTraits	src/Fields/Fieldmap.h	/^    struct TypeParseTraits {$/;"	s	class:Fieldmap
UDouble	src/Utilities/MSLang.cpp	/^    const std::string Function::UDouble = "([0-9]+\\\\.?[0-9]*([Ee][+-]?[0-9]+)?)";$/;"	m	class:mslang::Function	file:
UDouble	src/Utilities/MSLang.h	/^        static const std::string UDouble;$/;"	m	struct:mslang::Function
UInt	src/Utilities/MSLang.cpp	/^    const std::string Function::UInt    = "([0-9]+)";$/;"	m	class:mslang::Function	file:
UInt	src/Utilities/MSLang.h	/^        static const std::string UInt;$/;"	m	struct:mslang::Function
UNDEFINED	src/AbstractObjects/OpalData.h	/^    enum class OpenMode : unsigned short { UNDEFINED, WRITE, APPEND };$/;"	m	class:OpalData::OpenMode
UNITS	src/Utilities/SDDSParser/array.hpp	/^                         , UNITS$/;"	e	enum:SDDS::array::attributes
UNITS	src/Utilities/SDDSParser/column.hpp	/^                        , UNITS$/;"	e	enum:SDDS::column::attributes
UNITS	src/Utilities/SDDSParser/parameter.hpp	/^                        , UNITS$/;"	e	enum:SDDS::parameter::attributes
UNIT_TESTS_OPAL_SRC_UTILITIES_MOCKCOMPONENT	tests/opal_src/Utilities/MockComponent.h	29;"	d
UNKNOWN	src/Fields/Fieldmap.h	/^    UNKNOWN = 0,$/;"	e	enum:MapType
UNKNOWN	src/Lines/SequenceMember.h	/^        UNKNOWN   = 0,$/;"	e	enum:SequenceMember::MemberType
UNNAMED	src/Physics/ParticleProperties.h	/^    UNNAMED = -1,$/;"	m	class:ParticleType
UTIL	src/Utilities/Util.h	19;"	d
Union	src/Utilities/MSLang/Union.h	/^    struct Union: public Function {$/;"	s	namespace:mslang
UnitState_t	src/Algorithms/.PartBunchBase.h	/^    enum UnitState_t { units = 0, unitless = 1 };$/;"	g	class:PartBunch
UnitState_t	src/OPALTypes.h	/^enum UnitState_t { units = 0, unitless = 1 };$/;"	g
Units	src/Physics/Units.h	/^namespace Units {$/;"	n
UpperCaseString	src/Attributes/UpperCaseString.cpp	/^    UpperCaseString::UpperCaseString(const std::string &name, const std::string &help):$/;"	f	class:Attributes::UpperCaseString
UpperCaseString	src/Attributes/UpperCaseString.h	/^    class UpperCaseString: public AttributeHandler {$/;"	c	namespace:Attributes
UpperCaseStringArray	src/Attributes/UpperCaseStringArray.cpp	/^    UpperCaseStringArray::UpperCaseStringArray(const std::string &name, const std::string &help):$/;"	f	class:Attributes::UpperCaseStringArray
UpperCaseStringArray	src/Attributes/UpperCaseStringArray.h	/^    class UpperCaseStringArray: public AttributeHandler {$/;"	c	namespace:Attributes
Util	src/Utilities/Util.cpp	/^namespace Util {$/;"	n	file:
Util	src/Utilities/Util.h	/^namespace Util {$/;"	n
V	src/BeamlineGeometry/Euclid3D.h	/^    Vector3D V;                \/\/ The displacement.$/;"	m	class:Euclid3D
V2kV	src/Physics/Units.h	/^    constexpr double V2kV = 1 \/ kV2V;$/;"	m	namespace:Units
VACUUM	src/AbsBeamline/ElementBase.h	/^    VACUUM,$/;"	m	class:ElementType
VALUERANGE_H	src/Structure/ValueRange.h	21;"	d
VAPERT	src/Elements/OpalMultipoleT.h	/^        VAPERT,          \/\/ Aperture vertical dimension$/;"	e	enum:OpalMultipoleT::__anon48
VARRADIUS	src/Elements/OpalMultipoleT.h	/^        VARRADIUS,       \/\/ Variable radius flag$/;"	e	enum:OpalMultipoleT::__anon48
VERSION	src/BasicActions/Option.cpp	/^        VERSION,$/;"	e	enum:__anon24::__anon25	file:
VERSION_DEF_HPP_	src/Utilities/SDDSParser/version_def.hpp	18;"	d
VERSION_HPP_	src/Utilities/SDDSParser/version.hpp	18;"	d
VField_Cell_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef Field<Vector_t, DIM>                                  VField_Cell_t;$/;"	t	file:
VField_Edge_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef Field<Vector_t, DIM>                                  VField_Edge_t;$/;"	t	file:
VField_Vert_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef Field<Vector_t, DIM>                                  VField_Vert_t;$/;"	t	file:
VField_t	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^typedef Field<Vector_t, Dim> VField_t;$/;"	t	file:
VMDATA	src/Structure/MemoryProfiler.h	/^        VMDATA,     \/\/ VmData: Size of data.$/;"	e	enum:MemoryProfiler::VirtualMemory
VMEXE	src/Structure/MemoryProfiler.h	/^        VMEXE,      \/\/ VmExe: Size of text segments.$/;"	e	enum:MemoryProfiler::VirtualMemory
VMHWM	src/Structure/MemoryProfiler.h	/^        VMHWM,      \/\/ VmHWM: Peak resident set size ("high water mark").$/;"	e	enum:MemoryProfiler::VirtualMemory
VMLCK	src/Structure/MemoryProfiler.h	/^        VMLCK,      \/\/ VmLck: Locked memory size (see mlock(3)).$/;"	e	enum:MemoryProfiler::VirtualMemory
VMLIB	src/Structure/MemoryProfiler.h	/^        VMLIB,      \/\/ VmLib: Shared library code size.$/;"	e	enum:MemoryProfiler::VirtualMemory
VMPEAK	src/Structure/MemoryProfiler.h	/^        VMPEAK = 0, \/\/ VmPeak: Peak virtual memory size.$/;"	e	enum:MemoryProfiler::VirtualMemory
VMPIN	src/Structure/MemoryProfiler.h	/^        VMPIN,      \/\/ VmPin: Pinned memory size (since Linux 3.2).  These are pages that can't be moved because something$/;"	e	enum:MemoryProfiler::VirtualMemory
VMPMD	src/Structure/MemoryProfiler.h	/^        VMPMD,      \/\/ VmPMD: Size of second-level page tables (since Linux 4.0).$/;"	e	enum:MemoryProfiler::VirtualMemory
VMPTE	src/Structure/MemoryProfiler.h	/^        VMPTE,      \/\/ VmPTE: Page table entries size (since Linux 2.6.10).$/;"	e	enum:MemoryProfiler::VirtualMemory
VMRSS	src/Structure/MemoryProfiler.h	/^        VMRSS,      \/\/ VmRSS: Resident set size.$/;"	e	enum:MemoryProfiler::VirtualMemory
VMSIZE	src/Structure/MemoryProfiler.h	/^        VMSIZE,     \/\/ VmSize: Virtual memory size.$/;"	e	enum:MemoryProfiler::VirtualMemory
VMSTK	src/Structure/MemoryProfiler.h	/^        VMSTK,      \/\/ VmStk: Size of stack.$/;"	e	enum:MemoryProfiler::VirtualMemory
VMSWAP	src/Structure/MemoryProfiler.h	/^        VMSWAP      \/\/ VmSwap: Swapped-out virtual memory size by  anonymous  private  pages;  shmem  swap  usage  is  not$/;"	e	enum:MemoryProfiler::VirtualMemory
VOLT	src/Elements/OpalCavity.h	/^        VOLT = COMMON,  \/\/ The peak voltage.$/;"	e	enum:OpalCavity::__anon34
VOLT	src/Elements/OpalTravelingWave.h	/^        VOLT = COMMON,  \/\/ The peak voltage.$/;"	e	enum:OpalTravelingWave::__anon46
Value	src/BasicActions/Value.cpp	/^Value::Value():$/;"	f	class:Value
Value	src/BasicActions/Value.cpp	/^Value::Value(const std::string& name, Value* parent):$/;"	f	class:Value
Value	src/BasicActions/Value.h	/^class Value: public Action {$/;"	c
ValueDefinition	src/AbstractObjects/ValueDefinition.cpp	/^ValueDefinition::ValueDefinition$/;"	f	class:ValueDefinition
ValueDefinition	src/AbstractObjects/ValueDefinition.cpp	/^ValueDefinition::ValueDefinition(const std::string &name, ValueDefinition *parent):$/;"	f	class:ValueDefinition
ValueDefinition	src/AbstractObjects/ValueDefinition.h	/^class ValueDefinition: public Object {$/;"	c
ValueDimension	src/Fields/Interpolation/SquarePolynomialVector.h	/^    unsigned int ValueDimension() const {return _polyCoeffs.num_row();}$/;"	f	class:interpolation::SquarePolynomialVector
ValueRange	src/Structure/ValueRange.h	/^    ValueRange():$/;"	f	class:ValueRange
ValueRange	src/Structure/ValueRange.h	/^class ValueRange {$/;"	c
VarRadiusGeometry	src/BeamlineGeometry/VarRadiusGeometry.h	/^    VarRadiusGeometry::VarRadiusGeometry(const VarRadiusGeometry &rhs):$/;"	f	class:VarRadiusGeometry
VarRadiusGeometry	src/BeamlineGeometry/VarRadiusGeometry.h	/^    VarRadiusGeometry::VarRadiusGeometry(double length,$/;"	f	class:VarRadiusGeometry
VarRadiusGeometry	src/BeamlineGeometry/VarRadiusGeometry.h	/^class VarRadiusGeometry: public BGeometryBase {$/;"	c
VariableRFCavityFringeFieldTest	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^    VariableRFCavityFringeFieldTest() {$/;"	f	class:VariableRFCavityFringeFieldTest
VariableRFCavityFringeFieldTest	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^class VariableRFCavityFringeFieldTest : public ::testing::Test {$/;"	c	file:
Vector3D	src/BeamlineGeometry/Vector3D.cpp	/^Vector3D::Vector3D(double x, double y, double z) {$/;"	f	class:Vector3D
Vector3D	src/BeamlineGeometry/Vector3D.h	/^class Vector3D {$/;"	c
Vector3D	src/BeamlineGeometry/Vector3D.h	/^inline Vector3D::Vector3D()$/;"	f	class:Vector3D
VectorLessX	src/Structure/BoundaryGeometry.cpp	/^    struct VectorLessX {$/;"	s	namespace:__anon57	file:
VectorLessY	src/Structure/BoundaryGeometry.cpp	/^    struct VectorLessY {$/;"	s	namespace:__anon57	file:
VectorLessZ	src/Structure/BoundaryGeometry.cpp	/^    struct VectorLessZ {$/;"	s	namespace:__anon57	file:
VectorMap	src/Fields/Interpolation/VectorMap.h	/^class VectorMap {$/;"	c	namespace:interpolation
VectorPair_t	src/Algorithms/.PartBunchBase.h	/^    typedef std::pair<Vector_t<double, 3>, Vector_t<double, 3>> VectorPair_t;$/;"	t	class:PartBunch
VectorPair_t	src/Algorithms/DistributionMoments.h	/^typedef typename std::pair<Vector_t<double, 3>, Vector_t<double, 3>> VectorPair_t;$/;"	t
VectorPair_t	src/OPALTypes.h	/^typedef typename std::pair<Vector_t<double, 3>, Vector_t<double, 3>> VectorPair_t;$/;"	t
Vector_t	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^typedef Vector<double, Dim> Vector_t;$/;"	t	file:
Vector_t	tests/ippl_src/Field/Periodic.cpp	/^typedef ParticleSpatialLayout<double,3>::SingleParticlePos_t Vector_t;$/;"	t	file:
Vector_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef Vektor<double, DIM>                                   Vector_t;$/;"	t	file:
Vek	tests/ippl_src/AppTypes/VektorTz.cpp	/^typedef Vektor<double,Dim> Vek;$/;"	t	file:
Versions	src/changes.cpp	/^namespace Versions {$/;"	n	file:
Versions	src/changes.h	/^namespace Versions {$/;"	n
Vert_t	tests/ippl_src/Particle/EdgeCentering.cpp	/^typedef Vert                                                  Vert_t;$/;"	t	file:
VerticalFFAMagnet	src/AbsBeamline/VerticalFFAMagnet.cpp	/^VerticalFFAMagnet::VerticalFFAMagnet(const VerticalFFAMagnet &right) $/;"	f	class:VerticalFFAMagnet
VerticalFFAMagnet	src/AbsBeamline/VerticalFFAMagnet.cpp	/^VerticalFFAMagnet::VerticalFFAMagnet(const std::string &name)$/;"	f	class:VerticalFFAMagnet
VerticalFFAMagnet	src/AbsBeamline/VerticalFFAMagnet.h	/^class VerticalFFAMagnet : public Component {$/;"	c
VerticalFFAMagnetTest	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^    VerticalFFAMagnetTest() {$/;"	f	class:VerticalFFAMagnetTest
VerticalFFAMagnetTest	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^class VerticalFFAMagnetTest : public ::testing::Test {$/;"	c	file:
VirtualMemory	src/Structure/MemoryProfiler.h	/^    enum VirtualMemory {$/;"	g	class:MemoryProfiler
Voxel	src/Structure/BoundaryGeometry.cpp	/^    Voxel() {$/;"	f	class:Voxel
Voxel	src/Structure/BoundaryGeometry.cpp	/^    Voxel(const Vector_t<double, 3>& min, const Vector_t<double, 3>& max) {$/;"	f	class:Voxel
Voxel	src/Structure/BoundaryGeometry.cpp	/^class Voxel {$/;"	c	file:
Vpm2MVpm	src/Physics/Units.h	/^    constexpr double Vpm2MVpm = 1e-6;$/;"	m	namespace:Units
VrNormal_m	src/AbsBeamline/RFCavity.h	/^    std::unique_ptr<double[]> VrNormal_m;$/;"	m	class:RFCavity
WAKEF	src/Elements/OpalElement.h	/^        WAKEF,          \/\/ The wake function to be used$/;"	e	enum:OpalElement::__anon37
WARN	src/BasicActions/Option.cpp	/^        WARN,$/;"	e	enum:__anon24::__anon25	file:
WATER_H	src/Physics/Water.h	23;"	d
WIDTH	src/Elements/OpalProbe.h	/^        WIDTH,            \/\/ Width of the probe$/;"	e	enum:OpalProbe::__anon40
WIDTH	src/Elements/OpalVerticalFFAMagnet.h	/^        WIDTH,$/;"	e	enum:OpalVerticalFFAMagnet::__anon38
WRITE	src/AbstractObjects/OpalData.h	/^    enum class OpenMode : unsigned short { UNDEFINED, WRITE, APPEND };$/;"	m	class:OpalData::OpenMode
WRITEDATA	src/Structure/H5PartWrapper.h	36;"	d
WRITEFILEATTRIB	src/Structure/H5PartWrapper.h	25;"	d
WRITESTEPATTRIB	src/Structure/H5PartWrapper.h	32;"	d
WRITESTRINGFILEATTRIB	src/Structure/H5PartWrapper.h	23;"	d
WRITESTRINGSTEPATTRIB	src/Structure/H5PartWrapper.h	30;"	d
WRITE_DATA_FLOAT64	src/Structure/LossDataSink.cpp	60;"	d	file:
WRITE_DATA_INT64	src/Structure/LossDataSink.cpp	69;"	d	file:
WRITE_FILEATTRIB_STRING	src/Structure/LossDataSink.cpp	33;"	d	file:
WRITE_STEPATTRIB_FLOAT64	src/Structure/LossDataSink.cpp	42;"	d	file:
WRITE_STEPATTRIB_INT64	src/Structure/LossDataSink.cpp	51;"	d	file:
WakeFieldTimer_m	src/Algorithms/ParallelTracker.h	/^    IpplTimings::TimerRef WakeFieldTimer_m;$/;"	m	class:ParallelTracker
Water	src/Physics/Water.h	/^        Water():$/;"	f	class:Physics::Water
Water	src/Physics/Water.h	/^    class Water: public Material {$/;"	c	namespace:Physics
Werrf	src/Utilities/ComplexErrorFun.cpp	/^std::complex<double> Werrf(std::complex<double> z) {$/;"	f
WhileStatement	src/OpalParser/WhileStatement.cpp	/^WhileStatement::WhileStatement(const Parser& parser, TokenStream& is)$/;"	f	class:WhileStatement
WhileStatement	src/OpalParser/WhileStatement.h	/^class WhileStatement: public Statement {$/;"	c
X	src/AbsBeamline/Corrector.h	/^        X,$/;"	e	enum:Corrector::Plane
X	src/AbsBeamline/Monitor.h	/^        X,$/;"	e	enum:Monitor::Plane
X	src/AbstractObjects/OpalParticle.h	/^    enum { X, Y, L, INVALID };$/;"	e	enum:OpalParticle::__anon17
X	src/Algorithms/AbstractTracker.h	/^    enum { X, PX, Y, PY, T, PT };$/;"	e	enum:AbstractTracker::__anon81
X	src/Algorithms/OpalParticle.h	/^    enum { X, Y, L, INVALID };$/;"	e	enum:OpalParticle::__anon79
X	src/Elements/OpalElement.h	/^        X,              \/\/ The x-coordinate of the location of the element in floor coordinates$/;"	e	enum:OpalElement::__anon37
X	src/Lines/Line.cpp	/^        X,$/;"	e	enum:__anon53::__anon54	file:
XEND	src/Elements/OpalProbe.h	/^        XEND,             \/\/ End of x coordinate$/;"	e	enum:OpalProbe::__anon40
XENON	src/Physics/ParticleProperties.h	/^    XENON,$/;"	m	class:ParticleType
XMYMZ	src/Fields/Fieldmap.h	/^    XMYMZ,$/;"	e	enum:SwapType
XMZY	src/Fields/Fieldmap.h	/^    XMZY,$/;"	e	enum:SwapType
XRotation	src/BeamlineGeometry/Euclid3D.cpp	/^Euclid3D Euclid3D::XRotation(double angle) {$/;"	f	class:Euclid3D
XRotation	src/BeamlineGeometry/Rotation3D.cpp	/^Rotation3D Rotation3D::XRotation(double angle) {$/;"	f	class:Rotation3D
XSCALE	src/Structure/BoundaryGeometry.h	/^        XSCALE,    \/\/ Multiplicative scaling factor for x-coordinates$/;"	e	enum:BoundaryGeometry::__anon61
XSTART	src/Elements/OpalProbe.h	/^        XSTART = COMMON,  \/\/ Start of x coordinate$/;"	e	enum:OpalProbe::__anon40
XY	src/AbsBeamline/Corrector.h	/^        XY$/;"	e	enum:Corrector::Plane
XY	src/AbsBeamline/Monitor.h	/^        XY$/;"	e	enum:Monitor::Plane
XYZ	src/Fields/Fieldmap.h	/^    XYZ = 10,$/;"	e	enum:SwapType
XYZSCALE	src/Structure/BoundaryGeometry.h	/^        XYZSCALE,  \/\/ Multiplicative scaling factor for coordinates$/;"	e	enum:BoundaryGeometry::__anon61
XZ	src/Fields/Fieldmap.h	/^    XZ = 0,$/;"	e	enum:SwapType
XZMY	src/Fields/Fieldmap.h	/^    XZMY,$/;"	e	enum:SwapType
X_START	src/BasicActions/DumpEMFields.h	/^        X_START,$/;"	e	enum:DumpEMFields::__anon29
X_START	src/BasicActions/DumpFields.h	/^        X_START,$/;"	e	enum:DumpFields::__anon26
X_STEPS	src/BasicActions/DumpEMFields.h	/^        X_STEPS,$/;"	e	enum:DumpEMFields::__anon29
X_STEPS	src/BasicActions/DumpFields.h	/^        X_STEPS,$/;"	e	enum:DumpFields::__anon26
Y	src/AbsBeamline/Corrector.h	/^        Y,$/;"	e	enum:Corrector::Plane
Y	src/AbsBeamline/Monitor.h	/^        Y,$/;"	e	enum:Monitor::Plane
Y	src/AbstractObjects/OpalParticle.h	/^    enum { X, Y, L, INVALID };$/;"	e	enum:OpalParticle::__anon17
Y	src/Algorithms/AbstractTracker.h	/^    enum { X, PX, Y, PY, T, PT };$/;"	e	enum:AbstractTracker::__anon81
Y	src/Algorithms/OpalParticle.h	/^    enum { X, Y, L, INVALID };$/;"	e	enum:OpalParticle::__anon79
Y	src/Elements/OpalElement.h	/^        Y,              \/\/ The y-coordinate of the location of the element in floor coordinates$/;"	e	enum:OpalElement::__anon37
Y	src/Lines/Line.cpp	/^        Y,$/;"	e	enum:__anon53::__anon54	file:
YEND	src/Elements/OpalProbe.h	/^        YEND,             \/\/ End of y coordinate$/;"	e	enum:OpalProbe::__anon40
YMXZ	src/Fields/Fieldmap.h	/^    YMXZ,$/;"	e	enum:SwapType
YRotation	src/BeamlineGeometry/Euclid3D.cpp	/^Euclid3D Euclid3D::YRotation(double angle) {$/;"	f	class:Euclid3D
YRotation	src/BeamlineGeometry/Rotation3D.cpp	/^Rotation3D Rotation3D::YRotation(double angle) {$/;"	f	class:Rotation3D
YSCALE	src/Structure/BoundaryGeometry.h	/^        YSCALE,    \/\/ Multiplicative scaling factor for y-coordinates$/;"	e	enum:BoundaryGeometry::__anon61
YSTART	src/Elements/OpalProbe.h	/^        YSTART,           \/\/ Start of y coordinate$/;"	e	enum:OpalProbe::__anon40
Y_START	src/BasicActions/DumpEMFields.h	/^        Y_START,$/;"	e	enum:DumpEMFields::__anon29
Y_START	src/BasicActions/DumpFields.h	/^        Y_START,$/;"	e	enum:DumpFields::__anon26
Y_STEPS	src/BasicActions/DumpEMFields.h	/^        Y_STEPS,$/;"	e	enum:DumpEMFields::__anon29
Y_STEPS	src/BasicActions/DumpFields.h	/^        Y_STEPS,$/;"	e	enum:DumpFields::__anon26
Z	src/Elements/OpalElement.h	/^        Z,              \/\/ The z-coordinate of the location of the element in floor coordinates$/;"	e	enum:OpalElement::__anon37
Z	src/Lines/Line.cpp	/^        Z,$/;"	e	enum:__anon53::__anon54	file:
ZRotation	src/BeamlineGeometry/Euclid3D.cpp	/^Euclid3D Euclid3D::ZRotation(double angle) {$/;"	f	class:Euclid3D
ZRotation	src/BeamlineGeometry/Rotation3D.cpp	/^Rotation3D Rotation3D::ZRotation(double angle) {$/;"	f	class:Rotation3D
ZSCALE	src/Structure/BoundaryGeometry.h	/^        ZSCALE,    \/\/ Multiplicative scaling factor for z-coordinates$/;"	e	enum:BoundaryGeometry::__anon61
ZSHIFT	src/Structure/BoundaryGeometry.h	/^        ZSHIFT,    \/\/ Shift in z direction$/;"	e	enum:BoundaryGeometry::__anon61
ZSTART	src/Track/TrackCmd.cpp	/^        ZSTART,    \/\/ Defines a z-location [m] where the reference particle starts$/;"	e	enum:__anon30::__anon31	file:
ZSTOP	src/Track/TrackCmd.cpp	/^        ZSTOP,     \/\/ Defines a z-location [m], after which the simulation stops when the last$/;"	e	enum:__anon30::__anon31	file:
ZX	src/Fields/Fieldmap.h	/^    ZX,$/;"	e	enum:SwapType
ZYMX	src/Fields/Fieldmap.h	/^    ZYMX,$/;"	e	enum:SwapType
Z_START	src/BasicActions/DumpEMFields.h	/^        Z_START,$/;"	e	enum:DumpEMFields::__anon29
Z_START	src/BasicActions/DumpFields.h	/^        Z_START,$/;"	e	enum:DumpFields::__anon26
Z_STEPS	src/BasicActions/DumpEMFields.h	/^        Z_STEPS,$/;"	e	enum:DumpEMFields::__anon29
Z_STEPS	src/BasicActions/DumpFields.h	/^        Z_STEPS,$/;"	e	enum:DumpFields::__anon26
ZeroBfield	src/Fields/EMField.h	/^    static const BVector ZeroBfield;$/;"	m	class:EMField
ZeroEBfield	src/Fields/EMField.h	/^    static const EBVectors ZeroEBfield;$/;"	m	class:EMField
ZeroEfield	src/Fields/EMField.h	/^    static const EVector ZeroEfield;$/;"	m	class:EMField
ZeroLength	src/Utilities/ClassicField.h	/^    static bool ZeroLength(const ClassicField &fle) {$/;"	f	class:ClassicField
_CLASSIC_FIELDS_INTERPOLATOR3DGRIDTO1D_H_	src/Fields/Interpolation/Interpolator3dGridTo1d.h	29;"	d
_CLASSIC_FIELDS_INTERPOLATOR3DGRIDTO3D_HH_	src/Fields/Interpolation/Interpolator3dGridTo3d.h	29;"	d
_CLASSIC_FIELDS_MESH_H_	src/Fields/Interpolation/Mesh.h	32;"	d
_CLASSIC_FIELDS_NDGRID_HH_	src/Fields/Interpolation/NDGrid.h	29;"	d
_CLASSIC_FIELDS_SECTORFIELD_HH_	src/Fields/SectorField.h	29;"	d
_CLASSIC_FIELDS_SECTORMAGNETICFIELDMAP_HH_	src/Fields/SectorMagneticFieldMap.h	29;"	d
_CLASSIC_FIELDS_THREEDGRID_HH_	src/Fields/Interpolation/ThreeDGrid.h	29;"	d
_CLASSIC_FIELDS_VECTORMAP_HH_	src/Fields/Interpolation/VectorMap.h	29;"	d
_CLASSIC_SRC_ALGORITHMS_ABSTRACTTIMEDEPENDENCE_H_	src/Algorithms/AbstractTimeDependence.h	29;"	d
_CLASSIC_SRC_ALGORITHMS_POLYNOMIALTIMEDEPENDENCE_H_	src/Algorithms/PolynomialTimeDependence.h	29;"	d
_CLASSIC_SRC_ALGORITHMS_SPLINETIMEDEPENDENCE_H_	src/Algorithms/SplineTimeDependence.h	29;"	d
_NODISCARD	src/AbsBeamline/Component.h	34;"	d
_NODISCARD	src/AbsBeamline/Component.h	35;"	d
_NODISCARD	src/AbsBeamline/Drift.h	34;"	d
_NODISCARD	src/AbsBeamline/Drift.h	35;"	d
_NODISCARD	src/AbsBeamline/ElementBase.cpp	100;"	d	file:
_NODISCARD	src/AbsBeamline/ElementBase.cpp	101;"	d	file:
_NODISCARD	src/AbsBeamline/ElementBase.cpp	75;"	d	file:
_NODISCARD	src/AbsBeamline/ElementBase.cpp	76;"	d	file:
_NODISCARD	src/AbsBeamline/ElementBase.h	74;"	d
_NODISCARD	src/AbsBeamline/ElementBase.h	75;"	d
_NODISCARD	src/AbsBeamline/Multipole.h	34;"	d
_NODISCARD	src/AbsBeamline/Multipole.h	35;"	d
_NODISCARD	src/AbsBeamline/MultipoleTBase.h	90;"	d
_NODISCARD	src/AbsBeamline/MultipoleTBase.h	91;"	d
_NODISCARD	src/AbsBeamline/MultipoleTCurvedConstRadius.h	86;"	d
_NODISCARD	src/AbsBeamline/MultipoleTCurvedConstRadius.h	87;"	d
_NODISCARD	src/AbsBeamline/MultipoleTCurvedVarRadius.h	89;"	d
_NODISCARD	src/AbsBeamline/MultipoleTCurvedVarRadius.h	90;"	d
_NODISCARD	src/AbsBeamline/MultipoleTStraight.h	90;"	d
_NODISCARD	src/AbsBeamline/MultipoleTStraight.h	91;"	d
_NODISCARD	src/AbsBeamline/ScalingFFAMagnet.h	41;"	d
_NODISCARD	src/AbsBeamline/ScalingFFAMagnet.h	42;"	d
_NODISCARD	src/AbsBeamline/Solenoid.h	32;"	d
_NODISCARD	src/AbsBeamline/Solenoid.h	33;"	d
_NODISCARD	src/AbstractObjects/OpalData.h	33;"	d
_NODISCARD	src/AbstractObjects/OpalData.h	34;"	d
_NODISCARD	src/Algorithms/DistributionMoments.h	29;"	d
_NODISCARD	src/Algorithms/DistributionMoments.h	30;"	d
_NODISCARD	src/BasicActions/Option.h	31;"	d
_NODISCARD	src/BasicActions/Option.h	32;"	d
_NODISCARD	src/Main.cpp	26;"	d	file:
_NODISCARD	src/Main.cpp	27;"	d	file:
_NODISCARD	src/Physics/ParticleProperties.h	29;"	d
_NODISCARD	src/Physics/ParticleProperties.h	30;"	d
_NODISCARD	src/Structure/SDDSColumn.h	29;"	d
_NODISCARD	src/Structure/SDDSColumn.h	30;"	d
_NODISCARD	src/Structure/SDDSColumnSet.h	29;"	d
_NODISCARD	src/Structure/SDDSColumnSet.h	30;"	d
_NODISCARD	src/Utilities/MSLang/matheval.hpp	25;"	d
_NODISCARD	src/Utilities/MSLang/matheval.hpp	26;"	d
_NODISCARD	src/Utilities/SDDSParser.h	27;"	d
_NODISCARD	src/Utilities/SDDSParser.h	28;"	d
_NODISCARD	src/Utilities/SDDSParser/array.hpp	28;"	d
_NODISCARD	src/Utilities/SDDSParser/array.hpp	29;"	d
_NODISCARD	src/Utilities/SDDSParser/associate.hpp	28;"	d
_NODISCARD	src/Utilities/SDDSParser/associate.hpp	29;"	d
_NODISCARD	src/Utilities/SDDSParser/ast.hpp	28;"	d
_NODISCARD	src/Utilities/SDDSParser/ast.hpp	29;"	d
_OPAL_BOUNDARY_GEOMETRY_H	src/Structure/BoundaryGeometry.h	34;"	d
_OPAL_DATA_SINK_H	src/Structure/DataSink.h	29;"	d
_SRC_COMMON_CPP_MATHS_MMATRIX_HH_	src/Fields/Interpolation/MMatrix.h	29;"	d
_SRC_LEGACY_INTERFACE_INTERPOLATION_TRILINEARINTERPOLATOR_HH_	src/Fields/Interpolation/TriLinearInterpolator.h	29;"	d
__DBGMSG__	src/Utilities/Util.h	36;"	d
__FILENAME__	src/Utilities/Util.h	35;"	d
__SDDSPARSEREXCEPTION_H__	src/Utilities/SDDSParser/SDDSParserException.h	18;"	d
__SDDSPARSER_H__	src/Utilities/SDDSParser.h	64;"	d
__cpp_consteval	src/AbsBeamline/Component.h	31;"	d
__cpp_consteval	src/AbsBeamline/Drift.h	31;"	d
__cpp_consteval	src/AbsBeamline/ElementBase.cpp	72;"	d	file:
__cpp_consteval	src/AbsBeamline/ElementBase.cpp	97;"	d	file:
__cpp_consteval	src/AbsBeamline/ElementBase.h	71;"	d
__cpp_consteval	src/AbsBeamline/Multipole.h	31;"	d
__cpp_consteval	src/AbsBeamline/MultipoleTBase.h	87;"	d
__cpp_consteval	src/AbsBeamline/MultipoleTCurvedConstRadius.h	83;"	d
__cpp_consteval	src/AbsBeamline/MultipoleTCurvedVarRadius.h	86;"	d
__cpp_consteval	src/AbsBeamline/MultipoleTStraight.h	87;"	d
__cpp_consteval	src/AbsBeamline/ScalingFFAMagnet.h	38;"	d
__cpp_consteval	src/AbsBeamline/Solenoid.h	29;"	d
__cpp_consteval	src/AbstractObjects/OpalData.h	30;"	d
__cpp_consteval	src/Algorithms/DistributionMoments.h	26;"	d
__cpp_consteval	src/BasicActions/Option.h	28;"	d
__cpp_consteval	src/Main.cpp	23;"	d	file:
__cpp_consteval	src/Physics/ParticleProperties.h	26;"	d
__cpp_consteval	src/Structure/SDDSColumn.h	26;"	d
__cpp_consteval	src/Structure/SDDSColumnSet.h	26;"	d
__cpp_consteval	src/Utilities/MSLang/matheval.hpp	22;"	d
__cpp_consteval	src/Utilities/SDDSParser.h	24;"	d
__cpp_consteval	src/Utilities/SDDSParser/array.hpp	25;"	d
__cpp_consteval	src/Utilities/SDDSParser/associate.hpp	25;"	d
__cpp_consteval	src/Utilities/SDDSParser/ast.hpp	25;"	d
__init__	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^    def __init__(self, file_name_list):$/;"	m	class:PlotInterpolation
_a	src/AbsBeamline/EndFieldModel/Enge.h	/^    std::vector<double> _a;$/;"	m	class:endfieldmodel::Enge
_coefficient	src/Fields/Interpolation/PolynomialCoefficient.h	/^    double           _coefficient;$/;"	m	class:interpolation::PolynomialCoefficient
_debugOutput	tests/opal_test_utilities/SilenceTest.h	/^        std::ostringstream _debugOutput;$/;"	m	class:OpalTestUtilities::SilenceTest
_defaultCerr	tests/opal_test_utilities/SilenceTest.cpp	/^std::streambuf *OpalTestUtilities::SilenceTest::_defaultCerr = nullptr;$/;"	m	class:OpalTestUtilities::SilenceTest	file:
_defaultCerr	tests/opal_test_utilities/SilenceTest.h	/^        static std::streambuf *_defaultCerr;$/;"	m	class:OpalTestUtilities::SilenceTest
_defaultCout	tests/opal_test_utilities/SilenceTest.cpp	/^std::streambuf *OpalTestUtilities::SilenceTest::_defaultCout = nullptr;$/;"	m	class:OpalTestUtilities::SilenceTest	file:
_defaultCout	tests/opal_test_utilities/SilenceTest.h	/^        static std::streambuf *_defaultCout;$/;"	m	class:OpalTestUtilities::SilenceTest
_end_direction	src/AbsBeamline/Offset.h	/^    Vector_t<double, 3> _end_direction;$/;"	m	class:Offset
_end_position	src/AbsBeamline/Offset.h	/^    Vector_t<double, 3> _end_position;$/;"	m	class:Offset
_failed	tests/opal_test_utilities/SilenceTest.h	/^        bool _failed;$/;"	m	class:OpalTestUtilities::SilenceTest
_failureTest	tests/opal_test_utilities/SilenceTest.h	/^        FailureTester *_failureTest;$/;"	m	class:OpalTestUtilities::SilenceTest
_fields	src/Fields/SectorMagneticFieldMap.cpp	/^std::map<std::string, SectorMagneticFieldMap*> SectorMagneticFieldMap::_fields;$/;"	m	class:SectorMagneticFieldMap	file:
_fields	src/Fields/SectorMagneticFieldMap.h	/^    static std::map<std::string, SectorMagneticFieldMap*> _fields;$/;"	m	class:SectorMagneticFieldMap
_h	src/AbsBeamline/EndFieldModel/Enge.cpp	/^std::vector< std::vector< std::vector<int> > > Enge::_h;$/;"	m	class:endfieldmodel::Enge	file:
_h	src/AbsBeamline/EndFieldModel/Enge.h	/^    static std::vector< std::vector< std::vector<int> > > _h;$/;"	m	class:endfieldmodel::Enge
_inVarByVec	src/Fields/Interpolation/PolynomialCoefficient.h	/^    std::vector<int> _inVarByVec;$/;"	m	class:interpolation::PolynomialCoefficient
_is_local	src/AbsBeamline/Offset.h	/^    bool     _is_local;$/;"	m	class:Offset
_lambda	src/AbsBeamline/EndFieldModel/Enge.h	/^    double              _lambda, _x0;$/;"	m	class:endfieldmodel::Enge
_lambda	src/AbsBeamline/EndFieldModel/Tanh.h	/^    double _x0, _lambda;$/;"	m	class:endfieldmodel::Tanh
_matrix	src/Fields/Interpolation/MMatrix.h	/^  void*              _matrix;$/;"	m	class:interpolation::MMatrix
_outVar	src/Fields/Interpolation/PolynomialCoefficient.h	/^    int              _outVar;$/;"	m	class:interpolation::PolynomialCoefficient
_pointDim	src/Fields/Interpolation/SquarePolynomialVector.h	/^    int                                _pointDim;$/;"	m	class:interpolation::SquarePolynomialVector
_polyCoeffs	src/Fields/Interpolation/SquarePolynomialVector.h	/^    MMatrix<double>                    _polyCoeffs;$/;"	m	class:interpolation::SquarePolynomialVector
_polyKeyByPower	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^std::vector< std::vector< std::vector<int> > > SquarePolynomialVector::_polyKeyByPower;$/;"	m	class:interpolation::SquarePolynomialVector	file:
_polyKeyByPower	src/Fields/Interpolation/SquarePolynomialVector.h	/^    static std::vector< std::vector< std::vector<int> > > _polyKeyByPower;$/;"	m	class:interpolation::SquarePolynomialVector
_polyKeyByVector	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^std::vector< std::vector< std::vector<int> > > SquarePolynomialVector::_polyKeyByVector;$/;"	m	class:interpolation::SquarePolynomialVector	file:
_polyKeyByVector	src/Fields/Interpolation/SquarePolynomialVector.h	/^    static std::vector< std::vector< std::vector<int> > > _polyKeyByVector;$/;"	m	class:interpolation::SquarePolynomialVector
_printHeaders	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^bool SquarePolynomialVector::_printHeaders=true;$/;"	m	class:interpolation::SquarePolynomialVector	file:
_printHeaders	src/Fields/Interpolation/SquarePolynomialVector.h	/^    static bool                        _printHeaders;$/;"	m	class:interpolation::SquarePolynomialVector
_q	src/AbsBeamline/EndFieldModel/Enge.cpp	/^std::vector< std::vector< std::vector<int> > > Enge::_q;$/;"	m	class:endfieldmodel::Enge	file:
_q	src/AbsBeamline/EndFieldModel/Enge.h	/^    static std::vector< std::vector< std::vector<int> > > _q;$/;"	m	class:endfieldmodel::Enge
_tdi	src/AbsBeamline/EndFieldModel/Tanh.cpp	/^std::vector< std::vector< std::vector<int> > > Tanh::_tdi;$/;"	m	class:endfieldmodel::Tanh	file:
_tdi	src/AbsBeamline/EndFieldModel/Tanh.h	/^    static std::vector< std::vector< std::vector<int> > > _tdi;$/;"	m	class:endfieldmodel::Tanh
_test	tests/opal_test_utilities/SilenceTest.h	/^        SilenceTest *_test;$/;"	m	class:OpalTestUtilities::FailureTester
_vector	src/Fields/Interpolation/MVector.h	/^  void* _vector;$/;"	m	class:interpolation::MVector
_x0	src/AbsBeamline/EndFieldModel/Enge.h	/^    double              _lambda, _x0;$/;"	m	class:endfieldmodel::Enge
_x0	src/AbsBeamline/EndFieldModel/Tanh.h	/^    double _x0, _lambda;$/;"	m	class:endfieldmodel::Tanh
a	src/AbsBeamline/MultipoleTFunctions/tanhDeriv.cpp	/^    double a;$/;"	m	struct:tanhderiv::my_f_params	file:
a	src/Structure/BoundaryGeometry.cpp	/^    const Ray& operator=(const Ray& a) = delete;$/;"	m	class:Ray	file:
a0	src/Physics/Physics.h	/^    constexpr double a0         = 5.29177210903e-11;$/;"	m	namespace:Physics
a_e	src/Physics/Physics.h	/^    constexpr double a_e        = 1.15965218128e-03;$/;"	m	namespace:Physics
a_p	src/Physics/Physics.h	/^    constexpr double a_p        = 1.792847386e+00;$/;"	m	namespace:Physics
acc_m	src/Algorithms/SplineTimeDependence.h	/^    gsl_interp_accel* acc_m;$/;"	m	class:SplineTimeDependence
accept	src/AbsBeamline/Corrector.cpp	/^void Corrector::accept(BeamlineVisitor& visitor) const {$/;"	f	class:Corrector
accept	src/AbsBeamline/Drift.cpp	/^void Drift::accept(BeamlineVisitor &visitor) const {$/;"	f	class:Drift
accept	src/AbsBeamline/Marker.cpp	/^void Marker::accept(BeamlineVisitor &visitor) const {$/;"	f	class:Marker
accept	src/AbsBeamline/Monitor.cpp	/^void Monitor::accept(BeamlineVisitor& visitor) const {$/;"	f	class:Monitor
accept	src/AbsBeamline/Multipole.cpp	/^void Multipole::accept(BeamlineVisitor& visitor) const {$/;"	f	class:Multipole
accept	src/AbsBeamline/MultipoleT.cpp	/^void MultipoleT::accept(BeamlineVisitor& visitor) const {$/;"	f	class:MultipoleT
accept	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    void MultipoleTCurvedConstRadius::accept(BeamlineVisitor &visitor) const {$/;"	f	class:MultipoleTCurvedConstRadius
accept	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    void MultipoleTCurvedVarRadius::accept(BeamlineVisitor &visitor) const {$/;"	f	class:MultipoleTCurvedVarRadius
accept	src/AbsBeamline/MultipoleTStraight.h	/^    void MultipoleTStraight::accept(BeamlineVisitor &visitor) const {$/;"	f	class:MultipoleTStraight
accept	src/AbsBeamline/Offset.cpp	/^void Offset::accept(BeamlineVisitor& visitor) const {$/;"	f	class:Offset
accept	src/AbsBeamline/Probe.cpp	/^void Probe::accept(BeamlineVisitor& visitor) const {$/;"	f	class:Probe
accept	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::accept(BeamlineVisitor& visitor) const {$/;"	f	class:RFCavity
accept	src/AbsBeamline/Ring.cpp	/^void Ring::accept(BeamlineVisitor& visitor) const {$/;"	f	class:Ring
accept	src/AbsBeamline/ScalingFFAMagnet.cpp	/^void ScalingFFAMagnet::accept(BeamlineVisitor& visitor) const {$/;"	f	class:ScalingFFAMagnet
accept	src/AbsBeamline/Solenoid.cpp	/^void Solenoid::accept(BeamlineVisitor& visitor) const {$/;"	f	class:Solenoid
accept	src/AbsBeamline/TravelingWave.cpp	/^void TravelingWave::accept(BeamlineVisitor& visitor) const {$/;"	f	class:TravelingWave
accept	src/AbsBeamline/VerticalFFAMagnet.cpp	/^void VerticalFFAMagnet::accept(BeamlineVisitor& visitor) const {$/;"	f	class:VerticalFFAMagnet
accept	src/Beamlines/ElmPtr.cpp	/^void ElmPtr::accept(BeamlineVisitor &visitor) const {$/;"	f	class:ElmPtr
accept	src/Beamlines/FlaggedElmPtr.cpp	/^void FlaggedElmPtr::accept(BeamlineVisitor &v) const {$/;"	f	class:FlaggedElmPtr
accept	src/Beamlines/TBeamline.h	/^void TBeamline<T>::accept(BeamlineVisitor& visitor) const {$/;"	f	class:TBeamline
accept	tests/opal_src/Elements/OpalPolynomialTimeDependenceTest.cpp	/^    void accept(BeamlineVisitor& \/*visitor*\/) const {}$/;"	f	class:TestElement
accept	tests/opal_src/Utilities/MockComponent.h	/^    void accept(BeamlineVisitor&) const {}$/;"	f	class:MockComponent
accept	tests/opal_src/Utilities/MockComponent.h	/^    void accept(BeamlineVisitor&) const {}$/;"	f	class:MockComponent2
accuracy_m	src/Fields/Astra1DDynamic.h	/^    int accuracy_m;$/;"	m	class:Astra1DDynamic
accuracy_m	src/Fields/Astra1DElectroStatic.h	/^    int accuracy_m;$/;"	m	class:Astra1DElectroStatic
accuracy_m	src/Fields/Astra1DMagnetoStatic.h	/^    int accuracy_m;$/;"	m	class:Astra1DMagnetoStatic
accuracy_m	src/Fields/FM1DDynamic.h	/^    int accuracy_m;                         \/\/\/ Number of Fourier coefficients to use reconstructing field.$/;"	m	class:FM1DDynamic
accuracy_m	src/Fields/FM1DDynamic_fast.h	/^    unsigned int accuracy_m;$/;"	m	class:FM1DDynamic_fast
accuracy_m	src/Fields/FM1DElectroStatic.h	/^    int accuracy_m;                         \/\/\/ Number of Fourier coefficients to use reconstructing field.$/;"	m	class:FM1DElectroStatic
accuracy_m	src/Fields/FM1DElectroStatic_fast.h	/^    unsigned int accuracy_m;$/;"	m	class:FM1DElectroStatic_fast
accuracy_m	src/Fields/FM1DMagnetoStatic.h	/^    int accuracy_m;                         \/\/\/ Number of Fourier coefficients to use reconstructing field.$/;"	m	class:FM1DMagnetoStatic
accuracy_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    unsigned int accuracy_m;$/;"	m	class:FM1DMagnetoStatic_fast
actT	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::actT() {$/;"	f	class:PartBunch
actT	src/PartBunch/PartBunch.hpp	/^    void actT() {$/;"	f	class:PartBunch
actionRange_m	src/AbsBeamline/ElementBase.h	/^    std::queue<std::pair<double, double> > actionRange_m;$/;"	m	class:ElementBase
activateElements	src/Elements/OpalBeamline.cpp	/^void OpalBeamline::activateElements() {$/;"	f	class:OpalBeamline
active	src/BeamlineCore/MonitorRep.h	/^    bool active;$/;"	m	class:MonitorRep
active	src/BeamlineCore/ProbeRep.h	/^    bool active;$/;"	m	class:ProbeRep
activeParticleMatterInteractionHandlers_m	src/Algorithms/ParallelTracker.h	/^    std::set<ParticleMatterInteractionHandler*> activeParticleMatterInteractionHandlers_m;$/;"	m	class:ParallelTracker
actuals	src/OpalParser/Macro.h	/^    std::vector<std::vector < Token > > actuals;$/;"	m	class:Macro
add	src/Algorithms/IndexMap.cpp	/^void IndexMap::add(key_t::first_type initialS, key_t::second_type finalS, const value_t &val) {$/;"	f	class:IndexMap
add	src/Fields/Interpolation/ThreeDGrid.cpp	/^void ThreeDGrid::add(VectorMap* map) {$/;"	f	class:interpolation::ThreeDGrid
add	src/Structure/MeshGenerator.cpp	/^void MeshGenerator::add(const ElementBase& element) {$/;"	f	class:MeshGenerator
addAttributeOwner	src/AbstractObjects/AttributeHandler.cpp	/^void AttributeHandler::addAttributeOwner(const std::string &owner,$/;"	f	class:AttributeHandler
addColumn	src/Structure/SDDSColumnSet.cpp	/^void SDDSColumnSet::addColumn(const std::string& name,$/;"	f	class:SDDSColumnSet
addColumnValue	src/Structure/SDDSColumnSet.h	/^void SDDSColumnSet::addColumnValue(const std::string& name,$/;"	f	class:SDDSColumnSet
addDefaultParameters	src/Structure/SDDSWriter.cpp	/^void SDDSWriter::addDefaultParameters() {$/;"	f	class:SDDSWriter
addDescription	src/Structure/SDDSWriter.h	/^inline void SDDSWriter::addDescription(const std::string& text, const std::string& content) {$/;"	f	class:SDDSWriter
addEndMarkers	src/Lines/Sequence.cpp	/^void Sequence::addEndMarkers(TLine& line) const {$/;"	f	class:Sequence
addEnergyData	src/AbstractObjects/OpalData.cpp	/^void OpalData::addEnergyData(double spos, double ekin) {$/;"	f	class:OpalData
addEquals	src/Fields/Interpolation/NDGrid.cpp	/^Mesh::Iterator& NDGrid::addEquals(Mesh::Iterator& lhs, const Mesh::Iterator& rhs) const {$/;"	f	class:interpolation::NDGrid
addEquals	src/Fields/Interpolation/NDGrid.cpp	/^Mesh::Iterator& NDGrid::addEquals(Mesh::Iterator& lhs, int difference) const {$/;"	f	class:interpolation::NDGrid
addEquals	src/Fields/Interpolation/ThreeDGrid.cpp	/^Mesh::Iterator& ThreeDGrid::addEquals$/;"	f	class:interpolation::ThreeDGrid
addField	src/Fields/BDipoleField.cpp	/^BDipoleField &BDipoleField::addField(const BDipoleField &field) {$/;"	f	class:BDipoleField
addField	src/Fields/BMultipoleField.cpp	/^BMultipoleField &BMultipoleField::addField(const BMultipoleField &field) {$/;"	f	class:BMultipoleField
addInfo	src/Structure/SDDSWriter.h	/^inline void SDDSWriter::addInfo(const std::string& mode, const size_t& no_row_counts) {$/;"	f	class:SDDSWriter
addMaterial	src/Physics/Material.cpp	/^std::shared_ptr<Material> Material::addMaterial(const std::string& name,$/;"	f	class:Material
addOne	src/Fields/Interpolation/NDGrid.cpp	/^Mesh::Iterator& NDGrid::addOne(Mesh::Iterator& lhs) const {$/;"	f	class:interpolation::NDGrid
addOne	src/Fields/Interpolation/ThreeDGrid.cpp	/^Mesh::Iterator& ThreeDGrid::addOne(Mesh::Iterator& lhs) const {$/;"	f	class:interpolation::ThreeDGrid
addOperator	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^void DifferentialOperator::addOperator(const DifferentialOperator &doperator) {$/;"	f	class:polynomial::DifferentialOperator
addOperator	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^void DifferentialOperatorTwo::addOperator($/;"	f	class:polynomial::DifferentialOperatorTwo
addParameter	src/Structure/SDDSWriter.h	/^void SDDSWriter::addParameter($/;"	f	class:SDDSWriter
addParticle	src/Structure/LossDataSink.cpp	/^void LossDataSink::addParticle($/;"	f	class:LossDataSink
addParticle	src/Structure/PeakFinder.cpp	/^void PeakFinder::addParticle(const Vector_t<double, 3>& R) {$/;"	f	class:PeakFinder
addParticle	tests/classic_src/Algorithms/DistributionMomentsTestFixture.cpp	/^void DistributionMomentsTest::addParticle(double x, double px, double y, double py, double z, double pz) {$/;"	f	class:DistributionMomentsTest
addPolynomial	src/AbsBeamline/MultipoleTFunctions/Polynomial.cpp	/^void Polynomial::addPolynomial(const Polynomial &poly) {$/;"	f	class:polynomial::Polynomial
addPolynomial	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^void PolynomialSum::addPolynomial(const PolynomialSum &poly) {$/;"	f	class:polynomial::PolynomialSum
addPolynomial	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^void TwoPolynomial::addPolynomial(const TwoPolynomial &poly) {$/;"	f	class:polynomial::TwoPolynomial
addProblemCharacteristicValue	src/AbstractObjects/OpalData.cpp	/^void OpalData::addProblemCharacteristicValue(const std::string& name, unsigned int value) {$/;"	f	class:OpalData
addReference	src/MemoryManagement/RCObject.h	/^inline int RCObject::addReference() const {$/;"	f	class:RCObject
addReferenceParticle	src/Structure/LossDataSink.cpp	/^void LossDataSink::addReferenceParticle($/;"	f	class:LossDataSink
addRow	src/Structure/ElementPositionWriter.cpp	/^void ElementPositionWriter::addRow(double spos,$/;"	f	class:ElementPositionWriter
addRow	src/Structure/MonitorStatisticsWriter.cpp	/^void MonitorStatisticsWriter::addRow(const SetStatistics& set) {$/;"	f	class:MonitorStatisticsWriter
addToBunch	src/Algorithms/Tracker.cpp	/^void Tracker::addToBunch(const OpalParticle& part) {$/;"	f	class:Tracker
addValue	src/Structure/SDDSColumn.h	/^void SDDSColumn::addValue(const T& val) {$/;"	f	class:SDDSColumn
advance	src/Steppers/Stepper.h	/^    virtual bool advance($/;"	f	class:Stepper
advanceToPos	src/Algorithms/StepSizeConfig.cpp	/^StepSizeConfig& StepSizeConfig::advanceToPos(double spos) {$/;"	f	class:StepSizeConfig
air	src/Physics/Material.cpp	/^    auto air           = Material::addMaterial("Air",$/;"	m	namespace:__anon18	file:
algorithm	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^const int CoordinateTransform::algorithm = GSL_INTEG_GAUSS61;$/;"	m	class:coordinatetransform::CoordinateTransform	file:
algorithm	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^    static const int algorithm;$/;"	m	class:coordinatetransform::CoordinateTransform
allCell	tests/ippl_src/Meshes/CartesianCentering.cpp	/^CenteringEnum CCCEnums<2U,1U,0U>::allCell[2U*1U];$/;"	m	class:CCCEnums	file:
allElementsOfTypeE	src/AbsBeamline/SpecificElementVisitor.h	/^    ElementList_t allElementsOfTypeE;$/;"	m	class:SpecificElementVisitor
allFace	tests/ippl_src/Field/FieldDebug2.cpp	/^CenteringEnum CCCEnums<3U,1U,0U>::allFace[3U*1U];$/;"	m	class:CCCEnums	file:
allFace	tests/ippl_src/Meshes/CartesianCentering.cpp	/^CenteringEnum CCCEnums<3U,1U,1U>::allFace[3U*1U];$/;"	m	class:CCCEnums	file:
allVertex	tests/ippl_src/Meshes/CartesianCentering.cpp	/^CenteringEnum CCCEnums<3U,3U,0U>::allVertex[3U*3U];$/;"	m	class:CCCEnums	file:
allocateParticles	src/Distribution/FlatTop.hpp	/^    void allocateParticles(size_t numberOfParticles){$/;"	f	class:FlatTop
almostEqual	src/Algorithms/IndexMap.cpp	/^bool IndexMap::almostEqual(double x, double y) {$/;"	f	class:IndexMap
almost_eq	src/Structure/BoundaryGeometry.cpp	/^    inline bool almost_eq($/;"	f	namespace:cmp_diff
almost_eq	src/Structure/BoundaryGeometry.cpp	/^    inline bool almost_eq(double A, double B, double maxDiff = 1e-20, int maxUlps = 1000) {$/;"	f	namespace:cmp_ulp
almost_eq	src/Structure/BoundaryGeometry.cpp	/^    inline bool almost_eq(double A, double B, double maxDiff = 1e-20, int maxUlps = 1000) {$/;"	f	namespace:cmp_ulp_obsolete
almost_eq_zero	src/Structure/BoundaryGeometry.cpp	/^    inline bool almost_eq_zero(double A, double maxDiff = 1e-15) {$/;"	f	namespace:cmp_diff
almost_eq_zero	src/Structure/BoundaryGeometry.cpp	/^    inline bool almost_eq_zero(double A, double maxDiff = 1e-15) {$/;"	f	namespace:cmp_ulp
almost_eq_zero	src/Structure/BoundaryGeometry.cpp	/^    inline bool almost_eq_zero(double A, double maxDiff = 1e-15) {$/;"	f	namespace:cmp_ulp_obsolete
alpha	src/Physics/Physics.h	/^    constexpr double alpha      = 7.2973525693e-03;$/;"	m	namespace:Physics
alpha_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    double alpha_m;$/;"	m	class:AlpineManager
alpha_m	src/PartBunch/PartBunch.hpp	/^    double alpha_m;$/;"	m	class:PartBunch
alpha_numeric	src/Fields/Fieldmap.h	/^    static std::string alpha_numeric;$/;"	m	class:Fieldmap
aluminaal2o3	src/Physics/Material.cpp	/^    auto aluminaal2o3  = Material::addMaterial("AluminaAL2O3",$/;"	m	namespace:__anon18	file:
aluminum	src/Physics/Material.cpp	/^    auto aluminum      = Material::addMaterial("Aluminum",$/;"	m	namespace:__anon18	file:
ami_m	src/Distribution/Distribution.h	/^        double ami_m;$/;"	m	class:Distribution::MDependentBehavior
amplitudeName_m	src/AbsBeamline/RFCavity.h	/^    std::string amplitudeName_m;$/;"	m	class:RFCavity
amplitudeTD_m	src/AbsBeamline/RFCavity.h	/^    std::shared_ptr<AbstractTimeDependence> amplitudeTD_m;$/;"	m	class:RFCavity
amu	src/Physics/Physics.h	/^    constexpr double amu        = 0.93149410242;$/;"	m	namespace:Physics
angle	src/BeamlineGeometry/PlanarArcGeometry.h	/^    double angle;$/;"	m	class:PlanarArcGeometry
angleTolerance_m	src/AbsBeamline/Ring.cpp	/^const double Ring::angleTolerance_m  = 1e-2;$/;"	m	class:Ring	file:
angleTolerance_m	src/AbsBeamline/Ring.h	/^    static const double angleTolerance_m;$/;"	m	class:Ring
angleX_m	src/Utilities/MSLang/Shear.h	/^        double angleX_m;$/;"	m	struct:mslang::Shear
angleY_m	src/Utilities/MSLang/Shear.h	/^        double angleY_m;$/;"	m	struct:mslang::Shear
angle_m	src/AbsBeamline/MultipoleT.h	/^    double angle_m;$/;"	m	class:MultipoleT
angle_m	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    double angle_m;$/;"	m	class:MultipoleTCurvedConstRadius
angle_m	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    double angle_m;$/;"	m	class:MultipoleTCurvedVarRadius
angle_m	src/AbsBeamline/RFCavity.h	/^    double angle_m;$/;"	m	class:RFCavity
angle_m	src/Utilities/MSLang/Rotation.h	/^        double angle_m;$/;"	m	struct:mslang::Rotation
aperture_m	src/AbsBeamline/ElementBase.h	/^    std::pair<ApertureType, std::vector<double> > aperture_m;$/;"	m	class:ElementBase
append	src/AbstractObjects/PlaceRep.cpp	/^void PlaceRep::append(const std::string &name, int occur) {$/;"	f	class:PlaceRep
append	src/Beamlines/TBeamline.h	/^inline void TBeamline<T>::append(const T& obj) {$/;"	f	class:TBeamline
append	src/OpalParser/MacroStream.cpp	/^void MacroStream::append(Token &token) {$/;"	f	class:MacroStream
append	src/OpalParser/Statement.cpp	/^void Statement::append(const Token &token) {$/;"	f	class:Statement
appendASCII	src/Structure/LossDataSink.h	/^    void appendASCII() {$/;"	f	class:LossDataSink
appendElement	src/AbsBeamline/Ring.cpp	/^void Ring::appendElement(const Component& element) {$/;"	f	class:Ring
append_m	src/Structure/PeakFinder.cpp	/^void PeakFinder::append_m() {$/;"	f	class:PeakFinder
apply	src/AbsBeamline/Component.cpp	/^bool Component::apply($/;"	f	class:Component
apply	src/AbsBeamline/Component.cpp	/^bool Component::apply(const size_t& i, const double&, Vector_t<double, 3>&, Vector_t<double, 3>&) {$/;"	f	class:Component
apply	src/AbsBeamline/Corrector.cpp	/^bool Corrector::apply($/;"	f	class:Corrector
apply	src/AbsBeamline/Monitor.cpp	/^bool Monitor::apply($/;"	f	class:Monitor
apply	src/AbsBeamline/Multipole.cpp	/^bool Multipole::apply($/;"	f	class:Multipole
apply	src/AbsBeamline/MultipoleT.cpp	/^bool MultipoleT::apply($/;"	f	class:MultipoleT
apply	src/AbsBeamline/MultipoleTBase.cpp	/^bool MultipoleTBase::apply(const Vector_t<double, 3> &R, const Vector_t<double, 3> &\/*P*\/,$/;"	f	class:MultipoleTBase
apply	src/AbsBeamline/MultipoleTBase.h	/^inline bool MultipoleTBase::apply($/;"	f	class:MultipoleTBase
apply	src/AbsBeamline/PluginElement.cpp	/^bool PluginElement::apply($/;"	f	class:PluginElement
apply	src/AbsBeamline/RFCavity.cpp	/^bool RFCavity::apply($/;"	f	class:RFCavity
apply	src/AbsBeamline/Ring.cpp	/^bool Ring::apply($/;"	f	class:Ring
apply	src/AbsBeamline/ScalingFFAMagnet.cpp	/^bool ScalingFFAMagnet::apply($/;"	f	class:ScalingFFAMagnet
apply	src/AbsBeamline/Solenoid.cpp	/^bool Solenoid::apply($/;"	f	class:Solenoid
apply	src/AbsBeamline/SpecificElementVisitor.h	/^    static void apply(ElementList_t &, const ELEM2 &)$/;"	f	struct:CastsTrait
apply	src/AbsBeamline/SpecificElementVisitor.h	/^    static void apply(ElementList_t &allElements, const ELEM &element)$/;"	f	struct:CastsTrait
apply	src/AbsBeamline/TravelingWave.cpp	/^bool TravelingWave::apply($/;"	f	class:TravelingWave
apply	src/AbsBeamline/VerticalFFAMagnet.h	/^bool VerticalFFAMagnet::apply($/;"	f	class:VerticalFFAMagnet
apply	src/AbstractObjects/OpalData.cpp	/^void OpalData::apply(const ObjectFunction& fun) {$/;"	f	class:OpalData
apply	src/Filters/FixedFFTLowPass.cpp	/^void FixedFFTLowPassFilter::apply(std::vector<double> &LineDensity) {$/;"	f	class:FixedFFTLowPassFilter
apply	src/Filters/RelativeFFTLowPass.cpp	/^void RelativeFFTLowPassFilter::apply(std::vector<double> &LineDensity) {$/;"	f	class:RelativeFFTLowPassFilter
apply	src/Filters/SavitzkyGolay.cpp	/^void SavitzkyGolayFilter::apply(std::vector<double> &LineDensity) {$/;"	f	class:SavitzkyGolayFilter
apply	src/Filters/Stencil.cpp	/^void StencilFilter::apply(std::vector<double> &LineDensity) {$/;"	f	class:StencilFilter
apply	src/Utilities/MSLang/Difference.cpp	/^    void Difference::apply(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::Difference
apply	src/Utilities/MSLang/Ellipse.cpp	/^    void Ellipse::apply(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::Ellipse
apply	src/Utilities/MSLang/Intersection.cpp	/^    void Intersection::apply(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::Intersection
apply	src/Utilities/MSLang/Mask.cpp	/^    void Mask::apply(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::Mask
apply	src/Utilities/MSLang/Polygon.cpp	/^    void Polygon::apply(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::Polygon
apply	src/Utilities/MSLang/Rectangle.cpp	/^    void Rectangle::apply(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::Rectangle
apply	src/Utilities/MSLang/Repeat.cpp	/^    void Repeat::apply(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::Repeat
apply	src/Utilities/MSLang/Rotation.cpp	/^    void Rotation::apply(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::Rotation
apply	src/Utilities/MSLang/Shear.cpp	/^    void Shear::apply(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::Shear
apply	src/Utilities/MSLang/SymmetricDifference.cpp	/^    void SymmetricDifference::apply(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::SymmetricDifference
apply	src/Utilities/MSLang/Translation.cpp	/^    void Translation::apply(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::Translation
apply	src/Utilities/MSLang/Triangle.cpp	/^    void Triangle::apply(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::Triangle
apply	src/Utilities/MSLang/Union.cpp	/^    void Union::apply(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::Union
apply	src/Utilities/Mesher.cpp	/^void Mesher::apply() {$/;"	f	class:Mesher
apply	src/Utilities/OpalFilter.h	/^void OpalFilter::apply(std::vector<double>& histogram) {$/;"	f	class:OpalFilter
apply	src/Utilities/SDDSParser/array.hpp	/^            static bool apply()$/;"	f	struct:SDDS::array::complainUnsupported
apply	src/Utilities/SDDSParser/associate.hpp	/^            static bool apply()$/;"	f	struct:SDDS::associate::complainUnsupported
apply	src/Utilities/SDDSParser/column.hpp	/^            static bool apply()$/;"	f	struct:SDDS::column::complainUnsupported
apply	src/Utilities/SDDSParser/data.hpp	/^            static bool apply()$/;"	f	struct:SDDS::data::complainUnsupported
apply	src/Utilities/SDDSParser/include.hpp	/^            static bool apply()$/;"	f	struct:SDDS::include::complainUnsupported
apply	src/Utilities/SDDSParser/parameter.hpp	/^            static bool apply()$/;"	f	struct:SDDS::parameter::complainUnsupported
apply	tests/ippl_src/AppTypes/Tensor.cpp	/^    static void apply()$/;"	f	class:testTensorUnaryOps
apply	tests/opal_src/Utilities/MockComponent.h	/^    bool apply(const Vector_t& r, const Vector_t& \/*P*\/, const double& \/*t*\/,$/;"	f	class:MockComponent
apply	tests/opal_src/Utilities/MockComponent.h	/^    bool apply(const Vector_t& r, const Vector_t& \/*P*\/, const double& \/*t*\/,$/;"	f	class:MockComponent2
apply	tests/opal_src/Utilities/MockComponent.h	/^    bool apply(const double&, Vector_t&, Vector_t&) {$/;"	f	class:MockComponent
apply	tests/opal_src/Utilities/MockComponent.h	/^    bool apply(const double&, Vector_t&, Vector_t&) {$/;"	f	class:MockComponent2
apply	tests/opal_src/Utilities/MockComponent.h	/^    bool apply(const size_t&, const double&, Vector_t&, Vector_t&) {$/;"	f	class:MockComponent
apply	tests/opal_src/Utilities/MockComponent.h	/^    bool apply(const size_t&, const double&, Vector_t&, Vector_t&) {$/;"	f	class:MockComponent2
applyDefault	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::applyDefault(const ElementBase&) {$/;"	f	class:DefaultVisitor
applyFractionalStep	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::applyFractionalStep(const BorisPusher& pusher, double tau) {$/;"	f	class:ParallelTracker
applyOperator	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.cpp	/^void RecursionRelation::applyOperator() {$/;"	f	class:polynomial::RecursionRelation
applyOperator	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.cpp	/^void RecursionRelationTwo::applyOperator() {$/;"	f	class:polynomial::RecursionRelationTwo
applyPluginElements	src/Algorithms/ParallelTracker.cpp	/^bool ParallelTracker::applyPluginElements(const double dt) {$/;"	f	class:ParallelTracker
applyRotation	src/Utilities/MSLang/Rotation.cpp	/^    void Rotation::applyRotation(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::Rotation
applyShear	src/Utilities/MSLang/Shear.cpp	/^    void Shear::applyShear(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::Shear
applySymmetry	src/Fields/SectorMagneticFieldMap.cpp	/^bool SectorMagneticFieldMap::applySymmetry(double* R_temp) const {$/;"	f	class:SectorMagneticFieldMap
applyToReferenceParticle	src/AbsBeamline/Component.cpp	/^bool Component::applyToReferenceParticle($/;"	f	class:Component
applyToReferenceParticle	src/AbsBeamline/Monitor.cpp	/^bool Monitor::applyToReferenceParticle($/;"	f	class:Monitor
applyToReferenceParticle	src/AbsBeamline/Multipole.cpp	/^bool Multipole::applyToReferenceParticle($/;"	f	class:Multipole
applyToReferenceParticle	src/AbsBeamline/PluginElement.cpp	/^bool PluginElement::applyToReferenceParticle($/;"	f	class:PluginElement
applyToReferenceParticle	src/AbsBeamline/RFCavity.cpp	/^bool RFCavity::applyToReferenceParticle($/;"	f	class:RFCavity
applyToReferenceParticle	src/AbsBeamline/Solenoid.cpp	/^bool Solenoid::applyToReferenceParticle($/;"	f	class:Solenoid
applyToReferenceParticle	src/AbsBeamline/TravelingWave.cpp	/^bool TravelingWave::applyToReferenceParticle($/;"	f	class:TravelingWave
applyTranslation	src/Utilities/MSLang/Translation.cpp	/^    void Translation::applyTranslation(std::vector<std::shared_ptr<Base> > &bfuncs) {$/;"	f	class:mslang::Translation
arcCtr	src/Expressions/SFunction.cpp	/^double SFunction::arcCtr() {$/;"	f	class:SFunction
arcIn	src/Expressions/SFunction.cpp	/^double SFunction::arcIn() {$/;"	f	class:SFunction
arcOut	src/Expressions/SFunction.cpp	/^double SFunction::arcOut() {$/;"	f	class:SFunction
arg_m	src/Structure/IpplInfoWrapper.h	/^    char** arg_m;$/;"	m	class:IpplInfoWrapper
argumentBoundaries_m	src/Utilities/MSLang/ArgumentExtractor.h	/^        std::vector<std::pair<unsigned int, unsigned int>> argumentBoundaries_m;$/;"	m	struct:mslang::ArgumentExtractor
arguments_m	src/AbstractObjects/OpalData.cpp	/^    std::vector<std::string> arguments_m;$/;"	m	struct:OpalDataImpl	file:
array	src/Utilities/SDDSParser/array.hpp	/^    struct array$/;"	s	namespace:SDDS
arrayList	src/Utilities/SDDSParser/array.hpp	/^    struct arrayList: std::list<array> {};$/;"	s	namespace:SDDS
array_description	src/Utilities/SDDSParser/array.hpp	/^                array_symbol, array_units, array_description, array_format,$/;"	m	struct:SDDS::parser::array_parser
array_dimensions	src/Utilities/SDDSParser/array.hpp	/^                array_dimensions;$/;"	m	struct:SDDS::parser::array_parser
array_field	src/Utilities/SDDSParser/array.hpp	/^        qi::rule<Iterator, long(), skipper<Iterator> > array_field,$/;"	m	struct:SDDS::parser::array_parser
array_format	src/Utilities/SDDSParser/array.hpp	/^                array_symbol, array_units, array_description, array_format,$/;"	m	struct:SDDS::parser::array_parser
array_group	src/Utilities/SDDSParser/array.hpp	/^                array_group, units, string, quoted_string;$/;"	m	struct:SDDS::parser::array_parser
array_m	src/Utilities/SDDSParser/file.hpp	/^        array_parser<Iterator> array_m;$/;"	m	struct:SDDS::parser::file_parser
array_name	src/Utilities/SDDSParser/array.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > array_name,$/;"	m	struct:SDDS::parser::array_parser
array_parser	src/Utilities/SDDSParser/array.cpp	/^template struct SDDS::parser::array_parser<iterator_t>;/;"	m	class:SDDS::parser	typeref:struct:SDDS::parser::	file:
array_parser	src/Utilities/SDDSParser/array.hpp	/^    struct array_parser: qi::grammar<Iterator, array(), skipper<Iterator> >$/;"	s	namespace:SDDS::parser
array_parser	src/Utilities/SDDSParser/array_def.hpp	/^    array_parser<Iterator>::array_parser(error_handler<Iterator> & _error_handler):$/;"	f	class:SDDS::parser::array_parser
array_symbol	src/Utilities/SDDSParser/array.hpp	/^                array_symbol, array_units, array_description, array_format,$/;"	m	struct:SDDS::parser::array_parser
array_type	src/Utilities/SDDSParser/array.hpp	/^        qi::rule<Iterator, ast::datatype, skipper<Iterator> > array_type;$/;"	m	struct:SDDS::parser::array_parser
array_units	src/Utilities/SDDSParser/array.hpp	/^                array_symbol, array_units, array_description, array_format,$/;"	m	struct:SDDS::parser::array_parser
array_unsupported_post	src/Utilities/SDDSParser/array.hpp	/^                array_unsupported_post;$/;"	m	struct:SDDS::parser::array_parser
array_unsupported_pre	src/Utilities/SDDSParser/array.hpp	/^        qi::rule<Iterator, ast::nil(), skipper<Iterator> > array_unsupported_pre,$/;"	m	struct:SDDS::parser::array_parser
arraytype	src/Utilities/SDDSParser/array.hpp	/^        qi::symbols<char, ast::datatype> arraytype;$/;"	m	struct:SDDS::parser::array_parser
asciidump	src/Utilities/Options.cpp	/^    bool asciidump = false;$/;"	m	namespace:Options	file:
assignBinsToParticles	src/PartBunch/Binning/AdaptBins.hpp	/^    void AdaptBins<BunchType, BinningSelector>::assignBinsToParticles() {$/;"	f	class:ParticleBinning::AdaptBins
associate	src/Utilities/SDDSParser/associate.hpp	/^    struct associate$/;"	s	namespace:SDDS
associateList	src/Utilities/SDDSParser/associate.hpp	/^    struct associateList: std::list<associate> {};$/;"	s	namespace:SDDS
associate_contents	src/Utilities/SDDSParser/associate.hpp	/^                associate_contents;$/;"	m	struct:SDDS::parser::associate_parser
associate_description	src/Utilities/SDDSParser/associate.hpp	/^                associate_name, associate_filename, associate_path, associate_description,$/;"	m	struct:SDDS::parser::associate_parser
associate_filename	src/Utilities/SDDSParser/associate.hpp	/^                associate_name, associate_filename, associate_path, associate_description,$/;"	m	struct:SDDS::parser::associate_parser
associate_m	src/Utilities/SDDSParser/file.hpp	/^        associate_parser<Iterator> associate_m;$/;"	m	struct:SDDS::parser::file_parser
associate_name	src/Utilities/SDDSParser/associate.hpp	/^                associate_name, associate_filename, associate_path, associate_description,$/;"	m	struct:SDDS::parser::associate_parser
associate_parser	src/Utilities/SDDSParser/associate.cpp	/^template struct SDDS::parser::associate_parser<iterator_t>;$/;"	m	class:SDDS::parser	typeref:struct:SDDS::parser::	file:
associate_parser	src/Utilities/SDDSParser/associate.hpp	/^    struct associate_parser: qi::grammar<Iterator, associate(), skipper<Iterator> >$/;"	s	namespace:SDDS::parser
associate_parser	src/Utilities/SDDSParser/associate_def.hpp	/^    associate_parser<Iterator>::associate_parser(error_handler<Iterator> & _error_handler):$/;"	f	class:SDDS::parser::associate_parser
associate_path	src/Utilities/SDDSParser/associate.hpp	/^                associate_name, associate_filename, associate_path, associate_description,$/;"	m	struct:SDDS::parser::associate_parser
associate_sdds	src/Utilities/SDDSParser/associate.hpp	/^        qi::rule<Iterator, long(), skipper<Iterator> > associate_sdds;$/;"	m	struct:SDDS::parser::associate_parser
associate_unsupported_post	src/Utilities/SDDSParser/associate.hpp	/^                associate_unsupported_post;$/;"	m	struct:SDDS::parser::associate_parser
associate_unsupported_pre	src/Utilities/SDDSParser/associate.hpp	/^        qi::rule<Iterator, ast::nil(), skipper<Iterator> > associate_unsupported_pre,$/;"	m	struct:SDDS::parser::associate_parser
ast	src/Utilities/MSLang/matheval.hpp	/^        detail::expr_ast<real_t> ast;$/;"	m	class:matheval::Parser
ast	src/Utilities/SDDSParser/ast.hpp	/^    namespace ast {$/;"	n	namespace:SDDS
atEnd	src/OpalParser/Statement.cpp	/^bool Statement::atEnd() const {$/;"	f	class:Statement
atomicMass_m	src/Physics/Material.h	/^        const double atomicMass_m;$/;"	m	class:Physics::Material
atomicNumber_m	src/Physics/Material.h	/^        const double atomicNumber_m;$/;"	m	class:Physics::Material
att_name	src/Expressions/ARefExpr.h	/^        const std::string att_name;$/;"	m	class:Expressions::ARefExpr
att_name	src/Expressions/SRefAttr.h	/^        const std::string att_name;$/;"	m	class:Expressions::SRefAttr
att_name	src/Expressions/SRefExpr.h	/^        const std::string att_name;$/;"	m	class:Expressions::SRefExpr
attributeOwnerDictionary_s	src/AbstractObjects/AttributeHandler.cpp	/^              > AttributeHandler::attributeOwnerDictionary_s;$/;"	m	class:AttributeHandler	file:
attributeOwnerDictionary_s	src/AbstractObjects/AttributeHandler.h	/^    static std::multimap<std::string, std::pair<OwnerType, std::string> > attributeOwnerDictionary_s;$/;"	m	class:AttributeHandler
attributes	src/Utilities/SDDSParser/array.hpp	/^        enum attributes { NAME$/;"	g	struct:SDDS::array
attributes	src/Utilities/SDDSParser/associate.hpp	/^        enum attributes { NAME$/;"	g	struct:SDDS::associate
attributes	src/Utilities/SDDSParser/column.hpp	/^        enum attributes { NAME$/;"	g	struct:SDDS::column
attributes	src/Utilities/SDDSParser/data.hpp	/^        enum attributes { MODE$/;"	g	struct:SDDS::data
attributes	src/Utilities/SDDSParser/include.hpp	/^        enum attributes { FILENAME$/;"	g	struct:SDDS::include
attributes	src/Utilities/SDDSParser/parameter.hpp	/^        enum attributes { NAME$/;"	g	struct:SDDS::parameter
attributes_t	tools/opal2sdds/main.cpp	/^typedef std::set<Attribute> attributes_t;$/;"	t	file:
autoPhase	src/Utilities/Options.cpp	/^    int autoPhase = 6;$/;"	m	namespace:Options	file:
autophaseCavities	src/Algorithms/OrbitThreader.cpp	/^void OrbitThreader::autophaseCavities($/;"	f	class:OrbitThreader
autophaseCavities	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::autophaseCavities(const BorisPusher& pusher) {$/;"	f	class:ParallelTracker
autophaseVeto_m	src/AbsBeamline/RFCavity.h	/^    bool autophaseVeto_m;$/;"	m	class:RFCavity
avrgpz_m	src/Distribution/Distribution.h	/^    double avrgpz_m;$/;"	m	class:Distribution
axis	src/PartBunch/Binning/BinningTools.h	/^        const int axis;              \/\/\/< Index of the coordinate axis to use for binning.$/;"	m	struct:ParticleBinning::CoordinateSelector
azimuthalExtent_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    double azimuthalExtent_m = 0.; \/\/ maximum distance used for field calculation$/;"	m	class:ScalingFFAMagnet
b0_m	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^    double b0_m = 1.0;$/;"	m	class:VerticalFFAMagnetTest	file:
back	src/.Solvers/IrregularDomain.h	/^        T back;    \/\/ x,   y,   z+1$/;"	m	struct:IrregularDomain::Stencil
back_beam	src/Algorithms/DefaultVisitor.h	/^    bool back_beam;   \/\/ true, if beam runs from right (s=C) to left (s=0).$/;"	m	class:DefaultVisitor
back_path	src/Algorithms/DefaultVisitor.h	/^    bool back_path;   \/\/ true, if tracking from right (s=C) to left (s=0).$/;"	m	class:DefaultVisitor
back_track	src/Algorithms/DefaultVisitor.h	/^    bool back_track;  \/\/ true, if tracking opposite to the beam direction.$/;"	m	class:DefaultVisitor
balance	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        bool balance(size_type totalP, const unsigned int nstep) {$/;"	f	class:LoadBalancer
balance	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    bool balance(unsigned int totalP) {  \/\/, int timestep = 1) {$/;"	f	class:ChargedParticles
balance	src/PartBunch/LoadBalancer.hpp	/^    bool balance(size_type totalP, const unsigned int nstep) {$/;"	f	class:LoadBalancer
base	src/AbstractObjects/Attribute.h	/^    std::shared_ptr<AttributeBase> base;$/;"	m	class:Attribute
base	tests/opal_src/Elements/OpalPolynomialTimeDependenceTest.cpp	/^    BGeometryBase* base;$/;"	m	class:TestElement	file:
base64_chars	src/Utilities/Util.cpp	/^    static const std::string base64_chars =$/;"	m	namespace:Util	file:
base64_decode	src/Utilities/Util.cpp	/^    std::string base64_decode(std::string const& encoded_string) {$/;"	f	namespace:Util
base64_encode	src/Utilities/Util.cpp	/^    std::string base64_encode(const std::string& string_to_encode) {$/;"	f	namespace:Util
bbLength_m	src/AbsBeamline/VerticalFFAMagnet.h	/^    double bbLength_m   = 0.;$/;"	m	class:VerticalFFAMagnet
bbMax_m	src/Fields/SectorField.h	/^    std::vector<double> bbMax_m;$/;"	m	class:SectorField
bbMin_m	src/Fields/SectorField.h	/^    std::vector<double> bbMin_m;$/;"	m	class:SectorField
bb_m	src/Utilities/MSLang.h	/^        BoundingBox2D bb_m;$/;"	m	struct:mslang::Base
bb_m	src/Utilities/MSLang/QuadTree.h	/^        BoundingBox2D bb_m;$/;"	m	struct:mslang::QuadTree
bc_m	src/.Solvers/FFTPoissonSolver.h	/^    BConds<double, 3, Mesh_t, Center_t> bc_m;$/;"	m	class:FFTPoissonSolver
bc_m	src/Algorithms/.PartBunch.h	/^    BConds<double, 3, Mesh_t, Center_t> bc_m;$/;"	m	class:PartBunch
bcz_m	src/.Solvers/FFTPoissonSolver.h	/^    bool bcz_m;$/;"	m	class:FFTPoissonSolver
beamHaloBoundary	src/Utilities/Options.cpp	/^    double beamHaloBoundary = 0;$/;"	m	namespace:Options	file:
beamPRInit_m	src/AbsBeamline/Ring.h	/^    double beamPRInit_m;$/;"	m	class:Ring
beamPhiInit_m	src/AbsBeamline/Ring.h	/^    double beamPhiInit_m;$/;"	m	class:Ring
beamRInit_m	src/AbsBeamline/Ring.h	/^    double beamRInit_m;$/;"	m	class:Ring
beamline_list	src/Algorithms/ParallelTracker.h	/^    typedef std::list<type_pair*> beamline_list;$/;"	t	class:ParallelTracker
bega	src/Algorithms/ParallelTracker.h	/^    double bega;$/;"	m	class:ParallelTracker
begin	src/AbsBeamline/AttributeSet.h	/^inline AttributeSet::const_iterator AttributeSet::begin() const$/;"	f	class:AttributeSet
begin	src/AbsBeamline/SpecificElementVisitor.h	/^typename SpecificElementVisitor<ELEM>::const_iterator_t SpecificElementVisitor<ELEM>::begin() const{$/;"	f	class:SpecificElementVisitor
begin	src/AbsBeamline/SpecificElementVisitor.h	/^typename SpecificElementVisitor<ELEM>::iterator_t SpecificElementVisitor<ELEM>::begin(){$/;"	f	class:SpecificElementVisitor
begin	src/AbstractObjects/Directory.cpp	/^ObjectDir::const_iterator Directory::begin() const {$/;"	f	class:Directory
begin	src/AbstractObjects/Directory.cpp	/^ObjectDir::iterator Directory::begin() {$/;"	f	class:Directory
begin	src/Algorithms/.PartBunchBase.h	/^    ConstIterator begin() const {$/;"	f	class:PartBunch
begin	src/Algorithms/.PartBunchBase.h	/^typename PartBunch<T, Dim>::ConstIterator begin(PartBunch<T, Dim> const& bunch) {$/;"	f
begin	src/Algorithms/IndexMap.h	/^        first_type begin;$/;"	m	struct:IndexMap::Range
begin	src/Fields/Interpolation/NDGrid.h	/^Mesh::Iterator NDGrid::begin() const {$/;"	f	class:interpolation::NDGrid
begin	src/Fields/Interpolation/ThreeDGrid.cpp	/^Mesh::Iterator ThreeDGrid::begin() const {$/;"	f	class:interpolation::ThreeDGrid
bends	src/AbsBeamline/Corrector.cpp	/^bool Corrector::bends() const {$/;"	f	class:Corrector
bends	src/AbsBeamline/Drift.cpp	/^bool Drift::bends() const {$/;"	f	class:Drift
bends	src/AbsBeamline/Marker.cpp	/^bool Marker::bends() const {$/;"	f	class:Marker
bends	src/AbsBeamline/Monitor.cpp	/^bool Monitor::bends() const {$/;"	f	class:Monitor
bends	src/AbsBeamline/Multipole.cpp	/^bool Multipole::bends() const {$/;"	f	class:Multipole
bends	src/AbsBeamline/MultipoleT.cpp	/^bool MultipoleT::bends() const {$/;"	f	class:MultipoleT
bends	src/AbsBeamline/MultipoleTBase.h	/^inline bool MultipoleTBase::bends() const {$/;"	f	class:MultipoleTBase
bends	src/AbsBeamline/Offset.cpp	/^bool Offset::bends() const {$/;"	f	class:Offset
bends	src/AbsBeamline/PluginElement.cpp	/^bool PluginElement::bends() const {$/;"	f	class:PluginElement
bends	src/AbsBeamline/RFCavity.cpp	/^bool RFCavity::bends() const {$/;"	f	class:RFCavity
bends	src/AbsBeamline/ScalingFFAMagnet.cpp	/^bool ScalingFFAMagnet::bends() const {$/;"	f	class:ScalingFFAMagnet
bends	src/AbsBeamline/Solenoid.cpp	/^bool Solenoid::bends() const {$/;"	f	class:Solenoid
bends	src/AbsBeamline/TravelingWave.cpp	/^bool TravelingWave::bends() const {$/;"	f	class:TravelingWave
bends	src/AbsBeamline/VerticalFFAMagnet.h	/^    inline bool bends() const {$/;"	f	class:VerticalFFAMagnet
bends	tests/opal_src/Utilities/MockComponent.h	/^    bool bends() const {return true;}$/;"	f	class:MockComponent
bends	tests/opal_src/Utilities/MockComponent.h	/^    bool bends() const {return true;}$/;"	f	class:MockComponent2
beryllium	src/Physics/Material.cpp	/^    auto beryllium     = Material::addMaterial("Beryllium",$/;"	m	namespace:__anon18	file:
beta	src/Algorithms/PartData.h	/^    double beta;     \/\/ particle velocity divided by c.$/;"	m	class:PartData
bevel_2d	src/Structure/BoundaryGeometry.cpp	/^static inline int bevel_2d(const Vector_t<double, 3>& p) {$/;"	f	file:
bevel_3d	src/Structure/BoundaryGeometry.cpp	/^static inline int bevel_3d(const Vector_t<double, 3>& p) {$/;"	f	file:
bfunc	src/Utilities/MSLang/matheval.hpp	/^            } bfunc;$/;"	m	struct:matheval::detail::grammar	typeref:struct:matheval::detail::grammar::bfunc_
bfunc_	src/Utilities/MSLang/matheval.hpp	/^                bfunc_()$/;"	f	struct:matheval::detail::grammar::bfunc_
bfunc_	src/Utilities/MSLang/matheval.hpp	/^            struct bfunc_$/;"	s	struct:matheval::detail::grammar
bg_m	src/AbstractObjects/OpalData.cpp	/^    BoundaryGeometry* bg_m;$/;"	m	struct:OpalDataImpl	file:
bgeom_m	src/.Solvers/ArbitraryDomain.h	/^    BoundaryGeometry *bgeom_m;$/;"	m	class:ArbitraryDomain
bgeometry_m	src/AbsBeamline/ElementBase.h	/^    BoundaryGeometry* bgeometry_m;$/;"	m	class:ElementBase
bias	src/Channels/IndexedChannel.h	/^    int bias;$/;"	m	class:IndexedChannel
binCountStatic	src/PartBunch/Binning/ParallelReduceTools.h	/^        static IndexType binCountStatic;$/;"	m	struct:ParticleBinning::HostArrayReduction
binCountStatic	src/PartBunch/Binning/ParallelReduceTools.h	/^    IndexType HostArrayReduction<SizeType, IndexType>::binCountStatic = 10;$/;"	m	class:ParticleBinning::HostArrayReduction
binWidth_m	src/PartBunch/Binning/AdaptBins.h	/^        value_type binWidth_m;                 \/\/\/< Width of each bin.$/;"	m	class:ParticleBinning::AdaptBins
binWidth_m	src/Structure/PeakFinder.h	/^    double binWidth_m;$/;"	m	class:PeakFinder
binWidths_m	src/PartBunch/Binning/BinHisto.h	/^        width_view_type binWidths_m;      \/\/\/ \\brief View storing the widths of the bins.$/;"	m	class:ParticleBinning::Histogram
binary_expr_	src/Utilities/MSLang/matheval.hpp	/^        struct binary_expr_ {$/;"	s	namespace:matheval::detail
binary_op	src/Utilities/MSLang/matheval.hpp	/^            binary_op(op_t op, expr_ast<real_t> lhs, expr_ast<real_t> rhs)$/;"	f	struct:matheval::detail::binary_op
binary_op	src/Utilities/MSLang/matheval.hpp	/^        struct binary_op$/;"	s	namespace:matheval::detail
bingamma_m	src/PartBunch/PartBunch.hpp	/^    std::unique_ptr<double[]> bingamma_m;$/;"	m	class:PartBunch
binsEmitted_m	src/Algorithms/PartBins.h	/^    std::unique_ptr<bool[]> binsEmitted_m;$/;"	m	class:PartBins
bins_m	src/Algorithms/PartBins.h	/^    int bins_m;$/;"	m	class:PartBins
bins_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    std::shared_ptr<AdaptBins_t> bins_m; \/\/ TODO: Binning$/;"	m	class:AlpineManager
bins_m	src/PartBunch/PartBunch.hpp	/^    std::shared_ptr<AdaptBins_t> bins_m; \/\/ added by liemen_a for AdaptBins class!$/;"	m	class:PartBunch
block	src/Track/Track.cpp	/^Track* Track::block = 0;$/;"	m	class:Track	file:
block	src/Track/Track.h	/^    static Track* block;$/;"	m	class:Track
bmCavityTypeString_s	src/AbsBeamline/RFCavity.cpp	/^const boost::bimap<CavityType, std::string> RFCavity::bmCavityTypeString_s =$/;"	m	class:RFCavity	file:
bmCavityTypeString_s	src/AbsBeamline/RFCavity.h	/^    static const boost::bimap<CavityType, std::string> bmCavityTypeString_s;$/;"	m	class:RFCavity
bmDumpFrameString_s	src/BasicActions/Option.cpp	/^const boost::bimap<DumpFrame, std::string> Option::bmDumpFrameString_s =$/;"	m	class:Option	file:
bmDumpFrameString_s	src/BasicActions/Option.h	/^    static const boost::bimap<DumpFrame, std::string> bmDumpFrameString_s;$/;"	m	class:Option
bmParticleType_s	src/Physics/ParticleProperties.cpp	/^const boost::bimap<ParticleType, std::string> ParticleProperties::bmParticleType_s =$/;"	m	class:ParticleProperties	file:
bmParticleType_s	src/Physics/ParticleProperties.h	/^    static const boost::bimap<ParticleType, std::string> bmParticleType_s;$/;"	m	class:ParticleProperties
body	src/Lines/LineTemplate.h	/^    MacroStream body;$/;"	m	class:LineTemplate
body	src/Lines/SequenceTemplate.h	/^    MacroStream body;$/;"	m	class:SequenceTemplate
body	src/OpalParser/MacroCmd.h	/^    std::shared_ptr<MacroStream> body;$/;"	m	class:MacroCmd
body	src/OpalParser/MacroStream.h	/^    TokenList body;$/;"	m	class:MacroStream
boolToUpperString	src/Utilities/Util.cpp	/^    std::string boolToUpperString(const bool& b) {$/;"	f	namespace:Util
boolVectorToUpperString	src/Utilities/Util.cpp	/^    std::string boolVectorToUpperString(const std::vector<bool>& b) {$/;"	f	namespace:Util
boolean	src/OpalParser/Statement.cpp	/^bool Statement::boolean(bool &value) {$/;"	f	class:Statement
boroncarbide	src/Physics/Material.cpp	/^    auto boroncarbide  = Material::addMaterial("BoronCarbide",$/;"	m	namespace:__anon18	file:
boundingBoxLength_m	src/AbsBeamline/MultipoleT.h	/^    double boundingBoxLength_m;$/;"	m	class:MultipoleT
boundingBoxLength_m	src/AbsBeamline/MultipoleTBase.h	/^    double boundingBoxLength_m;$/;"	m	class:MultipoleTBase
boundp	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::boundp() {$/;"	f	class:PartBunch
boundp	src/PartBunch/PartBunch.hpp	/^    void boundp() {$/;"	f	class:PartBunch
boundpDestroyFreq	src/Utilities/Options.cpp	/^    int boundpDestroyFreq = 10;$/;"	m	namespace:Options	file:
boundp_destroyT	src/Algorithms/.PartBunchBase.hpp	/^size_t PartBunch<T, Dim>::boundp_destroyT() {$/;"	f	class:PartBunch
boundp_destroyT	src/PartBunch/PartBunch.hpp	/^    size_t boundp_destroyT() {$/;"	f	class:PartBunch
buffer_m	src/Fields/Fieldmap.cpp	/^char Fieldmap::buffer_m[READ_BUFFER_LENGTH];$/;"	m	class:Fieldmap	file:
buffer_m	src/Fields/Fieldmap.h	/^    static char buffer_m[READ_BUFFER_LENGTH];$/;"	m	class:Fieldmap
buffer_m	src/Structure/IpplInfoWrapper.h	/^    char* buffer_m;$/;"	m	class:IpplInfoWrapper
buffer_name	src/OpalParser/Statement.h	/^    std::string buffer_name;$/;"	m	class:Statement
buildGrid	src/BasicActions/DumpEMFields.cpp	/^void DumpEMFields::buildGrid() {$/;"	f	class:DumpEMFields
buildGrid	src/BasicActions/DumpFields.cpp	/^void DumpFields::buildGrid() {$/;"	f	class:DumpFields
buildORS	tests/classic_src/Utilities/RingSectionTest.cpp	/^    RingSection buildORS(double r, double phi1, double phi2) {$/;"	f	namespace:__anon2
buildRingSections	src/AbsBeamline/Ring.cpp	/^void Ring::buildRingSections() {$/;"	f	class:Ring
buildTestOffset	tests/classic_src/AbsBeamline/OffsetTest.cpp	/^void buildTestOffset(Vector_t endPos, Vector_t endDir,$/;"	f
buildUp	src/Utilities/MSLang/QuadTree.cpp	/^    void QuadTree::buildUp() {$/;"	f	class:mslang::QuadTree
build_gtest	tests/tools/install_gtest.bash	/^build_gtest() {$/;"	f
build_matrix	src/Fields/Interpolation/MMatrix.cpp	/^void MMatrix<double>::build_matrix(size_t i, size_t j)$/;"	f	class:interpolation::MMatrix
build_matrix	src/Fields/Interpolation/MMatrix.cpp	/^void MMatrix<double>::build_matrix(size_t i, size_t j, double* data)$/;"	f	class:interpolation::MMatrix
build_matrix	src/Fields/Interpolation/MMatrix.cpp	/^void MMatrix<m_complex>::build_matrix(size_t i, size_t j)$/;"	f	class:interpolation::MMatrix
build_matrix	src/Fields/Interpolation/MMatrix.cpp	/^void MMatrix<m_complex>::build_matrix(size_t i, size_t j, m_complex* data)$/;"	f	class:interpolation::MMatrix
build_vector	src/Fields/Interpolation/MVector.cpp	/^void MVector<Tmplt>::build_vector   ( const Tmplt* data_begin, const Tmplt* data_end )$/;"	f	class:interpolation::MVector
build_vector	src/Fields/Interpolation/MVector.cpp	/^void MVector<double>::build_vector   ( size_t size )$/;"	f	class:interpolation::MVector
build_vector	src/Fields/Interpolation/MVector.cpp	/^void MVector<m_complex>::build_vector( size_t size )$/;"	f	class:interpolation::MVector
buildupFieldList	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::buildupFieldList($/;"	f	class:ParallelTracker
builtin	src/AbstractObjects/Object.h	/^    bool builtin;$/;"	m	class:Object
bunch	src/Track/Track.h	/^    PartBunch_t* bunch;$/;"	m	class:Track
bunchIsAllocated	src/AbstractObjects/OpalData.cpp	/^void OpalData::bunchIsAllocated() {$/;"	f	class:OpalData
bunchLocalNum_m	src/PartBunch/PartBunch.hpp	/^    std::vector<size_t> bunchLocalNum_m;$/;"	m	class:PartBunch
bunchNumber_m	src/Structure/LossDataSink.h	/^    std::vector<size_t> bunchNumber_m;$/;"	m	class:LossDataSink
bunchTotalNum_m	src/PartBunch/PartBunch.hpp	/^    std::vector<size_t> bunchTotalNum_m;$/;"	m	class:PartBunch
bunchUpdate	src/PartBunch/PartBunch.cpp	/^void PartBunch<double,3>::bunchUpdate() {$/;"	f	class:PartBunch
bunch_m	src/AbstractObjects/OpalData.cpp	/^    PartBunch_t* bunch_m;$/;"	m	struct:OpalDataImpl	file:
bunch_m	src/Algorithms/.PartBunchBase.h	/^        PartBunch const* bunch_m;$/;"	m	class:PartBunch::ConstIterator
bunch_m	src/PartBunch/Binning/AdaptBins.h	/^        std::shared_ptr<BunchType> bunch_m;    \/\/\/< Shared pointer to the particle container.$/;"	m	class:ParticleBinning::AdaptBins
c	src/Physics/Physics.h	/^    constexpr double c          = 299792458.0;$/;"	m	namespace:Physics
cZero	src/Utilities/Options.cpp	/^    bool cZero = false;$/;"	m	namespace:Options	file:
c_data	src/Utilities/Util.h	/^    T const* c_data(std::vector<T, A> const& v) {$/;"	f	namespace:Util
c_data	src/Utilities/Util.h	/^    T* c_data(std::vector<T, A>& v) {$/;"	f	namespace:Util
c_mmtns	src/Steppers/RK4.h	/^    const double c_mmtns = Physics::c * Units::m2mm \/ Units::s2ns;$/;"	m	class:RK4
c_mtns	src/Steppers/RK4.h	/^    const double c_mtns = Physics::c \/ Units::s2ns;$/;"	m	class:RK4
c_value	src/OpalParser/Token.h	/^    char     c_value;$/;"	m	class:Token
calcBeamParameters	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::calcBeamParameters() {$/;"	f	class:PartBunch
calcBeamParameters	src/PartBunch/PartBunch.cpp	/^void PartBunch<double,3>::calcBeamParameters() {$/;"	f	class:PartBunch
calcCurlB	tests/classic_src/AbsBeamline/DipoleFieldTest.cpp	/^vector<double> calcCurlB(Vector_t &R, Vector_t B, double stepSize, SBendRep* dummyField)$/;"	f
calcCurlB	tests/classic_src/AbsBeamline/MultipoleTTest.cpp	/^vector<double> calcCurlB(Vector_t &R, Vector_t B, double stepSize, Component* dummyField)$/;"	f
calcDebyeLength	src/PartBunch/PartBunch.hpp	/^    void calcDebyeLength() {$/;"	f	class:PartBunch
calcDivB	tests/classic_src/AbsBeamline/DipoleFieldTest.cpp	/^double calcDivB(Vector_t &R, Vector_t B, double stepSize, SBendRep* dummyField )$/;"	f
calcDivB	tests/classic_src/AbsBeamline/MultipoleTTest.cpp	/^double calcDivB(Vector_t &R, Vector_t B, double stepSize, Component* dummyField )$/;"	f
calcEMean	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::calcEMean() {$/;"	f	class:PartBunch
calcExtrema	src/Algorithms/PartBins.cpp	/^void PartBins::calcExtrema() {$/;"	f	class:PartBins
calcGammas	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::calcGammas() {$/;"	f	class:PartBunch
calcGammas	src/PartBunch/PartBunch.hpp	/^    void calcGammas() {$/;"	f	class:PartBunch
calcHBins	src/Algorithms/PartBins.cpp	/^void PartBins::calcHBins() {$/;"	f	class:PartBins
calcLineDensity	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::calcLineDensity(unsigned int nBins,$/;"	f	class:PartBunch
calcLineDensity	src/PartBunch/PartBunch.hpp	/^    void calcLineDensity($/;"	f	class:PartBunch
calcMeanPhi	src/PartBunch/PartBunch.hpp	/^    double calcMeanPhi() {$/;"	f	class:PartBunch
calcNumPartsOutside	src/Algorithms/.PartBunchBase.hpp	/^size_t PartBunch<T, Dim>::calcNumPartsOutside(Vector_t<double, 3> x) {$/;"	f	class:PartBunch
calcNumPartsOutside	src/PartBunch/PartBunch.hpp	/^    size_t calcNumPartsOutside(Vector_t<double, Dim> x) {$/;"	f	class:PartBunch
calcReferenceTrajectory	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^std::vector<double> CoordinateTransform::calcReferenceTrajectory($/;"	f	class:coordinatetransform::CoordinateTransform
calcSCoordinate	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^void CoordinateTransform::calcSCoordinate(const double &xlab,$/;"	f	class:coordinatetransform::CoordinateTransform
calcXCoordinate	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^void CoordinateTransform::calcXCoordinate(const double &xlab,$/;"	f	class:coordinatetransform::CoordinateTransform
calc_derivative	src/Filters/FixedFFTLowPass.cpp	/^void FixedFFTLowPassFilter::calc_derivative(std::vector<double> &LineDensity, const double &h) {$/;"	f	class:FixedFFTLowPassFilter
calc_derivative	src/Filters/RelativeFFTLowPass.cpp	/^void RelativeFFTLowPassFilter::calc_derivative(std::vector<double> &LineDensity, const double &h) {$/;"	f	class:RelativeFFTLowPassFilter
calc_derivative	src/Filters/SavitzkyGolay.cpp	/^void SavitzkyGolayFilter::calc_derivative(std::vector<double> &LineDensity, const double &\/*h*\/) {$/;"	f	class:SavitzkyGolayFilter
calc_derivative	src/Filters/Stencil.cpp	/^void StencilFilter::calc_derivative(std::vector<double> &LineDensity, const double &h) {$/;"	f	class:StencilFilter
calc_derivative	src/Utilities/OpalFilter.h	/^void OpalFilter::calc_derivative(std::vector<double>& histogram, const double& hz) {$/;"	f	class:OpalFilter
calculate	src/.Solvers/FFTPoissonSolver.cpp	/^    static void calculate(Vector_t<T, 3>& hrsq, FT& grn, FT2* grnI) {$/;"	f	struct:SpecializedGreensFunction
calculateAngle	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::calculateAngle(double x, double y) {$/;"	f	class:PartBunch
calculateAngle	src/PartBunch/PartBunch.hpp	/^    double calculateAngle(double x, double y) {$/;"	f	class:PartBunch
calculateDfCoefficients	src/AbsBeamline/ScalingFFAMagnet.cpp	/^void ScalingFFAMagnet::calculateDfCoefficients() {$/;"	f	class:ScalingFFAMagnet
calculateDfCoefficients	src/AbsBeamline/VerticalFFAMagnet.cpp	/^void VerticalFFAMagnet::calculateDfCoefficients() {$/;"	f	class:VerticalFFAMagnet
calculateIncidentAngle	src/AbsBeamline/PluginElement.cpp	/^double PluginElement::calculateIncidentAngle(double xp, double yp) const {$/;"	f	class:PluginElement
canReplaceBy	src/AbstractObjects/Action.cpp	/^bool Action::canReplaceBy(Object *) {$/;"	f	class:Action
canReplaceBy	src/AbstractObjects/Element.cpp	/^bool Element::canReplaceBy(Object *object) {$/;"	f	class:Element
canReplaceBy	src/AbstractObjects/Object.cpp	/^bool Object::canReplaceBy(Object *) {$/;"	f	class:Object
canReplaceBy	src/AbstractObjects/Table.cpp	/^bool Table::canReplaceBy(Object *\/*newObject*\/) {$/;"	f	class:Table
canReplaceBy	src/Distribution/Distribution.cpp	/^bool Distribution::canReplaceBy(Object* object) {$/;"	f	class:Distribution
canReplaceBy	src/Structure/Beam.cpp	/^bool Beam::canReplaceBy(Object* object) {$/;"	f	class:Beam
canReplaceBy	src/Structure/BoundaryGeometry.cpp	/^bool BoundaryGeometry::canReplaceBy(Object* object) {$/;"	f	class:BoundaryGeometry
canReplaceBy	src/Utilities/OpalFilter.cpp	/^bool OpalFilter::canReplaceBy(Object* object) {$/;"	f	class:OpalFilter
canReplaceBy	src/ValueDefinitions/BoolConstant.cpp	/^bool BoolConstant::canReplaceBy(Object *) {$/;"	f	class:BoolConstant
canReplaceBy	src/ValueDefinitions/RealConstant.cpp	/^bool RealConstant::canReplaceBy(Object*) {$/;"	f	class:RealConstant
canReplaceBy	src/ValueDefinitions/RealVariable.cpp	/^bool RealVariable::canReplaceBy(Object *object) {$/;"	f	class:RealVariable
canReplaceBy	src/ValueDefinitions/RealVector.cpp	/^bool RealVector::canReplaceBy(Object *object) {$/;"	f	class:RealVector
canReplaceBy	src/ValueDefinitions/StringConstant.cpp	/^bool StringConstant::canReplaceBy(Object*) {$/;"	f	class:StringConstant
caseIgnore	src/Utilities/RegularExpression.h	/^    bool caseIgnore;$/;"	m	class:RegularExpression
cav1	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^    VariableRFCavityFringeField cav1;$/;"	m	class:VariableRFCavityFringeFieldTest	file:
cav2	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^    VariableRFCavityFringeField cav2;$/;"	m	class:VariableRFCavityFringeFieldTest	file:
cavities_m	src/Algorithms/Tracker.h	/^    FieldList cavities_m;$/;"	m	class:Tracker
cellLength_m	src/AbsBeamline/TravelingWave.h	/^    double cellLength_m;$/;"	m	class:TravelingWave
center	src/.Solvers/IrregularDomain.h	/^        T center;  \/\/ x,   y,   z$/;"	m	struct:IrregularDomain::Stencil
centerMass_m	src/Distribution/LaserProfile.h	/^    Vector_t<double, 3> centerMass_m;$/;"	m	class:LaserProfile
center_m	src/Utilities/MSLang/BoundingBox2D.h	/^        Vector_t<double, 3> center_m;$/;"	m	struct:mslang::BoundingBox2D
centre_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    Vector_t<double, 3> centre_m;$/;"	m	class:ScalingFFAMagnet
centroid_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 6> centroid_m;$/;"	m	class:DistributionMoments
changeDT	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::changeDT(bool backTrack) {$/;"	f	class:ParallelTracker
changeH5Wrapper	src/Structure/DataSink.cpp	/^void DataSink::changeH5Wrapper(H5PartWrapper* h5wrapper) {$/;"	f	class:DataSink
changeH5Wrapper	src/Structure/H5Writer.h	/^inline void H5Writer::changeH5Wrapper(H5PartWrapper* h5wrapper) {$/;"	f	class:H5Writer
changeWidth	src/AbsBeamline/PluginElement.cpp	/^void PluginElement::changeWidth($/;"	f	class:PluginElement
changes	src/changes.cpp	/^    std::map<unsigned int, std::string> changes;$/;"	m	namespace:Versions	file:
charge	src/Algorithms/PartData.h	/^    double charge;   \/\/ Particle charge.$/;"	m	class:PartData
charge_m	src/AbstractObjects/OpalParticle.h	/^    double charge_m;$/;"	m	class:OpalParticle
charge_m	src/Algorithms/OpalParticle.h	/^    double charge_m;$/;"	m	class:OpalParticle
check	src/AbsBeamline/PluginElement.cpp	/^bool PluginElement::check($/;"	f	class:PluginElement
check	tests/ippl_src/Field/Field.cpp	/^    void check( Field<int,D3>& f, int s1, int s2, int s3, int \/*test*\/)$/;"	f	namespace:__anon10
checkAndAddOutputFileName	src/AbstractObjects/OpalData.cpp	/^void OpalData::checkAndAddOutputFileName(const std::string& outfn) {$/;"	f	class:OpalData
checkAndClose	src/AbsBeamline/Ring.cpp	/^void Ring::checkAndClose() {$/;"	f	class:Ring
checkElementLengths	src/Algorithms/OrbitThreader.cpp	/^void OrbitThreader::checkElementLengths(const std::set<std::shared_ptr<Component>>& fields) {$/;"	f	class:OrbitThreader
checkFileData	src/Fields/FM1DDynamic.cpp	/^bool FM1DDynamic::checkFileData(std::ifstream& fieldFile, bool parsingPassed) {$/;"	f	class:FM1DDynamic
checkFileData	src/Fields/FM1DDynamic_fast.cpp	/^bool FM1DDynamic_fast::checkFileData(std::ifstream& fieldFile, bool parsingPassed) {$/;"	f	class:FM1DDynamic_fast
checkFileData	src/Fields/FM1DElectroStatic.cpp	/^bool FM1DElectroStatic::checkFileData(std::ifstream& fieldFile, bool parsingPassed) {$/;"	f	class:FM1DElectroStatic
checkFileData	src/Fields/FM1DElectroStatic_fast.cpp	/^bool FM1DElectroStatic_fast::checkFileData(std::ifstream& fieldFile, bool parsingPassed) {$/;"	f	class:FM1DElectroStatic_fast
checkFileData	src/Fields/FM1DMagnetoStatic.cpp	/^bool FM1DMagnetoStatic::checkFileData(std::ifstream& fieldFile, bool parsingPassed) {$/;"	f	class:FM1DMagnetoStatic
checkFileData	src/Fields/FM1DMagnetoStatic_fast.cpp	/^bool FM1DMagnetoStatic_fast::checkFileData(std::ifstream& fieldFile, bool parsingPassed) {$/;"	f	class:FM1DMagnetoStatic_fast
checkInt	src/BasicActions/DumpEMFields.cpp	/^void DumpEMFields::checkInt(double real, std::string name, double tolerance) {$/;"	f	class:DumpEMFields
checkInt	src/BasicActions/DumpFields.cpp	/^void DumpFields::checkInt(double real, std::string name, double tolerance) {$/;"	f	class:DumpFields
checkMandatories	src/Utilities/SDDSParser/column.hpp	/^        bool checkMandatories() const$/;"	f	struct:SDDS::column
checkMandatories	src/Utilities/SDDSParser/parameter.hpp	/^        bool checkMandatories() const$/;"	f	struct:SDDS::parameter
checkMap	src/Fields/Fieldmap.cpp	/^void Fieldmap::checkMap($/;"	f	class:Fieldmap
checkMidplane	src/AbsBeamline/Ring.cpp	/^void Ring::checkMidplane(Euclid3D delta) const {$/;"	f	class:Ring
checkPoint	src/AbsBeamline/PluginElement.cpp	/^int PluginElement::checkPoint(const double& x, const double& y) const {$/;"	f	class:PluginElement
checkPoint	src/Fields/Interpolation/VectorMap.h	/^bool VectorMap::checkPoint(const std::vector<double>& point) const {$/;"	f	class:interpolation::VectorMap
checkValue	src/Fields/Interpolation/VectorMap.h	/^bool VectorMap::checkValue(const std::vector<double>& value) const {$/;"	f	class:interpolation::VectorMap
check_dependencies	tests/tools/install_gtest.bash	/^check_dependencies() {$/;"	f
check_line	src/Structure/BoundaryGeometry.cpp	/^static inline int check_line($/;"	f	file:
check_point	src/Structure/BoundaryGeometry.cpp	/^static inline int check_point($/;"	f	file:
clear	src/AbstractObjects/Object.cpp	/^void Object::clear() {$/;"	f	class:Object
clear	src/Algorithms/StepSizeConfig.h	/^void StepSizeConfig::clear() {$/;"	f	class:StepSizeConfig
clear	src/BeamlineGeometry/Vector3D.cpp	/^void Vector3D::clear() {$/;"	f	class:Vector3D
clear	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^void Interpolator3dGridTo1d::clear() {$/;"	f	class:interpolation::Interpolator3dGridTo1d
clear	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^void Interpolator3dGridTo3d::clear() {$/;"	f	class:interpolation::Interpolator3dGridTo3d
clear	src/Utilities/SDDSParser/file.hpp	/^        void clear() {$/;"	f	struct:SDDS::file
clearDictionary	src/Fields/Fieldmap.cpp	/^void Fieldmap::clearDictionary() {$/;"	f	class:Fieldmap
clearFieldCache	src/Fields/SectorMagneticFieldMap.cpp	/^void SectorMagneticFieldMap::clearFieldCache() {$/;"	f	class:SectorMagneticFieldMap
clear_files	tests/opal_src/BasicActions/DumpEMFieldsTest.cpp	/^void clear_files(std::set<std::string> const& files) {$/;"	f	namespace:DumpEMFieldsTest
clear_files	tests/opal_src/BasicActions/DumpFieldsTest.cpp	/^void clear_files(std::set<std::string> const& files) {$/;"	f	namespace:test
cloTuneOnly	src/Utilities/Options.cpp	/^    bool cloTuneOnly = false;$/;"	m	namespace:Options	file:
clone	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^AsymmetricEnge* AsymmetricEnge::clone() const {$/;"	f	class:endfieldmodel::AsymmetricEnge
clone	src/AbsBeamline/EndFieldModel/Enge.cpp	/^Enge* Enge::clone() const {$/;"	f	class:endfieldmodel::Enge
clone	src/AbsBeamline/EndFieldModel/Tanh.cpp	/^Tanh* Tanh::clone() const {$/;"	f	class:endfieldmodel::Tanh
clone	src/AbsBeamline/MultipoleT.cpp	/^ElementBase* MultipoleT::clone() const {$/;"	f	class:MultipoleT
clone	src/AbsBeamline/MultipoleTCurvedConstRadius.cpp	/^ElementBase* MultipoleTCurvedConstRadius::clone() const {$/;"	f	class:MultipoleTCurvedConstRadius
clone	src/AbsBeamline/MultipoleTCurvedVarRadius.cpp	/^ElementBase* MultipoleTCurvedVarRadius::clone() const {$/;"	f	class:MultipoleTCurvedVarRadius
clone	src/AbsBeamline/MultipoleTStraight.cpp	/^ElementBase* MultipoleTStraight::clone() const {$/;"	f	class:MultipoleTStraight
clone	src/AbsBeamline/Offset.cpp	/^ElementBase* Offset::clone() const {$/;"	f	class:Offset
clone	src/AbsBeamline/ScalingFFAMagnet.cpp	/^ScalingFFAMagnet* ScalingFFAMagnet::clone() const {$/;"	f	class:ScalingFFAMagnet
clone	src/AbsBeamline/VerticalFFAMagnet.cpp	/^ElementBase* VerticalFFAMagnet::clone() const {$/;"	f	class:VerticalFFAMagnet
clone	src/AbstractObjects/AttributeHandler.cpp	/^AttributeHandler *AttributeHandler::clone() const {$/;"	f	class:AttributeHandler
clone	src/Algorithms/PolynomialTimeDependence.h	/^    PolynomialTimeDependence* clone() {$/;"	f	class:PolynomialTimeDependence
clone	src/Algorithms/SplineTimeDependence.cpp	/^SplineTimeDependence* SplineTimeDependence::clone() {$/;"	f	class:SplineTimeDependence
clone	src/BasicActions/Call.cpp	/^Call* Call::clone(const std::string& name) {$/;"	f	class:Call
clone	src/BasicActions/DumpEMFields.cpp	/^DumpEMFields* DumpEMFields::clone(const std::string& name) {$/;"	f	class:DumpEMFields
clone	src/BasicActions/DumpFields.cpp	/^DumpFields* DumpFields::clone(const std::string& name) {$/;"	f	class:DumpFields
clone	src/BasicActions/Echo.cpp	/^Echo* Echo::clone(const std::string& name) {$/;"	f	class:Echo
clone	src/BasicActions/Help.cpp	/^Help* Help::clone(const std::string& name) {$/;"	f	class:Help
clone	src/BasicActions/Option.cpp	/^Option* Option::clone(const std::string& name) {$/;"	f	class:Option
clone	src/BasicActions/PSystem.cpp	/^PSystem* PSystem::clone(const std::string& name) {$/;"	f	class:PSystem
clone	src/BasicActions/Quit.cpp	/^Quit* Quit::clone(const std::string& name) {$/;"	f	class:Quit
clone	src/BasicActions/Select.cpp	/^Select* Select::clone(const std::string& name) {$/;"	f	class:Select
clone	src/BasicActions/Stop.cpp	/^Stop* Stop::clone(const std::string& name) {$/;"	f	class:Stop
clone	src/BasicActions/System.cpp	/^System* System::clone(const std::string& name) {$/;"	f	class:System
clone	src/BasicActions/Title.cpp	/^Title* Title::clone(const std::string& name) {$/;"	f	class:Title
clone	src/BasicActions/Value.cpp	/^Value* Value::clone(const std::string& name) {$/;"	f	class:Value
clone	src/BeamlineCore/DriftRep.cpp	/^ElementBase *DriftRep::clone() const {$/;"	f	class:DriftRep
clone	src/BeamlineCore/MarkerRep.cpp	/^ElementBase *MarkerRep::clone() const {$/;"	f	class:MarkerRep
clone	src/BeamlineCore/MonitorRep.cpp	/^ElementBase *MonitorRep::clone() const {$/;"	f	class:MonitorRep
clone	src/BeamlineCore/MultipoleRep.cpp	/^ElementBase *MultipoleRep::clone() const {$/;"	f	class:MultipoleRep
clone	src/BeamlineCore/ProbeRep.cpp	/^ElementBase *ProbeRep::clone() const {$/;"	f	class:ProbeRep
clone	src/BeamlineCore/RFCavityRep.cpp	/^ElementBase *RFCavityRep::clone() const {$/;"	f	class:RFCavityRep
clone	src/BeamlineCore/SolenoidRep.cpp	/^ElementBase *SolenoidRep::clone() const {$/;"	f	class:SolenoidRep
clone	src/BeamlineCore/TravelingWaveRep.cpp	/^ElementBase *TravelingWaveRep::clone() const {$/;"	f	class:TravelingWaveRep
clone	src/Beamlines/TBeamline.h	/^TBeamline<T>* TBeamline<T>::clone() const {$/;"	f	class:TBeamline
clone	src/Channels/DirectChannel.h	/^inline DirectChannel *DirectChannel::clone() const {$/;"	f	class:DirectChannel
clone	src/Channels/IndexedChannel.h	/^IndexedChannel<T> *IndexedChannel<T>::clone() const {$/;"	f	class:IndexedChannel
clone	src/Channels/IndirectChannel.h	/^IndirectChannel<T> *IndirectChannel<T>::clone() const {$/;"	f	class:IndirectChannel
clone	src/Distribution/Distribution.cpp	/^Distribution* Distribution::clone(const std::string& name) {$/;"	f	class:Distribution
clone	src/Elements/OpalCavity.cpp	/^OpalCavity *OpalCavity::clone(const std::string &name) {$/;"	f	class:OpalCavity
clone	src/Elements/OpalDrift.cpp	/^OpalDrift* OpalDrift::clone(const std::string& name) {$/;"	f	class:OpalDrift
clone	src/Elements/OpalMarker.cpp	/^OpalMarker *OpalMarker::clone(const std::string &name) {$/;"	f	class:OpalMarker
clone	src/Elements/OpalMonitor.cpp	/^OpalMonitor* OpalMonitor::clone(const std::string& name) {$/;"	f	class:OpalMonitor
clone	src/Elements/OpalMultipole.cpp	/^OpalMultipole *OpalMultipole::clone(const std::string &name) {$/;"	f	class:OpalMultipole
clone	src/Elements/OpalMultipoleT.cpp	/^OpalMultipoleT *OpalMultipoleT::clone(const std::string &name) {$/;"	f	class:OpalMultipoleT
clone	src/Elements/OpalOffset/OpalGlobalCartesianOffset.cpp	/^OpalGlobalCartesianOffset* OpalGlobalCartesianOffset::clone(const std::string &name) {$/;"	f	class:OpalOffset::OpalGlobalCartesianOffset
clone	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.cpp	/^OpalGlobalCylindricalOffset* OpalGlobalCylindricalOffset::clone(const std::string &name) {$/;"	f	class:OpalOffset::OpalGlobalCylindricalOffset
clone	src/Elements/OpalOffset/OpalLocalCartesianOffset.cpp	/^OpalLocalCartesianOffset* OpalLocalCartesianOffset::clone() {$/;"	f	class:OpalOffset::OpalLocalCartesianOffset
clone	src/Elements/OpalOffset/OpalLocalCartesianOffset.cpp	/^OpalLocalCartesianOffset* OpalLocalCartesianOffset::clone(const std::string &name) {$/;"	f	class:OpalOffset::OpalLocalCartesianOffset
clone	src/Elements/OpalOffset/OpalLocalCylindricalOffset.cpp	/^OpalLocalCylindricalOffset* OpalLocalCylindricalOffset::clone(const std::string &name) {$/;"	f	class:OpalOffset::OpalLocalCylindricalOffset
clone	src/Elements/OpalProbe.cpp	/^OpalProbe* OpalProbe::clone(const std::string& name) {$/;"	f	class:OpalProbe
clone	src/Elements/OpalRingDefinition.cpp	/^OpalRingDefinition* OpalRingDefinition::clone(const std::string& name) {$/;"	f	class:OpalRingDefinition
clone	src/Elements/OpalSolenoid.cpp	/^OpalSolenoid *OpalSolenoid::clone(const std::string &name) {$/;"	f	class:OpalSolenoid
clone	src/Elements/OpalTravelingWave.cpp	/^OpalTravelingWave *OpalTravelingWave::clone(const std::string &name) {$/;"	f	class:OpalTravelingWave
clone	src/Elements/OpalVacuum.cpp	/^OpalVacuum* OpalVacuum::clone(const std::string& name) {$/;"	f	class:OpalVacuum
clone	src/Elements/OpalVerticalFFAMagnet.cpp	/^OpalVerticalFFAMagnet *OpalVerticalFFAMagnet::clone(const std::string &name) {$/;"	f	class:OpalVerticalFFAMagnet
clone	src/Expressions/AAutomatic.h	/^    AAutomatic<T> *AAutomatic<T>::clone() const {$/;"	f	class:Expressions::AAutomatic
clone	src/Expressions/ABinary.h	/^    OArray<T> *ABinary<T, U>::clone() const {$/;"	f	class:Expressions::ABinary
clone	src/Expressions/AColumn.cpp	/^    OArray<double> *AColumn::clone() const {$/;"	f	class:Expressions::AColumn
clone	src/Expressions/ADeferred.h	/^    ADeferred<T> *ADeferred<T>::clone() const {$/;"	f	class:Expressions::ADeferred
clone	src/Expressions/AList.h	/^    OArray<T> *AList<T>::clone() const {$/;"	f	class:Expressions::AList
clone	src/Expressions/ARefExpr.h	/^    OArray<T> *ARefExpr<T>::clone() const {$/;"	f	class:Expressions::ARefExpr
clone	src/Expressions/ARow.cpp	/^    OArray<double> *ARow::clone() const {$/;"	f	class:Expressions::ARow
clone	src/Expressions/ASUnary.h	/^    Scalar<T> *ASUnary<T>::clone() const {$/;"	f	class:Expressions::ASUnary
clone	src/Expressions/ATable.cpp	/^    OArray<double> *ATable::clone() const {$/;"	f	class:Expressions::ATable
clone	src/Expressions/AUnary.h	/^    OArray<T> *AUnary<T, U>::clone() const {$/;"	f	class:Expressions::AUnary
clone	src/Expressions/AValue.h	/^    AValue<T> *AValue<T>::clone() const {$/;"	f	class:Expressions::AValue
clone	src/Expressions/Indexer.h	/^    Scalar<T> *Indexer<T>::clone() const {$/;"	f	class:Expressions::Indexer
clone	src/Expressions/SAutomatic.h	/^    SAutomatic<T> *SAutomatic<T>::clone() const {$/;"	f	class:Expressions::SAutomatic
clone	src/Expressions/SBinary.h	/^    Scalar<T> *SBinary<T, U>::clone() const {$/;"	f	class:Expressions::SBinary
clone	src/Expressions/SCell.cpp	/^    Scalar<double> *SCell::clone() const {$/;"	f	class:Expressions::SCell
clone	src/Expressions/SConstant.h	/^    Scalar<T> *SConstant<T>::clone() const {$/;"	f	class:Expressions::SConstant
clone	src/Expressions/SDeferred.h	/^    SDeferred<T> *SDeferred<T>::clone() const {$/;"	f	class:Expressions::SDeferred
clone	src/Expressions/SHash.cpp	/^    Scalar<double> *SHash::clone() const {$/;"	f	class:Expressions::SHash
clone	src/Expressions/SNull.h	/^    Scalar<T> *SNull<T>::clone() const {$/;"	f	class:Expressions::SNull
clone	src/Expressions/SRefAttr.h	/^    SRefAttr<T> *SRefAttr<T>::clone() const {$/;"	f	class:Expressions::SRefAttr
clone	src/Expressions/SRefExpr.h	/^    Scalar<T> *SRefExpr<T>::clone() const {$/;"	f	class:Expressions::SRefExpr
clone	src/Expressions/SUnary.h	/^    Scalar<T> *SUnary<T, U>::clone() const {$/;"	f	class:Expressions::SUnary
clone	src/Expressions/SValue.h	/^    SValue<T> *SValue<T>::clone() const {$/;"	f	class:Expressions::SValue
clone	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^  Interpolator3dGridTo3d* clone() const$/;"	f	class:interpolation::Interpolator3dGridTo3d
clone	src/Fields/Interpolation/NDGrid.h	/^NDGrid* NDGrid::clone() {$/;"	f	class:interpolation::NDGrid
clone	src/Fields/Interpolation/PolynomialPatch.cpp	/^VectorMap* PolynomialPatch::clone() const {$/;"	f	class:interpolation::PolynomialPatch
clone	src/Fields/Interpolation/ThreeDGrid.h	/^    ThreeDGrid * clone() {return new ThreeDGrid(*this);}$/;"	f	class:interpolation::ThreeDGrid
clone	src/Fields/Interpolation/TriLinearInterpolator.h	/^TriLinearInterpolator* TriLinearInterpolator::clone() const {$/;"	f	class:interpolation::TriLinearInterpolator
clone	src/Lines/Line.cpp	/^Line *Line::clone(const std::string &name) {$/;"	f	class:Line
clone	src/Lines/LineTemplate.cpp	/^LineTemplate *LineTemplate::clone(const std::string &\/*name*\/) {$/;"	f	class:LineTemplate
clone	src/Lines/Sequence.cpp	/^Sequence* Sequence::clone(const std::string& name) {$/;"	f	class:Sequence
clone	src/Lines/SequenceTemplate.cpp	/^SequenceTemplate *SequenceTemplate::clone(const std::string &\/*name*\/) {$/;"	f	class:SequenceTemplate
clone	src/OpalParser/Macro.cpp	/^Macro *Macro::clone(const std::string &) {$/;"	f	class:Macro
clone	src/Structure/Beam.cpp	/^Beam* Beam::clone(const std::string& name) {$/;"	f	class:Beam
clone	src/Structure/BoundaryGeometry.cpp	/^BoundaryGeometry* BoundaryGeometry::clone(const std::string& name) {$/;"	f	class:BoundaryGeometry
clone	src/Structure/FieldSolverCmd.cpp	/^FieldSolverCmd* FieldSolverCmd::clone(const std::string& name) {$/;"	f	class:FieldSolverCmd
clone	src/Track/TrackCmd.cpp	/^TrackCmd* TrackCmd::clone(const std::string& name) {$/;"	f	class:TrackCmd
clone	src/Track/TrackEnd.cpp	/^TrackEnd *TrackEnd::clone(const std::string &name) {$/;"	f	class:TrackEnd
clone	src/Track/TrackRun.cpp	/^TrackRun* TrackRun::clone(const std::string& name) {$/;"	f	class:TrackRun
clone	src/Utilities/MSLang/Ellipse.cpp	/^    std::shared_ptr<Base> Ellipse::clone() const{$/;"	f	class:mslang::Ellipse
clone	src/Utilities/MSLang/Rectangle.cpp	/^    std::shared_ptr<Base> Rectangle::clone() const {$/;"	f	class:mslang::Rectangle
clone	src/Utilities/MSLang/Triangle.cpp	/^    std::shared_ptr<Base>  Triangle::clone() const {$/;"	f	class:mslang::Triangle
clone	src/Utilities/OpalFilter.cpp	/^OpalFilter* OpalFilter::clone(const std::string& name) {$/;"	f	class:OpalFilter
clone	src/ValueDefinitions/BoolConstant.cpp	/^BoolConstant *BoolConstant::clone(const std::string &name) {$/;"	f	class:BoolConstant
clone	src/ValueDefinitions/RealConstant.cpp	/^RealConstant* RealConstant::clone(const std::string& name) {$/;"	f	class:RealConstant
clone	src/ValueDefinitions/RealVariable.cpp	/^RealVariable *RealVariable::clone(const std::string &name) {$/;"	f	class:RealVariable
clone	src/ValueDefinitions/RealVector.cpp	/^RealVector *RealVector::clone(const std::string &name) {$/;"	f	class:RealVector
clone	src/ValueDefinitions/StringConstant.cpp	/^StringConstant* StringConstant::clone(const std::string& name) {$/;"	f	class:StringConstant
clone	tests/opal_src/Elements/OpalPolynomialTimeDependenceTest.cpp	/^    ElementBase* clone() const {return nullptr;}$/;"	f	class:TestElement
clone	tests/opal_src/Utilities/MockComponent.h	/^    ElementBase* clone() const {return new MockComponent(*this);}$/;"	f	class:MockComponent
clone	tests/opal_src/Utilities/MockComponent.h	/^    ElementBase* clone() const {return new MockComponent2(*this);}$/;"	f	class:MockComponent2
close	src/Structure/H5PartWrapper.cpp	/^void H5PartWrapper::close() {$/;"	f	class:H5PartWrapper
close	src/Structure/H5Writer.h	/^inline void H5Writer::close() {$/;"	f	class:H5Writer
close	src/Structure/SDDSWriter.cpp	/^void SDDSWriter::close() {$/;"	f	class:SDDSWriter
closeASCII	src/Structure/LossDataSink.h	/^    void closeASCII() {$/;"	f	class:LossDataSink
closeFile	src/Fields/FM3DH5BlockBase.cpp	/^void FM3DH5BlockBase::closeFile(void) {$/;"	f	class:FM3DH5BlockBase
close_m	src/Structure/PeakFinder.cpp	/^void PeakFinder::close_m() {$/;"	f	class:PeakFinder
cm2m	src/Physics/Units.h	/^    constexpr double cm2m = 1 \/ m2cm;$/;"	m	namespace:Units
cminmax	src/Structure/LossDataSink.cpp	/^    void cminmax(double& min, double& max, double val) {$/;"	f	namespace:__anon59
cmp_diff	src/Structure/BoundaryGeometry.cpp	/^namespace cmp_diff {$/;"	n	file:
cmp_ulp	src/Structure/BoundaryGeometry.cpp	/^namespace cmp_ulp {$/;"	n	file:
cmp_ulp_obsolete	src/Structure/BoundaryGeometry.cpp	/^namespace cmp_ulp_obsolete {$/;"	n	file:
coefficients_m	src/AbsBeamline/MultipoleTFunctions/Polynomial.h	/^    std::vector<int> coefficients_m;$/;"	m	class:polynomial::Polynomial
coefficients_m	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    std::vector<std::vector<int>> coefficients_m;$/;"	m	class:polynomial::TwoPolynomial
coeffs	src/Algorithms/PolynomialTimeDependence.h	/^    std::vector<double> coeffs;$/;"	m	class:PolynomialTimeDependence
col_name	src/Expressions/AColumn.h	/^        const std::string col_name;$/;"	m	class:Expressions::AColumn
col_name	src/Expressions/SCell.h	/^        const std::string col_name;$/;"	m	class:Expressions::SCell
collectionType_m	src/Structure/LossDataSink.h	/^    CollectionType collectionType_m;$/;"	m	class:LossDataSink
color	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^    def color(self):$/;"	m	class:PlotInterpolation
cols_t	src/Structure/SDDSWriter.h	/^    typedef std::tuple<std::string, std::string, std::string, std::string> cols_t;$/;"	t	class:SDDSWriter
column	src/Utilities/SDDSParser/column.hpp	/^    struct column$/;"	s	namespace:SDDS
columnData_t	src/Utilities/SDDSParser/ast.hpp	/^        typedef std::vector<variant_t> columnData_t;$/;"	t	namespace:SDDS::ast
columnList	src/Utilities/SDDSParser/column.hpp	/^    struct columnList: std::vector<column> {};$/;"	s	namespace:SDDS
columnNameToID_m	src/Utilities/SDDSParser.h	/^        std::map<std::string, int> columnNameToID_m;$/;"	m	class:SDDS::SDDSParser
columnOrder	src/Utilities/SDDSParser/column.hpp	/^    struct columnOrder$/;"	s	namespace:SDDS
column_description	src/Utilities/SDDSParser/column.hpp	/^                column_description, column_symbol, column_format;$/;"	m	struct:SDDS::parser::column_parser
column_field	src/Utilities/SDDSParser/column.hpp	/^        qi::rule<Iterator, long(), skipper<Iterator> > column_field;$/;"	m	struct:SDDS::parser::column_parser
column_format	src/Utilities/SDDSParser/column.hpp	/^                column_description, column_symbol, column_format;$/;"	m	struct:SDDS::parser::column_parser
column_m	src/Utilities/SDDSParser/file.hpp	/^        column_parser<Iterator> column_m;$/;"	m	struct:SDDS::parser::file_parser
column_name	src/Utilities/SDDSParser/column.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > column_name, column_units,$/;"	m	struct:SDDS::parser::column_parser
column_parser	src/Utilities/SDDSParser/column.cpp	/^template struct SDDS::parser::column_parser<iterator_t>;$/;"	m	class:SDDS::parser	typeref:struct:SDDS::parser::	file:
column_parser	src/Utilities/SDDSParser/column.hpp	/^    struct column_parser: qi::grammar<Iterator, column(), skipper<Iterator> >$/;"	s	namespace:SDDS::parser
column_parser	src/Utilities/SDDSParser/column_def.hpp	/^    column_parser<Iterator>::column_parser(error_handler<Iterator> & _error_handler):$/;"	f	class:SDDS::parser::column_parser
column_symbol	src/Utilities/SDDSParser/column.hpp	/^                column_description, column_symbol, column_format;$/;"	m	struct:SDDS::parser::column_parser
column_type	src/Utilities/SDDSParser/column.hpp	/^        qi::rule<Iterator, ast::datatype(), skipper<Iterator> > column_type;$/;"	m	struct:SDDS::parser::column_parser
column_units	src/Utilities/SDDSParser/column.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > column_name, column_units,$/;"	m	struct:SDDS::parser::column_parser
column_unsupported_post	src/Utilities/SDDSParser/column.hpp	/^                column_unsupported_post;$/;"	m	struct:SDDS::parser::column_parser
column_unsupported_pre	src/Utilities/SDDSParser/column.hpp	/^        qi::rule<Iterator, ast::nil(), skipper<Iterator> > column_unsupported_pre,$/;"	m	struct:SDDS::parser::column_parser
columns	src/Expressions/ARow.h	/^        const std::vector<std::string> columns;$/;"	m	class:Expressions::ARow
columns_m	src/Structure/SDDSColumnSet.h	/^    std::vector<SDDSColumn> columns_m;$/;"	m	class:SDDSColumnSet
columns_m	src/Structure/SDDSWriter.h	/^    SDDSColumnSet columns_m;$/;"	m	class:SDDSWriter
combineFilePath	src/Utilities/Util.cpp	/^    std::string combineFilePath(std::initializer_list<std::string> ilist) {$/;"	f	namespace:Util
comparator	src/Fields/SectorMagneticFieldMap.cpp	/^bool SectorMagneticFieldMap::IO::comparator(std::vector<double> field_item1,$/;"	f	class:SectorMagneticFieldMap::IO
complainUnsupported	src/Utilities/SDDSParser/array.hpp	/^        struct complainUnsupported$/;"	s	struct:SDDS::array
complainUnsupported	src/Utilities/SDDSParser/associate.hpp	/^        struct complainUnsupported$/;"	s	struct:SDDS::associate
complainUnsupported	src/Utilities/SDDSParser/column.hpp	/^        struct complainUnsupported$/;"	s	struct:SDDS::column
complainUnsupported	src/Utilities/SDDSParser/data.hpp	/^        struct complainUnsupported$/;"	s	struct:SDDS::data
complainUnsupported	src/Utilities/SDDSParser/include.hpp	/^        struct complainUnsupported$/;"	s	struct:SDDS::include
complainUnsupported	src/Utilities/SDDSParser/parameter.hpp	/^        struct complainUnsupported$/;"	s	struct:SDDS::parameter
complex	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<m_complex> complex(MMatrix<double> real)$/;"	f	namespace:interpolation
complex	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<m_complex> complex(MMatrix<double> real, MMatrix<double> imaginary)$/;"	f	namespace:interpolation
complex	src/Fields/Interpolation/MVector.cpp	/^MVector<m_complex> complex(MVector<double> real)$/;"	f	namespace:interpolation
complex	src/Fields/Interpolation/MVector.cpp	/^MVector<m_complex> complex(MVector<double> real, MVector<double> im)$/;"	f	namespace:interpolation
componentOrientation_m	src/Utilities/RingSection.h	/^    Vector_t<double, 3> componentOrientation_m;$/;"	m	class:RingSection
componentPosition_m	src/Utilities/RingSection.h	/^    Vector_t<double, 3> componentPosition_m;$/;"	m	class:RingSection
componentProj1	tests/ippl_src/Field/BCond.cpp	/^    double componentProj1(double vc) {$/;"	f	namespace:__anon15
componentProj2	tests/ippl_src/Field/BCond.cpp	/^    double componentProj2(double vc) {$/;"	f	namespace:__anon15
component_m	src/Utilities/RingSection.h	/^    Component* component_m;$/;"	m	class:RingSection
compute	src/.Solvers/ArbitraryDomain.cpp	/^void ArbitraryDomain::compute(Vector_t<double, 3> hr, NDIndex<3> localId) {$/;"	f	class:ArbitraryDomain
compute	src/.Solvers/EllipticDomain.cpp	/^void EllipticDomain::compute(Vector_t<double, 3> hr, NDIndex<3> localId) {$/;"	f	class:EllipticDomain
compute	src/Algorithms/DistributionMoments.cpp	/^void DistributionMoments::compute($/;"	f	class:DistributionMoments
compute	src/Structure/MemoryProfiler.cpp	/^void MemoryProfiler::compute(vm_t& vmMin, vm_t& vmMax, vm_t& vmAvg) {$/;"	f	class:MemoryProfiler
compute3DLattice	src/Elements/OpalBeamline.cpp	/^void OpalBeamline::compute3DLattice() {$/;"	f	class:OpalBeamline
computeArea	src/Structure/BoundaryGeometry.cpp	/^static inline double computeArea($/;"	f	file:
computeArea	src/Utilities/MSLang/Mask.cpp	/^    unsigned int Mask::computeArea(const Mask::IntPoint &ll, const Mask::IntPoint &ur) const {$/;"	f	class:mslang::Mask
computeBoundingBox	src/Algorithms/OrbitThreader.cpp	/^void OrbitThreader::computeBoundingBox() {$/;"	f	class:OrbitThreader
computeBoundingBox	src/Utilities/MSLang/Ellipse.cpp	/^    void Ellipse::computeBoundingBox() {$/;"	f	class:mslang::Ellipse
computeBoundingBox	src/Utilities/MSLang/Rectangle.cpp	/^    void Rectangle::computeBoundingBox() {$/;"	f	class:mslang::Rectangle
computeBoundingBox	src/Utilities/MSLang/Triangle.cpp	/^    void Triangle::computeBoundingBox() {$/;"	f	class:mslang::Triangle
computeCentroid_m	src/Structure/PeakFinder.cpp	/^void PeakFinder::computeCentroid_m() {$/;"	f	class:PeakFinder
computeDebyeLength	src/Algorithms/DistributionMoments.cpp	/^void DistributionMoments::computeDebyeLength(ippl::ParticleAttrib<Vector_t<double,3>>::view_type&  Rview,$/;"	f	class:DistributionMoments
computeDebyeLength	src/PartBunch/ParticleContainer.hpp	/^    double computeDebyeLength(double density){$/;"	f	class:ParticleContainer
computeDeviationCost	src/PartBunch/Binning/BinHisto.hpp	/^    Histogram<size_type, bin_index_type, value_type, UseDualView, Properties...>::computeDeviationCost($/;"	f	class:ParticleBinning::Histogram
computeDriftLengthToBoundingBox	src/Algorithms/OrbitThreader.cpp	/^double OrbitThreader::computeDriftLengthToBoundingBox($/;"	f	class:OrbitThreader
computeEntranceFringe	src/Fields/FM1DProfile1.cpp	/^double FM1DProfile1::computeEntranceFringe(double z) const {$/;"	f	class:FM1DProfile1
computeExitFringe	src/Fields/FM1DProfile1.cpp	/^double FM1DProfile1::computeExitFringe(double z) const {$/;"	f	class:FM1DProfile1
computeExternalFields	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::computeExternalFields(OrbitThreader& oth) {$/;"	f	class:ParallelTracker
computeField	src/AbsBeamline/Multipole.cpp	/^void Multipole::computeField($/;"	f	class:Multipole
computeFieldDerivatives	src/Fields/Astra1D_fast.cpp	/^void Astra1D_fast::computeFieldDerivatives(std::vector<double>& fourierComponents, int accuracy) {$/;"	f	class:Astra1D_fast
computeFieldDerivatives	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::computeFieldDerivatives($/;"	f	class:FM1DDynamic_fast
computeFieldDerivatives	src/Fields/FM1DElectroStatic_fast.cpp	/^void FM1DElectroStatic_fast::computeFieldDerivatives($/;"	f	class:FM1DElectroStatic_fast
computeFieldDerivatives	src/Fields/FM1DMagnetoStatic_fast.cpp	/^void FM1DMagnetoStatic_fast::computeFieldDerivatives($/;"	f	class:FM1DMagnetoStatic_fast
computeFieldOffAxis	src/Fields/FM1DDynamic.cpp	/^void FM1DDynamic::computeFieldOffAxis($/;"	f	class:FM1DDynamic
computeFieldOffAxis	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::computeFieldOffAxis($/;"	f	class:FM1DDynamic_fast
computeFieldOffAxis	src/Fields/FM1DElectroStatic.cpp	/^void FM1DElectroStatic::computeFieldOffAxis($/;"	f	class:FM1DElectroStatic
computeFieldOffAxis	src/Fields/FM1DElectroStatic_fast.cpp	/^void FM1DElectroStatic_fast::computeFieldOffAxis($/;"	f	class:FM1DElectroStatic_fast
computeFieldOffAxis	src/Fields/FM1DMagnetoStatic.cpp	/^void FM1DMagnetoStatic::computeFieldOffAxis($/;"	f	class:FM1DMagnetoStatic
computeFieldOffAxis	src/Fields/FM1DMagnetoStatic_fast.cpp	/^void FM1DMagnetoStatic_fast::computeFieldOffAxis($/;"	f	class:FM1DMagnetoStatic_fast
computeFieldOnAxis	src/Fields/FM1DDynamic.cpp	/^void FM1DDynamic::computeFieldOnAxis(double z, std::vector<double>& fieldComponents) const {$/;"	f	class:FM1DDynamic
computeFieldOnAxis	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::computeFieldOnAxis(double z, std::vector<double>& fieldComponents) const {$/;"	f	class:FM1DDynamic_fast
computeFieldOnAxis	src/Fields/FM1DElectroStatic.cpp	/^void FM1DElectroStatic::computeFieldOnAxis(double z, std::vector<double>& fieldComponents) const {$/;"	f	class:FM1DElectroStatic
computeFieldOnAxis	src/Fields/FM1DElectroStatic_fast.cpp	/^void FM1DElectroStatic_fast::computeFieldOnAxis($/;"	f	class:FM1DElectroStatic_fast
computeFieldOnAxis	src/Fields/FM1DMagnetoStatic.cpp	/^void FM1DMagnetoStatic::computeFieldOnAxis(double z, std::vector<double>& fieldComponents) const {$/;"	f	class:FM1DMagnetoStatic
computeFieldOnAxis	src/Fields/FM1DMagnetoStatic_fast.cpp	/^void FM1DMagnetoStatic_fast::computeFieldOnAxis($/;"	f	class:FM1DMagnetoStatic_fast
computeFixSum	src/PartBunch/Binning/BinningTools.h	/^    void computeFixSum(const ViewType& input_view, const ViewType& post_sum_view) {$/;"	f	namespace:ParticleBinning
computeFourierCoefficients	src/Fields/Astra1D_fast.cpp	/^std::vector<double> Astra1D_fast::computeFourierCoefficients($/;"	f	class:Astra1D_fast
computeFourierCoefficients	src/Fields/FM1DDynamic.cpp	/^void FM1DDynamic::computeFourierCoefficients(double maxEz, double fieldData[]) {$/;"	f	class:FM1DDynamic
computeFourierCoefficients	src/Fields/FM1DDynamic_fast.cpp	/^std::vector<double> FM1DDynamic_fast::computeFourierCoefficients(double fieldData[]) {$/;"	f	class:FM1DDynamic_fast
computeFourierCoefficients	src/Fields/FM1DElectroStatic.cpp	/^void FM1DElectroStatic::computeFourierCoefficients(double maxEz, double fieldData[]) {$/;"	f	class:FM1DElectroStatic
computeFourierCoefficients	src/Fields/FM1DElectroStatic_fast.cpp	/^std::vector<double> FM1DElectroStatic_fast::computeFourierCoefficients(double fieldData[]) {$/;"	f	class:FM1DElectroStatic_fast
computeFourierCoefficients	src/Fields/FM1DMagnetoStatic.cpp	/^void FM1DMagnetoStatic::computeFourierCoefficients(double maxBz, double fieldData[]) {$/;"	f	class:FM1DMagnetoStatic
computeFourierCoefficients	src/Fields/FM1DMagnetoStatic_fast.cpp	/^std::vector<double> FM1DMagnetoStatic_fast::computeFourierCoefficients(double fieldData[]) {$/;"	f	class:FM1DMagnetoStatic_fast
computeFringe	src/Fields/FM1DProfile1.cpp	/^double FM1DProfile1::computeFringe(const std::vector<double>& coefs, double z) const {$/;"	f	class:FM1DProfile1
computeInterpolationVectors	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::computeInterpolationVectors($/;"	f	class:FM1DDynamic_fast
computeInterpolationVectors	src/Fields/FM1DElectroStatic_fast.cpp	/^void FM1DElectroStatic_fast::computeInterpolationVectors($/;"	f	class:FM1DElectroStatic_fast
computeInterpolationVectors	src/Fields/FM1DMagnetoStatic_fast.cpp	/^void FM1DMagnetoStatic_fast::computeInterpolationVectors($/;"	f	class:FM1DMagnetoStatic_fast
computeMeanKineticEnergy	src/Algorithms/DistributionMoments.cpp	/^void DistributionMoments::computeMeanKineticEnergy() {$/;"	f	class:DistributionMoments
computeMeans	src/Algorithms/DistributionMoments.cpp	/^void DistributionMoments::computeMeans(ippl::ParticleAttrib<Vector_t<double,3>>::view_type&  Rview,$/;"	f	class:DistributionMoments
computeMeshVoxelization	src/Structure/BoundaryGeometry.cpp	/^inline void BoundaryGeometry::computeMeshVoxelization(void) {$/;"	f	class:BoundaryGeometry
computeMinMaxPosition	src/Algorithms/DistributionMoments.cpp	/^void DistributionMoments::computeMinMaxPosition(ippl::ParticleAttrib<Vector_t<double,3>>::view_type& Rview, size_t Nlocal)$/;"	f	class:DistributionMoments
computeMinMaxR	src/PartBunch/ParticleContainer.hpp	/^    void computeMinMaxR(){$/;"	f	class:ParticleContainer
computeMinimumAngle	src/Utilities/Mesher.cpp	/^double Mesher::computeMinimumAngle(unsigned int i) const {$/;"	f	class:Mesher
computeMoments	src/Algorithms/DistributionMoments.cpp	/^void DistributionMoments::computeMoments(ippl::ParticleAttrib<Vector_t<double,3>>::view_type&  Rview,$/;"	f	class:DistributionMoments
computeNlocal	src/Distribution/FlatTop.hpp	/^    size_t computeNlocal(size_t nglobal){$/;"	f	class:FlatTop
computeNormalizedEmittance	src/Algorithms/DistributionMoments.cpp	/^double DistributionMoments::computeNormalizedEmittance($/;"	f	class:DistributionMoments
computePercentiles	src/Algorithms/DistributionMoments.cpp	/^void DistributionMoments::computePercentiles(const InputIt& first, const InputIt& last) {$/;"	f	class:DistributionMoments
computePercentiles	src/Utilities/Options.cpp	/^    bool computePercentiles = false;$/;"	m	namespace:Options	file:
computePlasmaParameter	src/Algorithms/DistributionMoments.cpp	/^void DistributionMoments::computePlasmaParameter(double density) {$/;"	f	class:DistributionMoments
computePotential	src/.Solvers/FFTPoissonSolver.cpp	/^void FFTPoissonSolver::computePotential(Field_t& rho, Vector_t<double, 3> hr) {$/;"	f	class:FFTPoissonSolver
computePotential	src/.Solvers/FFTPoissonSolver.cpp	/^void FFTPoissonSolver::computePotential(Field_t& rho, Vector_t<double, 3> hr, double zshift) {$/;"	f	class:FFTPoissonSolver
computeProfileStatistics	src/Distribution/LaserProfile.cpp	/^void LaserProfile::computeProfileStatistics(unsigned short* image) {$/;"	f	class:LaserProfile
computeRatio	tools/Normalization2DMaps/normalization.py	/^def computeRatio(fieldmap):$/;"	f
computeSelfFields	src/Algorithms/.PartBunch.cpp	/^void PartBunch::computeSelfFields() {$/;"	f	class:PartBunch
computeSelfFields	src/Algorithms/.PartBunch.cpp	/^void PartBunch::computeSelfFields(int binNumber) {$/;"	f	class:PartBunch
computeSelfFields	src/PartBunch/PartBunch.cpp	/^void PartBunch<double,3>::computeSelfFields() {$/;"	f	class:PartBunch
computeSetStatistics	src/Structure/LossDataSink.cpp	/^SetStatistics LossDataSink::computeSetStatistics(unsigned int setIdx) {$/;"	f	class:LossDataSink
computeSpaceChargeFields	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::computeSpaceChargeFields(unsigned long long step) {$/;"	f	class:ParallelTracker
computeStatistics	src/Structure/LossDataSink.h	/^inline std::set<SetStatistics> LossDataSink::computeStatistics(unsigned int numStatistics) {$/;"	f	class:LossDataSink
configurations_m	src/Algorithms/StepSizeConfig.h	/^    container_t configurations_m;$/;"	m	class:StepSizeConfig
configure	src/OpalConfigure/Configure.cpp	/^    void configure() {$/;"	f	namespace:Configure
conj	src/Fields/Interpolation/MVector.h	/^inline m_complex      conj(const m_complex& c) {return m_complex_build(re(c), -im(c));}$/;"	f	namespace:interpolation
conjugate	src/Algorithms/Quaternion.hpp	/^inline Quaternion Quaternion::conjugate() const {$/;"	f	class:Quaternion
const_iterator	src/AbsBeamline/AttributeSet.h	/^    typedef NameMap::const_iterator const_iterator;$/;"	t	class:AttributeSet
const_iterator_t	src/AbsBeamline/SpecificElementVisitor.h	/^    typedef typename ElementList_t::const_iterator const_iterator_t;$/;"	t	class:SpecificElementVisitor
const_reference_t	src/AbsBeamline/SpecificElementVisitor.h	/^    typedef typename ElementList_t::const_reference const_reference_t;$/;"	t	class:SpecificElementVisitor
constant	src/Utilities/MSLang/matheval.hpp	/^            } constant;$/;"	m	struct:matheval::detail::grammar	typeref:struct:matheval::detail::grammar::constant_
constantInterpolation	src/.Solvers/ArbitraryDomain.cpp	/^void ArbitraryDomain::constantInterpolation($/;"	f	class:ArbitraryDomain
constantInterpolation	src/.Solvers/IrregularDomain.cpp	/^void IrregularDomain::constantInterpolation(int \/*idx*\/, int \/*idy*\/, int \/*idz*\/,$/;"	f	class:IrregularDomain
constantInterpolation	src/.Solvers/RegularDomain.cpp	/^void RegularDomain::constantInterpolation(int x, int y, int z, StencilValue_t& value,$/;"	f	class:RegularDomain
constantSpacing_m	src/Fields/Interpolation/NDGrid.h	/^    bool                               constantSpacing_m;$/;"	m	class:interpolation::NDGrid
constantSpacing_m	src/Fields/Interpolation/ThreeDGrid.h	/^    bool                    constantSpacing_m;$/;"	m	class:interpolation::ThreeDGrid
constant_	src/Utilities/MSLang/matheval.hpp	/^                constant_()$/;"	f	struct:matheval::detail::grammar::constant_
constant_	src/Utilities/MSLang/matheval.hpp	/^            struct constant_$/;"	s	struct:matheval::detail::grammar
consteval	src/AbsBeamline/Component.h	38;"	d
consteval	src/AbsBeamline/Component.h	42;"	d
consteval	src/AbsBeamline/Drift.h	38;"	d
consteval	src/AbsBeamline/Drift.h	42;"	d
consteval	src/AbsBeamline/ElementBase.cpp	104;"	d	file:
consteval	src/AbsBeamline/ElementBase.cpp	108;"	d	file:
consteval	src/AbsBeamline/ElementBase.cpp	79;"	d	file:
consteval	src/AbsBeamline/ElementBase.cpp	83;"	d	file:
consteval	src/AbsBeamline/ElementBase.h	78;"	d
consteval	src/AbsBeamline/ElementBase.h	82;"	d
consteval	src/AbsBeamline/Multipole.h	38;"	d
consteval	src/AbsBeamline/Multipole.h	42;"	d
consteval	src/AbsBeamline/MultipoleTBase.h	94;"	d
consteval	src/AbsBeamline/MultipoleTBase.h	98;"	d
consteval	src/AbsBeamline/MultipoleTCurvedConstRadius.h	90;"	d
consteval	src/AbsBeamline/MultipoleTCurvedConstRadius.h	94;"	d
consteval	src/AbsBeamline/MultipoleTCurvedVarRadius.h	93;"	d
consteval	src/AbsBeamline/MultipoleTCurvedVarRadius.h	97;"	d
consteval	src/AbsBeamline/MultipoleTStraight.h	94;"	d
consteval	src/AbsBeamline/MultipoleTStraight.h	98;"	d
consteval	src/AbsBeamline/ScalingFFAMagnet.h	45;"	d
consteval	src/AbsBeamline/ScalingFFAMagnet.h	49;"	d
consteval	src/AbsBeamline/Solenoid.h	36;"	d
consteval	src/AbsBeamline/Solenoid.h	40;"	d
consteval	src/AbstractObjects/OpalData.h	37;"	d
consteval	src/AbstractObjects/OpalData.h	41;"	d
consteval	src/Algorithms/DistributionMoments.h	33;"	d
consteval	src/Algorithms/DistributionMoments.h	37;"	d
consteval	src/BasicActions/Option.h	35;"	d
consteval	src/BasicActions/Option.h	39;"	d
consteval	src/Main.cpp	30;"	d	file:
consteval	src/Main.cpp	34;"	d	file:
consteval	src/Physics/ParticleProperties.h	33;"	d
consteval	src/Physics/ParticleProperties.h	37;"	d
consteval	src/Structure/SDDSColumn.h	33;"	d
consteval	src/Structure/SDDSColumn.h	37;"	d
consteval	src/Structure/SDDSColumnSet.h	33;"	d
consteval	src/Structure/SDDSColumnSet.h	37;"	d
consteval	src/Utilities/MSLang/matheval.hpp	29;"	d
consteval	src/Utilities/MSLang/matheval.hpp	33;"	d
consteval	src/Utilities/SDDSParser.h	31;"	d
consteval	src/Utilities/SDDSParser.h	35;"	d
consteval	src/Utilities/SDDSParser/array.hpp	32;"	d
consteval	src/Utilities/SDDSParser/array.hpp	36;"	d
consteval	src/Utilities/SDDSParser/associate.hpp	32;"	d
consteval	src/Utilities/SDDSParser/associate.hpp	36;"	d
consteval	src/Utilities/SDDSParser/ast.hpp	32;"	d
consteval	src/Utilities/SDDSParser/ast.hpp	36;"	d
container_t	src/Algorithms/StepSizeConfig.h	/^    typedef std::list<entry_t> container_t;$/;"	t	class:StepSizeConfig
containsCavity	src/Algorithms/OrbitThreader.cpp	/^bool OrbitThreader::containsCavity(const IndexMap::value_t& activeSet) {$/;"	f	class:OrbitThreader
content_m	src/Utilities/SDDSParser/description.hpp	/^        boost::optional<std::string> content_m;$/;"	m	struct:SDDS::description
convert	src/AbsBeamline/Ring.h	/^Vector3D Ring::convert(const Vector_t<double, 3>& vec_t) {$/;"	f	class:Ring
convert	src/AbsBeamline/Ring.h	/^Vector_t<double, 3> Ring::convert(const Vector3D& vec_3d) {$/;"	f	class:Ring
convert1Dto2Darray	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^void TwoPolynomial::convert1Dto2Darray(double *vec1,$/;"	f	class:polynomial::TwoPolynomial
convert2Dto1Darray	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^void TwoPolynomial::convert2Dto1Darray(double *vec1, double *vec2,$/;"	f	class:polynomial::TwoPolynomial
convertHeaderData	src/Fields/FM1DDynamic.cpp	/^void FM1DDynamic::convertHeaderData() {$/;"	f	class:FM1DDynamic
convertHeaderData	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::convertHeaderData() {$/;"	f	class:FM1DDynamic_fast
convertHeaderData	src/Fields/FM1DElectroStatic.cpp	/^void FM1DElectroStatic::convertHeaderData() {$/;"	f	class:FM1DElectroStatic
convertHeaderData	src/Fields/FM1DElectroStatic_fast.cpp	/^void FM1DElectroStatic_fast::convertHeaderData() {$/;"	f	class:FM1DElectroStatic_fast
convertHeaderData	src/Fields/FM1DMagnetoStatic.cpp	/^void FM1DMagnetoStatic::convertHeaderData() {$/;"	f	class:FM1DMagnetoStatic
convertHeaderData	src/Fields/FM1DMagnetoStatic_fast.cpp	/^void FM1DMagnetoStatic_fast::convertHeaderData() {$/;"	f	class:FM1DMagnetoStatic_fast
convertMomentumEVoverCToBetaGamma	src/Utilities/Util.h	/^    inline double convertMomentumEVoverCToBetaGamma(double p, double mass) {$/;"	f	namespace:Util
convertToCartesian	src/Fields/SectorField.cpp	/^void SectorField::convertToCartesian(const double* position, double* value) {$/;"	f	class:SectorField
convertToCartesian	src/Fields/SectorField.cpp	/^void SectorField::convertToCartesian(double* position) {$/;"	f	class:SectorField
convertToElegantUnits	tools/opal2sdds/main.cpp	/^void convertToElegantUnits(data_t &data) {$/;"	f
convertToPolar	src/Fields/SectorField.cpp	/^void SectorField::convertToPolar(const double* position, double* value) {$/;"	f	class:SectorField
convertToPolar	src/Fields/SectorField.cpp	/^void SectorField::convertToPolar(double* position) {$/;"	f	class:SectorField
convertToString	src/Structure/DataSink.h	/^inline std::string DataSink::convertToString(int number, int setw) {$/;"	f	class:DataSink
convlv	src/Filters/SavitzkyGolay.cpp	/^void convlv(const std::vector<double> &data, const std::vector<double> &respns, const int &isign, std::vector<double> &ans) {$/;"	f
convolution	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^void TwoPolynomial::convolution(double *vec1,$/;"	f	class:polynomial::TwoPolynomial
coord	src/Fields/Interpolation/NDGrid.h	/^const double& NDGrid::coord(const int& index, const int& dimension) const {$/;"	f	class:interpolation::NDGrid
coord	src/Fields/Interpolation/NDGrid.h	/^double& NDGrid::coord(const int& index, const int& dimension) {$/;"	f	class:interpolation::NDGrid
coordAccess	src/.Solvers/RectangularDomain.h	/^    int coordAccess(int idx) const {$/;"	f	class:RectangularDomain
coordLowerBound	src/Fields/Interpolation/NDGrid.h	/^void NDGrid::coordLowerBound(const double& x, const int& dimension, int& xIndex) const {$/;"	f	class:interpolation::NDGrid
coordMap_m	src/.Solvers/IrregularDomain.h	/^    std::map<int, int> coordMap_m;$/;"	m	class:IrregularDomain
coordTransformationTo_m	src/Elements/OpalBeamline.h	/^    CoordinateSystemTrafo coordTransformationTo_m;$/;"	m	class:OpalBeamline
coordVector	src/Fields/Interpolation/NDGrid.h	/^std::vector<double> NDGrid::coordVector(const int& dimension) const {$/;"	f	class:interpolation::NDGrid
coord_m	src/Fields/Interpolation/NDGrid.h	/^    std::vector< std::vector<double> > coord_m;$/;"	m	class:interpolation::NDGrid
coordinates_m	src/BasicActions/DumpEMFields.h	/^    CoordinateSystem coordinates_m = CoordinateSystem::CARTESIAN;$/;"	m	class:DumpEMFields
coordinates_m	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^  ThreeDGrid   *coordinates_m;$/;"	m	class:interpolation::Interpolator3dGridTo1d
coordinates_m	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^  ThreeDGrid             *coordinates_m;$/;"	m	class:interpolation::Interpolator3dGridTo3d
coordinatetransform	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^namespace coordinatetransform {$/;"	n	file:
coordinatetransform	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^namespace coordinatetransform {$/;"	n
copper	src/Physics/Material.cpp	/^    auto copper        = Material::addMaterial("Copper",$/;"	m	namespace:__anon18	file:
copy	src/Lines/Line.cpp	/^Line *Line::copy(const std::string &name) {$/;"	f	class:Line
copy	src/Lines/Sequence.cpp	/^Sequence* Sequence::copy(const std::string& name) {$/;"	f	class:Sequence
copyAttributes	src/AbstractObjects/Object.cpp	/^void Object::copyAttributes(const Object &source) {$/;"	f	class:Object
copyBinWidths	src/PartBunch/Binning/BinHisto.h	/^        void copyBinWidths(const Histogram& other) {$/;"	f	class:ParticleBinning::Histogram
copyFields	src/PartBunch/Binning/BinHisto.hpp	/^    void Histogram<size_type, bin_index_type, value_type, UseDualView, Properties...>::copyFields(const Histogram& other) {$/;"	f	class:ParticleBinning::Histogram
copyFile	src/Structure/H5PartWrapper.cpp	/^void H5PartWrapper::copyFile(const std::string& sourceFile, int lastStep, h5_int32_t flags) {$/;"	f	class:H5PartWrapper
copyFilePrefix_m	src/Structure/H5PartWrapper.h	/^    static std::string copyFilePrefix_m;$/;"	m	class:H5PartWrapper
copyFileSystem	src/Structure/H5PartWrapper.cpp	/^void H5PartWrapper::copyFileSystem(const std::string& sourceFile) {$/;"	f	class:H5PartWrapper
copyFrom	src/Steppers/RK4.hpp	/^void RK4<FieldFunction, Arguments...>::copyFrom($/;"	f	class:RK4
copyHeader	src/Structure/H5PartWrapper.cpp	/^void H5PartWrapper::copyHeader(h5_file_t source) {$/;"	f	class:H5PartWrapper
copyStep	src/Structure/H5PartWrapper.cpp	/^void H5PartWrapper::copyStep(h5_file_t source, int step) {$/;"	f	class:H5PartWrapper
copyStepData	src/Structure/H5PartWrapper.cpp	/^void H5PartWrapper::copyStepData(h5_file_t source) {$/;"	f	class:H5PartWrapper
copyStepHeader	src/Structure/H5PartWrapper.cpp	/^void H5PartWrapper::copyStepHeader(h5_file_t source) {$/;"	f	class:H5PartWrapper
copyStructure	src/AbsBeamline/ElementBase.cpp	/^ElementBase* ElementBase::copyStructure() {$/;"	f	class:ElementBase
copyStructure	src/Beamlines/TBeamline.h	/^TBeamline<T>* TBeamline<T>::copyStructure() {$/;"	f	class:TBeamline
copyTo	src/Steppers/RK4.hpp	/^void RK4<FieldFunction, Arguments...>::copyTo($/;"	f	class:RK4
correction	src/Utilities/Util.h	/^        long double correction;$/;"	m	struct:Util::KahanAccumulation
correlationMatrix_m	src/Distribution/Distribution.h	/^    Matrix_t correlationMatrix_m;$/;"	m	class:Distribution
cos2_m	src/Utilities/RingSection.h	/^    double cos2_m;$/;"	m	class:RingSection
cosAngle_m	src/AbsBeamline/RFCavity.h	/^    double cosAngle_m;$/;"	m	class:RFCavity
cosExitRotation_m	src/Fields/FM1DProfile2.h	/^    double cosExitRotation_m;$/;"	m	class:FM1DProfile2
cosRefTheta_m	src/Algorithms/ParallelTracker.h	/^    double cosRefTheta_m;$/;"	m	class:ParallelTracker
countEnteringParticlesPerRank	src/Distribution/FlatTop.hpp	/^    double countEnteringParticlesPerRank(double t0, double tf){$/;"	f	class:FlatTop
count_m	src/Utilities/SDDSParser/column.cpp	/^unsigned int SDDS::column::count_m = 0;$/;"	m	class:SDDS::column	file:
count_m	src/Utilities/SDDSParser/column.hpp	/^        static unsigned int count_m;$/;"	m	struct:SDDS::column
count_m	src/Utilities/SDDSParser/parameter.cpp	/^unsigned int SDDS::parameter::count_m = 0;$/;"	m	class:SDDS::parameter	file:
count_m	src/Utilities/SDDSParser/parameter.hpp	/^        static unsigned int count_m;$/;"	m	struct:SDDS::parameter
couplingConstant_m	src/PartBunch/PartBunch.hpp	/^    double couplingConstant_m;$/;"	m	class:PartBunch
cov_m	src/Distribution/MultiVariateGaussian.hpp	/^    Matrix_t cov_m;$/;"	m	class:MultiVariateGaussian
create	src/AbstractObjects/OpalData.cpp	/^void OpalData::create(Object* newObject) {$/;"	f	class:OpalData
create	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::create(size_t M) {$/;"	f	class:PartBunch
create	src/Distribution/Distribution.cpp	/^void Distribution::create(size_t& numberOfParticles, double massIneV, double charge, ippl::ParticleAttrib<ippl::Vector<double, 3>>& R, ippl::ParticleAttrib<ippl::Vector<double, 3>>& P, std::shared_ptr<ParticleContainer_t> &pc, std::shared_ptr<FieldContainer_t> &fc, Vector_t<double, 3> nr) {$/;"	f	class:Distribution
createDistributionGauss	src/Distribution/Distribution.cpp	/^void Distribution::createDistributionGauss(size_t numberOfParticles, double massIneV, ippl::ParticleAttrib<ippl::Vector<double, 3>>& R, ippl::ParticleAttrib<ippl::Vector<double, 3>>& P, std::shared_ptr<ParticleContainer_t> &pc, std::shared_ptr<FieldContainer_t> &fc, Vector_t<double, 3> nr) {$/;"	f	class:Distribution
createHistogram_m	src/Structure/PeakFinder.cpp	/^void PeakFinder::createHistogram_m() {$/;"	f	class:PeakFinder
createReductionObject	src/PartBunch/Binning/ParallelReduceTools.h	/^    ReductionVariant<SizeType, IndexType> createReductionObject(IndexType binCount) {$/;"	f	namespace:ParticleBinning
createReductionObjectHelper	src/PartBunch/Binning/ParallelReduceTools.h	/^    ReductionVariant<SizeType, IndexType> createReductionObjectHelper(IndexType binCount) {$/;"	f	namespace:ParticleBinning
createWithID	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::createWithID(unsigned id) {$/;"	f	class:PartBunch
cross	src/BeamlineGeometry/Vector3D.cpp	/^Vector3D cross(const Vector3D &lhs, const Vector3D &rhs) {$/;"	f
crossProduct	src/Utilities/MSLang/Triangle.cpp	/^    double Triangle::crossProduct(const Vector_t<double, 3> &pt, unsigned int nodeNum) const {$/;"	f	class:mslang::Triangle
crossProduct	src/Utilities/Mesher.cpp	/^double Mesher::crossProduct(const Vector_t<double, 3> &a,$/;"	f	class:Mesher
csTrafoGlobal2Local_m	src/AbsBeamline/ElementBase.h	/^    CoordinateSystemTrafo csTrafoGlobal2Local_m;$/;"	m	class:ElementBase
csrDump	src/Utilities/Options.cpp	/^    bool csrDump = false;$/;"	m	namespace:Options	file:
curlA	tests/opal_test_utilities/Maxwell.cpp	/^Vector_t MaxwellTest::curlA(const Vector_t &R, double t) const {$/;"	f	class:MaxwellTest
curlB	tests/opal_test_utilities/Maxwell.cpp	/^Vector_t MaxwellTest::curlB(const Vector_t &R, double t) const {$/;"	f	class:MaxwellTest
curr	src/OpalParser/MacroStream.h	/^    TokenList::iterator curr;$/;"	m	class:MacroStream
curr	src/OpalParser/Statement.h	/^    TokenList::iterator curr;$/;"	m	class:Statement
curr_char	src/OpalParser/AbsFileStream.h	/^    int curr_char;$/;"	m	class:AbsFileStream
curr_line	src/OpalParser/TokenStream.h	/^    int curr_line;$/;"	m	class:TokenStream
currentArray	src/Expressions/Expressions.cpp	/^    OwnPtr<ATable> currentArray;$/;"	m	namespace:Expressions	file:
currentBins_m	src/PartBunch/Binning/AdaptBins.h	/^        bin_index_type currentBins_m;          \/\/\/< Current number of bins in use.$/;"	m	class:ParticleBinning::AdaptBins
currentChar_m	src/OpalParser/StringStream.h	/^    std::string::size_type currentChar_m;$/;"	m	class:StringStream
currentTable	src/Expressions/Expressions.cpp	/^    const Table* currentTable = 0;$/;"	m	namespace:Expressions	file:
cutoff	tests/ippl_src/AppTypes/VektorTz.cpp	/^    double cutoff;$/;"	v
cutoffP_m	src/Distribution/Distribution.h	/^    ippl::Vector<double, 3> pmean_m, xmean_m, sigmaR_m, sigmaP_m, cutoffR_m, cutoffP_m;$/;"	m	class:Distribution
cutoffR_m	src/Distribution/Distribution.h	/^    ippl::Vector<double, 3> pmean_m, xmean_m, sigmaR_m, sigmaP_m, cutoffR_m, cutoffP_m;$/;"	m	class:Distribution
cutoffR_m	src/Distribution/FlatTop.hpp	/^    Vector_t<double, 3> cutoffR_m;$/;"	m	class:FlatTop
cyclHarm_m	src/AbsBeamline/Ring.h	/^    double cyclHarm_m;$/;"	m	class:Ring
dR_m	tests/opal_test_utilities/Maxwell.h	/^    Vector_t dR_m;$/;"	m	class:MaxwellTest
dSfactors_m	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    std::vector<std::size_t> dSfactors_m;$/;"	m	class:polynomial::TwoPolynomial
dT	src/Track/Track.h	/^    std::vector<double> dT;$/;"	m	class:Track
d_value	src/OpalParser/Token.h	/^    double   d_value;$/;"	m	class:Token
data	src/AbstractObjects/PlaceRep.h	/^    Data data;$/;"	m	class:PlaceRep
data	src/Utilities/SDDSParser/data.hpp	/^    struct data$/;"	s	namespace:SDDS
dataSink_m	src/AbstractObjects/OpalData.cpp	/^    DataSink* dataSink_m;$/;"	m	struct:OpalDataImpl	file:
data_additional	src/Utilities/SDDSParser/data.hpp	/^                data_row, data_fixed, data_additional;$/;"	m	struct:SDDS::parser::data_parser
data_column	src/Utilities/SDDSParser/data.hpp	/^        qi::rule<Iterator, short(), skipper<Iterator> > data_column;$/;"	m	struct:SDDS::parser::data_parser
data_endian	src/Utilities/SDDSParser/data.hpp	/^        qi::rule<Iterator, ast::endianess(), skipper<Iterator> > data_endian;$/;"	m	struct:SDDS::parser::data_parser
data_fixed	src/Utilities/SDDSParser/data.hpp	/^                data_row, data_fixed, data_additional;$/;"	m	struct:SDDS::parser::data_parser
data_lines	src/Utilities/SDDSParser/data.hpp	/^        qi::rule<Iterator, long(), skipper<Iterator> > data_lines,$/;"	m	struct:SDDS::parser::data_parser
data_m	src/Utilities/SDDSParser/file.hpp	/^        data_parser<Iterator> data_m;$/;"	m	struct:SDDS::parser::file_parser
data_mode	src/Utilities/SDDSParser/data.hpp	/^        qi::rule<Iterator, ast::datamode(), skipper<Iterator> > data_mode;$/;"	m	struct:SDDS::parser::data_parser
data_parser	src/Utilities/SDDSParser/data.cpp	/^template struct SDDS::parser::data_parser<iterator_t>;$/;"	m	class:SDDS::parser	typeref:struct:SDDS::parser::	file:
data_parser	src/Utilities/SDDSParser/data.hpp	/^    struct data_parser: qi::grammar<Iterator, data(), skipper<Iterator> >$/;"	s	namespace:SDDS::parser
data_parser	src/Utilities/SDDSParser/data_def.hpp	/^    data_parser<Iterator>::data_parser(error_handler<Iterator> & _error_handler):$/;"	f	class:SDDS::parser::data_parser
data_row	src/Utilities/SDDSParser/data.hpp	/^                data_row, data_fixed, data_additional;$/;"	m	struct:SDDS::parser::data_parser
data_t	src/Structure/SDDSWriter.h	/^    typedef std::pair<std::string, size_t> data_t;$/;"	t	class:SDDSWriter
data_t	tools/opal2sdds/main.cpp	/^typedef std::map<std::string, std::vector<double> > data_t;$/;"	t	file:
data_unsupported_post	src/Utilities/SDDSParser/data.hpp	/^                data_unsupported_post;$/;"	m	struct:SDDS::parser::data_parser
data_unsupported_pre	src/Utilities/SDDSParser/data.hpp	/^        qi::rule<Iterator, ast::nil(), skipper<Iterator> > data_unsupported_pre,$/;"	m	struct:SDDS::parser::data_parser
dataendian	src/Utilities/SDDSParser/data.hpp	/^        qi::symbols<char, ast::endianess> dataendian;$/;"	m	struct:SDDS::parser::data_parser
datamode	src/Utilities/SDDSParser/ast.hpp	/^        enum datamode { ASCII$/;"	g	namespace:SDDS::ast
datamode	src/Utilities/SDDSParser/data.hpp	/^        qi::symbols<char, ast::datamode> datamode;$/;"	m	struct:SDDS::parser::data_parser
datatype	src/Utilities/SDDSParser/ast.hpp	/^        enum datatype { FLOAT$/;"	g	namespace:SDDS::ast
datatype	src/Utilities/SDDSParser/column.hpp	/^        qi::symbols<char, ast::datatype> datatype;$/;"	m	struct:SDDS::parser::column_parser
datatype	src/Utilities/SDDSParser/parameter.hpp	/^        qi::symbols<char, ast::datatype> datatype;$/;"	m	struct:SDDS::parser::parameter_parser
date	src/Utilities/Timer.cpp	/^    std::string Timer::date() const {$/;"	f	class:OPALTimer::Timer
dcBeam_m	src/PartBunch/PartBunch.hpp	/^    bool dcBeam_m;$/;"	m	class:PartBunch
debug	src/PartBunch/Binning/AdaptBins.h	/^        void debug() {$/;"	f	class:ParticleBinning::AdaptBins
debugFlags_m	src/Structure/BoundaryGeometry.h	/^    int debugFlags_m;$/;"	m	class:BoundaryGeometry
debug_PartInside	src/Structure/BoundaryGeometry.h	/^        debug_PartInside                       = 0x0020,$/;"	e	enum:BoundaryGeometry::DebugFlags
debug_fastIsInside	src/Structure/BoundaryGeometry.h	/^        debug_fastIsInside                     = 0x0002,$/;"	e	enum:BoundaryGeometry::DebugFlags
debug_intersectLineSegmentBoundary	src/Structure/BoundaryGeometry.h	/^        debug_intersectLineSegmentBoundary     = 0x0008,$/;"	e	enum:BoundaryGeometry::DebugFlags
debug_intersectRayBoundary	src/Structure/BoundaryGeometry.h	/^        debug_intersectRayBoundary             = 0x0004,$/;"	e	enum:BoundaryGeometry::DebugFlags
debug_intersectTinyLineSegmentBoundary	src/Structure/BoundaryGeometry.h	/^        debug_intersectTinyLineSegmentBoundary = 0x0010,$/;"	e	enum:BoundaryGeometry::DebugFlags
debug_isInside	src/Structure/BoundaryGeometry.h	/^        debug_isInside                         = 0x0001,$/;"	e	enum:BoundaryGeometry::DebugFlags
debug_name_m	src/PartBunch/Binning/BinHisto.h	/^        std::string debug_name_m;   \/\/\/ \\brief Debug name for identifying the histogram instance.$/;"	m	class:ParticleBinning::Histogram
debyeLength_m	src/Algorithms/DistributionMoments.h	/^    double debyeLength_m;$/;"	m	class:DistributionMoments
decomp_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    std::array<bool, Dim> decomp_m;$/;"	m	class:AlpineManager
decomp_m	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    std::array<bool, Dim> decomp_m;$/;"	m	class:FieldContainer
decomp_m	src/PartBunch/FieldContainer.hpp	/^    std::array<bool, Dim> decomp_m;$/;"	m	class:FieldContainer
decomp_m	src/PartBunch/PartBunch.hpp	/^    std::array<bool, Dim> decomp_m;$/;"	m	class:PartBunch
decorations_m	src/Structure/MeshGenerator.h	/^    std::vector<std::pair<Vector_t<double, 3>, Vector_t<double, 3>>> decorations_m;$/;"	m	class:MeshData
defaultAperture_m	src/AbsBeamline/Component.cpp	/^const std::vector<double> Component::defaultAperture_m = std::vector<double>({1e6, 1e6, 1.0});$/;"	m	class:Component	file:
defaultAperture_m	src/AbsBeamline/Component.h	/^    static const std::vector<double> defaultAperture_m;$/;"	m	class:Component
defaultDistribution_m	src/Track/TrackRun.h	/^    static const std::string defaultDistribution_m;$/;"	m	class:TrackRun
defaultUsed	src/AbstractObjects/Attribute.h	/^inline bool Attribute::defaultUsed() const {$/;"	f	class:Attribute
define	src/AbstractObjects/OpalData.cpp	/^void OpalData::define(Object* newObject) {$/;"	f	class:OpalData
defineExpression	src/Expressions/ATable.cpp	/^    void ATable::defineExpression(PtrToScalar<double> expr) {$/;"	f	class:Expressions::ATable
deg	src/Utilities/MSLang/matheval.hpp	/^            T deg(T x) { return x*boost::math::constants::radian<T>(); }$/;"	f	namespace:matheval::detail::math
deg2rad	src/Physics/Units.h	/^    constexpr double deg2rad = Physics::pi \/ 180;$/;"	m	namespace:Units
delPartFreq	src/Utilities/Options.cpp	/^    unsigned int delPartFreq = 1;$/;"	m	namespace:Options	file:
deleteFieldmap	src/Fields/Fieldmap.cpp	/^void Fieldmap::deleteFieldmap(std::string Filename) {$/;"	f	class:Fieldmap
deleteFunc	src/Fields/Interpolation/Interpolator3dGridTo1d.cpp	/^void Interpolator3dGridTo1d::deleteFunc(double*** func) {$/;"	f	class:interpolation::Interpolator3dGridTo1d
deleteInstance	src/AbstractObjects/OpalData.cpp	/^void OpalData::deleteInstance() {$/;"	f	class:OpalData
deleteOnTransverseExit_m	src/AbsBeamline/ElementBase.h	/^    bool deleteOnTransverseExit_m = true;$/;"	m	class:ElementBase
delete_matrix	src/Fields/Interpolation/MMatrix.cpp	/^void MMatrix<double>::delete_matrix()$/;"	f	class:interpolation::MMatrix
delete_matrix	src/Fields/Interpolation/MMatrix.cpp	/^void MMatrix<m_complex>::delete_matrix()$/;"	f	class:interpolation::MMatrix
delete_vector	src/Fields/Interpolation/MVector.h	/^inline void MVector<double>::delete_vector() { if(_vector != nullptr) gsl_vector_free( (gsl_vector*)_vector); }$/;"	f	class:interpolation::MVector
delete_vector	src/Fields/Interpolation/MVector.h	/^inline void MVector<m_complex>::delete_vector() { if(_vector != nullptr) gsl_vector_complex_free( (gsl_vector_complex*)_vector); }$/;"	f	class:interpolation::MVector
deletedParticles_m	src/Algorithms/ParallelTracker.h	/^    bool deletedParticles_m;$/;"	m	class:ParallelTracker
delimiter	src/OpalParser/Statement.cpp	/^bool Statement::delimiter(char c) {$/;"	f	class:Statement
delimiter	src/OpalParser/Statement.cpp	/^bool Statement::delimiter(const char *s) {$/;"	f	class:Statement
deltaTau	src/Track/Track.h	/^    double dtScInit, deltaTau;$/;"	m	class:Track
deltaZ_m	src/Fields/FM1DDynamic_fast.h	/^    double deltaZ_m;                        \/\/\/ Field grid point spacing.$/;"	m	class:FM1DDynamic_fast
deltaZ_m	src/Fields/FM1DElectroStatic_fast.h	/^    double deltaZ_m;                        \/\/\/ Field grid point spacing.$/;"	m	class:FM1DElectroStatic_fast
deltaZ_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    double deltaZ_m;                        \/\/\/ Field grid point spacing.$/;"	m	class:FM1DMagnetoStatic_fast
depth_m	src/Utilities/PortableGraymapReader.h	/^    unsigned short depth_m;$/;"	m	class:PortableGraymapReader
derivIndices_m	src/Fields/Interpolation/PPSolveFactory.h	/^    std::vector< std::vector<int> > derivIndices_m;$/;"	m	class:interpolation::PPSolveFactory
derivOrigins_m	src/Fields/Interpolation/PPSolveFactory.h	/^    std::vector< std::vector<int> > derivOrigins_m;$/;"	m	class:interpolation::PPSolveFactory
derivPoints_m	src/Fields/Interpolation/PPSolveFactory.h	/^    std::vector< std::vector<double> > derivPoints_m;$/;"	m	class:interpolation::PPSolveFactory
derivPolyVec_m	src/Fields/Interpolation/PPSolveFactory.h	/^    std::vector< MVector<double> > derivPolyVec_m;$/;"	m	class:interpolation::PPSolveFactory
derivValues_m	src/Fields/Interpolation/PPSolveFactory.h	/^    std::vector< std::vector<double> > derivValues_m;$/;"	m	class:interpolation::PPSolveFactory
derivate_m	src/Steppers/RK4.hpp	/^bool RK4<FieldFunction, Arguments...>::derivate_m($/;"	f	class:RK4
desc_m	src/Structure/SDDSWriter.h	/^    desc_t desc_m;$/;"	m	class:SDDSWriter
desc_t	src/Structure/SDDSColumn.h	/^                       std::string> desc_t;$/;"	t	class:SDDSColumn
desc_t	src/Structure/SDDSWriter.h	/^    typedef std::pair<std::string, std::string> desc_t;$/;"	t	class:SDDSWriter
descr_	src/Utilities/SDDSParser/SDDSParserException.h	/^    std::string descr_;$/;"	m	class:SDDSParserException
description	src/Utilities/SDDSParser/description.hpp	/^    struct description$/;"	s	namespace:SDDS
description_content	src/Utilities/SDDSParser/description.hpp	/^                description_text, description_content;$/;"	m	struct:SDDS::parser::description_parser
description_m	src/Structure/SDDSColumn.h	/^    desc_t description_m;$/;"	m	class:SDDSColumn
description_m	src/Utilities/SDDSParser/column.hpp	/^        boost::optional<std::string> description_m;$/;"	m	struct:SDDS::column
description_m	src/Utilities/SDDSParser/file.hpp	/^        description_parser<Iterator> description_m;$/;"	m	struct:SDDS::parser::file_parser
description_m	src/Utilities/SDDSParser/parameter.hpp	/^        boost::optional<std::string> description_m;$/;"	m	struct:SDDS::parameter
description_parser	src/Utilities/SDDSParser/description.cpp	/^template struct SDDS::parser::description_parser<iterator_t>;$/;"	m	class:SDDS::parser	typeref:struct:SDDS::parser::	file:
description_parser	src/Utilities/SDDSParser/description.hpp	/^    struct description_parser: qi::grammar<Iterator, description(), skipper<Iterator> >$/;"	s	namespace:SDDS::parser
description_parser	src/Utilities/SDDSParser/description_def.hpp	/^    description_parser<Iterator>::description_parser(error_handler<Iterator> & _error_handler):$/;"	f	class:SDDS::parser::description_parser
description_text	src/Utilities/SDDSParser/description.hpp	/^                description_text, description_content;$/;"	m	struct:SDDS::parser::description_parser
designEnergyChangeable_m	src/AbsBeamline/Corrector.h	/^    bool designEnergyChangeable_m;$/;"	m	class:Corrector
designEnergy_m	src/AbsBeamline/Corrector.h	/^    double designEnergy_m;$/;"	m	class:Corrector
designEnergy_m	src/AbsBeamline/RFCavity.h	/^    double designEnergy_m;$/;"	m	class:RFCavity
destroy	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::destroy(size_t M, size_t I, bool doNow) {$/;"	f	class:PartBunch
destroyT	src/Algorithms/.PartBunchBase.hpp	/^size_t PartBunch<T, Dim>::destroyT() {$/;"	f	class:PartBunch
detail	src/Utilities/MSLang/matheval.hpp	/^    namespace detail {$/;"	n	namespace:matheval
determinant	src/Fields/Interpolation/MMatrix.cpp	/^double MMatrix<double>::determinant() const$/;"	f	class:interpolation::MMatrix
determinant	src/Fields/Interpolation/MMatrix.cpp	/^m_complex MMatrix<m_complex>::determinant() const$/;"	f	class:interpolation::MMatrix
determineHistoReductionMode	src/PartBunch/Binning/BinningTools.h	/^    HistoReductionMode determineHistoReductionMode(HistoReductionMode modePreference, bin_index_type binCount) {$/;"	f	namespace:ParticleBinning
determineNumSamplingPoints	src/Fields/Astra1D_fast.cpp	/^bool Astra1D_fast::determineNumSamplingPoints(std::ifstream& file) {$/;"	f	class:Astra1D_fast
determinePercentilesDetail	src/Algorithms/DistributionMoments.cpp	/^std::pair<double, DistributionMoments::iterator_t> DistributionMoments::determinePercentilesDetail($/;"	f	class:DistributionMoments
determineRandInit	src/Distribution/FlatTop.hpp	/^    static size_t determineRandInit() {$/;"	f	class:FlatTop
dfCoefficients_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    std::vector<std::vector<double> > dfCoefficients_m;$/;"	m	class:ScalingFFAMagnet
dfCoefficients_m	src/AbsBeamline/VerticalFFAMagnet.h	/^    std::vector<std::vector<double> > dfCoefficients_m;$/;"	m	class:VerticalFFAMagnet
differentiatePolynomial	src/AbsBeamline/MultipoleTFunctions/Polynomial.cpp	/^void Polynomial::differentiatePolynomial() {$/;"	f	class:polynomial::Polynomial
differentiateS	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^void DifferentialOperatorTwo::differentiateS() {$/;"	f	class:polynomial::DifferentialOperatorTwo
differentiateS	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^void PolynomialSum::differentiateS() {$/;"	f	class:polynomial::PolynomialSum
differentiateS	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^    void RecursionRelationTwo::differentiateS() {$/;"	f	class:polynomial::RecursionRelationTwo
differentiateS	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^void TwoPolynomial::differentiateS() {$/;"	f	class:polynomial::TwoPolynomial
differentiateX	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^void DifferentialOperator::differentiateX() {$/;"	f	class:polynomial::DifferentialOperator
differentiateX	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^void DifferentialOperatorTwo::differentiateX() {$/;"	f	class:polynomial::DifferentialOperatorTwo
differentiateX	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^void PolynomialSum::differentiateX() {$/;"	f	class:polynomial::PolynomialSum
differentiateX	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.h	/^    void RecursionRelation::differentiateX() {$/;"	f	class:polynomial::RecursionRelation
differentiateX	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^    void RecursionRelationTwo::differentiateX() {$/;"	f	class:polynomial::RecursionRelationTwo
differentiateX	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^void TwoPolynomial::differentiateX() {$/;"	f	class:polynomial::TwoPolynomial
dipole	src/Fields/SectorMagneticFieldMap.h	/^    enum symmetry {none, dipole};$/;"	e	enum:SectorMagneticFieldMap::symmetry
dir	src/AbstractObjects/Directory.h	/^    ObjectDir dir;$/;"	m	class:Directory
direction	src/Structure/BoundaryGeometry.cpp	/^    Vector_t<double, 3> direction;$/;"	m	class:Ray	file:
direction_m	src/Algorithms/PartBins.h	/^    int direction_m;$/;"	m	class:AscendingLocationSort
direction_m	src/Algorithms/PartBins.h	/^    int direction_m;$/;"	m	class:DescendingLocationSort
disableDebug	src/Structure/BoundaryGeometry.h	/^    inline void disableDebug(enum DebugFlags flags) {$/;"	f	class:BoundaryGeometry
disableFieldmapWarning	src/Fields/Fieldmap.cpp	/^void Fieldmap::disableFieldmapWarning() {$/;"	f	class:Fieldmap
distArea_m	src/Distribution/FlatTop.hpp	/^    double distArea_m;$/;"	m	class:FlatTop
distMoments_m	src/PartBunch/ParticleContainer.hpp	/^    DistributionMoments distMoments_m;$/;"	m	class:ParticleContainer
distT_m	src/Distribution/Distribution.h	/^    std::string distT_m;  \/\/\/ Distribution type strings.$/;"	m	class:Distribution
distTrackBack_m	src/Algorithms/OrbitThreader.h	/^    double distTrackBack_m;$/;"	m	class:OrbitThreader
dist_m	src/Track/TrackRun.h	/^    std::shared_ptr<Distribution> dist_m;$/;"	m	class:TrackRun
distrTypeT_m	src/Distribution/Distribution.h	/^    DistributionType distrTypeT_m;$/;"	m	class:Distribution
distributionMoments_m	tests/classic_src/Algorithms/DistributionMomentsTestFixture.h	/^    static DistributionMoments distributionMoments_m;$/;"	m	class:DistributionMomentsTest
distrs_m	src/Track/TrackRun.h	/^    std::vector<Distribution*> distrs_m;$/;"	m	class:TrackRun
divB	tests/opal_test_utilities/Maxwell.cpp	/^double MaxwellTest::divB(const Vector_t &R, double t) const {$/;"	f	class:MaxwellTest
divide	src/Expressions/Expressions.cpp	/^    static TFunction2<double, double> divide = {"\/", 5, Div};$/;"	m	namespace:Expressions	file:
divideBy	src/Utilities/MSLang.h	/^        virtual void divideBy(std::vector<std::shared_ptr<Base> > &divisors) {$/;"	f	struct:mslang::Base
dividend_m	src/Utilities/MSLang/Difference.h	/^        Function* dividend_m;$/;"	m	struct:mslang::Difference
divisor_m	src/Utilities/MSLang.h	/^        std::vector<std::shared_ptr<Base> > divisor_m;$/;"	m	struct:mslang::Base
divisor_m	src/Utilities/MSLang/Difference.h	/^        Function* divisor_m;$/;"	m	struct:mslang::Difference
doAdvance_m	src/Steppers/LF2.hpp	/^bool LF2<FieldFunction, Arguments...>::doAdvance_m($/;"	f	class:LF2
doAdvance_m	src/Steppers/RK4.hpp	/^bool RK4<FieldFunction, Arguments...>::doAdvance_m($/;"	f	class:RK4
doBinaryRepartition	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::doBinaryRepartition() {$/;"	f	class:ParallelTracker
doCheck	src/AbsBeamline/Probe.cpp	/^bool Probe::doCheck(PartBunch_t* bunch, const int turnnumber, const double t, const double tstep) {$/;"	f	class:Probe
doEmission	src/Algorithms/PartBins.h	/^    bool doEmission() {return getNp() > 0;}$/;"	f	class:PartBins
doFinalise	src/AbsBeamline/PluginElement.h	/^    virtual void doFinalise(){};$/;"	f	class:PluginElement
doFinaliseCheck	src/AbsBeamline/PluginElement.h	/^    virtual bool doFinaliseCheck(PartBunch_t*, bool flagNeedUpdate) {$/;"	f	class:PluginElement
doFullRebin	src/PartBunch/Binning/AdaptBins.h	/^        void doFullRebin(bin_index_type nBins, bool recalculateLimits = true, HistoReductionMode modePreference = HistoReductionMode::Standard) {$/;"	f	class:ParticleBinning::AdaptBins
doGoOffline	src/AbsBeamline/PluginElement.h	/^    virtual void doGoOffline(){};$/;"	f	class:PluginElement
doGoOffline	src/AbsBeamline/Probe.cpp	/^void Probe::doGoOffline() {$/;"	f	class:Probe
doInitialise	src/AbsBeamline/PluginElement.h	/^    virtual void doInitialise(PartBunch_t* \/*bunch*\/) {$/;"	f	class:PluginElement
doInitialise	src/AbsBeamline/Probe.cpp	/^void Probe::doInitialise(PartBunch_t* bunch) {$/;"	f	class:Probe
doPreCheck	src/AbsBeamline/PluginElement.h	/^    virtual bool doPreCheck(PartBunch_t*) {$/;"	f	class:PluginElement
doPreCheck	src/AbsBeamline/Probe.cpp	/^bool Probe::doPreCheck(PartBunch_t* bunch) {$/;"	f	class:Probe
doSetGeom	src/AbsBeamline/PluginElement.h	/^    virtual void doSetGeom(){};$/;"	f	class:PluginElement
do_binaryRepart	src/Algorithms/.PartBunch.cpp	/^void PartBunch::do_binaryRepart() {$/;"	f	class:PartBunch
do_binaryRepart	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::do_binaryRepart() {$/;"	f	class:PartBunch
do_binaryRepart	src/PartBunch/PartBunch.hpp	/^    void do_binaryRepart()$/;"	f	class:PartBunch
do_fit_plots	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^    def do_fit_plots(self):$/;"	m	class:PlotInterpolation
do_residual_plot	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^    def do_residual_plot(self):$/;"	m	class:PlotInterpolation
do_truth_plot	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^    def do_truth_plot(self):$/;"	m	class:PlotInterpolation
doc_string	src/Elements/OpalOffset/OpalGlobalCartesianOffset.cpp	/^const std::string OpalGlobalCartesianOffset::doc_string =$/;"	m	class:OpalOffset::OpalGlobalCartesianOffset	file:
doc_string	src/Elements/OpalOffset/OpalGlobalCartesianOffset.h	/^    static const std::string doc_string;$/;"	m	class:OpalOffset::OpalGlobalCartesianOffset
doc_string	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.cpp	/^const std::string OpalGlobalCylindricalOffset::doc_string =$/;"	m	class:OpalOffset::OpalGlobalCylindricalOffset	file:
doc_string	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.h	/^    static const std::string doc_string;$/;"	m	class:OpalOffset::OpalGlobalCylindricalOffset
doc_string	src/Elements/OpalOffset/OpalLocalCartesianOffset.cpp	/^const std::string OpalLocalCartesianOffset::doc_string =$/;"	m	class:OpalOffset::OpalLocalCartesianOffset	file:
doc_string	src/Elements/OpalOffset/OpalLocalCartesianOffset.h	/^    static const std::string doc_string;$/;"	m	class:OpalOffset::OpalLocalCartesianOffset
doc_string	src/Elements/OpalOffset/OpalLocalCylindricalOffset.cpp	/^const std::string OpalLocalCylindricalOffset::doc_string =$/;"	m	class:OpalOffset::OpalLocalCylindricalOffset	file:
doc_string	src/Elements/OpalOffset/OpalLocalCylindricalOffset.h	/^    static const std::string doc_string;$/;"	m	class:OpalOffset::OpalLocalCylindricalOffset
docstring_m	src/Elements/OpalVerticalFFAMagnet.cpp	/^std::string OpalVerticalFFAMagnet::docstring_m =$/;"	m	class:OpalVerticalFFAMagnet	file:
docstring_m	src/Elements/OpalVerticalFFAMagnet.h	/^    static std::string docstring_m;$/;"	m	class:OpalVerticalFFAMagnet
doesIntersect	src/Utilities/MSLang/BoundingBox2D.cpp	/^    bool BoundingBox2D::doesIntersect(const BoundingBox2D &bb) const {$/;"	f	class:mslang::BoundingBox2D
doesOverlap	src/Utilities/RingSection.cpp	/^bool RingSection::doesOverlap(double phiStart, double phiEnd) const {$/;"	f	class:RingSection
domain2_m	src/.Solvers/FFTPoissonSolver.h	/^    NDIndex<3> domain2_m;  \/\/ doubled gridsize (2*Nx,2*Ny,2*Nz)$/;"	m	class:FFTPoissonSolver
domain3_m	src/.Solvers/FFTPoissonSolver.h	/^    NDIndex<3> domain3_m;  \/\/ field for the complex values of the RC transformation$/;"	m	class:FFTPoissonSolver
domain4_m	src/.Solvers/FFTPoissonSolver.h	/^    NDIndex<3> domain4_m;$/;"	m	class:FFTPoissonSolver
domainFFTConstruct_m	src/.Solvers/FFTPoissonSolver.h	/^    NDIndex<3> domainFFTConstruct_m;$/;"	m	class:FFTPoissonSolver
domain_m	src/.Solvers/FFTPoissonSolver.h	/^    NDIndex<3> domain_m;  \/\/ original domain, gridsize$/;"	m	class:FFTPoissonSolver
domain_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    ippl::NDIndex<Dim> domain_m;$/;"	m	class:AlpineManager
domain_m	src/PartBunch/PartBunch.hpp	/^    ippl::NDIndex<Dim> domain_m;$/;"	m	class:PartBunch
dot	src/BeamlineGeometry/Euclid3D.cpp	/^Euclid3D Euclid3D::dot(const Euclid3D &rhs) const {$/;"	f	class:Euclid3D
dot	src/BeamlineGeometry/Vector3D.cpp	/^double dot(const Vector3D &lhs, const Vector3D &rhs) {$/;"	f
dot	src/OPALTypes.h	/^KOKKOS_INLINE_FUNCTION double dot(const Vector_t<T, D>& v) {$/;"	f
dot	src/OPALTypes.h	/^KOKKOS_INLINE_FUNCTION double dot(const Vector_t<T, D>& v, const Vector_t<T, D>& w) {$/;"	f
dotBy	src/BeamlineGeometry/Euclid3D.cpp	/^const Euclid3D &Euclid3D::dotBy(const Euclid3D &rhs) {$/;"	f	class:Euclid3D
dotProduct	src/Utilities/Mesher.cpp	/^double Mesher::dotProduct(unsigned int i,$/;"	f	class:Mesher
dotProduct	src/Utilities/Mesher.cpp	/^double dotProduct(const Vector_t<double, 3> &a,$/;"	f
doubleDifferentiateS	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^void DifferentialOperator::doubleDifferentiateS() {$/;"	f	class:polynomial::DifferentialOperator
doubleVectorToString	src/Utilities/Util.cpp	/^    std::string doubleVectorToString(const std::vector<double>& v) {$/;"	f	namespace:Util
download_gtest	tests/tools/install_gtest.bash	/^download_gtest() {$/;"	f
driftToCorrectPositionAndSave	src/AbsBeamline/Monitor.cpp	/^void Monitor::driftToCorrectPositionAndSave($/;"	f	class:Monitor
dropFieldmaps	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::dropFieldmaps() {$/;"	f	class:RFCavity
ds	src/Structure/DataSink.h	/^    DataSink(const DataSink& ds)         = delete;$/;"	m	class:DataSink
ds_m	src/Track/TrackRun.h	/^    DataSink* ds_m;$/;"	m	class:TrackRun
dt	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> dt(size_t i) {$/;"	f	class:PartBunch
dt	src/PartBunch/ParticleContainer.hpp	/^    ippl::ParticleAttrib<double> dt;$/;"	m	class:ParticleContainer
dtCurrentTrack_m	src/Algorithms/ParallelTracker.h	/^    double dtCurrentTrack_m;$/;"	m	class:ParallelTracker
dtScInit	src/Track/Track.h	/^    double dtScInit, deltaTau;$/;"	m	class:Track
dt_m	src/Algorithms/OrbitThreader.h	/^    double dt_m;$/;"	m	class:OrbitThreader
dt_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    double dt_m;$/;"	m	class:AlpineManager
dt_m	src/PartBunch/PartBunch.hpp	/^    double dt_m;$/;"	m	class:PartBunch
dual	src/Fields/Interpolation/NDGrid.cpp	/^Mesh* NDGrid::dual() const {$/;"	f	class:interpolation::NDGrid
dual	src/Fields/Interpolation/ThreeDGrid.cpp	/^Mesh* ThreeDGrid::dual() const {$/;"	f	class:interpolation::ThreeDGrid
dummy	src/AbsBeamline/MultipoleT.h	/^    BMultipoleField dummy;$/;"	m	class:MultipoleT
dummy	src/AbsBeamline/MultipoleTBase.h	/^    BMultipoleField dummy;$/;"	m	class:MultipoleTBase
dummy	src/AbsBeamline/ScalingFFAMagnet.h	/^    BMultipoleField dummy;$/;"	m	class:ScalingFFAMagnet
dummy	src/AbsBeamline/VerticalFFAMagnet.h	/^    BMultipoleField dummy;$/;"	m	class:VerticalFFAMagnet
dump	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    virtual void dump() { \/* default does nothing *\/ };$/;"	f	class:AlpineManager
dumpData	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    void dumpData(int iteration) {$/;"	f	class:ChargedParticles
dumpH5	src/Structure/DataSink.cpp	/^int DataSink::dumpH5($/;"	f	class:DataSink
dumpH5	src/Structure/DataSink.cpp	/^void DataSink::dumpH5(PartBunch_t* beam, Vector_t<double, 3> FDext[]) const {$/;"	f	class:DataSink
dumpLandau	src/PartBunch/Binning/test/alpine/BinningLandauDampingManager.h	/^    void dumpLandau(const View& Eview) {$/;"	f	class:LandauDampingManager
dumpSDDS	src/Structure/DataSink.cpp	/^void DataSink::dumpSDDS($/;"	f	class:DataSink
dumpStats	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::dumpStats(long long step, bool psDump, bool statDump) {$/;"	f	class:ParallelTracker
dumpsSet_m	src/BasicActions/DumpEMFields.cpp	/^std::unordered_set<DumpEMFields*> DumpEMFields::dumpsSet_m;$/;"	m	class:DumpEMFields	file:
dumpsSet_m	src/BasicActions/DumpEMFields.h	/^    static std::unordered_set<DumpEMFields*> dumpsSet_m;$/;"	m	class:DumpEMFields
dumpsSet_m	src/BasicActions/DumpFields.cpp	/^std::unordered_set<DumpFields*> DumpFields::dumpsSet_m;$/;"	m	class:DumpFields	file:
dumpsSet_m	src/BasicActions/DumpFields.h	/^    static std::unordered_set<DumpFields*> dumpsSet_m;$/;"	m	class:DumpFields
dvector_t	src/Algorithms/ParallelTracker.h	/^    typedef std::vector<double> dvector_t;$/;"	t	class:ParallelTracker
dynamic	src/AbstractObjects/Table.h	/^    bool dynamic;$/;"	m	class:Table
e	src/Physics/Physics.h	/^    constexpr double e          = 2.7182818284590452354;$/;"	m	namespace:Physics
e0m	src/Physics/Physics.h	/^    constexpr double e0m        = 1.75882001076e+11;$/;"	m	namespace:Physics
e0mc	src/Physics/Physics.h	/^    constexpr double e0mc       = e0m \/ c;$/;"	m	namespace:Physics
eV2GeV	src/Physics/Units.h	/^    constexpr double eV2GeV = 1 \/ GeV2eV;$/;"	m	namespace:Units
eV2MeV	src/Physics/Units.h	/^    constexpr double eV2MeV = 1 \/ MeV2eV;$/;"	m	namespace:Units
eV2keV	src/Physics/Units.h	/^    constexpr double eV2keV = 1 \/ keV2eV;$/;"	m	namespace:Units
eV2kg	src/Physics/Units.h	/^    constexpr double eV2kg = 1.782661921e-36;$/;"	m	namespace:Units
east	src/.Solvers/IrregularDomain.h	/^        T east;    \/\/ x+1, y,   z$/;"	m	struct:IrregularDomain::Stencil
ebDump	src/Utilities/Options.cpp	/^    bool ebDump = false;$/;"	m	namespace:Options	file:
echo	src/Utilities/Options.cpp	/^    bool echo = false;$/;"	m	namespace:Options	file:
echoFlag	src/OpalParser/FileStream.cpp	/^bool FileStream::echoFlag = false;$/;"	m	class:FileStream	file:
echoFlag	src/OpalParser/FileStream.h	/^    static bool echoFlag;$/;"	m	class:FileStream
edgePoints_m	src/Fields/Interpolation/PPSolveFactory.h	/^    std::vector<std::vector<std::vector<int> > > edgePoints_m;$/;"	m	class:interpolation::PPSolveFactory
efm_map	src/AbsBeamline/EndFieldModel/EndFieldModel.cpp	/^std::map<std::string, std::shared_ptr<EndFieldModel> > EndFieldModel::efm_map;$/;"	m	class:endfieldmodel::EndFieldModel	file:
efm_map	src/AbsBeamline/EndFieldModel/EndFieldModel.h	/^  static std::map<std::string, std::shared_ptr<EndFieldModel> > efm_map;$/;"	m	class:endfieldmodel::EndFieldModel
eg_m	src/Algorithms/.PartBunch.h	/^    VField_t eg_m;$/;"	m	class:PartBunch
eigenvalues	src/Fields/Interpolation/MMatrix.cpp	/^MVector<m_complex> MMatrix<Tmplt>::eigenvalues() const$/;"	f	class:interpolation::MMatrix
eigenvectors	src/Fields/Interpolation/MMatrix.cpp	/^std::pair<MVector<m_complex>, MMatrix<m_complex> > MMatrix<Tmplt>::eigenvectors() const$/;"	f	class:interpolation::MMatrix
elemedgeSet_m	src/AbsBeamline/ElementBase.h	/^    bool elemedgeSet_m;$/;"	m	class:ElementBase
elementEdge_m	src/AbsBeamline/ElementBase.h	/^    double elementEdge_m;$/;"	m	class:ElementBase
elementEdge_m	src/Algorithms/OrbitThreader.h	/^        double elementEdge_m;$/;"	m	struct:OrbitThreader::elementPosition
elementID	src/AbsBeamline/ElementBase.h	/^    std::string elementID;$/;"	m	class:ElementBase
elementLength	src/Expressions/SFunction.h	/^    double elementLength;$/;"	m	class:SFunction
elementPosition	src/Algorithms/OrbitThreader.h	/^    struct elementPosition {$/;"	s	class:OrbitThreader
elementPositionComp	src/Algorithms/OrbitThreader.h	/^    struct elementPositionComp {$/;"	s	class:OrbitThreader
elementPosition_m	src/AbsBeamline/ElementBase.h	/^    double elementPosition_m;$/;"	m	class:ElementBase
elementRegistry_m	src/Algorithms/OrbitThreader.h	/^    std::multimap<std::string, elementPosition> elementRegistry_m;$/;"	m	class:OrbitThreader
elementTypeToString_s	src/AbsBeamline/ElementBase.cpp	/^const std::map<ElementType, std::string> ElementBase::elementTypeToString_s = {$/;"	m	class:ElementBase	file:
elementTypeToString_s	src/AbsBeamline/ElementBase.h	/^    static const std::map<ElementType, std::string> elementTypeToString_s;$/;"	m	class:ElementBase
element_m	src/Utilities/ClassicField.h	/^    std::shared_ptr<Component> element_m;$/;"	m	class:ClassicField
element_pair	src/Algorithms/ParallelTracker.h	/^    typedef std::pair<double[8], Component*> element_pair;$/;"	t	class:ParallelTracker
elements	src/Algorithms/IndexMap.cpp	/^enum elements {$/;"	g	file:
elements_m	src/Elements/OpalBeamline.h	/^    FieldList elements_m;$/;"	m	class:OpalBeamline
elements_m	src/Structure/MeshGenerator.h	/^    std::vector<MeshData> elements_m;$/;"	m	class:MeshGenerator
else_block	src/OpalParser/IfStatement.h	/^    Statement *else_block;$/;"	m	class:IfStatement
emissionSteps_m	src/Algorithms/ParallelTracker.h	/^    unsigned int emissionSteps_m;$/;"	m	class:ParallelTracker
emitParticles	src/Algorithms/.PartBunchBase.hpp	/^size_t PartBunch<T, Dim>::emitParticles(double eZ) {$/;"	f	class:PartBunch
emitParticles	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::emitParticles(long long step) {$/;"	f	class:ParallelTracker
emitParticles	src/Distribution/SamplingBase.hpp	/^       virtual void emitParticles(double t, double dt) {}$/;"	f	class:SamplingBase
emitParticles	src/PartBunch/PartBunch.hpp	/^    size_t emitParticles(double eZ) {$/;"	f	class:PartBunch
emitting_m	src/Distribution/Distribution.h	/^    bool emitting_m;                     \/\/\/ Distribution is an emitted, and is currently$/;"	m	class:Distribution
emitting_m	src/Distribution/FlatTop.hpp	/^    bool emitting_m;$/;"	m	class:FlatTop
enableDebug	src/Structure/BoundaryGeometry.h	/^    inline void enableDebug(enum DebugFlags flags) {$/;"	f	class:BoundaryGeometry
enableHDF5	src/Utilities/Options.cpp	/^    bool enableHDF5 = true;$/;"	m	namespace:Options	file:
enableVTK	src/Utilities/Options.cpp	/^    bool enableVTK = true;$/;"	m	namespace:Options	file:
end	src/AbsBeamline/AttributeSet.h	/^inline AttributeSet::const_iterator AttributeSet::end() const$/;"	f	class:AttributeSet
end	src/AbsBeamline/SpecificElementVisitor.h	/^typename SpecificElementVisitor<ELEM>::const_iterator_t SpecificElementVisitor<ELEM>::end() const{$/;"	f	class:SpecificElementVisitor
end	src/AbsBeamline/SpecificElementVisitor.h	/^typename SpecificElementVisitor<ELEM>::iterator_t SpecificElementVisitor<ELEM>::end(){$/;"	f	class:SpecificElementVisitor
end	src/AbstractObjects/Directory.cpp	/^ObjectDir::const_iterator Directory::end() const {$/;"	f	class:Directory
end	src/AbstractObjects/Directory.cpp	/^ObjectDir::iterator Directory::end() {$/;"	f	class:Directory
end	src/Algorithms/.PartBunchBase.h	/^    ConstIterator end() const {$/;"	f	class:PartBunch
end	src/Algorithms/.PartBunchBase.h	/^typename PartBunch<T, Dim>::ConstIterator end(PartBunch<T, Dim> const& bunch) {$/;"	f
end	src/Algorithms/IndexMap.h	/^        second_type end;$/;"	m	struct:IndexMap::Range
end	src/Fields/Interpolation/NDGrid.h	/^Mesh::Iterator NDGrid::end() const {$/;"	f	class:interpolation::NDGrid
end	src/Fields/Interpolation/ThreeDGrid.cpp	/^Mesh::Iterator ThreeDGrid::end() const {$/;"	f	class:interpolation::ThreeDGrid
endFieldName_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    std::string endFieldName_m = ""; $/;"	m	class:ScalingFFAMagnet
endField_m	src/AbsBeamline/RFCavity.h	/^    double endField_m;$/;"	m	class:RFCavity
endField_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    endfieldmodel::EndFieldModel* endField_m = nullptr;$/;"	m	class:ScalingFFAMagnet
endField_m	src/AbsBeamline/VerticalFFAMagnet.h	/^    std::unique_ptr<endfieldmodel::EndFieldModel> endField_m;$/;"	m	class:VerticalFFAMagnet
endField_m	src/Algorithms/OrbitThreader.h	/^        double endField_m;$/;"	m	struct:OrbitThreader::elementPosition
endOrientation_m	src/Utilities/RingSection.h	/^    Vector_t<double, 3> endOrientation_m;$/;"	m	class:RingSection
endPosition_m	src/Utilities/RingSection.h	/^    Vector_t<double, 3> endPosition_m;$/;"	m	class:RingSection
end_m	src/Utilities/ClassicField.h	/^    double end_m;$/;"	m	class:ClassicField
endfieldmodel	src/AbsBeamline/EndFieldModel/AsymmetricEnge.cpp	/^namespace endfieldmodel {$/;"	n	file:
endfieldmodel	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^namespace endfieldmodel {$/;"	n
endfieldmodel	src/AbsBeamline/EndFieldModel/EndFieldModel.cpp	/^namespace endfieldmodel {$/;"	n	file:
endfieldmodel	src/AbsBeamline/EndFieldModel/EndFieldModel.h	/^namespace endfieldmodel {$/;"	n
endfieldmodel	src/AbsBeamline/EndFieldModel/Enge.cpp	/^namespace endfieldmodel {$/;"	n	file:
endfieldmodel	src/AbsBeamline/EndFieldModel/Enge.h	/^namespace endfieldmodel {$/;"	n
endfieldmodel	src/AbsBeamline/EndFieldModel/Tanh.cpp	/^namespace endfieldmodel {$/;"	n	file:
endfieldmodel	src/AbsBeamline/EndFieldModel/Tanh.h	/^namespace endfieldmodel {$/;"	n
endfieldmodel	src/AbsBeamline/VerticalFFAMagnet.h	/^namespace endfieldmodel {$/;"	n
endianess	src/Utilities/SDDSParser/ast.hpp	/^        enum endianess { BIGENDIAN$/;"	g	namespace:SDDS::ast
energyEvolution_m	src/AbstractObjects/OpalData.cpp	/^    energyEvolution_t energyEvolution_m;$/;"	m	struct:OpalDataImpl	file:
energyEvolution_t	src/AbstractObjects/OpalData.h	/^typedef std::map<double, double> energyEvolution_t;$/;"	t
energy_scale	src/Structure/Beam.h	/^    static const double energy_scale;$/;"	m	class:Beam
engeCoeffsEntry_m	src/Fields/FM1DProfile1.h	/^     std::vector<double> engeCoeffsEntry_m;$/;"	m	class:FM1DProfile1
engeCoeffsExit_m	src/Fields/FM1DProfile1.h	/^     std::vector<double> engeCoeffsExit_m;$/;"	m	class:FM1DProfile1
engeEnd_m	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^        std::shared_ptr<Enge> engeEnd_m;$/;"	m	class:endfieldmodel::AsymmetricEnge
engeStart_m	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^        std::shared_ptr<Enge> engeStart_m;$/;"	m	class:endfieldmodel::AsymmetricEnge
enlargeIfOutside	src/Structure/ValueRange.h	/^    void enlargeIfOutside(T value)$/;"	f	class:ValueRange
enlargeToContainBoundingBox	src/Structure/BoundingBox.cpp	/^void BoundingBox::enlargeToContainBoundingBox(const BoundingBox& boundingBox) {$/;"	f	class:BoundingBox
enlargeToContainPosition	src/Structure/BoundingBox.cpp	/^void BoundingBox::enlargeToContainPosition(const Vector_t<double, 3>& position) {$/;"	f	class:BoundingBox
enter	src/AbstractObjects/PlaceRep.cpp	/^void PlaceRep::enter(const FlaggedElmPtr &fep) const {$/;"	f	class:PlaceRep
enter	src/AbstractObjects/RangeRep.cpp	/^void RangeRep::enter(const FlaggedElmPtr &fep) const {$/;"	f	class:RangeRep
entranceAngle_m	src/AbsBeamline/MultipoleT.h	/^    double entranceAngle_m;$/;"	m	class:MultipoleT
entranceAngle_m	src/AbsBeamline/MultipoleTBase.h	/^    double entranceAngle_m;$/;"	m	class:MultipoleTBase
entranceParameter1_m	src/Fields/FM1DProfile1.h	/^    double entranceParameter1_m;$/;"	m	class:FM1DProfile1
entranceParameter2_m	src/Fields/FM1DProfile1.h	/^    double entranceParameter2_m;$/;"	m	class:FM1DProfile1
entranceParameter3_m	src/Fields/FM1DProfile1.h	/^    double entranceParameter3_m;$/;"	m	class:FM1DProfile1
entries	src/BeamlineCore/DriftRep.cpp	/^    const Entry entries[] = {$/;"	m	namespace:__anon75	file:
entries	src/BeamlineCore/MonitorRep.cpp	/^    const Entry entries[] = {$/;"	m	namespace:__anon74	file:
entries	src/BeamlineCore/MultipoleRep.cpp	/^    const Entry entries[] = {$/;"	m	namespace:__anon70	file:
entries	src/BeamlineCore/ProbeRep.cpp	/^    static const Entry entries[] = {$/;"	m	namespace:__anon72	file:
entries	src/BeamlineCore/RFCavityRep.cpp	/^    static const Entry entries[] = {$/;"	m	namespace:__anon71	file:
entries	src/BeamlineCore/SolenoidRep.cpp	/^    const Entry entries[] = {$/;"	m	namespace:__anon76	file:
entries	src/BeamlineCore/TravelingWaveRep.cpp	/^    static const Entry entries[] = {$/;"	m	namespace:__anon73	file:
entry_t	src/Algorithms/StepSizeConfig.h	/^    typedef std::tuple<double, double, unsigned long> entry_t;$/;"	t	class:StepSizeConfig
eps2_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> eps2_m;$/;"	m	struct:SetStatistics
eps_norm_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> eps_norm_m;$/;"	m	struct:SetStatistics
epsilon_0	src/Physics/Physics.h	/^    constexpr double epsilon_0  = 8.8541878128e-12;$/;"	m	namespace:Physics
equal	src/Expressions/Expressions.cpp	/^    static const TFunction2<bool, double> equal = {"==", 3, Eq};$/;"	m	namespace:Expressions	file:
erase	src/AbstractObjects/Directory.cpp	/^void Directory::erase() {$/;"	f	class:Directory
erase	src/AbstractObjects/Directory.cpp	/^void Directory::erase(const std::string &name) {$/;"	f	class:Directory
erase	src/AbstractObjects/OpalData.cpp	/^void OpalData::erase(const std::string& name) {$/;"	f	class:OpalData
erfinv	src/Utilities/Util.cpp	/^    double erfinv(double x)  \/\/ inverse error function$/;"	f	namespace:Util
erfinv_a0	src/Utilities/Util.cpp	39;"	d	file:
erfinv_a0	src/Utilities/Util.cpp	97;"	d	file:
erfinv_a1	src/Utilities/Util.cpp	38;"	d	file:
erfinv_a1	src/Utilities/Util.cpp	96;"	d	file:
erfinv_a2	src/Utilities/Util.cpp	37;"	d	file:
erfinv_a2	src/Utilities/Util.cpp	95;"	d	file:
erfinv_a3	src/Utilities/Util.cpp	36;"	d	file:
erfinv_a3	src/Utilities/Util.cpp	94;"	d	file:
erfinv_b0	src/Utilities/Util.cpp	103;"	d	file:
erfinv_b0	src/Utilities/Util.cpp	45;"	d	file:
erfinv_b1	src/Utilities/Util.cpp	102;"	d	file:
erfinv_b1	src/Utilities/Util.cpp	44;"	d	file:
erfinv_b2	src/Utilities/Util.cpp	101;"	d	file:
erfinv_b2	src/Utilities/Util.cpp	43;"	d	file:
erfinv_b3	src/Utilities/Util.cpp	100;"	d	file:
erfinv_b3	src/Utilities/Util.cpp	42;"	d	file:
erfinv_b4	src/Utilities/Util.cpp	41;"	d	file:
erfinv_b4	src/Utilities/Util.cpp	99;"	d	file:
erfinv_c0	src/Utilities/Util.cpp	108;"	d	file:
erfinv_c0	src/Utilities/Util.cpp	50;"	d	file:
erfinv_c1	src/Utilities/Util.cpp	107;"	d	file:
erfinv_c1	src/Utilities/Util.cpp	49;"	d	file:
erfinv_c2	src/Utilities/Util.cpp	106;"	d	file:
erfinv_c2	src/Utilities/Util.cpp	48;"	d	file:
erfinv_c3	src/Utilities/Util.cpp	105;"	d	file:
erfinv_c3	src/Utilities/Util.cpp	47;"	d	file:
erfinv_d0	src/Utilities/Util.cpp	112;"	d	file:
erfinv_d0	src/Utilities/Util.cpp	54;"	d	file:
erfinv_d1	src/Utilities/Util.cpp	111;"	d	file:
erfinv_d1	src/Utilities/Util.cpp	53;"	d	file:
erfinv_d2	src/Utilities/Util.cpp	110;"	d	file:
erfinv_d2	src/Utilities/Util.cpp	52;"	d	file:
errMsg1	src/Fields/SectorMagneticFieldMap.cpp	/^const std::string SectorMagneticFieldMap::IO::errMsg1 =$/;"	m	class:SectorMagneticFieldMap::IO	file:
errMsg1	src/Fields/SectorMagneticFieldMap.h	/^    static const std::string errMsg1;$/;"	m	class:SectorMagneticFieldMap::IO
err_handler	src/Utilities/MSLang/matheval.hpp	/^            expectation_handler err_handler;$/;"	m	struct:matheval::detail::grammar
error	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^const double CoordinateTransform::error = 1e-10;$/;"	m	class:coordinatetransform::CoordinateTransform	file:
error	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^    static const double error;$/;"	m	class:coordinatetransform::CoordinateTransform
errorFlag_m	src/Algorithms/OrbitThreader.h	/^    unsigned int errorFlag_m;$/;"	m	class:OrbitThreader
errorHandlerGSL	tests/Main.cpp	/^    void errorHandlerGSL(const char *reason,$/;"	f	namespace:__anon5
error_handler	src/Utilities/SDDSParser/error_handler.hpp	/^        error_handler(Iterator first, Iterator last)$/;"	f	struct:SDDS::error_handler
error_handler	src/Utilities/SDDSParser/error_handler.hpp	/^    struct error_handler$/;"	s	namespace:SDDS
euclidean_norm	src/OPALTypes.h	/^KOKKOS_INLINE_FUNCTION double euclidean_norm(const Vector_t<T, D>& v) {$/;"	f
euclidean_norm2D	src/Utilities/MSLang.h	/^    double euclidean_norm2D(Vector_t<double, 3> v) {$/;"	f	namespace:mslang
eval_ast	src/Utilities/MSLang/matheval.hpp	/^            explicit eval_ast(symbol_table_t sym) : st(std::move(sym)) {}$/;"	f	class:matheval::detail::eval_ast
eval_ast	src/Utilities/MSLang/matheval.hpp	/^        class eval_ast$/;"	c	namespace:matheval::detail
evaluate	src/Expressions/AAutomatic.h	/^    std::vector<T> AAutomatic<T>::evaluate() {$/;"	f	class:Expressions::AAutomatic
evaluate	src/Expressions/ABinary.h	/^    std::vector<T> ABinary<T, U>::evaluate() const {$/;"	f	class:Expressions::ABinary
evaluate	src/Expressions/AColumn.cpp	/^    std::vector<double> AColumn::evaluate() const {$/;"	f	class:Expressions::AColumn
evaluate	src/Expressions/ADeferred.h	/^    std::vector<T> ADeferred<T>::evaluate() {$/;"	f	class:Expressions::ADeferred
evaluate	src/Expressions/AList.h	/^    std::vector<T> AList<T>::evaluate() const {$/;"	f	class:Expressions::AList
evaluate	src/Expressions/ARefExpr.h	/^    inline std::vector<T> ARefExpr<T>::evaluate() const {$/;"	f	class:Expressions::ARefExpr
evaluate	src/Expressions/ARow.cpp	/^    std::vector<double> ARow::evaluate() const {$/;"	f	class:Expressions::ARow
evaluate	src/Expressions/ASUnary.h	/^    T ASUnary<T>::evaluate() const {$/;"	f	class:Expressions::ASUnary
evaluate	src/Expressions/ATable.cpp	/^    std::vector<double> ATable::evaluate() const {$/;"	f	class:Expressions::ATable
evaluate	src/Expressions/AUnary.h	/^    std::vector<T> AUnary<T, U>::evaluate() const {$/;"	f	class:Expressions::AUnary
evaluate	src/Expressions/AValue.h	/^    std::vector<T> AValue<T>::evaluate() {$/;"	f	class:Expressions::AValue
evaluate	src/Expressions/Indexer.h	/^    T Indexer<T>::evaluate() const {$/;"	f	class:Expressions::Indexer
evaluate	src/Expressions/SAutomatic.h	/^    T SAutomatic<T>::evaluate() {$/;"	f	class:Expressions::SAutomatic
evaluate	src/Expressions/SBinary.h	/^    T SBinary<T, U>::evaluate() const {$/;"	f	class:Expressions::SBinary
evaluate	src/Expressions/SCell.cpp	/^    double SCell::evaluate() const {$/;"	f	class:Expressions::SCell
evaluate	src/Expressions/SConstant.h	/^    T SConstant<T>::evaluate() const {$/;"	f	class:Expressions::SConstant
evaluate	src/Expressions/SDeferred.h	/^    T SDeferred<T>::evaluate() {$/;"	f	class:Expressions::SDeferred
evaluate	src/Expressions/SHash.cpp	/^    double SHash::evaluate() const {$/;"	f	class:Expressions::SHash
evaluate	src/Expressions/SNull.h	/^    T SNull<T>::evaluate() const {$/;"	f	class:Expressions::SNull
evaluate	src/Expressions/SRefAttr.h	/^    T SRefAttr<T>::evaluate() const {$/;"	f	class:Expressions::SRefAttr
evaluate	src/Expressions/SRefExpr.h	/^    inline T SRefExpr<T>::evaluate() const {$/;"	f	class:Expressions::SRefExpr
evaluate	src/Expressions/SUnary.h	/^    T SUnary<T, U>::evaluate() const {$/;"	f	class:Expressions::SUnary
evaluate	src/Expressions/SValue.h	/^    T SValue<T>::evaluate() {$/;"	f	class:Expressions::SValue
evaluate	src/Structure/PeakFinder.cpp	/^void PeakFinder::evaluate(const int& turn) {$/;"	f	class:PeakFinder
evaluate	src/Utilities/MSLang/matheval.hpp	/^        real_t evaluate(typename detail::eval_ast<real_t>::symbol_table_t const &st)$/;"	f	class:matheval::Parser
evaluatePolynomial	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^double DifferentialOperator::evaluatePolynomial($/;"	f	class:polynomial::DifferentialOperator
evaluatePolynomial	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^double DifferentialOperatorTwo::evaluatePolynomial($/;"	f	class:polynomial::DifferentialOperatorTwo
evaluatePolynomial	src/AbsBeamline/MultipoleTFunctions/Polynomial.cpp	/^double Polynomial::evaluatePolynomial(const double &x) const {$/;"	f	class:polynomial::Polynomial
evaluatePolynomial	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.h	/^    double PolynomialSum::evaluatePolynomial(const std::size_t &p,$/;"	f	class:polynomial::PolynomialSum
evaluatePolynomial	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.h	/^    double RecursionRelation::evaluatePolynomial($/;"	f	class:polynomial::RecursionRelation
evaluatePolynomial	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^    double RecursionRelationTwo::evaluatePolynomial($/;"	f	class:polynomial::RecursionRelationTwo
evaluatePolynomial	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^double TwoPolynomial::evaluatePolynomial(const double &x,$/;"	f	class:polynomial::TwoPolynomial
evaluatePolynomial2	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^double PolynomialSum::evaluatePolynomial2($/;"	f	class:polynomial::PolynomialSum
exceedingValuesWarning	src/Fields/Fieldmap.cpp	/^void Fieldmap::exceedingValuesWarning() {$/;"	f	class:Fieldmap
exeName_m	src/Structure/IpplInfoWrapper.h	/^    unsigned int exeName_m;$/;"	m	class:IpplInfoWrapper
execute	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::execute()$/;"	f	class:SpecificElementVisitor
execute	src/AbstractObjects/Object.cpp	/^void Object::execute() {$/;"	f	class:Object
execute	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::execute() {$/;"	f	class:DefaultVisitor
execute	src/Algorithms/OrbitThreader.cpp	/^void OrbitThreader::execute() {$/;"	f	class:OrbitThreader
execute	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::execute() {$/;"	f	class:ParallelTracker
execute	src/BasicActions/Call.cpp	/^void Call::execute() {$/;"	f	class:Call
execute	src/BasicActions/DumpEMFields.cpp	/^void DumpEMFields::execute() {$/;"	f	class:DumpEMFields
execute	src/BasicActions/DumpFields.cpp	/^void DumpFields::execute() {$/;"	f	class:DumpFields
execute	src/BasicActions/Echo.cpp	/^void Echo::execute() {$/;"	f	class:Echo
execute	src/BasicActions/Help.cpp	/^void Help::execute() {$/;"	f	class:Help
execute	src/BasicActions/Option.cpp	/^void Option::execute() {$/;"	f	class:Option
execute	src/BasicActions/PSystem.cpp	/^void PSystem::execute() {$/;"	f	class:PSystem
execute	src/BasicActions/Quit.cpp	/^void Quit::execute()$/;"	f	class:Quit
execute	src/BasicActions/Select.cpp	/^void Select::execute() {$/;"	f	class:Select
execute	src/BasicActions/Stop.cpp	/^void Stop::execute()$/;"	f	class:Stop
execute	src/BasicActions/System.cpp	/^void System::execute() {$/;"	f	class:System
execute	src/BasicActions/Title.cpp	/^void Title::execute() {$/;"	f	class:Title
execute	src/BasicActions/Value.cpp	/^void Value::execute() {$/;"	f	class:Value
execute	src/Distribution/Distribution.cpp	/^void Distribution::execute() {$/;"	f	class:Distribution
execute	src/OpalParser/CompoundStatement.cpp	/^void CompoundStatement::execute(const Parser &parser) {$/;"	f	class:CompoundStatement
execute	src/OpalParser/IfStatement.cpp	/^void IfStatement::execute(const Parser& parser) {$/;"	f	class:IfStatement
execute	src/OpalParser/MacroCmd.cpp	/^void MacroCmd::execute() {$/;"	f	class:MacroCmd
execute	src/OpalParser/OpalParser.cpp	/^void OpalParser::execute(Object* object, const std::string& name) const {$/;"	f	class:OpalParser
execute	src/OpalParser/SimpleStatement.cpp	/^void SimpleStatement::execute(const Parser &parser) {$/;"	f	class:SimpleStatement
execute	src/OpalParser/WhileStatement.cpp	/^void WhileStatement::execute(const Parser& parser) {$/;"	f	class:WhileStatement
execute	src/Structure/Beam.cpp	/^void Beam::execute() {$/;"	f	class:Beam
execute	src/Structure/BoundaryGeometry.cpp	/^void BoundaryGeometry::execute() {$/;"	f	class:BoundaryGeometry
execute	src/Structure/FieldSolverCmd.cpp	/^void FieldSolverCmd::execute() {$/;"	f	class:FieldSolverCmd
execute	src/Tables/RangeSelector.cpp	/^void RangeSelector::execute() {$/;"	f	class:RangeSelector
execute	src/Tables/Selector.cpp	/^void Selector::execute() {$/;"	f	class:Selector
execute	src/Track/TrackCmd.cpp	/^void TrackCmd::execute() {$/;"	f	class:TrackCmd
execute	src/Track/TrackEnd.cpp	/^void TrackEnd::execute() {$/;"	f	class:TrackEnd
execute	src/Track/TrackRun.cpp	/^void TrackRun::execute() {$/;"	f	class:TrackRun
execute	src/Utilities/OpalFilter.cpp	/^void OpalFilter::execute() {$/;"	f	class:OpalFilter
executeInitLocalHistoReduction	src/PartBunch/Binning/AdaptBins.hpp	/^    void AdaptBins<BunchType, BinningSelector>::executeInitLocalHistoReduction(ReducerType& to_reduce) {$/;"	f	class:ParticleBinning::AdaptBins
executeInitLocalHistoReductionTeamFor	src/PartBunch/Binning/AdaptBins.hpp	/^    void AdaptBins<BunchType, BinningSelector>::executeInitLocalHistoReductionTeamFor() {$/;"	f	class:ParticleBinning::AdaptBins
execute_throws	tests/opal_src/BasicActions/DumpEMFieldsTest.cpp	/^void execute_throws(DumpEMFields* dump, std::string reason) {$/;"	f	namespace:DumpEMFieldsTest
execute_throws	tests/opal_src/BasicActions/DumpFieldsTest.cpp	/^void execute_throws(DumpFields* dump, std::string reason) {$/;"	f	namespace:test
exists	src/Structure/SDDSWriter.h	/^inline bool SDDSWriter::exists() const {$/;"	f	class:SDDSWriter
exitArc	src/Expressions/SFunction.h	/^    double exitArc;$/;"	m	class:SFunction
exitParameter1_m	src/Fields/FM1DProfile1.h	/^    double exitParameter1_m;$/;"	m	class:FM1DProfile1
exitParameter2_m	src/Fields/FM1DProfile1.h	/^    double exitParameter2_m;$/;"	m	class:FM1DProfile1
exitParameter3_m	src/Fields/FM1DProfile1.h	/^    double exitParameter3_m;$/;"	m	class:FM1DProfile1
exit_face_slope_m	src/AbsBeamline/Component.h	/^    double exit_face_slope_m;$/;"	m	class:Component
exit_slope_m	src/Fields/FM1DProfile2.h	/^    double exit_slope_m;$/;"	m	class:FM1DProfile2
expectation_handler	src/Utilities/MSLang/matheval.hpp	/^        struct expectation_handler {$/;"	s	namespace:matheval::detail
expr	src/Utilities/RegularExpression.h	/^    Expression *expr;$/;"	m	class:RegularExpression
exprDirectory	src/AbstractObjects/OpalData.cpp	/^    std::set<AttributeBase*> exprDirectory;$/;"	m	struct:OpalDataImpl	file:
exprIterator	src/AbstractObjects/OpalData.cpp	/^    typedef std::set<AttributeBase*>::iterator exprIterator;$/;"	t	struct:OpalDataImpl	file:
expr_ast	src/Utilities/MSLang/matheval.hpp	/^            expr_ast() : tree(nil{}) {}$/;"	f	struct:matheval::detail::expr_ast
expr_ast	src/Utilities/MSLang/matheval.hpp	/^            expr_ast(Expr other) : tree(std::move(other)) {} \/\/ NOLINT$/;"	f	struct:matheval::detail::expr_ast
expr_ast	src/Utilities/MSLang/matheval.hpp	/^        struct expr_ast$/;"	s	namespace:matheval::detail
expr_ptr	src/Expressions/SDeferred.h	/^        PtrToScalar<T> expr_ptr;$/;"	m	class:Expressions::SDeferred
expression	src/Utilities/MSLang/matheval.hpp	/^            qi::rule<Iterator, expr_ast<real_t>(), ascii::space_type> expression;$/;"	m	struct:matheval::detail::grammar
extent	src/Structure/BoundaryGeometry.cpp	/^    inline Vector_t<double, 3> extent() const {$/;"	f	class:Voxel
f	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^double f(double x) {$/;"	f
f64transform	src/Structure/LossDataSink.cpp	/^    void f64transform($/;"	f	namespace:__anon59
f_m	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^  double     ***f_m;$/;"	m	class:interpolation::Interpolator3dGridTo1d
fac_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> fac_m;$/;"	m	struct:SetStatistics
face_plane	src/Structure/BoundaryGeometry.cpp	/^static inline int face_plane(const Vector_t<double, 3>& p) {$/;"	f	file:
factor	src/Utilities/MSLang/matheval.hpp	/^            qi::rule<Iterator, expr_ast<real_t>(), ascii::space_type> factor;$/;"	m	struct:matheval::detail::grammar
factorial	src/AbsBeamline/Multipole.cpp	/^    unsigned int factorial(unsigned int n) {$/;"	f	namespace:__anon22
fallTime_m	src/Distribution/FlatTop.hpp	/^    double fallTime_m;$/;"	m	class:FlatTop
fastIsInside	src/Structure/BoundaryGeometry.cpp	/^int BoundaryGeometry::fastIsInside($/;"	f	class:BoundaryGeometry
fast_m	src/AbsBeamline/RFCavity.h	/^    bool fast_m;$/;"	m	class:RFCavity
fast_m	src/AbsBeamline/Solenoid.h	/^    bool fast_m;$/;"	m	class:Solenoid
fc_m	src/Distribution/SamplingBase.hpp	/^        std::shared_ptr<FieldContainer_t> fc_m;$/;"	m	class:SamplingBase
fetchLine	src/Lines/Line.cpp	/^FlaggedBeamline *Line::fetchLine() const {$/;"	f	class:Line
fetchLine	src/Lines/Sequence.cpp	/^Sequence::TLine* Sequence::fetchLine() const {$/;"	f	class:Sequence
fft_m	src/.Solvers/FFTPoissonSolver.h	/^    std::unique_ptr<FFT_t> fft_m;$/;"	m	class:FFTPoissonSolver
field	src/BeamlineCore/DriftRep.h	/^    NullField field;$/;"	m	class:DriftRep
field	src/BeamlineCore/MarkerRep.h	/^    NullField field;$/;"	m	class:MarkerRep
field	src/BeamlineCore/MonitorRep.h	/^    NullField field;$/;"	m	class:MonitorRep
field	src/BeamlineCore/MultipoleRep.h	/^    BMultipoleField field;$/;"	m	class:MultipoleRep
field	src/BeamlineCore/ProbeRep.h	/^    NullField field;$/;"	m	class:ProbeRep
field	src/BeamlineCore/RFCavityRep.h	/^    AcceleratingField field;$/;"	m	class:RFCavityRep
field	src/BeamlineCore/SolenoidRep.h	/^    ConstBzField field;$/;"	m	class:SolenoidRep
field	src/BeamlineCore/TravelingWaveRep.h	/^    AcceleratingField field;$/;"	m	class:TravelingWaveRep
fieldEvaluationTimer_m	src/Algorithms/ParallelTracker.h	/^    IpplTimings::TimerRef fieldEvaluationTimer_m;$/;"	m	class:ParallelTracker
field_m	tests/opal_test_utilities/Maxwell.h	/^    std::unique_ptr<Component> field_m;$/;"	m	class:MaxwellTest
fieldfunc_m	src/Steppers/Stepper.h	/^    const FieldFunction& fieldfunc_m;$/;"	m	class:Stepper
fieldmap_m	src/AbsBeamline/RFCavity.h	/^    Fieldmap* fieldmap_m;$/;"	m	class:RFCavity
fieldmap_m	src/AbsBeamline/Solenoid.h	/^    Fieldmap* fieldmap_m;$/;"	m	class:Solenoid
file	src/OpalParser/Token.h	/^    std::string file;$/;"	m	class:Token
file	src/Utilities/SDDSParser/file.hpp	/^    struct file$/;"	s	namespace:SDDS
fileName_m	src/Structure/H5PartWrapper.h	/^    std::string fileName_m;$/;"	m	class:H5PartWrapper
fileName_m	src/Structure/LossDataSink.h	/^    std::string fileName_m;$/;"	m	class:LossDataSink
fileName_m	src/Structure/PeakFinder.h	/^    std::string fileName_m;$/;"	m	class:PeakFinder
file_m	src/Fields/FM3DH5BlockBase.h	/^    h5_file_t file_m;$/;"	m	class:FM3DH5BlockBase
file_m	src/Structure/H5PartWrapper.h	/^    h5_file_t file_m;$/;"	m	class:H5PartWrapper
file_parser	src/Utilities/SDDSParser/file.cpp	/^template struct SDDS::parser::file_parser<iterator_t>;$/;"	m	class:SDDS::parser	typeref:struct:SDDS::parser::	file:
file_parser	src/Utilities/SDDSParser/file.hpp	/^    struct file_parser: qi::grammar<Iterator, file(), skipper<Iterator> >$/;"	s	namespace:SDDS::parser
file_parser	src/Utilities/SDDSParser/file_def.hpp	/^    file_parser<Iterator>::file_parser(error_handler<Iterator> & _error_handler):$/;"	f	class:SDDS::parser::file_parser
file_t	tools/opal2sdds/main.cpp	/^typedef h5_file_t file_t;$/;"	t	file:
fileinput	tools/Normalization2DMaps/normalization.py	/^import sys,re,os,string,fileinput$/;"	i
filename_m	src/AbsBeamline/Monitor.h	/^    std::string filename_m; \/**< The name of the outputfile*\/$/;"	m	class:Monitor
filename_m	src/AbsBeamline/RFCavity.h	/^    std::string filename_m; \/**< The name of the inputfile*\/$/;"	m	class:RFCavity
filename_m	src/AbsBeamline/Solenoid.h	/^    std::string filename_m; \/**< The name of the inputfile*\/$/;"	m	class:Solenoid
filename_m	src/BasicActions/DumpEMFields.h	/^    std::string filename_m;$/;"	m	class:DumpEMFields
filename_m	src/BasicActions/DumpFields.h	/^    std::string filename_m;$/;"	m	class:DumpFields
filename_m	src/Fields/SectorMagneticFieldMap.h	/^    const std::string filename_m;$/;"	m	class:SectorMagneticFieldMap
fill	src/Algorithms/PartBins.h	/^    void fill(std::vector<double> &p) {$/;"	f	class:PartBins
fill	src/Expressions/ARefExpr.h	/^    void ARefExpr<T>::fill() const {$/;"	f	class:Expressions::ARefExpr
fill	src/Expressions/SRefAttr.h	/^    void SRefAttr<T>::fill() const {$/;"	f	class:Expressions::SRefAttr
fill	src/Expressions/SRefExpr.h	/^    void SRefExpr<T>::fill() const {$/;"	f	class:Expressions::SRefExpr
fillChanges	src/changes.cpp	/^    void fillChanges() {$/;"	f	namespace:Versions
fillHeader	src/Structure/ElementPositionWriter.cpp	/^void ElementPositionWriter::fillHeader() {$/;"	f	class:ElementPositionWriter
fillHeader	src/Structure/LBalWriter.cpp	/^void LBalWriter::fillHeader() {$/;"	f	class:LBalWriter
fillHeader	src/Structure/MonitorStatisticsWriter.cpp	/^void MonitorStatisticsWriter::fillHeader() {$/;"	f	class:MonitorStatisticsWriter
fillHeader	src/Structure/StatWriter.cpp	/^void StatWriter::fillHeader(const losses_t& losses) {$/;"	f	class:StatWriter
fillHistrogram	src/Distribution/LaserProfile.cpp	/^void LaserProfile::fillHistrogram(unsigned short* image) {$/;"	f	class:LaserProfile
fillLine	src/OpalParser/FileStream.cpp	/^bool FileStream::fillLine() {$/;"	f	class:FileStream
fillMembers	src/Algorithms/DistributionMoments.cpp	/^void DistributionMoments::fillMembers(std::vector<double>& localMoments) {$/;"	f	class:DistributionMoments
fillPositions	src/Lines/SequenceParser.cpp	/^void SequenceParser::fillPositions() const {$/;"	f	class:SequenceParser
filterSpikes	src/Distribution/LaserProfile.cpp	/^void LaserProfile::filterSpikes(unsigned short* image) {$/;"	f	class:LaserProfile
filter_m	src/Utilities/OpalFilter.h	/^    Filter* filter_m;$/;"	m	class:OpalFilter
final	src/AbsBeamline/PluginElement.h	/^    virtual void finalise() final;        \/\/ final since virtual hook doFinalise$/;"	m	class:PluginElement
final	src/AbsBeamline/PluginElement.h	/^    virtual void goOffline() final;       \/\/ final since virtual hook doGoOffline$/;"	m	class:PluginElement
finalise	src/AbsBeamline/Corrector.cpp	/^void Corrector::finalise() {$/;"	f	class:Corrector
finalise	src/AbsBeamline/Drift.cpp	/^void Drift::finalise() {$/;"	f	class:Drift
finalise	src/AbsBeamline/Marker.cpp	/^void Marker::finalise()$/;"	f	class:Marker
finalise	src/AbsBeamline/Monitor.cpp	/^void Monitor::finalise() {$/;"	f	class:Monitor
finalise	src/AbsBeamline/Multipole.cpp	/^void Multipole::finalise() {$/;"	f	class:Multipole
finalise	src/AbsBeamline/MultipoleT.cpp	/^void MultipoleT::finalise() {$/;"	f	class:MultipoleT
finalise	src/AbsBeamline/MultipoleTBase.h	/^inline void MultipoleTBase::finalise() {$/;"	f	class:MultipoleTBase
finalise	src/AbsBeamline/Offset.cpp	/^void Offset::finalise() {$/;"	f	class:Offset
finalise	src/AbsBeamline/PluginElement.cpp	/^void PluginElement::finalise() {$/;"	f	class:PluginElement
finalise	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::finalise() {$/;"	f	class:RFCavity
finalise	src/AbsBeamline/Ring.cpp	/^void Ring::finalise() {$/;"	f	class:Ring
finalise	src/AbsBeamline/ScalingFFAMagnet.cpp	/^void ScalingFFAMagnet::finalise() {$/;"	f	class:ScalingFFAMagnet
finalise	src/AbsBeamline/Solenoid.cpp	/^void Solenoid::finalise() {$/;"	f	class:Solenoid
finalise	src/AbsBeamline/TravelingWave.cpp	/^void TravelingWave::finalise() {$/;"	f	class:TravelingWave
finalise	src/AbsBeamline/VerticalFFAMagnet.cpp	/^void VerticalFFAMagnet::finalise() {$/;"	f	class:VerticalFFAMagnet
finalise	tests/opal_src/Utilities/MockComponent.h	/^    void finalise() {}$/;"	f	class:MockComponent
finalise	tests/opal_src/Utilities/MockComponent.h	/^    void finalise() {}$/;"	f	class:MockComponent2
finaliseCheck	src/AbsBeamline/PluginElement.h	/^    bool finaliseCheck(PartBunch_t* bunch, bool flagNeedUpdate) {$/;"	f	class:PluginElement
find	src/AbstractObjects/BeamSequence.cpp	/^BeamSequence *BeamSequence::find(const std::string &name) {$/;"	f	class:BeamSequence
find	src/AbstractObjects/Directory.cpp	/^Object *Directory::find(const std::string &name) const {$/;"	f	class:Directory
find	src/AbstractObjects/Element.cpp	/^Element *Element::find(const std::string &name) {$/;"	f	class:Element
find	src/AbstractObjects/OpalData.cpp	/^Object* OpalData::find(const std::string& name) {$/;"	f	class:OpalData
find	src/AbstractObjects/Table.cpp	/^Table *Table::find(const std::string &name) {$/;"	f	class:Table
find	src/Distribution/Distribution.cpp	/^Distribution* Distribution::find(const std::string& name) {$/;"	f	class:Distribution
find	src/Expressions/TFind.h	/^    const T *find(const T table[], const std::string &name) {$/;"	f	namespace:Expressions
find	src/OpalParser/OpalParser.cpp	/^Object* OpalParser::find(const std::string& name) const {$/;"	f	class:OpalParser
find	src/Structure/Beam.cpp	/^Beam* Beam::find(const std::string& name) {$/;"	f	class:Beam
find	src/Structure/BoundaryGeometry.cpp	/^BoundaryGeometry* BoundaryGeometry::find(const std::string& name) {$/;"	f	class:BoundaryGeometry
find	src/Structure/FieldSolverCmd.cpp	/^FieldSolverCmd* FieldSolverCmd::find(const std::string& name) {$/;"	f	class:FieldSolverCmd
find	src/Track/TrackParser.cpp	/^Object *TrackParser::find(const std::string &name) const {$/;"	f	class:TrackParser
find	src/Utilities/OpalFilter.cpp	/^OpalFilter* OpalFilter::find(const std::string& name) {$/;"	f	class:OpalFilter
findAllEars	src/Utilities/Mesher.cpp	/^std::vector<unsigned int> Mesher::findAllEars() const {$/;"	f	class:Mesher
findAttribute	src/AbstractObjects/Object.cpp	/^Attribute *Object::findAttribute(const std::string &name) {$/;"	f	class:Object
findAttribute	src/AbstractObjects/Object.cpp	/^const Attribute *Object::findAttribute(const std::string &name) const {$/;"	f	class:Object
findDriftLength	src/Lines/Sequence.cpp	/^double Sequence::findDriftLength(TLine::iterator drift) const {$/;"	f	class:Sequence
findFromPositions	src/Lines/SequenceParser.cpp	/^void SequenceParser::findFromPositions() const {$/;"	f	class:SequenceParser
findInsidePoint	src/Structure/BoundaryGeometry.cpp	/^bool BoundaryGeometry::findInsidePoint(void) {$/;"	f	class:BoundaryGeometry
findMaximalRectangle	src/Utilities/MSLang/Mask.cpp	/^    std::pair<Mask::IntPoint, Mask::IntPoint> Mask::findMaximalRectangle(const std::vector<bool> &pixels,$/;"	f	class:mslang::Mask
findNamedPosition	src/Lines/Sequence.cpp	/^Sequence::TLine::iterator Sequence::findNamedPosition(TLine& line, const std::string& name) const {$/;"	f	class:Sequence
findNeighbourPositions	src/Lines/SequenceParser.cpp	/^void SequenceParser::findNeighbourPositions() const {$/;"	f	class:SequenceParser
findStartPosition	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::findStartPosition(const BorisPusher& pusher) {$/;"	f	class:ParallelTracker
finish_plots	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^    def finish_plots(self):$/;"	m	class:PlotInterpolation
finished_m	src/Structure/PeakFinder.h	/^    bool finished_m;$/;"	m	class:PeakFinder
first	src/AbstractObjects/RangeRep.h	/^    PlaceRep first;$/;"	m	class:RangeRep
first	src/Utilities/SDDSParser/error_handler.hpp	/^        Iterator first;$/;"	m	struct:SDDS::error_handler
firstOperand_m	src/Utilities/MSLang/Intersection.h	/^        Function *firstOperand_m;$/;"	m	struct:mslang::Intersection
firstOperand_m	src/Utilities/MSLang/SymmetricDifference.h	/^        Function *firstOperand_m;$/;"	m	struct:mslang::SymmetricDifference
first_m	src/Structure/PeakFinder.h	/^    bool first_m;$/;"	m	class:PeakFinder
first_type	src/Algorithms/IndexMap.h	/^        typedef double first_type;$/;"	t	struct:IndexMap::Range
fixCaseSensitivity	src/Utilities/SDDSParser.cpp	/^void SDDS::SDDSParser::fixCaseSensitivity(std::string &for_string) {$/;"	f	class:SDDS::SDDSParser
fixCaseSensitivity	src/Utilities/SDDSParser.h	/^        static std::string fixCaseSensitivity(const std::string &for_string) {$/;"	f	class:SDDS::SDDSParser
fixPosition	src/AbsBeamline/ElementBase.h	/^inline void ElementBase::fixPosition() {$/;"	f	class:ElementBase
fixed_grid	src/PartBunch/PartBunch.hpp	/^    bool fixed_grid;$/;"	m	class:PartBunch
fl_m	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    FieldLayout_t<Dim> fl_m;$/;"	m	class:FieldContainer
fl_m	src/PartBunch/FieldContainer.hpp	/^    FieldLayout_t<Dim> fl_m;$/;"	m	class:FieldContainer
flag	src/Algorithms/Flagger.h	/^    bool flag;$/;"	m	class:Flagger
flagged	src/AbstractObjects/Object.h	/^    bool flagged;$/;"	m	class:Object
flattopTime_m	src/Distribution/FlatTop.hpp	/^    double flattopTime_m;$/;"	m	class:FlatTop
flipX	src/Distribution/LaserProfile.cpp	/^void LaserProfile::flipX(unsigned short* image) {$/;"	f	class:LaserProfile
flipY	src/Distribution/LaserProfile.cpp	/^void LaserProfile::flipY(unsigned short* image) {$/;"	f	class:LaserProfile
flip_B	src/Algorithms/DefaultVisitor.h	/^    double flip_B;  \/\/ set to -1.0 to flip B fields, when back_beam is true.$/;"	m	class:DefaultVisitor
flip_s	src/Algorithms/DefaultVisitor.h	/^    double flip_s;  \/\/ set to -1.0 to flip direction of s,$/;"	m	class:DefaultVisitor
floatGreaterEqual	src/Fields/SectorMagneticFieldMap.cpp	/^bool SectorMagneticFieldMap::IO::floatGreaterEqual(double in1, double in2) {$/;"	f	class:SectorMagneticFieldMap::IO
floatTolerance_m	src/Fields/SectorMagneticFieldMap.cpp	/^const double SectorMagneticFieldMap::IO::floatTolerance_m = 1e-3;$/;"	m	class:SectorMagneticFieldMap::IO	file:
floatTolerance_m	src/Fields/SectorMagneticFieldMap.h	/^    static const double floatTolerance_m;$/;"	m	class:SectorMagneticFieldMap::IO
float_tolerance	src/AbsBeamline/Offset.cpp	/^double Offset::float_tolerance     = 1e-12;$/;"	m	class:Offset	file:
float_tolerance	src/AbsBeamline/Offset.h	/^    static double float_tolerance;$/;"	m	class:Offset
fname_m	src/Structure/SDDSWriter.h	/^    std::string fname_m;$/;"	m	class:SDDSWriter
fname_m	tests/classic_src/AbsBeamline/SBend3DTest.cpp	/^    std::string fname_m;$/;"	m	class:LoadFieldMap	file:
formals	src/OpalParser/Macro.h	/^    std::vector<std::string> formals;$/;"	m	class:Macro
fourierCoefs_m	src/Fields/FM1DDynamic.h	/^    std::vector<double> fourierCoefs_m;     \/\/\/ Fourier coefficients derived from field map.$/;"	m	class:FM1DDynamic
fourierCoefs_m	src/Fields/FM1DElectroStatic.h	/^    std::vector<double> fourierCoefs_m;     \/\/\/ Fourier coefficients derived from field map.$/;"	m	class:FM1DElectroStatic
fourierCoefs_m	src/Fields/FM1DMagnetoStatic.h	/^    std::vector<double> fourierCoefs_m;     \/\/\/ Fourier coefficients derived from field map.$/;"	m	class:FM1DMagnetoStatic
fout_m	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    std::ofstream fout_m;$/;"	m	class:ScalingFFAMagnetTest	file:
fp_tolerance	src/AbsBeamline/ScalingFFAMagnet.h	/^    const double fp_tolerance = 1e-18;$/;"	m	class:ScalingFFAMagnet
fractionalBBPhiTolerance_m	src/Fields/SectorMagneticFieldMap.h	/^    static const double fractionalBBPhiTolerance_m;$/;"	m	class:SectorMagneticFieldMap
freeMap	src/Fields/Astra1DDynamic.cpp	/^void Astra1DDynamic::freeMap() {$/;"	f	class:Astra1DDynamic
freeMap	src/Fields/Astra1DElectroStatic.cpp	/^void Astra1DElectroStatic::freeMap() {$/;"	f	class:Astra1DElectroStatic
freeMap	src/Fields/Astra1DMagnetoStatic.cpp	/^void Astra1DMagnetoStatic::freeMap() {$/;"	f	class:Astra1DMagnetoStatic
freeMap	src/Fields/Astra1D_fast.cpp	/^void Astra1D_fast::freeMap() {$/;"	f	class:Astra1D_fast
freeMap	src/Fields/FM1DDynamic.cpp	/^void FM1DDynamic::freeMap() {$/;"	f	class:FM1DDynamic
freeMap	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::freeMap() {$/;"	f	class:FM1DDynamic_fast
freeMap	src/Fields/FM1DElectroStatic.cpp	/^void FM1DElectroStatic::freeMap() {$/;"	f	class:FM1DElectroStatic
freeMap	src/Fields/FM1DElectroStatic_fast.cpp	/^void FM1DElectroStatic_fast::freeMap() {$/;"	f	class:FM1DElectroStatic_fast
freeMap	src/Fields/FM1DMagnetoStatic.cpp	/^void FM1DMagnetoStatic::freeMap() {$/;"	f	class:FM1DMagnetoStatic
freeMap	src/Fields/FM1DMagnetoStatic_fast.cpp	/^void FM1DMagnetoStatic_fast::freeMap() {$/;"	f	class:FM1DMagnetoStatic_fast
freeMap	src/Fields/FM1DProfile1.cpp	/^void FM1DProfile1::freeMap() {$/;"	f	class:FM1DProfile1
freeMap	src/Fields/FM1DProfile2.cpp	/^void FM1DProfile2::freeMap() {$/;"	f	class:FM1DProfile2
freeMap	src/Fields/FM2DDynamic.cpp	/^void FM2DDynamic::freeMap() {$/;"	f	class:FM2DDynamic
freeMap	src/Fields/FM2DElectroStatic.cpp	/^void FM2DElectroStatic::freeMap() {$/;"	f	class:FM2DElectroStatic
freeMap	src/Fields/FM2DMagnetoStatic.cpp	/^void FM2DMagnetoStatic::freeMap() {$/;"	f	class:FM2DMagnetoStatic
freeMap	src/Fields/FM3DDynamic.cpp	/^void FM3DDynamic::freeMap() {$/;"	f	class:FM3DDynamic
freeMap	src/Fields/FM3DH5Block.cpp	/^void FM3DH5Block::freeMap() {$/;"	f	class:FM3DH5Block
freeMap	src/Fields/FM3DH5BlockBase.h	/^    virtual void freeMap ($/;"	f	class:FM3DH5BlockBase
freeMap	src/Fields/FM3DH5Block_nonscale.cpp	/^void FM3DH5Block_nonscale::freeMap() {$/;"	f	class:FM3DH5Block_nonscale
freeMap	src/Fields/FM3DMagnetoStatic.cpp	/^void FM3DMagnetoStatic::freeMap() {$/;"	f	class:FM3DMagnetoStatic
freeMap	src/Fields/FM3DMagnetoStaticExtended.cpp	/^void FM3DMagnetoStaticExtended::freeMap() {$/;"	f	class:FM3DMagnetoStaticExtended
freeMap	src/Fields/FM3DMagnetoStaticH5Block.cpp	/^void FM3DMagnetoStaticH5Block::freeMap() {$/;"	f	class:FM3DMagnetoStaticH5Block
freeMap	src/Fields/FMDummy.cpp	/^void FMDummy::freeMap() {$/;"	f	class:FMDummy
freeMap	src/Fields/Fieldmap.cpp	/^void Fieldmap::freeMap(std::string Filename) {$/;"	f	class:Fieldmap
freeMap	src/Fields/SectorMagneticFieldMap.cpp	/^void SectorMagneticFieldMap::freeMap() {$/;"	f	class:SectorMagneticFieldMap
frequency	src/Fields/OscillatingField.h	/^    double frequency;$/;"	m	class:OscillatingField
frequencyName_m	src/AbsBeamline/RFCavity.h	/^    std::string frequencyName_m;$/;"	m	class:RFCavity
frequencyTD_m	src/AbsBeamline/RFCavity.h	/^    std::shared_ptr<AbstractTimeDependence> frequencyTD_m;$/;"	m	class:RFCavity
frequency_m	src/AbsBeamline/RFCavity.h	/^    double frequency_m;  \/**< Read in frequency of time varying field(Hz)*\/$/;"	m	class:RFCavity
frequency_m	src/Fields/Astra1DDynamic.h	/^    double frequency_m;$/;"	m	class:Astra1DDynamic
frequency_m	src/Fields/Astra1DDynamic_fast.h	/^    double frequency_m;$/;"	m	class:Astra1DDynamic_fast
frequency_m	src/Fields/FM1DDynamic.h	/^    double frequency_m;                     \/\/\/ Field angular frequency (Hz).$/;"	m	class:FM1DDynamic
frequency_m	src/Fields/FM1DDynamic_fast.h	/^    double frequency_m;                     \/\/\/ Field angular frequency (Hz).$/;"	m	class:FM1DDynamic_fast
frequency_m	src/Fields/FM2DDynamic.h	/^    double frequency_m;$/;"	m	class:FM2DDynamic
frequency_m	src/Fields/FM3DDynamic.h	/^    double frequency_m;$/;"	m	class:FM3DDynamic
frequency_m	src/Fields/FM3DH5BlockBase.h	/^    double frequency_m;$/;"	m	class:FM3DH5BlockBase
fringeField_l	src/AbsBeamline/MultipoleT.h	/^    endfieldmodel::Tanh fringeField_l;  \/\/ Left$/;"	m	class:MultipoleT
fringeField_l	src/AbsBeamline/MultipoleTBase.h	/^    endfieldmodel::Tanh fringeField_l;  \/\/ Left$/;"	m	class:MultipoleTBase
fringeField_r	src/AbsBeamline/MultipoleT.h	/^    endfieldmodel::Tanh fringeField_r;  \/\/ Right$/;"	m	class:MultipoleT
fringeField_r	src/AbsBeamline/MultipoleTBase.h	/^    endfieldmodel::Tanh fringeField_r;  \/\/ Right$/;"	m	class:MultipoleTBase
fromName	src/Lines/SequenceParser.h	/^        std::string fromName;$/;"	m	struct:SequenceParser::Reference
fromPosition	src/Lines/SequenceParser.h	/^        SequenceMember *fromPosition;$/;"	m	struct:SequenceParser::Reference
front	src/.Solvers/IrregularDomain.h	/^        T front;   \/\/ x,   y,   z-1$/;"	m	struct:IrregularDomain::Stencil
front	src/AbsBeamline/SpecificElementVisitor.h	/^typename SpecificElementVisitor<ELEM>::const_reference_t SpecificElementVisitor<ELEM>::front() const{$/;"	f	class:SpecificElementVisitor
front	src/AbsBeamline/SpecificElementVisitor.h	/^typename SpecificElementVisitor<ELEM>::reference_t SpecificElementVisitor<ELEM>::front() {$/;"	f	class:SpecificElementVisitor
fsName_m	src/Structure/FieldSolverCmd.h	/^    std::string fsName_m;$/;"	m	class:FieldSolverCmdType::FieldSolverCmd
fsType_m	src/Structure/FieldSolverCmd.h	/^    FieldSolverCmdType fsType_m;$/;"	m	class:FieldSolverCmdType::FieldSolverCmd
fs_m	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        std::shared_ptr<FieldSolver_t> fs_m;$/;"	m	class:LoadBalancer
fs_m	src/PartBunch/LoadBalancer.hpp	/^    std::shared_ptr<FieldSolver_t> fs_m;$/;"	m	class:LoadBalancer
fs_m	src/Track/TrackRun.h	/^    std::shared_ptr<FieldSolverCmd> fs_m;$/;"	m	class:TrackRun
fullRange	src/AbstractObjects/RangeRep.h	/^    bool fullRange;$/;"	m	class:RangeRep
fun	src/Expressions/ABinary.h	/^        const TFunction2<T, U> &fun;$/;"	m	class:Expressions::ABinary
fun	src/Expressions/ASUnary.h	/^        const TFunction1<T, const std::vector<T>&> &fun;$/;"	m	class:Expressions::ASUnary
fun	src/Expressions/AUnary.h	/^        const TFunction1<T, U> &fun;$/;"	m	class:Expressions::AUnary
fun	src/Expressions/SBinary.h	/^        const TFunction2<T, U> &fun;$/;"	m	class:Expressions::SBinary
fun	src/Expressions/SNull.h	/^        const TFunction0<T> &fun;$/;"	m	class:Expressions::SNull
fun	src/Expressions/SUnary.h	/^        const TFunction1<T, U> &fun;$/;"	m	class:Expressions::SUnary
func_m	src/Utilities/MSLang/Repeat.h	/^        Function* func_m;$/;"	m	struct:mslang::Repeat
func_m	src/Utilities/MSLang/Rotation.h	/^        Function* func_m;$/;"	m	struct:mslang::Rotation
func_m	src/Utilities/MSLang/Shear.h	/^        Function* func_m;$/;"	m	struct:mslang::Shear
func_m	src/Utilities/MSLang/Translation.h	/^        Function* func_m;$/;"	m	struct:mslang::Translation
funcs_m	src/Utilities/MSLang/Union.h	/^        std::vector<Function*> funcs_m;$/;"	m	struct:mslang::Union
function	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^double AsymmetricEnge::function(double x, int n) const {$/;"	f	class:endfieldmodel::AsymmetricEnge
function	src/AbsBeamline/EndFieldModel/Enge.h	/^double Enge::function(double x, int n) const {$/;"	f	class:endfieldmodel::Enge
function	src/AbsBeamline/EndFieldModel/Tanh.cpp	/^double Tanh::function(double x, int n) const {$/;"	f	class:endfieldmodel::Tanh
function	src/Expressions/TFunction0.h	/^        T(*function)();$/;"	m	struct:Expressions::TFunction0
function	src/Expressions/TFunction1.h	/^        T(*function)(U);$/;"	m	struct:Expressions::TFunction1
function	src/Expressions/TFunction2.h	/^        T(*function)(U, U);$/;"	m	struct:Expressions::TFunction2
function	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^  inline virtual void function$/;"	f	class:interpolation::Interpolator3dGridTo1d
function	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^double*** Interpolator3dGridTo1d::function() const {$/;"	f	class:interpolation::Interpolator3dGridTo1d
function	src/Fields/Interpolation/Interpolator3dGridTo3d.cpp	/^void Interpolator3dGridTo3d::function$/;"	f	class:interpolation::Interpolator3dGridTo3d
function	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^  inline virtual void function$/;"	f	class:interpolation::Interpolator3dGridTo3d
function	src/Fields/Interpolation/PolynomialPatch.cpp	/^void PolynomialPatch::function(const double* point, double* value) const {$/;"	f	class:interpolation::PolynomialPatch
function	src/Fields/Interpolation/TriLinearInterpolator.cpp	/^void TriLinearInterpolator::function$/;"	f	class:interpolation::TriLinearInterpolator
function	src/Fields/Interpolation/TriLinearInterpolator.h	/^    inline virtual void function$/;"	f	class:interpolation::TriLinearInterpolator
function	src/Fields/Interpolation/VectorMap.h	/^void VectorMap::function(const Mesh::Iterator& point, double* value) const {$/;"	f	class:interpolation::VectorMap
functionAppend	src/Fields/Interpolation/VectorMap.h	/^void VectorMap::functionAppend$/;"	f	class:interpolation::VectorMap
gN	src/AbsBeamline/EndFieldModel/Enge.cpp	/^double Enge::gN(double x, int n) const {$/;"	f	class:endfieldmodel::Enge
gPhaseShift_m	src/AbstractObjects/OpalData.cpp	/^    double gPhaseShift_m;$/;"	m	struct:OpalDataImpl	file:
gamma	src/Algorithms/PartData.h	/^    double gamma;    \/\/ particle energy divided by particle mass$/;"	m	class:PartData
gamma_m	src/Algorithms/PartBins.h	/^    double gamma_m;$/;"	m	class:PartBins
gapHeight_m	src/Fields/FM1DProfile1.h	/^     double gapHeight_m;             \/\/\/ Full gap height of field map.$/;"	m	class:FM1DProfile1
gapHeight_m	src/Fields/FM1DProfile2.h	/^    double gapHeight_m;$/;"	m	class:FM1DProfile2
gapwidth_m	src/AbsBeamline/RFCavity.h	/^    double gapwidth_m;$/;"	m	class:RFCavity
gatherCIC	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    void gatherCIC() {$/;"	f	class:AlpineManager
gatherCIC	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    void gatherCIC() {$/;"	f	class:ChargedParticles
gatherCIC	src/PartBunch/PartBunch.hpp	/^    void gatherCIC() {$/;"	f	class:PartBunch
gatherLoadBalanceStatistics	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::gatherLoadBalanceStatistics() {$/;"	f	class:PartBunch
gatherLoadBalanceStatistics	src/PartBunch/PartBunch.hpp	/^    void gatherLoadBalanceStatistics() {$/;"	f	class:PartBunch
gatherStatistics	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    void gatherStatistics(unsigned int totalP) {$/;"	f	class:ChargedParticles
gatherStatistics	src/PartBunch/PartBunch.hpp	/^    void gatherStatistics(unsigned int totalP) {$/;"	f	class:PartBunch
gauss	src/Expressions/Expressions.cpp	/^    double gauss() {$/;"	f	namespace:Expressions
gauss	src/Utilities/ClassicRandom.cpp	/^void Random::gauss(double &gr1, double &gr2) {$/;"	f	class:Random
genAdaptiveHistogram	src/PartBunch/Binning/AdaptBins.h	/^        void genAdaptiveHistogram() {$/;"	f	class:ParticleBinning::AdaptBins
generateGrid	src/Fields/SectorMagneticFieldMap.cpp	/^ThreeDGrid* SectorMagneticFieldMap::IO::generateGrid$/;"	f	class:SectorMagneticFieldMap::IO
generateParticles	src/Distribution/SamplingBase.hpp	/^       virtual void generateParticles(size_t& numberOfParticles, Vector_t<double, 3> nr) {}$/;"	f	class:SamplingBase
generateUniformDisk	src/Distribution/FlatTop.hpp	/^    void generateUniformDisk(size_type nlocal, size_t nNew) {$/;"	f	class:FlatTop
geom_m	src/AbsBeamline/PluginElement.h	/^    Point geom_m[5];  \/\/\/< actual geometry positions with adaptive width such that each particle$/;"	m	class:PluginElement
geom_m	tests/opal_src/Utilities/MockComponent.h	/^    Euclid3DGeometry* geom_m;$/;"	m	class:MockComponent
geom_m	tests/opal_src/Utilities/MockComponent.h	/^    Euclid3DGeometry* geom_m;$/;"	m	class:MockComponent2
geometricEps_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> geometricEps_m;$/;"	m	class:DistributionMoments
geometry	src/BeamlineCore/DriftRep.h	/^    StraightGeometry geometry;$/;"	m	class:DriftRep
geometry	src/BeamlineCore/MarkerRep.h	/^    NullGeometry geometry;$/;"	m	class:MarkerRep
geometry	src/BeamlineCore/MonitorRep.h	/^    StraightGeometry geometry;$/;"	m	class:MonitorRep
geometry	src/BeamlineCore/MultipoleRep.h	/^    StraightGeometry geometry;$/;"	m	class:MultipoleRep
geometry	src/BeamlineCore/ProbeRep.h	/^    StraightGeometry geometry;$/;"	m	class:ProbeRep
geometry	src/BeamlineCore/RFCavityRep.h	/^    StraightGeometry geometry;$/;"	m	class:RFCavityRep
geometry	src/BeamlineCore/SolenoidRep.h	/^    StraightGeometry geometry;$/;"	m	class:SolenoidRep
geometry	src/BeamlineCore/TravelingWaveRep.h	/^    StraightGeometry geometry;$/;"	m	class:TravelingWaveRep
geometry_m	src/AbsBeamline/Offset.h	/^    Euclid3DGeometry* geometry_m = nullptr;$/;"	m	class:Offset
get	src/BeamlineCore/DriftRep.cpp	/^        double(DriftRep::*get)() const;$/;"	m	struct:__anon75::Entry	file:
get	src/BeamlineCore/MonitorRep.cpp	/^        double(MonitorRep::*get)() const;$/;"	m	struct:__anon74::Entry	file:
get	src/BeamlineCore/MultipoleRep.cpp	/^        double(MultipoleRep::*get)() const;$/;"	m	struct:__anon70::Entry	file:
get	src/BeamlineCore/ProbeRep.cpp	/^        double(ProbeRep::*get)() const;$/;"	m	struct:__anon72::Entry	file:
get	src/BeamlineCore/RFCavityRep.cpp	/^        double(RFCavityRep::*get)() const;$/;"	m	struct:__anon71::Entry	file:
get	src/BeamlineCore/SolenoidRep.cpp	/^        double(SolenoidRep::*get)() const;$/;"	m	struct:__anon76::Entry	file:
get	src/BeamlineCore/TravelingWaveRep.cpp	/^        double(TravelingWaveRep::*get)() const;$/;"	m	struct:__anon73::Entry	file:
get	src/Channels/DirectChannel.h	/^inline bool DirectChannel::get(double &value) const {$/;"	f	class:DirectChannel
get	src/Channels/IndexedChannel.h	/^bool IndexedChannel<T>::get(double &value) const {$/;"	f	class:IndexedChannel
get	src/Channels/IndirectChannel.h	/^bool IndirectChannel<T>::get(double &value) const {$/;"	f	class:IndirectChannel
get	src/Utilities/MSLang/ArgumentExtractor.cpp	/^    std::string ArgumentExtractor::get(unsigned int i) const {$/;"	f	class:mslang::ArgumentExtractor
get1DProfile1EngeCoeffs	src/Fields/FM1DProfile1.cpp	/^void FM1DProfile1::get1DProfile1EngeCoeffs($/;"	f	class:FM1DProfile1
get1DProfile1EngeCoeffs	src/Fields/Fieldmap.cpp	/^void Fieldmap::get1DProfile1EngeCoeffs($/;"	f	class:Fieldmap
get1DProfile1EntranceParam	src/Fields/FM1DProfile1.cpp	/^void FM1DProfile1::get1DProfile1EntranceParam($/;"	f	class:FM1DProfile1
get1DProfile1EntranceParam	src/Fields/Fieldmap.cpp	/^void Fieldmap::get1DProfile1EntranceParam($/;"	f	class:Fieldmap
get1DProfile1ExitParam	src/Fields/FM1DProfile1.cpp	/^void FM1DProfile1::get1DProfile1ExitParam($/;"	f	class:FM1DProfile1
get1DProfile1ExitParam	src/Fields/Fieldmap.cpp	/^void Fieldmap::get1DProfile1ExitParam($/;"	f	class:Fieldmap
get68Percentile	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::get68Percentile() const {$/;"	f	class:DistributionMoments
get95Percentile	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::get95Percentile() const {$/;"	f	class:DistributionMoments
get99Percentile	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::get99Percentile() const {$/;"	f	class:DistributionMoments
get99_99Percentile	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::get99_99Percentile() const {$/;"	f	class:DistributionMoments
getA	src/Structure/BoundaryGeometry.h	/^    inline double getA() {$/;"	f	class:BoundaryGeometry
getAll	src/BeamlineGeometry/Euclid3D.cpp	/^void Euclid3D::getAll(double &x, double &y, double &z,$/;"	f	class:Euclid3D
getAmplitude	src/BeamlineCore/RFCavityRep.cpp	/^double RFCavityRep::getAmplitude() const {$/;"	f	class:RFCavityRep
getAmplitude	src/BeamlineCore/TravelingWaveRep.cpp	/^double TravelingWaveRep::getAmplitude() const {$/;"	f	class:TravelingWaveRep
getAmplitudeError	src/AbsBeamline/RFCavity.h	/^inline double RFCavity::getAmplitudeError() const {$/;"	f	class:RFCavity
getAmplitudeModelName	src/AbsBeamline/RFCavity.h	/^inline std::string RFCavity::getAmplitudeModelName() {$/;"	f	class:RFCavity
getAmplitudem	src/AbsBeamline/RFCavity.h	/^inline double RFCavity::getAmplitudem() const {$/;"	f	class:RFCavity
getAngle	src/Utilities/MSLang/AffineTransformation.h	/^        double getAngle() const {$/;"	f	struct:mslang::AffineTransformation
getAngleBetweenEdges	src/Utilities/Mesher.cpp	/^double getAngleBetweenEdges(const Vector_t<double, 3> &a,$/;"	f
getApert	src/Elements/OpalElement.cpp	/^std::pair<ApertureType, std::vector<double> > OpalElement::getApert() const {$/;"	f	class:OpalElement
getAperture	src/AbsBeamline/ElementBase.h	/^inline std::pair<ApertureType, std::vector<double> > ElementBase::getAperture() const {$/;"	f	class:ElementBase
getAperture	src/AbsBeamline/MultipoleT.cpp	/^std::vector<double> MultipoleT::getAperture() const {$/;"	f	class:MultipoleT
getAperture	src/AbsBeamline/MultipoleTBase.h	/^inline std::vector<double> MultipoleTBase::getAperture() const {$/;"	f	class:MultipoleTBase
getArcLength	src/AbsBeamline/ElementBase.h	/^inline double ElementBase::getArcLength() const {$/;"	f	class:ElementBase
getArcLength	src/BeamlineCore/MarkerRep.cpp	/^double MarkerRep::getArcLength() const {$/;"	f	class:MarkerRep
getArcLength	src/BeamlineGeometry/Euclid3DGeometry.cpp	/^double Euclid3DGeometry::getArcLength() const {$/;"	f	class:Euclid3DGeometry
getArcLength	src/BeamlineGeometry/NullGeometry.cpp	/^double NullGeometry::getArcLength() const {$/;"	f	class:NullGeometry
getArcLength	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^double PlanarArcGeometry::getArcLength() const {$/;"	f	class:PlanarArcGeometry
getArcLength	src/BeamlineGeometry/RBendGeometry.cpp	/^double RBendGeometry::getArcLength() const {$/;"	f	class:RBendGeometry
getArcLength	src/BeamlineGeometry/StraightGeometry.cpp	/^double StraightGeometry::getArcLength() const {$/;"	f	class:StraightGeometry
getArcLength	src/BeamlineGeometry/VarRadiusGeometry.h	/^    double VarRadiusGeometry::getArcLength() const {$/;"	f	class:VarRadiusGeometry
getArcLength	src/Beamlines/BeamlineGeometry.cpp	/^double BeamlineGeometry::getArcLength() const {$/;"	f	class:BeamlineGeometry
getArcLength	src/Beamlines/TBeamline.h	/^double TBeamline<T>::getArcLength() const {$/;"	f	class:TBeamline
getArguments	src/AbstractObjects/OpalData.cpp	/^std::vector<std::string> OpalData::getArguments() {$/;"	f	class:OpalData
getAtomicMass	src/Physics/Material.h	/^    double Material::getAtomicMass() const {$/;"	f	class:Physics::Material
getAtomicNumber	src/Physics/Material.h	/^    double Material::getAtomicNumber() const {$/;"	f	class:Physics::Material
getAttribute	src/AbsBeamline/AttributeSet.cpp	/^double AttributeSet::getAttribute(const std::string &aKey) const {$/;"	f	class:AttributeSet
getAttribute	src/AbsBeamline/ElementBase.cpp	/^double ElementBase::getAttribute(const std::string& aKey) const {$/;"	f	class:ElementBase
getAutoPhaseEstimate	src/AbsBeamline/RFCavity.cpp	/^double RFCavity::getAutoPhaseEstimate($/;"	f	class:RFCavity
getAutoPhaseEstimate	src/AbsBeamline/TravelingWave.cpp	/^double TravelingWave::getAutoPhaseEstimate($/;"	f	class:TravelingWave
getAutoPhaseEstimateFallback	src/AbsBeamline/RFCavity.cpp	/^double RFCavity::getAutoPhaseEstimateFallback(double E0, double t0, double q, double mass) {$/;"	f	class:RFCavity
getAutophaseVeto	src/AbsBeamline/RFCavity.h	/^inline bool RFCavity::getAutophaseVeto() const {$/;"	f	class:RFCavity
getAuxiliaryOutputDirectory	src/AbstractObjects/OpalData.cpp	/^std::string OpalData::getAuxiliaryOutputDirectory() const {$/;"	f	class:OpalData
getAvrgpz	src/Distribution/Distribution.h	/^inline double Distribution::getAvrgpz() const {$/;"	f	class:Distribution
getAxis	src/BeamlineGeometry/Rotation3D.cpp	/^Vector3D Rotation3D::getAxis() const {$/;"	f	class:Rotation3D
getAxis	src/BeamlineGeometry/Rotation3D.cpp	/^void Rotation3D::getAxis(double &vx, double &vy, double &vz) const {$/;"	f	class:Rotation3D
getAzimuth	src/AbsBeamline/RFCavity.cpp	/^double RFCavity::getAzimuth() const {$/;"	f	class:RFCavity
getAzimuthalExtent	src/AbsBeamline/ScalingFFAMagnet.h	/^    double getAzimuthalExtent() const {return azimuthalExtent_m;}$/;"	f	class:ScalingFFAMagnet
getB	src/Fields/EMField.cpp	/^BVector EBVectors::getB() const$/;"	f	class:EBVectors
getB	src/Structure/BoundaryGeometry.h	/^    inline double getB() {$/;"	f	class:BoundaryGeometry
getB	tests/opal_test_utilities/Maxwell.cpp	/^Vector_t MaxwellTest::getB(const Vector_t &R, double t) const {$/;"	f	class:MaxwellTest
getB0	src/AbsBeamline/VerticalFFAMagnet.h	/^    double getB0() const {$/;"	f	class:VerticalFFAMagnet
getBBLength	src/AbsBeamline/VerticalFFAMagnet.h	/^    double getBBLength() const {$/;"	f	class:VerticalFFAMagnet
getBConds	src/Algorithms/.PartBunchBase.h	/^    ParticleBConds<Position_t, Dimension>& getBConds() {$/;"	f	class:PartBunch
getBase	src/AbstractObjects/Attribute.cpp	/^AttributeBase &Attribute::getBase() const {$/;"	f	class:Attribute
getBaseObject	src/AbstractObjects/Object.cpp	/^const Object *Object::getBaseObject() const {$/;"	f	class:Object
getBeamPRInit	src/AbsBeamline/Ring.h	/^    double getBeamPRInit() const {$/;"	f	class:Ring
getBeamPhiInit	src/AbsBeamline/Ring.h	/^    double getBeamPhiInit() const {$/;"	f	class:Ring
getBeamRInit	src/AbsBeamline/Ring.h	/^    double getBeamRInit() const {$/;"	f	class:Ring
getBendAngle	src/AbsBeamline/MultipoleT.h	/^inline double MultipoleT::getBendAngle() const {$/;"	f	class:MultipoleT
getBendAngle	src/AbsBeamline/MultipoleTBase.h	/^inline double MultipoleTBase::getBendAngle() const {$/;"	f	class:MultipoleTBase
getBendAngle	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    double MultipoleTCurvedConstRadius::getBendAngle() const {$/;"	f	class:MultipoleTCurvedConstRadius
getBendAngle	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    double MultipoleTCurvedVarRadius::getBendAngle() const {$/;"	f	class:MultipoleTCurvedVarRadius
getBendAngle	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^double PlanarArcGeometry::getBendAngle() const {$/;"	f	class:PlanarArcGeometry
getBendAngle	src/BeamlineGeometry/RBendGeometry.cpp	/^double RBendGeometry::getBendAngle() const {$/;"	f	class:RBendGeometry
getBeta	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getBeta(int \/*i*\/) {$/;"	f	class:PartBunch
getBeta	src/Algorithms/PartData.h	/^inline double PartData::getBeta() const {$/;"	f	class:PartData
getBeta	src/PartBunch/PartBunch.hpp	/^    double getBeta(int i) const {$/;"	f	class:PartBunch
getBeta	src/Utilities/Util.h	/^    inline ippl::Vector<double, 3> getBeta(ippl::Vector<double, 3> p) {$/;"	f	namespace:Util
getBetaGamma	src/Utilities/Util.h	/^    inline double getBetaGamma(double Ekin, double mass) {$/;"	f	namespace:Util
getBin	src/Algorithms/PartBins.cpp	/^int PartBins::getBin(double x) {$/;"	f	class:PartBins
getBin	src/PartBunch/Binning/AdaptBins.hpp	/^    AdaptBins<BunchType, BinningSelector>::getBin(value_type x, value_type xMin, value_type xMax, value_type binWidthInv, bin_index_type numBins) {$/;"	f	class:ParticleBinning::AdaptBins
getBinGamma	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getBinGamma(int bin) {$/;"	f	class:PartBunch
getBinGamma	src/PartBunch/PartBunch.hpp	/^    double getBinGamma(int bin) {$/;"	f	class:PartBunch
getBinIterationPolicy	src/PartBunch/Binning/AdaptBins.h	/^        Kokkos::RangePolicy<> getBinIterationPolicy(const bin_index_type& binIndex) {$/;"	f	class:ParticleBinning::AdaptBins
getBinIterationPolicy	src/PartBunch/Binning/BinHisto.h	/^        Kokkos::RangePolicy<> getBinIterationPolicy(const bin_index_type& binIndex) {$/;"	f	class:ParticleBinning::Histogram
getBinView	src/PartBunch/Binning/AdaptBins.h	/^        bin_view_type getBinView() { return bunch_m->Bin.getView(); }$/;"	f	class:ParticleBinning::AdaptBins
getBinWidth	src/PartBunch/Binning/AdaptBins.h	/^        value_type getBinWidth() const { return binWidth_m; }$/;"	f	class:ParticleBinning::AdaptBins
getBins	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    std::shared_ptr<AdaptBins_t> getBins() { return bins_m; } \/\/ TODO: Binning$/;"	f	class:AlpineManager
getBins	src/PartBunch/PartBunch.hpp	/^    std::shared_ptr<AdaptBins_t> getBins() { return bins_m; } \/\/ TODO: Binning$/;"	f	class:PartBunch
getBool	src/AbstractObjects/ValueDefinition.cpp	/^bool ValueDefinition::getBool() const {$/;"	f	class:ValueDefinition
getBool	src/Attributes/Attributes.cpp	/^    bool getBool(const Attribute &attr) {$/;"	f	namespace:Attributes
getBool	src/OpalParser/Token.cpp	/^bool Token::getBool() const {$/;"	f	class:Token
getBool	src/ValueDefinitions/BoolConstant.cpp	/^bool BoolConstant::getBool() const {$/;"	f	class:BoolConstant
getBoolArray	src/Attributes/Attributes.cpp	/^    std::vector<bool> getBoolArray(const Attribute &attr) {$/;"	f	namespace:Attributes
getBoolComponent	src/AbstractObjects/ValueDefinition.cpp	/^bool ValueDefinition::getBoolComponent(int) const {$/;"	f	class:ValueDefinition
getBoostVariantValue	src/Utilities/SDDSParser.h	/^            T getBoostVariantValue(const ast::variant_t& val, int datatype) const {$/;"	f	class:SDDS::SDDSParser
getBoundaryGeometry	src/AbsBeamline/ElementBase.h	/^inline BoundaryGeometry* ElementBase::getBoundaryGeometry() const {$/;"	f	class:ElementBase
getBoundaryStencil	src/.Solvers/IrregularDomain.cpp	/^void IrregularDomain::getBoundaryStencil(int id, StencilValue_t& value,$/;"	f	class:IrregularDomain
getBoundaryStencil	src/.Solvers/IrregularDomain.cpp	/^void IrregularDomain::getBoundaryStencil(int x, int y, int z, StencilValue_t& value,$/;"	f	class:IrregularDomain
getBoundingBox	src/Algorithms/OrbitThreader.h	/^BoundingBox OrbitThreader::getBoundingBox() const {$/;"	f	class:OrbitThreader
getBoundingBox	src/Structure/BoundingBox.cpp	/^BoundingBox BoundingBox::getBoundingBox(const std::vector<Vector_t<double, 3>>& positions) {$/;"	f	class:BoundingBox
getBoundingBoxInLabCoords	src/AbsBeamline/ElementBase.cpp	/^BoundingBox ElementBase::getBoundingBoxInLabCoords() const {$/;"	f	class:ElementBase
getBoundingBoxInLabCoords	src/Utilities/ClassicField.h	/^BoundingBox ClassicField::getBoundingBoxInLabCoords() const {$/;"	f	class:ClassicField
getBoundingBoxLength	src/AbsBeamline/MultipoleT.h	/^inline double MultipoleT::getBoundingBoxLength() const {$/;"	f	class:MultipoleT
getBoundingBoxLength	src/AbsBeamline/MultipoleTBase.h	/^inline double MultipoleTBase::getBoundingBoxLength() const {$/;"	f	class:MultipoleTBase
getBoundingSphere	src/Algorithms/.PartBunchBase.hpp	/^std::pair<Vector_t<double, 3>, double> PartBunch<T, Dim>::getBoundingSphere() {$/;"	f	class:PartBunch
getBox	src/Structure/MeshGenerator.cpp	/^MeshData MeshGenerator::getBox(double length, double width, double height, double formFactor) {$/;"	f	class:MeshGenerator
getBoxIncr	src/Structure/FieldSolverCmd.cpp	/^double FieldSolverCmd::getBoxIncr() const {$/;"	f	class:FieldSolverCmd
getBs	src/AbsBeamline/MultipoleT.cpp	/^double MultipoleT::getBs(const Vector_t<double, 3>& R) {$/;"	f	class:MultipoleT
getBs	src/AbsBeamline/MultipoleTBase.cpp	/^double MultipoleTBase::getBs(const Vector_t<double, 3> &R) {$/;"	f	class:MultipoleTBase
getBs	src/AbsBeamline/MultipoleTStraight.cpp	/^double MultipoleTStraight::getBs(const Vector_t<double, 3> &R) {$/;"	f	class:MultipoleTStraight
getBunch	src/Algorithms/Tracker.cpp	/^const PartBunch_t* Tracker::getBunch() const {$/;"	f	class:Tracker
getBx	src/AbsBeamline/MultipoleT.cpp	/^double MultipoleT::getBx(const Vector_t<double, 3>& R) {$/;"	f	class:MultipoleT
getBx	src/AbsBeamline/MultipoleTBase.cpp	/^double MultipoleTBase::getBx(const Vector_t<double, 3> &R) {$/;"	f	class:MultipoleTBase
getBx	src/AbsBeamline/MultipoleTStraight.cpp	/^double MultipoleTStraight::getBx(const Vector_t<double, 3> &R) {$/;"	f	class:MultipoleTStraight
getBx	src/Fields/BDipoleField.cpp	/^double BDipoleField::getBx() const {$/;"	f	class:BDipoleField
getBx	src/Fields/ConstBField.cpp	/^double ConstBField::getBx() const {$/;"	f	class:ConstBField
getBx	src/Fields/EMField.cpp	/^double BVector::getBx() const$/;"	f	class:BVector
getBx	src/Fields/EMField.cpp	/^double EBVectors::getBx() const$/;"	f	class:EBVectors
getBy	src/Fields/BDipoleField.cpp	/^double BDipoleField::getBy() const {$/;"	f	class:BDipoleField
getBy	src/Fields/ConstBField.cpp	/^double ConstBField::getBy() const {$/;"	f	class:ConstBField
getBy	src/Fields/EMField.cpp	/^double BVector::getBy() const$/;"	f	class:BVector
getBy	src/Fields/EMField.cpp	/^double EBVectors::getBy() const$/;"	f	class:EBVectors
getBz	src/AbsBeamline/MultipoleT.cpp	/^double MultipoleT::getBz(const Vector_t<double, 3>& R) {$/;"	f	class:MultipoleT
getBz	src/AbsBeamline/MultipoleTBase.cpp	/^double MultipoleTBase::getBz(const Vector_t<double, 3> &R) {$/;"	f	class:MultipoleTBase
getBz	src/BeamlineCore/SolenoidRep.cpp	/^double SolenoidRep::getBz() const {$/;"	f	class:SolenoidRep
getBz	src/Fields/ConstBField.cpp	/^double ConstBField::getBz() const {$/;"	f	class:ConstBField
getBz	src/Fields/ConstBzField.cpp	/^double ConstBzField::getBz() const {$/;"	f	class:ConstBzField
getBz	src/Fields/EMField.cpp	/^double BVector::getBz() const$/;"	f	class:BVector
getBz	src/Fields/EMField.cpp	/^double EBVectors::getBz() const$/;"	f	class:EBVectors
getC	src/Structure/BoundaryGeometry.h	/^    inline double getC() {$/;"	f	class:BoundaryGeometry
getCSTrafoGlobal2Local	src/AbsBeamline/ElementBase.h	/^inline CoordinateSystemTrafo ElementBase::getCSTrafoGlobal2Local() const {$/;"	f	class:ElementBase
getCSTrafoLab2Local	src/Elements/OpalBeamline.h	/^inline CoordinateSystemTrafo OpalBeamline::getCSTrafoLab2Local($/;"	f	class:OpalBeamline
getCSTrafoLab2Local	src/Elements/OpalBeamline.h	/^inline CoordinateSystemTrafo OpalBeamline::getCSTrafoLab2Local() const {$/;"	f	class:OpalBeamline
getCategory	src/AbstractObjects/Action.cpp	/^const std::string Action::getCategory() const {$/;"	f	class:Action
getCategory	src/AbstractObjects/BeamSequence.cpp	/^const std::string BeamSequence::getCategory() const {$/;"	f	class:BeamSequence
getCategory	src/AbstractObjects/Definition.cpp	/^const std::string Definition::getCategory() const {$/;"	f	class:Definition
getCategory	src/AbstractObjects/Element.cpp	/^const std::string Element::getCategory() const {$/;"	f	class:Element
getCategory	src/AbstractObjects/Table.cpp	/^const std::string Table::getCategory() const {$/;"	f	class:Table
getCategory	src/AbstractObjects/ValueDefinition.cpp	/^const std::string ValueDefinition::getCategory() const {$/;"	f	class:ValueDefinition
getCategory	src/OpalParser/Macro.cpp	/^const std::string Macro::getCategory() const {$/;"	f	class:Macro
getCavityType	src/AbsBeamline/RFCavity.h	/^inline CavityType RFCavity::getCavityType() const {$/;"	f	class:RFCavity
getCavityTypeString	src/AbsBeamline/RFCavity.cpp	/^std::string RFCavity::getCavityTypeString() const {$/;"	f	class:RFCavity
getCentre	src/AbsBeamline/ScalingFFAMagnet.h	/^    Vector_t<double, 3> getCentre() const {return centre_m;}$/;"	f	class:ScalingFFAMagnet
getCentreLength	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^double AsymmetricEnge::getCentreLength() const {$/;"	f	class:endfieldmodel::AsymmetricEnge
getCentreLength	src/AbsBeamline/EndFieldModel/Enge.h	/^double Enge::getCentreLength() const {$/;"	f	class:endfieldmodel::Enge
getCentreLength	src/AbsBeamline/EndFieldModel/Tanh.h	/^    double getCentreLength() const {return getX0()*2.0;}$/;"	f	class:endfieldmodel::Tanh
getCentroid	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 6> DistributionMoments::getCentroid() const {$/;"	f	class:DistributionMoments
getCentroid	src/PartBunch/ParticleContainer.hpp	/^    Vector_t<double, 6> getCentroid() const {$/;"	f	class:ParticleContainer
getChannel	src/AbsBeamline/AttributeSet.cpp	/^Channel *AttributeSet::getChannel(const std::string &aKey, bool create) {$/;"	f	class:AttributeSet
getChannel	src/AbsBeamline/ElementBase.cpp	/^Channel* ElementBase::getChannel(const std::string& aKey, bool create) {$/;"	f	class:ElementBase
getChannel	src/BeamlineCore/DriftRep.cpp	/^Channel *DriftRep::getChannel(const std::string &aKey, bool create) {$/;"	f	class:DriftRep
getChannel	src/BeamlineCore/MonitorRep.cpp	/^Channel *MonitorRep::getChannel(const std::string &aKey, bool create) {$/;"	f	class:MonitorRep
getChannel	src/BeamlineCore/MultipoleRep.cpp	/^Channel *MultipoleRep::getChannel(const std::string &aKey, bool create) {$/;"	f	class:MultipoleRep
getChannel	src/BeamlineCore/ProbeRep.cpp	/^Channel *ProbeRep::getChannel(const std::string &aKey, bool create) {$/;"	f	class:ProbeRep
getChannel	src/BeamlineCore/RFCavityRep.cpp	/^Channel *RFCavityRep::getChannel(const std::string &aKey, bool create) {$/;"	f	class:RFCavityRep
getChannel	src/BeamlineCore/SolenoidRep.cpp	/^Channel *SolenoidRep::getChannel(const std::string &aKey, bool create) {$/;"	f	class:SolenoidRep
getChannel	src/BeamlineCore/TravelingWaveRep.cpp	/^Channel *TravelingWaveRep::getChannel(const std::string &aKey, bool create) {$/;"	f	class:TravelingWaveRep
getCharge	src/AbstractObjects/OpalParticle.h	/^inline double OpalParticle::getCharge() const {$/;"	f	class:OpalParticle
getCharge	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getCharge() const {$/;"	f	class:PartBunch
getCharge	src/Algorithms/OpalParticle.h	/^inline double OpalParticle::getCharge() const {$/;"	f	class:OpalParticle
getCharge	src/PartBunch/PartBunch.hpp	/^    double getCharge() const {$/;"	f	class:PartBunch
getCharge	src/Structure/Beam.cpp	/^double Beam::getCharge() const {$/;"	f	class:Beam
getChargePerParticle	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getChargePerParticle() const {$/;"	f	class:PartBunch
getChargePerParticle	src/PartBunch/PartBunch.hpp	/^    double getChargePerParticle() const {$/;"	f	class:PartBunch
getChargePerParticle	src/Structure/Beam.cpp	/^double Beam::getChargePerParticle() const {$/;"	f	class:Beam
getChargeString	src/Utilities/Util.h	/^    inline std::string getChargeString(double charge, unsigned int precision = 3) {$/;"	f	namespace:Util
getCoefficient	src/AbsBeamline/MultipoleTFunctions/Polynomial.h	/^    int Polynomial::getCoefficient(const std::size_t &order) const {$/;"	f	class:polynomial::Polynomial
getCoefficient	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^int TwoPolynomial::getCoefficient(const std::size_t &Xorder,$/;"	f	class:polynomial::TwoPolynomial
getCoefficients	src/AbsBeamline/EndFieldModel/Enge.h	/^    std::vector<double> getCoefficients() const {return _a;}$/;"	f	class:endfieldmodel::Enge
getColumnData	src/Utilities/SDDSParser.cpp	/^SDDS::ast::columnData_t SDDS::SDDSParser::getColumnData(const std::string &columnName) {$/;"	f	class:SDDS::SDDSParser
getColumnIndex	src/Utilities/SDDSParser.cpp	/^int SDDS::SDDSParser::getColumnIndex(std::string col_name) const {$/;"	f	class:SDDS::SDDSParser
getColumnType	src/Utilities/SDDSParser.h	/^        ast::datatype getColumnType(const std::string &col_name) {$/;"	f	class:SDDS::SDDSParser
getComponent	src/Fields/BSingleMultipoleField.h	/^double BSingleMultipoleField<order>::getComponent() const {$/;"	f	class:BSingleMultipoleField
getComponent	src/Utilities/RingSection.h	/^    inline Component* getComponent() const {$/;"	f	class:RingSection
getComponentOrientation	src/Utilities/RingSection.h	/^    inline Vector_t<double, 3> getComponentOrientation() const {$/;"	f	class:RingSection
getComponentPosition	src/Utilities/RingSection.h	/^    inline Vector_t<double, 3> getComponentPosition() const {$/;"	f	class:RingSection
getComponents	src/BeamlineGeometry/Vector3D.cpp	/^void Vector3D::getComponents(double &x, double &y, double &z)$/;"	f	class:Vector3D
getConstChannel	src/AbsBeamline/AttributeSet.cpp	/^const ConstChannel *AttributeSet::getConstChannel(const std::string &aKey) const {$/;"	f	class:AttributeSet
getConstChannel	src/AbsBeamline/ElementBase.cpp	/^const ConstChannel* ElementBase::getConstChannel(const std::string& aKey) const {$/;"	f	class:ElementBase
getConstantSpacing	src/Fields/Interpolation/NDGrid.h	/^bool NDGrid::getConstantSpacing() const {$/;"	f	class:interpolation::NDGrid
getConstantSpacing	src/Fields/Interpolation/ThreeDGrid.h	/^bool ThreeDGrid::getConstantSpacing() const {$/;"	f	class:interpolation::ThreeDGrid
getCoord	src/.Solvers/IrregularDomain.cpp	/^void IrregularDomain::getCoord(int idx, int& x, int& y, int& z) const {$/;"	f	class:IrregularDomain
getCorners	src/Fields/SectorField.cpp	/^std::vector< std::vector<double> > SectorField::getCorners$/;"	f	class:SectorField
getCorners	src/Structure/BoundingBox.h	/^inline std::pair<Vector_t<double, 3>, Vector_t<double, 3>> BoundingBox::getCorners() const {$/;"	f	class:BoundingBox
getCosAzimuth	src/AbsBeamline/RFCavity.cpp	/^double RFCavity::getCosAzimuth() const {$/;"	f	class:RFCavity
getCount	src/Tables/Selector.cpp	/^int Selector::getCount() const {$/;"	f	class:Selector
getCounter	src/Beamlines/FlaggedElmPtr.h	/^inline int FlaggedElmPtr::getCounter() const {$/;"	f	class:FlaggedElmPtr
getCouplingConstant	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getCouplingConstant() const {$/;"	f	class:PartBunch
getCouplingConstant	src/PartBunch/PartBunch.hpp	/^    double getCouplingConstant() const {$/;"	f	class:PartBunch
getCovMatrix	src/PartBunch/ParticleContainer.hpp	/^    matrix_t getCovMatrix() const {$/;"	f	class:ParticleContainer
getCurlBCart	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    Vector_t getCurlBCart(Vector_t posCart, Vector_t delta) {$/;"	f	class:ScalingFFAMagnetTest
getCurlBCyl	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    Vector_t getCurlBCyl(Vector_t posCyl, Vector_t delta) {$/;"	f	class:ScalingFFAMagnetTest
getCurrent	src/OpalParser/Statement.cpp	/^Token &Statement::getCurrent() {$/;"	f	class:Statement
getCurrent	src/Structure/Beam.cpp	/^double Beam::getCurrent() const {$/;"	f	class:Beam
getCurrentBinCount	src/PartBunch/Binning/AdaptBins.h	/^        bin_index_type getCurrentBinCount() const { return currentBins_m; }$/;"	f	class:ParticleBinning::AdaptBins
getCurrentBinCount	src/PartBunch/Binning/BinHisto.h	/^        size_type getCurrentBinCount() const { return numBins_m; }$/;"	f	class:ParticleBinning::Histogram
getCurvature	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^double PlanarArcGeometry::getCurvature() const {$/;"	f	class:PlanarArcGeometry
getCutoffP	src/Distribution/Distribution.h	/^inline ippl::Vector<double, 3> Distribution::getCutoffP() const {$/;"	f	class:Distribution
getCutoffR	src/Distribution/Distribution.h	/^inline ippl::Vector<double, 3> Distribution::getCutoffR() const {$/;"	f	class:Distribution
getCycFrequency	src/AbsBeamline/RFCavity.cpp	/^double RFCavity::getCycFrequency() const {$/;"	f	class:RFCavity
getCylinder	src/Structure/MeshGenerator.cpp	/^MeshData MeshGenerator::getCylinder($/;"	f	class:MeshGenerator
getDBDu	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    double getDBDu(int i, int j, Vector_t pos, double delta, bool isCartesian) {$/;"	f	class:ScalingFFAMagnetTest
getDDx	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getDDx() const {$/;"	f	class:DistributionMoments
getDDx	src/PartBunch/ParticleContainer.hpp	/^   double getDDx() const {$/;"	f	class:ParticleContainer
getDDy	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getDDy() const {$/;"	f	class:DistributionMoments
getDDy	src/PartBunch/ParticleContainer.hpp	/^   double getDDy() const {$/;"	f	class:ParticleContainer
getDR	tests/opal_test_utilities/Maxwell.h	/^    Vector_t getDR() const {return dR_m;}$/;"	f	class:MaxwellTest
getDT	src/Track/TrackCmd.cpp	/^std::vector<double> TrackCmd::getDT() const {$/;"	f	class:TrackCmd
getDTAU	src/Track/TrackCmd.cpp	/^double TrackCmd::getDTAU() const {$/;"	f	class:TrackCmd
getDTSCINIT	src/Track/TrackCmd.cpp	/^double TrackCmd::getDTSCINIT() const {$/;"	f	class:TrackCmd
getData	src/Utilities/SDDSParser.h	/^    file SDDSParser::getData() {$/;"	f	class:SDDS::SDDSParser
getDataSink	src/AbstractObjects/OpalData.cpp	/^DataSink* OpalData::getDataSink() {$/;"	f	class:OpalData
getDataTypeString	src/Utilities/SDDSParser/ast.hpp	/^        std::string getDataTypeString(datatype type) {$/;"	f	namespace:SDDS::ast
getDebyeLength	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getDebyeLength() const {$/;"	f	class:DistributionMoments
getDebyeLength	src/PartBunch/ParticleContainer.hpp	/^   double getDebyeLength() const {$/;"	f	class:ParticleContainer
getDecomp	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    std::array<bool, Dim> getDecomp() { return decomp_m; }$/;"	f	class:FieldContainer
getDecomp	src/PartBunch/FieldContainer.hpp	/^    std::array<bool, Dim> getDecomp() {$/;"	f	class:FieldContainer
getDefault	src/AbstractObjects/AttributeHandler.cpp	/^AttributeBase *AttributeHandler::getDefault() const {$/;"	f	class:AttributeHandler
getDeltaPhi	src/Fields/SectorMagneticFieldMap.cpp	/^double SectorMagneticFieldMap::getDeltaPhi() const {$/;"	f	class:SectorMagneticFieldMap
getDeltaPos	src/Fields/Interpolation/PPSolveFactory.cpp	/^    std::vector<double> getDeltaPos(Mesh* mesh) {$/;"	f	namespace:interpolation::__anon69
getDepth	src/Utilities/MSLang/QuadTree.cpp	/^    void QuadTree::getDepth(unsigned int &d) const {$/;"	f	class:mslang::QuadTree
getDerivPoints	src/Fields/Interpolation/PPSolveFactory.cpp	/^void PPSolveFactory::getDerivPoints() {$/;"	f	class:interpolation::PPSolveFactory
getDerivs	src/Fields/Interpolation/PPSolveFactory.cpp	/^void PPSolveFactory::getDerivs(const Mesh::Iterator& it) {$/;"	f	class:interpolation::PPSolveFactory
getDesign	src/AbsBeamline/Component.cpp	/^const ElementBase& Component::getDesign() const {$/;"	f	class:Component
getDesignEnergy	src/AbsBeamline/Component.h	/^inline double Component::getDesignEnergy() const {$/;"	f	class:Component
getDesignEnergy	src/AbsBeamline/RFCavity.h	/^inline double RFCavity::getDesignEnergy() const {$/;"	f	class:RFCavity
getDestroyNum	src/Algorithms/.PartBunchBase.hpp	/^size_t PartBunch<T, Dim>::getDestroyNum() const {$/;"	f	class:PartBunch
getDeviceView	src/PartBunch/Binning/BinHisto.h	/^        static constexpr return_type getDeviceView(HistogramType histo) {$/;"	f	class:ParticleBinning::Histogram
getDfCoefficients	src/AbsBeamline/ScalingFFAMagnet.h	/^    std::vector<std::vector<double> > getDfCoefficients() {return dfCoefficients_m;}$/;"	f	class:ScalingFFAMagnet
getDfCoefficients	src/AbsBeamline/VerticalFFAMagnet.h	/^std::vector<std::vector<double> > VerticalFFAMagnet::getDfCoefficients() const {$/;"	f	class:VerticalFFAMagnet
getDimensions	src/AbsBeamline/Corrector.cpp	/^void Corrector::getDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:Corrector
getDimensions	src/AbsBeamline/Drift.cpp	/^void Drift::getDimensions(double &zBegin, double &zEnd) const {$/;"	f	class:Drift
getDimensions	src/AbsBeamline/Marker.cpp	/^void Marker::getDimensions(double &\/*zBegin*\/, double &\/*zEnd*\/) const {$/;"	f	class:Marker
getDimensions	src/AbsBeamline/Monitor.cpp	/^void Monitor::getDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:Monitor
getDimensions	src/AbsBeamline/Multipole.cpp	/^void Multipole::getDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:Multipole
getDimensions	src/AbsBeamline/MultipoleT.cpp	/^void MultipoleT::getDimensions(double& \/*zBegin*\/, double& \/*zEnd*\/) const {$/;"	f	class:MultipoleT
getDimensions	src/AbsBeamline/MultipoleTBase.h	/^inline void MultipoleTBase::getDimensions(double& \/*zBegin*\/, double& \/*zEnd*\/) const {$/;"	f	class:MultipoleTBase
getDimensions	src/AbsBeamline/PluginElement.cpp	/^void PluginElement::getDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:PluginElement
getDimensions	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::getDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:RFCavity
getDimensions	src/AbsBeamline/Ring.cpp	/^void Ring::getDimensions(double& \/*zBegin*\/, double& \/*zEnd*\/) const {$/;"	f	class:Ring
getDimensions	src/AbsBeamline/Solenoid.cpp	/^void Solenoid::getDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:Solenoid
getDimensions	src/AbsBeamline/TravelingWave.cpp	/^void TravelingWave::getDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:TravelingWave
getDimensions	src/AbsBeamline/VerticalFFAMagnet.h	/^    void getDimensions(double& \/*zBegin*\/, double& \/*zEnd*\/) const {$/;"	f	class:VerticalFFAMagnet
getDimensions	tests/opal_src/Utilities/MockComponent.h	/^    void getDimensions(double&, double&) const {}$/;"	f	class:MockComponent
getDimensions	tests/opal_src/Utilities/MockComponent.h	/^    void getDimensions(double&, double&) const {}$/;"	f	class:MockComponent2
getDipoleConstant	src/AbsBeamline/MultipoleT.h	/^inline double MultipoleT::getDipoleConstant() const {$/;"	f	class:MultipoleT
getDipoleConstant	src/AbsBeamline/MultipoleTBase.h	/^inline double MultipoleTBase::getDipoleConstant() const {$/;"	f	class:MultipoleTBase
getDipoleConstant	src/AbsBeamline/ScalingFFAMagnet.h	/^    double getDipoleConstant() const {return Bz_m;}$/;"	f	class:ScalingFFAMagnet
getDistType	src/Algorithms/.PartBunchBase.hpp	/^DistributionType PartBunch<T, Dim>::getDistType() const {$/;"	f	class:PartBunch
getDivBCart	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    double getDivBCart(Vector_t pos, Vector_t delta) {$/;"	f	class:ScalingFFAMagnetTest
getDivBCyl	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    double getDivBCyl(Vector_t posCyl, Vector_t delta) {$/;"	f	class:ScalingFFAMagnetTest
getDomDec	src/Structure/FieldSolverCmd.h	/^inline ippl::Vector<bool, 3> FieldSolverCmd::getDomDec() const {$/;"	f	class:FieldSolverCmdType::FieldSolverCmd
getDoubleEnge	src/AbsBeamline/EndFieldModel/Enge.h	/^double Enge::getDoubleEnge(double x, int n) const {$/;"	f	class:endfieldmodel::Enge
getDumpFrameString	src/BasicActions/Option.cpp	/^std::string Option::getDumpFrameString(const DumpFrame& df) {$/;"	f	class:Option
getDx	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getDx() const {$/;"	f	class:DistributionMoments
getDx	src/PartBunch/ParticleContainer.hpp	/^   double getDx() const {$/;"	f	class:ParticleContainer
getDy	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getDy() const {$/;"	f	class:DistributionMoments
getDy	src/PartBunch/ParticleContainer.hpp	/^   double getDy() const {$/;"	f	class:ParticleContainer
getE	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getE() const {$/;"	f	class:PartBunch
getE	src/Algorithms/PartData.h	/^inline double PartData::getE() const {$/;"	f	class:PartData
getE	src/Fields/EMField.cpp	/^EVector EBVectors::getE() const$/;"	f	class:EBVectors
getE	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    VField_t<T, Dim>& getE() { return E_m; }$/;"	f	class:FieldContainer
getE	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    VField_t<T, Dim> *getE() const { return E_m; }$/;"	f	class:FieldSolver
getE	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        VField_t<T, Dim>* getE() const { return E_m; }$/;"	f	class:LoadBalancer
getE	src/PartBunch/FieldContainer.hpp	/^    VField_t<T, Dim>& getE() {$/;"	f	class:FieldContainer
getE	src/PartBunch/FieldSolver.hpp	/^    VField_t<T, Dim>* getE() const {$/;"	f	class:FieldSolver
getE	src/PartBunch/LoadBalancer.hpp	/^    VField_t<T, Dim>* getE() const {$/;"	f	class:LoadBalancer
getEExtrema	src/Algorithms/.PartBunch.cpp	/^PartBunch::VectorPair_t PartBunch::getEExtrema() {$/;"	f	class:PartBunch
getEExtrema	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> getEExtrema() {$/;"	f	class:PartBunch
getEcho	src/OpalParser/FileStream.cpp	/^bool FileStream::getEcho() {$/;"	f	class:FileStream
getEdgeToBegin	src/AbsBeamline/ElementBase.h	/^inline CoordinateSystemTrafo ElementBase::getEdgeToBegin() const {$/;"	f	class:ElementBase
getEdgeToBegin	src/AbsBeamline/RFCavity.h	/^inline CoordinateSystemTrafo RFCavity::getEdgeToBegin() const {$/;"	f	class:RFCavity
getEdgeToBegin	src/AbsBeamline/Solenoid.h	/^inline CoordinateSystemTrafo Solenoid::getEdgeToBegin() const {$/;"	f	class:Solenoid
getEdgeToBegin	src/AbsBeamline/TravelingWave.h	/^inline CoordinateSystemTrafo TravelingWave::getEdgeToBegin() const {$/;"	f	class:TravelingWave
getEdgeToEnd	src/AbsBeamline/ElementBase.h	/^inline CoordinateSystemTrafo ElementBase::getEdgeToEnd() const {$/;"	f	class:ElementBase
getEdgeToEnd	src/AbsBeamline/RFCavity.h	/^inline CoordinateSystemTrafo RFCavity::getEdgeToEnd() const {$/;"	f	class:RFCavity
getEdgeToEnd	src/AbsBeamline/Solenoid.h	/^inline CoordinateSystemTrafo Solenoid::getEdgeToEnd() const {$/;"	f	class:Solenoid
getEdgeToEnd	src/AbsBeamline/TravelingWave.h	/^inline CoordinateSystemTrafo TravelingWave::getEdgeToEnd() const {$/;"	f	class:TravelingWave
getEkin	src/Expressions/Expressions.cpp	/^    double getEkin() {$/;"	f	namespace:Expressions
getElement	src/AbstractObjects/Element.h	/^inline ElementBase *Element::getElement() const {$/;"	f	class:Element
getElement	src/Beamlines/ElmPtr.h	/^inline ElementBase *ElmPtr::getElement() const {$/;"	f	class:ElmPtr
getElement	src/Utilities/ClassicField.h	/^inline std::shared_ptr<Component> ClassicField::getElement() {$/;"	f	class:ClassicField
getElement	src/Utilities/ClassicField.h	/^inline std::shared_ptr<const Component> ClassicField::getElement() const {$/;"	f	class:ClassicField
getElementByType	src/Elements/OpalBeamline.cpp	/^FieldList OpalBeamline::getElementByType(ElementType type) {$/;"	f	class:OpalBeamline
getElementDimensions	src/AbsBeamline/ElementBase.h	/^    virtual void getElementDimensions(double& begin, double& end) const {$/;"	f	class:ElementBase
getElementDimensions	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::getElementDimensions(double& begin, double& end) const {$/;"	f	class:RFCavity
getElementDimensions	src/AbsBeamline/Solenoid.cpp	/^void Solenoid::getElementDimensions(double& begin, double& end) const {$/;"	f	class:Solenoid
getElementDimensions	src/AbsBeamline/TravelingWave.cpp	/^void TravelingWave::getElementDimensions(double& begin, double& end) const {$/;"	f	class:TravelingWave
getElementLength	src/AbsBeamline/ElementBase.h	/^inline double ElementBase::getElementLength() const {$/;"	f	class:ElementBase
getElementLength	src/AbsBeamline/RFCavity.cpp	/^double RFCavity::getElementLength() const {$/;"	f	class:RFCavity
getElementLength	src/BeamlineCore/MarkerRep.cpp	/^double MarkerRep::getElementLength() const {$/;"	f	class:MarkerRep
getElementLength	src/BeamlineGeometry/Euclid3DGeometry.cpp	/^double Euclid3DGeometry::getElementLength() const {$/;"	f	class:Euclid3DGeometry
getElementLength	src/BeamlineGeometry/NullGeometry.cpp	/^double NullGeometry::getElementLength() const {$/;"	f	class:NullGeometry
getElementLength	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^double PlanarArcGeometry::getElementLength() const {$/;"	f	class:PlanarArcGeometry
getElementLength	src/BeamlineGeometry/StraightGeometry.cpp	/^double StraightGeometry::getElementLength() const {$/;"	f	class:StraightGeometry
getElementLength	src/BeamlineGeometry/VarRadiusGeometry.h	/^    double VarRadiusGeometry::getElementLength() const {$/;"	f	class:VarRadiusGeometry
getElementLength	src/Beamlines/BeamlineGeometry.cpp	/^double BeamlineGeometry::getElementLength() const {$/;"	f	class:BeamlineGeometry
getElementLength	src/Beamlines/TBeamline.h	/^double TBeamline<T>::getElementLength() const {$/;"	f	class:TBeamline
getElementPosition	src/AbsBeamline/ElementBase.h	/^inline double ElementBase::getElementPosition() const {$/;"	f	class:ElementBase
getElements	src/Elements/OpalBeamline.cpp	/^std::set<std::shared_ptr<Component>> OpalBeamline::getElements(const Vector_t<double, 3>& x) {$/;"	f	class:OpalBeamline
getEmissionDeltaT	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getEmissionDeltaT() {$/;"	f	class:PartBunch
getEmissionDeltaT	src/PartBunch/PartBunch.hpp	/^    double getEmissionDeltaT() {$/;"	f	class:PartBunch
getEnd	src/Utilities/ClassicField.h	/^inline const double &ClassicField::getEnd() const {$/;"	f	class:ClassicField
getEndDirection	src/AbsBeamline/Offset.cpp	/^Vector_t<double, 3> Offset::getEndDirection() const {$/;"	f	class:Offset
getEndField	src/AbsBeamline/ScalingFFAMagnet.h	/^    endfieldmodel::EndFieldModel* getEndField() const {return endField_m;}$/;"	f	class:ScalingFFAMagnet
getEndField	src/AbsBeamline/VerticalFFAMagnet.h	/^    endfieldmodel::EndFieldModel* getEndField() const {$/;"	f	class:VerticalFFAMagnet
getEndFieldModel	src/AbsBeamline/EndFieldModel/EndFieldModel.cpp	/^std::shared_ptr<EndFieldModel> EndFieldModel::getEndFieldModel(std::string name) {$/;"	f	class:endfieldmodel::EndFieldModel
getEndFieldName	src/AbsBeamline/ScalingFFAMagnet.h	/^    std::string getEndFieldName() const {return endFieldName_m;}$/;"	f	class:ScalingFFAMagnet
getEndLength	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^double AsymmetricEnge::getEndLength() const {$/;"	f	class:endfieldmodel::AsymmetricEnge
getEndLength	src/AbsBeamline/EndFieldModel/Enge.h	/^double Enge::getEndLength() const {$/;"	f	class:endfieldmodel::Enge
getEndLength	src/AbsBeamline/EndFieldModel/Tanh.h	/^    double getEndLength() const {return getLambda();}$/;"	f	class:endfieldmodel::Tanh
getEndNormal	src/Utilities/RingSection.h	/^    inline Vector_t<double, 3> getEndNormal() const {$/;"	f	class:RingSection
getEndPosition	src/AbsBeamline/Offset.cpp	/^Vector_t<double, 3> Offset::getEndPosition() const {$/;"	f	class:Offset
getEndPosition	src/Utilities/RingSection.h	/^    inline Vector_t<double, 3> getEndPosition() const {$/;"	f	class:RingSection
getEnergyString	src/Utilities/Util.h	/^    inline std::string getEnergyString(double energyInMeV, unsigned int precision = 3) {$/;"	f	namespace:Util
getEnge	src/AbsBeamline/EndFieldModel/Enge.cpp	/^double Enge::getEnge(double x, int n) const {$/;"	f	class:endfieldmodel::Enge
getEngeEnd	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^std::shared_ptr<Enge> AsymmetricEnge::getEngeEnd() const {$/;"	f	class:endfieldmodel::AsymmetricEnge
getEngeStart	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^std::shared_ptr<Enge> AsymmetricEnge::getEngeStart() const {$/;"	f	class:endfieldmodel::AsymmetricEnge
getEntrance	src/AbsBeamline/ElementBase.h	/^inline double ElementBase::getEntrance() const {$/;"	f	class:ElementBase
getEntrance	src/AbstractObjects/Element.cpp	/^double Element::getEntrance(ReferenceType ref) const {$/;"	f	class:Element
getEntrance	src/BeamlineGeometry/Geometry.cpp	/^double BGeometryBase::getEntrance() const {$/;"	f	class:BGeometryBase
getEntrance	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^double PlanarArcGeometry::getEntrance() const {$/;"	f	class:PlanarArcGeometry
getEntrance	src/BeamlineGeometry/StraightGeometry.cpp	/^double StraightGeometry::getEntrance() const {$/;"	f	class:StraightGeometry
getEntrance	src/Beamlines/BeamlineGeometry.cpp	/^double BeamlineGeometry::getEntrance() const {$/;"	f	class:BeamlineGeometry
getEntrance	src/Beamlines/TBeamline.h	/^double TBeamline<T>::getEntrance() const {$/;"	f	class:TBeamline
getEntrance	src/Lines/Sequence.cpp	/^double Sequence::getEntrance(ReferenceType ref) const {$/;"	f	class:Sequence
getEntranceAngle	src/AbsBeamline/MultipoleT.h	/^inline double MultipoleT::getEntranceAngle() const {$/;"	f	class:MultipoleT
getEntranceAngle	src/AbsBeamline/MultipoleTBase.h	/^inline double MultipoleTBase::getEntranceAngle() const {$/;"	f	class:MultipoleTBase
getEntranceFrame	src/AbsBeamline/ElementBase.h	/^inline Euclid3D ElementBase::getEntranceFrame() const {$/;"	f	class:ElementBase
getEntranceFrame	src/BeamlineGeometry/Geometry.cpp	/^Euclid3D BGeometryBase::getEntranceFrame() const {$/;"	f	class:BGeometryBase
getEntranceFrame	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^Euclid3D PlanarArcGeometry::getEntranceFrame() const {$/;"	f	class:PlanarArcGeometry
getEntranceFrame	src/BeamlineGeometry/RBendGeometry.cpp	/^Euclid3D RBendGeometry::getEntranceFrame() const {$/;"	f	class:RBendGeometry
getEntranceFrame	src/BeamlineGeometry/StraightGeometry.cpp	/^Euclid3D StraightGeometry::getEntranceFrame() const {$/;"	f	class:StraightGeometry
getEntranceFrame	src/BeamlineGeometry/VarRadiusGeometry.h	/^    Euclid3D VarRadiusGeometry::getEntranceFrame() const {$/;"	f	class:VarRadiusGeometry
getEntranceFrame	src/Beamlines/BeamlineGeometry.cpp	/^Euclid3D BeamlineGeometry::getEntranceFrame() const {$/;"	f	class:BeamlineGeometry
getEntranceFrame	src/Beamlines/TBeamline.h	/^Euclid3D TBeamline<T>::getEntranceFrame() const {$/;"	f	class:TBeamline
getEntrancePatch	src/AbsBeamline/ElementBase.h	/^inline Euclid3D ElementBase::getEntrancePatch() const {$/;"	f	class:ElementBase
getEntrancePatch	src/BeamlineGeometry/Geometry.cpp	/^Euclid3D BGeometryBase::getEntrancePatch() const {$/;"	f	class:BGeometryBase
getEntrancePatch	src/BeamlineGeometry/RBendGeometry.cpp	/^Euclid3D RBendGeometry::getEntrancePatch() const {$/;"	f	class:RBendGeometry
getEvenlyDistributedSamplingPoints	src/Fields/Astra1D_fast.cpp	/^std::vector<double> Astra1D_fast::getEvenlyDistributedSamplingPoints() {$/;"	f	class:Astra1D_fast
getEx	src/Fields/EMField.cpp	/^double EBVectors::getEx() const$/;"	f	class:EBVectors
getEx	src/Fields/EMField.cpp	/^double EVector::getEx() const$/;"	f	class:EVector
getExit	src/AbsBeamline/ElementBase.h	/^inline double ElementBase::getExit() const {$/;"	f	class:ElementBase
getExit	src/AbstractObjects/Element.cpp	/^double Element::getExit(ReferenceType ref) const {$/;"	f	class:Element
getExit	src/BeamlineGeometry/Geometry.cpp	/^double BGeometryBase::getExit() const {$/;"	f	class:BGeometryBase
getExit	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^double PlanarArcGeometry::getExit() const {$/;"	f	class:PlanarArcGeometry
getExit	src/BeamlineGeometry/StraightGeometry.cpp	/^double StraightGeometry::getExit() const {$/;"	f	class:StraightGeometry
getExit	src/Beamlines/BeamlineGeometry.cpp	/^double BeamlineGeometry::getExit() const {$/;"	f	class:BeamlineGeometry
getExit	src/Beamlines/TBeamline.h	/^double TBeamline<T>::getExit() const {$/;"	f	class:TBeamline
getExit	src/Lines/Sequence.cpp	/^double Sequence::getExit(ReferenceType ref) const {$/;"	f	class:Sequence
getExitFrame	src/AbsBeamline/ElementBase.h	/^inline Euclid3D ElementBase::getExitFrame() const {$/;"	f	class:ElementBase
getExitFrame	src/BeamlineGeometry/Geometry.cpp	/^Euclid3D BGeometryBase::getExitFrame() const {$/;"	f	class:BGeometryBase
getExitFrame	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^Euclid3D PlanarArcGeometry::getExitFrame() const {$/;"	f	class:PlanarArcGeometry
getExitFrame	src/BeamlineGeometry/RBendGeometry.cpp	/^Euclid3D RBendGeometry::getExitFrame() const {$/;"	f	class:RBendGeometry
getExitFrame	src/BeamlineGeometry/StraightGeometry.cpp	/^Euclid3D StraightGeometry::getExitFrame() const {$/;"	f	class:StraightGeometry
getExitFrame	src/BeamlineGeometry/VarRadiusGeometry.h	/^    Euclid3D VarRadiusGeometry::getExitFrame() const {$/;"	f	class:VarRadiusGeometry
getExitFrame	src/Beamlines/BeamlineGeometry.cpp	/^Euclid3D BeamlineGeometry::getExitFrame() const {$/;"	f	class:BeamlineGeometry
getExitFrame	src/Beamlines/TBeamline.h	/^Euclid3D TBeamline<T>::getExitFrame() const {$/;"	f	class:TBeamline
getExitPatch	src/AbsBeamline/ElementBase.h	/^inline Euclid3D ElementBase::getExitPatch() const {$/;"	f	class:ElementBase
getExitPatch	src/BeamlineGeometry/Geometry.cpp	/^Euclid3D BGeometryBase::getExitPatch() const {$/;"	f	class:BGeometryBase
getExitPatch	src/BeamlineGeometry/RBendGeometry.cpp	/^Euclid3D RBendGeometry::getExitPatch() const {$/;"	f	class:RBendGeometry
getEy	src/Fields/EMField.cpp	/^double EBVectors::getEy() const$/;"	f	class:EBVectors
getEy	src/Fields/EMField.cpp	/^double EVector::getEy() const$/;"	f	class:EVector
getEz	src/Fields/ConstEzField.cpp	/^double ConstEzField::getEz() const {$/;"	f	class:ConstEzField
getEz	src/Fields/EMField.cpp	/^double EBVectors::getEz() const$/;"	f	class:EBVectors
getEz	src/Fields/EMField.cpp	/^double EVector::getEz() const$/;"	f	class:EVector
getF	src/Channels/IndexedChannel.h	/^    double(T::*getF)(int) const;$/;"	m	class:IndexedChannel
getF	src/Channels/IndirectChannel.h	/^    double(T::*getF)() const;$/;"	m	class:IndirectChannel
getFL	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    FieldLayout_t<Dim>& getFL() { return fl_m; }$/;"	f	class:FieldContainer
getFL	src/PartBunch/FieldContainer.hpp	/^    FieldLayout_t<Dim>& getFL() {$/;"	f	class:FieldContainer
getFTOSCAmplitude	src/Distribution/Distribution.h	/^inline double Distribution::getFTOSCAmplitude() const {$/;"	f	class:Distribution
getFTOSCPeriods	src/Distribution/Distribution.h	/^inline double Distribution::getFTOSCPeriods() const {$/;"	f	class:Distribution
getFast	src/AbsBeamline/RFCavity.h	/^inline bool RFCavity::getFast() const {$/;"	f	class:RFCavity
getFast	src/AbsBeamline/Solenoid.cpp	/^bool Solenoid::getFast() const {$/;"	f	class:Solenoid
getField	src/AbsBeamline/MultipoleT.cpp	/^EMField& MultipoleT::getField() {$/;"	f	class:MultipoleT
getField	src/AbsBeamline/MultipoleT.cpp	/^const EMField& MultipoleT::getField() const {$/;"	f	class:MultipoleT
getField	src/AbsBeamline/MultipoleTBase.h	/^inline EMField& MultipoleTBase::getField() {$/;"	f	class:MultipoleTBase
getField	src/AbsBeamline/MultipoleTBase.h	/^inline const EMField& MultipoleTBase::getField() const {$/;"	f	class:MultipoleTBase
getField	src/AbsBeamline/Offset.cpp	/^EMField& Offset::getField() {$/;"	f	class:Offset
getField	src/AbsBeamline/Offset.cpp	/^const EMField& Offset::getField() const {$/;"	f	class:Offset
getField	src/AbsBeamline/ScalingFFAMagnet.cpp	/^EMField& ScalingFFAMagnet::getField() {$/;"	f	class:ScalingFFAMagnet
getField	src/AbsBeamline/ScalingFFAMagnet.cpp	/^const EMField& ScalingFFAMagnet::getField() const {$/;"	f	class:ScalingFFAMagnet
getField	src/AbsBeamline/VerticalFFAMagnet.cpp	/^EMField &VerticalFFAMagnet::getField() {$/;"	f	class:VerticalFFAMagnet
getField	src/AbsBeamline/VerticalFFAMagnet.cpp	/^const EMField &VerticalFFAMagnet::getField() const {$/;"	f	class:VerticalFFAMagnet
getField	src/BeamlineCore/DriftRep.cpp	/^NullField &DriftRep::getField() {$/;"	f	class:DriftRep
getField	src/BeamlineCore/DriftRep.cpp	/^const NullField &DriftRep::getField() const {$/;"	f	class:DriftRep
getField	src/BeamlineCore/MarkerRep.cpp	/^NullField &MarkerRep::getField() {$/;"	f	class:MarkerRep
getField	src/BeamlineCore/MarkerRep.cpp	/^const NullField &MarkerRep::getField() const {$/;"	f	class:MarkerRep
getField	src/BeamlineCore/MonitorRep.cpp	/^NullField &MonitorRep::getField() {$/;"	f	class:MonitorRep
getField	src/BeamlineCore/MonitorRep.cpp	/^const NullField &MonitorRep::getField() const {$/;"	f	class:MonitorRep
getField	src/BeamlineCore/MultipoleRep.cpp	/^BMultipoleField &MultipoleRep::getField() {$/;"	f	class:MultipoleRep
getField	src/BeamlineCore/MultipoleRep.cpp	/^const BMultipoleField &MultipoleRep::getField() const {$/;"	f	class:MultipoleRep
getField	src/BeamlineCore/ProbeRep.cpp	/^NullField &ProbeRep::getField() {$/;"	f	class:ProbeRep
getField	src/BeamlineCore/ProbeRep.cpp	/^const NullField &ProbeRep::getField() const {$/;"	f	class:ProbeRep
getField	src/BeamlineCore/RFCavityRep.cpp	/^AcceleratingField &RFCavityRep::getField() {$/;"	f	class:RFCavityRep
getField	src/BeamlineCore/RFCavityRep.cpp	/^const AcceleratingField &RFCavityRep::getField() const {$/;"	f	class:RFCavityRep
getField	src/BeamlineCore/SolenoidRep.cpp	/^ConstBzField &SolenoidRep::getField() {$/;"	f	class:SolenoidRep
getField	src/BeamlineCore/SolenoidRep.cpp	/^const ConstBzField &SolenoidRep::getField() const {$/;"	f	class:SolenoidRep
getField	src/BeamlineCore/TravelingWaveRep.cpp	/^AcceleratingField &TravelingWaveRep::getField() {$/;"	f	class:TravelingWaveRep
getField	src/BeamlineCore/TravelingWaveRep.cpp	/^const AcceleratingField &TravelingWaveRep::getField() const {$/;"	f	class:TravelingWaveRep
getField	tests/opal_src/Utilities/MockComponent.h	/^    EMField& getField() const {EMField* em = nullptr; return *em;}$/;"	f	class:MockComponent
getField	tests/opal_src/Utilities/MockComponent.h	/^    EMField& getField() const {EMField* em = nullptr; return *em;}$/;"	f	class:MockComponent2
getField	tests/opal_src/Utilities/MockComponent.h	/^    EMField& getField() {EMField* em = nullptr; return *em;}$/;"	f	class:MockComponent
getField	tests/opal_src/Utilities/MockComponent.h	/^    EMField& getField() {EMField* em = nullptr; return *em;}$/;"	f	class:MockComponent2
getField	tests/opal_test_utilities/Maxwell.h	/^    Component* getField() const {return field_m.get();}$/;"	f	class:MaxwellTest
getFieldAt	src/Elements/OpalBeamline.cpp	/^unsigned long OpalBeamline::getFieldAt($/;"	f	class:OpalBeamline
getFieldDerivative	src/Fields/Astra1DDynamic.cpp	/^bool Astra1DDynamic::getFieldDerivative($/;"	f	class:Astra1DDynamic
getFieldDerivative	src/Fields/Astra1DDynamic_fast.cpp	/^bool Astra1DDynamic_fast::getFieldDerivative($/;"	f	class:Astra1DDynamic_fast
getFieldDerivative	src/Fields/Astra1DElectroStatic.cpp	/^bool Astra1DElectroStatic::getFieldDerivative($/;"	f	class:Astra1DElectroStatic
getFieldDerivative	src/Fields/Astra1DElectroStatic_fast.cpp	/^bool Astra1DElectroStatic_fast::getFieldDerivative($/;"	f	class:Astra1DElectroStatic_fast
getFieldDerivative	src/Fields/Astra1DMagnetoStatic.cpp	/^bool Astra1DMagnetoStatic::getFieldDerivative($/;"	f	class:Astra1DMagnetoStatic
getFieldDerivative	src/Fields/Astra1DMagnetoStatic_fast.cpp	/^bool Astra1DMagnetoStatic_fast::getFieldDerivative($/;"	f	class:Astra1DMagnetoStatic_fast
getFieldDerivative	src/Fields/FM1DDynamic.cpp	/^bool FM1DDynamic::getFieldDerivative($/;"	f	class:FM1DDynamic
getFieldDerivative	src/Fields/FM1DDynamic_fast.cpp	/^bool FM1DDynamic_fast::getFieldDerivative($/;"	f	class:FM1DDynamic_fast
getFieldDerivative	src/Fields/FM1DElectroStatic.cpp	/^bool FM1DElectroStatic::getFieldDerivative($/;"	f	class:FM1DElectroStatic
getFieldDerivative	src/Fields/FM1DElectroStatic_fast.cpp	/^bool FM1DElectroStatic_fast::getFieldDerivative($/;"	f	class:FM1DElectroStatic_fast
getFieldDerivative	src/Fields/FM1DMagnetoStatic.cpp	/^bool FM1DMagnetoStatic::getFieldDerivative($/;"	f	class:FM1DMagnetoStatic
getFieldDerivative	src/Fields/FM1DMagnetoStatic_fast.cpp	/^bool FM1DMagnetoStatic_fast::getFieldDerivative($/;"	f	class:FM1DMagnetoStatic_fast
getFieldDerivative	src/Fields/FM1DProfile1.cpp	/^bool FM1DProfile1::getFieldDerivative($/;"	f	class:FM1DProfile1
getFieldDerivative	src/Fields/FM1DProfile2.cpp	/^bool FM1DProfile2::getFieldDerivative($/;"	f	class:FM1DProfile2
getFieldDerivative	src/Fields/FM2DDynamic.cpp	/^bool FM2DDynamic::getFieldDerivative($/;"	f	class:FM2DDynamic
getFieldDerivative	src/Fields/FM2DElectroStatic.cpp	/^bool FM2DElectroStatic::getFieldDerivative($/;"	f	class:FM2DElectroStatic
getFieldDerivative	src/Fields/FM2DMagnetoStatic.cpp	/^bool FM2DMagnetoStatic::getFieldDerivative($/;"	f	class:FM2DMagnetoStatic
getFieldDerivative	src/Fields/FM3DDynamic.cpp	/^bool FM3DDynamic::getFieldDerivative($/;"	f	class:FM3DDynamic
getFieldDerivative	src/Fields/FM3DH5BlockBase.h	/^    virtual bool getFieldDerivative ($/;"	f	class:FM3DH5BlockBase
getFieldDerivative	src/Fields/FM3DMagnetoStatic.cpp	/^bool FM3DMagnetoStatic::getFieldDerivative($/;"	f	class:FM3DMagnetoStatic
getFieldDerivative	src/Fields/FM3DMagnetoStaticExtended.cpp	/^bool FM3DMagnetoStaticExtended::getFieldDerivative($/;"	f	class:FM3DMagnetoStaticExtended
getFieldDerivative	src/Fields/FMDummy.cpp	/^bool FMDummy::getFieldDerivative($/;"	f	class:FMDummy
getFieldDerivative	src/Fields/SectorMagneticFieldMap.cpp	/^bool SectorMagneticFieldMap::getFieldDerivative(const Vector_t<double, 3> &\/*R*\/, Vector_t<double, 3> &\/*E*\/,$/;"	f	class:SectorMagneticFieldMap
getFieldDimensions	src/Fields/Astra1DDynamic.cpp	/^void Astra1DDynamic::getFieldDimensions($/;"	f	class:Astra1DDynamic
getFieldDimensions	src/Fields/Astra1DDynamic.cpp	/^void Astra1DDynamic::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:Astra1DDynamic
getFieldDimensions	src/Fields/Astra1DDynamic_fast.cpp	/^void Astra1DDynamic_fast::getFieldDimensions($/;"	f	class:Astra1DDynamic_fast
getFieldDimensions	src/Fields/Astra1DDynamic_fast.cpp	/^void Astra1DDynamic_fast::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:Astra1DDynamic_fast
getFieldDimensions	src/Fields/Astra1DElectroStatic.cpp	/^void Astra1DElectroStatic::getFieldDimensions($/;"	f	class:Astra1DElectroStatic
getFieldDimensions	src/Fields/Astra1DElectroStatic.cpp	/^void Astra1DElectroStatic::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:Astra1DElectroStatic
getFieldDimensions	src/Fields/Astra1DElectroStatic_fast.cpp	/^void Astra1DElectroStatic_fast::getFieldDimensions($/;"	f	class:Astra1DElectroStatic_fast
getFieldDimensions	src/Fields/Astra1DElectroStatic_fast.cpp	/^void Astra1DElectroStatic_fast::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:Astra1DElectroStatic_fast
getFieldDimensions	src/Fields/Astra1DMagnetoStatic.cpp	/^void Astra1DMagnetoStatic::getFieldDimensions($/;"	f	class:Astra1DMagnetoStatic
getFieldDimensions	src/Fields/Astra1DMagnetoStatic.cpp	/^void Astra1DMagnetoStatic::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:Astra1DMagnetoStatic
getFieldDimensions	src/Fields/Astra1DMagnetoStatic_fast.cpp	/^void Astra1DMagnetoStatic_fast::getFieldDimensions($/;"	f	class:Astra1DMagnetoStatic_fast
getFieldDimensions	src/Fields/Astra1DMagnetoStatic_fast.cpp	/^void Astra1DMagnetoStatic_fast::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:Astra1DMagnetoStatic_fast
getFieldDimensions	src/Fields/FM1DDynamic.cpp	/^void FM1DDynamic::getFieldDimensions($/;"	f	class:FM1DDynamic
getFieldDimensions	src/Fields/FM1DDynamic.cpp	/^void FM1DDynamic::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:FM1DDynamic
getFieldDimensions	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::getFieldDimensions($/;"	f	class:FM1DDynamic_fast
getFieldDimensions	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:FM1DDynamic_fast
getFieldDimensions	src/Fields/FM1DElectroStatic.cpp	/^void FM1DElectroStatic::getFieldDimensions($/;"	f	class:FM1DElectroStatic
getFieldDimensions	src/Fields/FM1DElectroStatic.cpp	/^void FM1DElectroStatic::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:FM1DElectroStatic
getFieldDimensions	src/Fields/FM1DElectroStatic_fast.cpp	/^void FM1DElectroStatic_fast::getFieldDimensions($/;"	f	class:FM1DElectroStatic_fast
getFieldDimensions	src/Fields/FM1DElectroStatic_fast.cpp	/^void FM1DElectroStatic_fast::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:FM1DElectroStatic_fast
getFieldDimensions	src/Fields/FM1DMagnetoStatic.cpp	/^void FM1DMagnetoStatic::getFieldDimensions($/;"	f	class:FM1DMagnetoStatic
getFieldDimensions	src/Fields/FM1DMagnetoStatic.cpp	/^void FM1DMagnetoStatic::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:FM1DMagnetoStatic
getFieldDimensions	src/Fields/FM1DMagnetoStatic_fast.cpp	/^void FM1DMagnetoStatic_fast::getFieldDimensions($/;"	f	class:FM1DMagnetoStatic_fast
getFieldDimensions	src/Fields/FM1DMagnetoStatic_fast.cpp	/^void FM1DMagnetoStatic_fast::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:FM1DMagnetoStatic_fast
getFieldDimensions	src/Fields/FM1DProfile1.cpp	/^void FM1DProfile1::getFieldDimensions($/;"	f	class:FM1DProfile1
getFieldDimensions	src/Fields/FM1DProfile1.cpp	/^void FM1DProfile1::getFieldDimensions(double& sBegin, double& sEnd) const {$/;"	f	class:FM1DProfile1
getFieldDimensions	src/Fields/FM1DProfile2.cpp	/^void FM1DProfile2::getFieldDimensions($/;"	f	class:FM1DProfile2
getFieldDimensions	src/Fields/FM1DProfile2.cpp	/^void FM1DProfile2::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:FM1DProfile2
getFieldDimensions	src/Fields/FM2DDynamic.cpp	/^void FM2DDynamic::getFieldDimensions($/;"	f	class:FM2DDynamic
getFieldDimensions	src/Fields/FM2DDynamic.cpp	/^void FM2DDynamic::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:FM2DDynamic
getFieldDimensions	src/Fields/FM2DElectroStatic.cpp	/^void FM2DElectroStatic::getFieldDimensions($/;"	f	class:FM2DElectroStatic
getFieldDimensions	src/Fields/FM2DElectroStatic.cpp	/^void FM2DElectroStatic::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:FM2DElectroStatic
getFieldDimensions	src/Fields/FM2DMagnetoStatic.cpp	/^void FM2DMagnetoStatic::getFieldDimensions($/;"	f	class:FM2DMagnetoStatic
getFieldDimensions	src/Fields/FM2DMagnetoStatic.cpp	/^void FM2DMagnetoStatic::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:FM2DMagnetoStatic
getFieldDimensions	src/Fields/FM3DDynamic.cpp	/^void FM3DDynamic::getFieldDimensions($/;"	f	class:FM3DDynamic
getFieldDimensions	src/Fields/FM3DDynamic.cpp	/^void FM3DDynamic::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:FM3DDynamic
getFieldDimensions	src/Fields/FM3DH5BlockBase.h	/^    virtual void getFieldDimensions ($/;"	f	class:FM3DH5BlockBase
getFieldDimensions	src/Fields/FM3DMagnetoStatic.cpp	/^void FM3DMagnetoStatic::getFieldDimensions($/;"	f	class:FM3DMagnetoStatic
getFieldDimensions	src/Fields/FM3DMagnetoStatic.cpp	/^void FM3DMagnetoStatic::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:FM3DMagnetoStatic
getFieldDimensions	src/Fields/FM3DMagnetoStaticExtended.cpp	/^void FM3DMagnetoStaticExtended::getFieldDimensions($/;"	f	class:FM3DMagnetoStaticExtended
getFieldDimensions	src/Fields/FM3DMagnetoStaticExtended.cpp	/^void FM3DMagnetoStaticExtended::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:FM3DMagnetoStaticExtended
getFieldDimensions	src/Fields/FMDummy.cpp	/^void FMDummy::getFieldDimensions($/;"	f	class:FMDummy
getFieldDimensions	src/Fields/FMDummy.cpp	/^void FMDummy::getFieldDimensions(double& zBegin, double& zEnd) const {$/;"	f	class:FMDummy
getFieldDimensions	src/Fields/SectorField.cpp	/^void SectorField::getFieldDimensions(double &xIni, double &xFinal,$/;"	f	class:SectorField
getFieldDimensions	src/Fields/SectorField.cpp	/^void SectorField::getFieldDimensions(double &zBegin, double &zEnd,$/;"	f	class:SectorField
getFieldGap	src/Fields/FM1DProfile1.cpp	/^double FM1DProfile1::getFieldGap() {$/;"	f	class:FM1DProfile1
getFieldGap	src/Fields/Fieldmap.cpp	/^double Fieldmap::getFieldGap() {$/;"	f	class:Fieldmap
getFieldIndex	src/AbsBeamline/ScalingFFAMagnet.h	/^    double getFieldIndex() const {return k_m;}$/;"	f	class:ScalingFFAMagnet
getFieldIndex	src/AbsBeamline/VerticalFFAMagnet.h	/^    double getFieldIndex() const {$/;"	f	class:VerticalFFAMagnet
getFieldInfo	src/Fields/FM3DH5BlockBase.cpp	/^void FM3DH5BlockBase::getFieldInfo(const char* name) {$/;"	f	class:FM3DH5BlockBase
getFieldLayout	src/Algorithms/.PartBunch.cpp	/^FieldLayout_t &PartBunch::getFieldLayout() {$/;"	f	class:PartBunch
getFieldMap	tests/classic_src/AbsBeamline/SBend3DTest.cpp	/^    void getFieldMap(int polynomial_order, int smoothing_order) {$/;"	f	class:LoadFieldMap
getFieldMapFN	src/AbsBeamline/RFCavity.cpp	/^std::string RFCavity::getFieldMapFN() const {$/;"	f	class:RFCavity
getFieldMapFileName	src/Fields/SectorMagneticFieldMap.h	/^    std::string getFieldMapFileName() const {return filename_m;}$/;"	f	class:SectorMagneticFieldMap
getFieldSolver	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        std::shared_ptr<FieldSolver_t> getFieldSolver() const { return fs_m; }$/;"	f	class:LoadBalancer
getFieldSolver	src/PartBunch/LoadBalancer.hpp	/^    std::shared_ptr<FieldSolver_t> getFieldSolver() const {$/;"	f	class:LoadBalancer
getFieldSolverCmdType	src/Structure/FieldSolverCmd.h	/^inline FieldSolverCmdType FieldSolverCmd::getFieldSolverCmdType() const {$/;"	f	class:FieldSolverCmdType::FieldSolverCmd
getFieldSolverType	src/Algorithms/.PartBunchBase.hpp	/^FieldSolverType PartBunch<T, Dim>::getFieldSolverType() const {$/;"	f	class:PartBunch
getFieldSolverType	src/PartBunch/PartBunch.hpp	/^    bool getFieldSolverType() {$/;"	f	class:PartBunch
getFieldValue	src/AbsBeamline/ScalingFFAMagnet.cpp	/^bool ScalingFFAMagnet::getFieldValue(const Vector_t<double, 3>& R, Vector_t<double, 3>& B) const {$/;"	f	class:ScalingFFAMagnet
getFieldValue	src/AbsBeamline/VerticalFFAMagnet.cpp	/^bool VerticalFFAMagnet::getFieldValue(const Vector_t<double, 3> &R, Vector_t<double, 3> &B) const {$/;"	f	class:VerticalFFAMagnet
getFieldValue	src/Utilities/RingSection.cpp	/^bool RingSection::getFieldValue(const Vector_t<double, 3>& pos,$/;"	f	class:RingSection
getFieldValueCylindrical	src/AbsBeamline/ScalingFFAMagnet.cpp	/^bool ScalingFFAMagnet::getFieldValueCylindrical($/;"	f	class:ScalingFFAMagnet
getFieldmap	src/Fields/Fieldmap.cpp	/^Fieldmap* Fieldmap::getFieldmap(std::string Filename, bool fast) {$/;"	f	class:Fieldmap
getFieldstrength	src/Fields/Astra1DDynamic.cpp	/^bool Astra1DDynamic::getFieldstrength($/;"	f	class:Astra1DDynamic
getFieldstrength	src/Fields/Astra1DDynamic_fast.cpp	/^bool Astra1DDynamic_fast::getFieldstrength($/;"	f	class:Astra1DDynamic_fast
getFieldstrength	src/Fields/Astra1DElectroStatic.cpp	/^bool Astra1DElectroStatic::getFieldstrength($/;"	f	class:Astra1DElectroStatic
getFieldstrength	src/Fields/Astra1DElectroStatic_fast.cpp	/^bool Astra1DElectroStatic_fast::getFieldstrength($/;"	f	class:Astra1DElectroStatic_fast
getFieldstrength	src/Fields/Astra1DMagnetoStatic.cpp	/^bool Astra1DMagnetoStatic::getFieldstrength($/;"	f	class:Astra1DMagnetoStatic
getFieldstrength	src/Fields/Astra1DMagnetoStatic_fast.cpp	/^bool Astra1DMagnetoStatic_fast::getFieldstrength($/;"	f	class:Astra1DMagnetoStatic_fast
getFieldstrength	src/Fields/FM1DDynamic.cpp	/^bool FM1DDynamic::getFieldstrength($/;"	f	class:FM1DDynamic
getFieldstrength	src/Fields/FM1DDynamic_fast.cpp	/^bool FM1DDynamic_fast::getFieldstrength($/;"	f	class:FM1DDynamic_fast
getFieldstrength	src/Fields/FM1DElectroStatic.cpp	/^bool FM1DElectroStatic::getFieldstrength($/;"	f	class:FM1DElectroStatic
getFieldstrength	src/Fields/FM1DElectroStatic_fast.cpp	/^bool FM1DElectroStatic_fast::getFieldstrength($/;"	f	class:FM1DElectroStatic_fast
getFieldstrength	src/Fields/FM1DMagnetoStatic.cpp	/^bool FM1DMagnetoStatic::getFieldstrength($/;"	f	class:FM1DMagnetoStatic
getFieldstrength	src/Fields/FM1DMagnetoStatic_fast.cpp	/^bool FM1DMagnetoStatic_fast::getFieldstrength($/;"	f	class:FM1DMagnetoStatic_fast
getFieldstrength	src/Fields/FM1DProfile1.cpp	/^bool FM1DProfile1::getFieldstrength($/;"	f	class:FM1DProfile1
getFieldstrength	src/Fields/FM1DProfile2.cpp	/^bool FM1DProfile2::getFieldstrength($/;"	f	class:FM1DProfile2
getFieldstrength	src/Fields/FM2DDynamic.cpp	/^bool FM2DDynamic::getFieldstrength($/;"	f	class:FM2DDynamic
getFieldstrength	src/Fields/FM2DElectroStatic.cpp	/^bool FM2DElectroStatic::getFieldstrength($/;"	f	class:FM2DElectroStatic
getFieldstrength	src/Fields/FM2DMagnetoStatic.cpp	/^bool FM2DMagnetoStatic::getFieldstrength($/;"	f	class:FM2DMagnetoStatic
getFieldstrength	src/Fields/FM3DDynamic.cpp	/^bool FM3DDynamic::getFieldstrength($/;"	f	class:FM3DDynamic
getFieldstrength	src/Fields/FM3DH5Block.cpp	/^bool FM3DH5Block::getFieldstrength($/;"	f	class:FM3DH5Block
getFieldstrength	src/Fields/FM3DH5Block_nonscale.cpp	/^bool FM3DH5Block_nonscale::getFieldstrength($/;"	f	class:FM3DH5Block_nonscale
getFieldstrength	src/Fields/FM3DMagnetoStatic.cpp	/^bool FM3DMagnetoStatic::getFieldstrength($/;"	f	class:FM3DMagnetoStatic
getFieldstrength	src/Fields/FM3DMagnetoStaticExtended.cpp	/^bool FM3DMagnetoStaticExtended::getFieldstrength($/;"	f	class:FM3DMagnetoStaticExtended
getFieldstrength	src/Fields/FM3DMagnetoStaticH5Block.cpp	/^bool FM3DMagnetoStaticH5Block::getFieldstrength($/;"	f	class:FM3DMagnetoStaticH5Block
getFieldstrength	src/Fields/FMDummy.cpp	/^bool FMDummy::getFieldstrength($/;"	f	class:FMDummy
getFieldstrength	src/Fields/SectorMagneticFieldMap.cpp	/^bool SectorMagneticFieldMap::getFieldstrength ($/;"	f	class:SectorMagneticFieldMap
getFile	src/OpalParser/Token.cpp	/^const std::string &Token::getFile() const {$/;"	f	class:Token
getFilename	src/Structure/BoundaryGeometry.h	/^    inline std::string getFilename() const {$/;"	f	class:BoundaryGeometry
getFinalZStop	src/Algorithms/StepSizeConfig.cpp	/^double StepSizeConfig::getFinalZStop() const {$/;"	f	class:StepSizeConfig
getFirstEnergyData	src/AbstractObjects/OpalData.cpp	/^energyEvolution_t::iterator OpalData::getFirstEnergyData() {$/;"	f	class:OpalData
getFirstMaxPhases	src/AbstractObjects/OpalData.cpp	/^std::vector<MaxPhasesT>::iterator OpalData::getFirstMaxPhases() {$/;"	f	class:OpalData
getFlagDeleteOnTransverseExit	src/AbsBeamline/ElementBase.h	/^inline bool ElementBase::getFlagDeleteOnTransverseExit() const {$/;"	f	class:ElementBase
getFn	src/AbsBeamline/MultipoleT.cpp	/^double MultipoleT::getFn(std::size_t n, double x, double s) {$/;"	f	class:MultipoleT
getFn	src/AbsBeamline/MultipoleTCurvedConstRadius.cpp	/^double MultipoleTCurvedConstRadius::getFn(const std::size_t &n,$/;"	f	class:MultipoleTCurvedConstRadius
getFn	src/AbsBeamline/MultipoleTCurvedVarRadius.cpp	/^double MultipoleTCurvedVarRadius::getFn(const std::size_t &n,$/;"	f	class:MultipoleTCurvedVarRadius
getFn	src/AbsBeamline/MultipoleTStraight.cpp	/^double MultipoleTStraight::getFn(const std::size_t &n,$/;"	f	class:MultipoleTStraight
getFnDerivS	src/AbsBeamline/MultipoleT.cpp	/^double MultipoleT::getFnDerivS(std::size_t n, double x, double s) {$/;"	f	class:MultipoleT
getFnDerivS	src/AbsBeamline/MultipoleTBase.cpp	/^double MultipoleTBase::getFnDerivS(const std::size_t &n,$/;"	f	class:MultipoleTBase
getFnDerivX	src/AbsBeamline/MultipoleT.cpp	/^double MultipoleT::getFnDerivX(std::size_t n, double x, double s) {$/;"	f	class:MultipoleT
getFnDerivX	src/AbsBeamline/MultipoleTBase.cpp	/^double MultipoleTBase::getFnDerivX(const std::size_t &n,$/;"	f	class:MultipoleTBase
getFrequency	src/BeamlineCore/RFCavityRep.cpp	/^double RFCavityRep::getFrequency() const {$/;"	f	class:RFCavityRep
getFrequency	src/BeamlineCore/TravelingWaveRep.cpp	/^double TravelingWaveRep::getFrequency() const {$/;"	f	class:TravelingWaveRep
getFrequency	src/Fields/Astra1DDynamic.cpp	/^double Astra1DDynamic::getFrequency() const {$/;"	f	class:Astra1DDynamic
getFrequency	src/Fields/Astra1DDynamic_fast.cpp	/^double Astra1DDynamic_fast::getFrequency() const {$/;"	f	class:Astra1DDynamic_fast
getFrequency	src/Fields/Astra1DElectroStatic.cpp	/^double Astra1DElectroStatic::getFrequency() const {$/;"	f	class:Astra1DElectroStatic
getFrequency	src/Fields/Astra1DElectroStatic_fast.cpp	/^double Astra1DElectroStatic_fast::getFrequency() const {$/;"	f	class:Astra1DElectroStatic_fast
getFrequency	src/Fields/Astra1DMagnetoStatic.cpp	/^double Astra1DMagnetoStatic::getFrequency() const {$/;"	f	class:Astra1DMagnetoStatic
getFrequency	src/Fields/Astra1DMagnetoStatic_fast.cpp	/^double Astra1DMagnetoStatic_fast::getFrequency() const {$/;"	f	class:Astra1DMagnetoStatic_fast
getFrequency	src/Fields/FM1DDynamic.cpp	/^double FM1DDynamic::getFrequency() const {$/;"	f	class:FM1DDynamic
getFrequency	src/Fields/FM1DDynamic_fast.cpp	/^double FM1DDynamic_fast::getFrequency() const {$/;"	f	class:FM1DDynamic_fast
getFrequency	src/Fields/FM1DElectroStatic.cpp	/^double FM1DElectroStatic::getFrequency() const {$/;"	f	class:FM1DElectroStatic
getFrequency	src/Fields/FM1DElectroStatic_fast.cpp	/^double FM1DElectroStatic_fast::getFrequency() const {$/;"	f	class:FM1DElectroStatic_fast
getFrequency	src/Fields/FM1DMagnetoStatic.cpp	/^double FM1DMagnetoStatic::getFrequency() const {$/;"	f	class:FM1DMagnetoStatic
getFrequency	src/Fields/FM1DMagnetoStatic_fast.cpp	/^double FM1DMagnetoStatic_fast::getFrequency() const {$/;"	f	class:FM1DMagnetoStatic_fast
getFrequency	src/Fields/FM1DProfile1.cpp	/^double FM1DProfile1::getFrequency() const {$/;"	f	class:FM1DProfile1
getFrequency	src/Fields/FM1DProfile2.cpp	/^double FM1DProfile2::getFrequency() const {$/;"	f	class:FM1DProfile2
getFrequency	src/Fields/FM2DDynamic.cpp	/^double FM2DDynamic::getFrequency() const {$/;"	f	class:FM2DDynamic
getFrequency	src/Fields/FM2DElectroStatic.cpp	/^double FM2DElectroStatic::getFrequency() const {$/;"	f	class:FM2DElectroStatic
getFrequency	src/Fields/FM2DMagnetoStatic.cpp	/^double FM2DMagnetoStatic::getFrequency() const {$/;"	f	class:FM2DMagnetoStatic
getFrequency	src/Fields/FM3DDynamic.cpp	/^double FM3DDynamic::getFrequency() const {$/;"	f	class:FM3DDynamic
getFrequency	src/Fields/FM3DH5BlockBase.cpp	/^double FM3DH5BlockBase::getFrequency() const {$/;"	f	class:FM3DH5BlockBase
getFrequency	src/Fields/FM3DMagnetoStatic.h	/^double FM3DMagnetoStatic::getFrequency() const {$/;"	f	class:FM3DMagnetoStatic
getFrequency	src/Fields/FM3DMagnetoStaticExtended.cpp	/^double FM3DMagnetoStaticExtended::getFrequency() const {$/;"	f	class:FM3DMagnetoStaticExtended
getFrequency	src/Fields/FM3DMagnetoStaticH5Block.cpp	/^double FM3DMagnetoStaticH5Block::getFrequency() const {$/;"	f	class:FM3DMagnetoStaticH5Block
getFrequency	src/Fields/FMDummy.cpp	/^double FMDummy::getFrequency() const {$/;"	f	class:FMDummy
getFrequency	src/Fields/OscillatingField.h	/^double OscillatingField<Field>::getFrequency() const$/;"	f	class:OscillatingField
getFrequency	src/Fields/SectorMagneticFieldMap.h	/^    double getFrequency() const {return 0;}$/;"	f	class:SectorMagneticFieldMap
getFrequency	src/Structure/Beam.cpp	/^double Beam::getFrequency() const {$/;"	f	class:Beam
getFrequencyModelName	src/AbsBeamline/RFCavity.h	/^inline std::string RFCavity::getFrequencyModelName() {$/;"	f	class:RFCavity
getFrequencym	src/AbsBeamline/RFCavity.h	/^inline double RFCavity::getFrequencym() const {$/;"	f	class:RFCavity
getFringeDeriv	src/AbsBeamline/MultipoleT.cpp	/^double MultipoleT::getFringeDeriv(int n, double s) {$/;"	f	class:MultipoleT
getFringeDeriv	src/AbsBeamline/MultipoleTBase.cpp	/^double MultipoleTBase::getFringeDeriv(const std::size_t &n, const double &s) {$/;"	f	class:MultipoleTBase
getFringeLength	src/AbsBeamline/MultipoleT.cpp	/^std::vector<double> MultipoleT::getFringeLength() const {$/;"	f	class:MultipoleT
getFringeLength	src/AbsBeamline/MultipoleTBase.h	/^inline std::vector<double> MultipoleTBase::getFringeLength() const {$/;"	f	class:MultipoleTBase
getGamma	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getGamma(int \/*i*\/) {$/;"	f	class:PartBunch
getGamma	src/Algorithms/PartBins.h	/^    double getGamma() {return gamma_m;}$/;"	f	class:PartBins
getGamma	src/Algorithms/PartData.h	/^inline double PartData::getGamma() const {$/;"	f	class:PartData
getGamma	src/PartBunch/PartBunch.hpp	/^    double getGamma(int i) const {$/;"	f	class:PartBunch
getGamma	src/Utilities/Util.h	/^    inline double getGamma(ippl::Vector<double, 3> p) {$/;"	f	namespace:Util
getGapWidth	src/AbsBeamline/RFCavity.cpp	/^double RFCavity::getGapWidth() const {$/;"	f	class:RFCavity
getGeometricEmittance	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::getGeometricEmittance() const {$/;"	f	class:DistributionMoments
getGeometry	src/AbsBeamline/MultipoleT.cpp	/^PlanarArcGeometry& MultipoleT::getGeometry() {$/;"	f	class:MultipoleT
getGeometry	src/AbsBeamline/MultipoleT.cpp	/^const PlanarArcGeometry& MultipoleT::getGeometry() const {$/;"	f	class:MultipoleT
getGeometry	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    PlanarArcGeometry& MultipoleTCurvedConstRadius::getGeometry() {$/;"	f	class:MultipoleTCurvedConstRadius
getGeometry	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    const PlanarArcGeometry& MultipoleTCurvedConstRadius::getGeometry() const {$/;"	f	class:MultipoleTCurvedConstRadius
getGeometry	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    VarRadiusGeometry& MultipoleTCurvedVarRadius::getGeometry() {$/;"	f	class:MultipoleTCurvedVarRadius
getGeometry	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    const VarRadiusGeometry& MultipoleTCurvedVarRadius::getGeometry() const {$/;"	f	class:MultipoleTCurvedVarRadius
getGeometry	src/AbsBeamline/MultipoleTStraight.h	/^    StraightGeometry& MultipoleTStraight::getGeometry() {$/;"	f	class:MultipoleTStraight
getGeometry	src/AbsBeamline/MultipoleTStraight.h	/^    const StraightGeometry& MultipoleTStraight::getGeometry() const {$/;"	f	class:MultipoleTStraight
getGeometry	src/AbsBeamline/Offset.cpp	/^Euclid3DGeometry& Offset::getGeometry() {$/;"	f	class:Offset
getGeometry	src/AbsBeamline/Offset.cpp	/^const Euclid3DGeometry& Offset::getGeometry() const {$/;"	f	class:Offset
getGeometry	src/AbsBeamline/ScalingFFAMagnet.cpp	/^BGeometryBase& ScalingFFAMagnet::getGeometry() {$/;"	f	class:ScalingFFAMagnet
getGeometry	src/AbsBeamline/ScalingFFAMagnet.cpp	/^const BGeometryBase& ScalingFFAMagnet::getGeometry() const {$/;"	f	class:ScalingFFAMagnet
getGeometry	src/AbsBeamline/VerticalFFAMagnet.cpp	/^BGeometryBase& VerticalFFAMagnet::getGeometry() {$/;"	f	class:VerticalFFAMagnet
getGeometry	src/AbsBeamline/VerticalFFAMagnet.cpp	/^const BGeometryBase& VerticalFFAMagnet::getGeometry() const {$/;"	f	class:VerticalFFAMagnet
getGeometry	src/BeamlineCore/DriftRep.cpp	/^StraightGeometry &DriftRep::getGeometry() {$/;"	f	class:DriftRep
getGeometry	src/BeamlineCore/DriftRep.cpp	/^const StraightGeometry &DriftRep::getGeometry() const {$/;"	f	class:DriftRep
getGeometry	src/BeamlineCore/MarkerRep.cpp	/^NullGeometry &MarkerRep::getGeometry() {$/;"	f	class:MarkerRep
getGeometry	src/BeamlineCore/MarkerRep.cpp	/^const NullGeometry &MarkerRep::getGeometry() const {$/;"	f	class:MarkerRep
getGeometry	src/BeamlineCore/MonitorRep.cpp	/^StraightGeometry &MonitorRep::getGeometry() {$/;"	f	class:MonitorRep
getGeometry	src/BeamlineCore/MonitorRep.cpp	/^const StraightGeometry &MonitorRep::getGeometry() const {$/;"	f	class:MonitorRep
getGeometry	src/BeamlineCore/MultipoleRep.cpp	/^StraightGeometry &MultipoleRep::getGeometry() {$/;"	f	class:MultipoleRep
getGeometry	src/BeamlineCore/MultipoleRep.cpp	/^const StraightGeometry &MultipoleRep::getGeometry() const {$/;"	f	class:MultipoleRep
getGeometry	src/BeamlineCore/ProbeRep.cpp	/^StraightGeometry &ProbeRep::getGeometry() {$/;"	f	class:ProbeRep
getGeometry	src/BeamlineCore/ProbeRep.cpp	/^const StraightGeometry &ProbeRep::getGeometry() const {$/;"	f	class:ProbeRep
getGeometry	src/BeamlineCore/RFCavityRep.cpp	/^StraightGeometry &RFCavityRep::getGeometry() {$/;"	f	class:RFCavityRep
getGeometry	src/BeamlineCore/RFCavityRep.cpp	/^const StraightGeometry &RFCavityRep::getGeometry() const {$/;"	f	class:RFCavityRep
getGeometry	src/BeamlineCore/SolenoidRep.cpp	/^StraightGeometry &SolenoidRep::getGeometry() {$/;"	f	class:SolenoidRep
getGeometry	src/BeamlineCore/SolenoidRep.cpp	/^const StraightGeometry &SolenoidRep::getGeometry() const {$/;"	f	class:SolenoidRep
getGeometry	src/BeamlineCore/TravelingWaveRep.cpp	/^StraightGeometry &TravelingWaveRep::getGeometry() {$/;"	f	class:TravelingWaveRep
getGeometry	src/BeamlineCore/TravelingWaveRep.cpp	/^const StraightGeometry &TravelingWaveRep::getGeometry() const {$/;"	f	class:TravelingWaveRep
getGeometry	src/Beamlines/TBeamline.h	/^inline BeamlineGeometry& TBeamline<T>::getGeometry() {$/;"	f	class:TBeamline
getGeometry	src/Beamlines/TBeamline.h	/^inline const BeamlineGeometry& TBeamline<T>::getGeometry() const {$/;"	f	class:TBeamline
getGeometry	tests/opal_src/Elements/OpalPolynomialTimeDependenceTest.cpp	/^    BGeometryBase  &getGeometry() {$/;"	f	class:TestElement
getGeometry	tests/opal_src/Elements/OpalPolynomialTimeDependenceTest.cpp	/^    const BGeometryBase  &getGeometry() const {$/;"	f	class:TestElement
getGeometry	tests/opal_src/Utilities/MockComponent.h	/^    Euclid3DGeometry& getGeometry() {return *geom_m;}$/;"	f	class:MockComponent
getGeometry	tests/opal_src/Utilities/MockComponent.h	/^    Euclid3DGeometry& getGeometry() {return *geom_m;}$/;"	f	class:MockComponent2
getGeometry	tests/opal_src/Utilities/MockComponent.h	/^    const Euclid3DGeometry& getGeometry() const  {return *geom_m;}$/;"	f	class:MockComponent
getGeometry	tests/opal_src/Utilities/MockComponent.h	/^    const Euclid3DGeometry& getGeometry() const  {return *geom_m;}$/;"	f	class:MockComponent2
getGhostNum	src/Algorithms/.PartBunchBase.hpp	/^size_t PartBunch<T, Dim>::getGhostNum() const {$/;"	f	class:PartBunch
getGitRevision	src/Utilities/Util.cpp	/^    std::string getGitRevision() {$/;"	f	namespace:Util
getGlobalGeometry	src/AbstractObjects/OpalData.cpp	/^BoundaryGeometry* OpalData::getGlobalGeometry() {$/;"	f	class:OpalData
getGlobalMeanR	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::getGlobalMeanR() {$/;"	f	class:PartBunch
getGlobalMeanR	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> getGlobalMeanR() {$/;"	f	class:PartBunch
getGlobalPhaseShift	src/AbstractObjects/OpalData.cpp	/^double OpalData::getGlobalPhaseShift() {$/;"	f	class:OpalData
getGlobalToLocalQuaternion	src/Algorithms/.PartBunchBase.hpp	/^Quaternion_t PartBunch<T, Dim>::getGlobalToLocalQuaternion() {$/;"	f	class:PartBunch
getGlobalToLocalQuaternion	src/PartBunch/PartBunch.hpp	/^    Quaternion_t getGlobalToLocalQuaternion() {$/;"	f	class:PartBunch
getGlobalTrackStep	src/Algorithms/.PartBunchBase.hpp	/^long long PartBunch<T, Dim>::getGlobalTrackStep() const {$/;"	f	class:PartBunch
getGlobalTrackStep	src/PartBunch/PartBunch.hpp	/^    long long getGlobalTrackStep() const {$/;"	f	class:PartBunch
getHIndex	src/AbsBeamline/EndFieldModel/Enge.h	/^std::vector< std::vector<int> > Enge::getHIndex(int n) {$/;"	f	class:endfieldmodel::Enge
getHalo	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::getHalo() const {$/;"	f	class:DistributionMoments
getHandler	src/AbstractObjects/Attribute.cpp	/^AttributeHandler &Attribute::getHandler() const {$/;"	f	class:Attribute
getHarmonicNumber	src/AbsBeamline/Ring.h	/^    double getHarmonicNumber() {$/;"	f	class:Ring
getHash	src/Expressions/ATable.cpp	/^    double ATable::getHash() const {$/;"	f	class:Expressions::ATable
getHashArray	src/PartBunch/Binning/AdaptBins.h	/^        hash_type getHashArray() { return sortedIndexArr_m; }$/;"	f	class:ParticleBinning::AdaptBins
getHeight	src/Utilities/PortableBitmapReader.h	/^unsigned int PortableBitmapReader::getHeight() const {$/;"	f	class:PortableBitmapReader
getHeight	src/Utilities/PortableGraymapReader.h	/^unsigned int PortableGraymapReader::getHeight() const {$/;"	f	class:PortableGraymapReader
getHelp	src/AbstractObjects/Attribute.cpp	/^const std::string &Attribute::getHelp() const {$/;"	f	class:Attribute
getHelp	src/AbstractObjects/AttributeHandler.cpp	/^const std::string &AttributeHandler::getHelp() const {$/;"	f	class:AttributeHandler
getHint	src/OpalParser/OpalParser.cpp	/^std::string OpalParser::getHint(const std::string& name, const std::string& type) {$/;"	f	class:OpalParser
getHistogram	src/PartBunch/Binning/BinHisto.h	/^        view_type getHistogram() { return histogram_m; }$/;"	f	class:ParticleBinning::Histogram
getHostView	src/PartBunch/Binning/BinHisto.h	/^        static constexpr return_type getHostView(HistogramType histo) {$/;"	f	class:ParticleBinning::Histogram
getHr	src/.Solvers/IrregularDomain.h	/^    Vector_t<double, 3> getHr() const {$/;"	f	class:IrregularDomain
getHr	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    Vector_t<double, Dim>& getHr() { return hr_m; }$/;"	f	class:FieldContainer
getHr	src/PartBunch/FieldContainer.hpp	/^    Vector_t<double, Dim>& getHr() {$/;"	f	class:FieldContainer
getId	src/AbstractObjects/OpalParticle.h	/^inline int64_t OpalParticle::getId() const {$/;"	f	class:OpalParticle
getId	src/Algorithms/OpalParticle.h	/^inline int64_t OpalParticle::getId() const {$/;"	f	class:OpalParticle
getIdx	src/.Solvers/IrregularDomain.cpp	/^int IrregularDomain::getIdx(int x, int y, int z) const {$/;"	f	class:IrregularDomain
getIdx	src/Utilities/PortableBitmapReader.h	/^unsigned int PortableBitmapReader::getIdx(unsigned int h, unsigned int w) const {$/;"	f	class:PortableBitmapReader
getIdx	src/Utilities/PortableGraymapReader.h	/^unsigned int PortableGraymapReader::getIdx(unsigned int h, unsigned int w) const {$/;"	f	class:PortableGraymapReader
getIfBeamEmitting	src/PartBunch/PartBunch.hpp	/^    bool getIfBeamEmitting() {$/;"	f	class:PartBunch
getImage	src/AbstractObjects/Attribute.cpp	/^std::string Attribute::getImage() const {$/;"	f	class:Attribute
getImage	src/AbstractObjects/AttributeBase.cpp	/^std::string AttributeBase::getImage() const {$/;"	f	class:AttributeBase
getImage	src/Expressions/ARefExpr.h	/^    const std::string ARefExpr<T>::getImage() const {$/;"	f	class:Expressions::ARefExpr
getImage	src/Expressions/SRefExpr.h	/^    const std::string SRefExpr<T>::getImage() const {$/;"	f	class:Expressions::SRefExpr
getIndex	src/Fields/FM3DH5BlockBase.h	/^    IndexTriplet getIndex(const Vector_t<double, 3> &X) const {$/;"	f	class:FM3DH5BlockBase
getIndex	src/Fields/FM3DH5BlockBase.h	/^    unsigned long getIndex ($/;"	f	class:FM3DH5BlockBase
getIndex	src/Fields/FM3DMagnetoStatic.h	/^FM3DMagnetoStatic::IndexTriplet FM3DMagnetoStatic::getIndex(const Vector_t<double, 3> &X) const {$/;"	f	class:FM3DMagnetoStatic
getIndex	src/Fields/FM3DMagnetoStatic.h	/^unsigned long FM3DMagnetoStatic::getIndex(unsigned int i, unsigned int j, unsigned int k) const$/;"	f	class:FM3DMagnetoStatic
getIndex	src/Fields/FM3DMagnetoStaticExtended.h	/^FM3DMagnetoStaticExtended::IndexTriplet FM3DMagnetoStaticExtended::getIndex(const Vector_t<double, 3> &X) const {$/;"	f	class:FM3DMagnetoStaticExtended
getIndex	src/Fields/FM3DMagnetoStaticExtended.h	/^unsigned long FM3DMagnetoStaticExtended::getIndex(unsigned int i, unsigned int j, unsigned int k) const$/;"	f	class:FM3DMagnetoStaticExtended
getInfo	src/Fields/Astra1DDynamic.cpp	/^void Astra1DDynamic::getInfo(Inform* msg) {$/;"	f	class:Astra1DDynamic
getInfo	src/Fields/Astra1DDynamic_fast.cpp	/^void Astra1DDynamic_fast::getInfo(Inform* msg) {$/;"	f	class:Astra1DDynamic_fast
getInfo	src/Fields/Astra1DElectroStatic.cpp	/^void Astra1DElectroStatic::getInfo(Inform* msg) {$/;"	f	class:Astra1DElectroStatic
getInfo	src/Fields/Astra1DElectroStatic_fast.cpp	/^void Astra1DElectroStatic_fast::getInfo(Inform* msg) {$/;"	f	class:Astra1DElectroStatic_fast
getInfo	src/Fields/Astra1DMagnetoStatic.cpp	/^void Astra1DMagnetoStatic::getInfo(Inform* msg) {$/;"	f	class:Astra1DMagnetoStatic
getInfo	src/Fields/Astra1DMagnetoStatic_fast.cpp	/^void Astra1DMagnetoStatic_fast::getInfo(Inform* msg) {$/;"	f	class:Astra1DMagnetoStatic_fast
getInfo	src/Fields/FM1DDynamic.cpp	/^void FM1DDynamic::getInfo(Inform* msg) {$/;"	f	class:FM1DDynamic
getInfo	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::getInfo(Inform* msg) {$/;"	f	class:FM1DDynamic_fast
getInfo	src/Fields/FM1DElectroStatic.cpp	/^void FM1DElectroStatic::getInfo(Inform* msg) {$/;"	f	class:FM1DElectroStatic
getInfo	src/Fields/FM1DElectroStatic_fast.cpp	/^void FM1DElectroStatic_fast::getInfo(Inform* msg) {$/;"	f	class:FM1DElectroStatic_fast
getInfo	src/Fields/FM1DMagnetoStatic.cpp	/^void FM1DMagnetoStatic::getInfo(Inform* msg) {$/;"	f	class:FM1DMagnetoStatic
getInfo	src/Fields/FM1DMagnetoStatic_fast.cpp	/^void FM1DMagnetoStatic_fast::getInfo(Inform* msg) {$/;"	f	class:FM1DMagnetoStatic_fast
getInfo	src/Fields/FM1DProfile1.cpp	/^void FM1DProfile1::getInfo(Inform* msg) {$/;"	f	class:FM1DProfile1
getInfo	src/Fields/FM1DProfile2.cpp	/^void FM1DProfile2::getInfo(Inform* msg) {$/;"	f	class:FM1DProfile2
getInfo	src/Fields/FM2DDynamic.cpp	/^void FM2DDynamic::getInfo(Inform* msg) {$/;"	f	class:FM2DDynamic
getInfo	src/Fields/FM2DElectroStatic.cpp	/^void FM2DElectroStatic::getInfo(Inform* msg) {$/;"	f	class:FM2DElectroStatic
getInfo	src/Fields/FM2DMagnetoStatic.cpp	/^void FM2DMagnetoStatic::getInfo(Inform* msg) {$/;"	f	class:FM2DMagnetoStatic
getInfo	src/Fields/FM3DDynamic.cpp	/^void FM3DDynamic::getInfo(Inform* msg) {$/;"	f	class:FM3DDynamic
getInfo	src/Fields/FM3DH5BlockBase.cpp	/^void FM3DH5BlockBase::getInfo(Inform* msg) {$/;"	f	class:FM3DH5BlockBase
getInfo	src/Fields/FM3DMagnetoStatic.cpp	/^void FM3DMagnetoStatic::getInfo(Inform* msg) {$/;"	f	class:FM3DMagnetoStatic
getInfo	src/Fields/FM3DMagnetoStaticExtended.cpp	/^void FM3DMagnetoStaticExtended::getInfo(Inform* msg) {$/;"	f	class:FM3DMagnetoStaticExtended
getInfo	src/Fields/FMDummy.cpp	/^void FMDummy::getInfo(Inform* \/*msg*\/) {$/;"	f	class:FMDummy
getInfo	src/Fields/SectorMagneticFieldMap.cpp	/^void SectorMagneticFieldMap::getInfo(Inform* msg) {$/;"	f	class:SectorMagneticFieldMap
getInitialBeta	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getInitialBeta() const {$/;"	f	class:PartBunch
getInitialDirection	src/Beamlines/Beamline.cpp	/^Quaternion Beamline::getInitialDirection() const {$/;"	f	class:Beamline
getInitialDirection	src/Beamlines/TBeamline.h	/^inline Quaternion TBeamline<T>::getInitialDirection() const {$/;"	f	class:TBeamline
getInitialGamma	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getInitialGamma() const {$/;"	f	class:PartBunch
getInputBasename	src/AbstractObjects/OpalData.cpp	/^std::string OpalData::getInputBasename() {$/;"	f	class:OpalData
getInputFn	src/AbstractObjects/OpalData.cpp	/^std::string OpalData::getInputFn() {$/;"	f	class:OpalData
getInsidePoint	src/Structure/BoundaryGeometry.h	/^    inline bool getInsidePoint(Vector_t<double, 3>& pt) {$/;"	f	class:BoundaryGeometry
getInstance	src/AbstractObjects/OpalData.cpp	/^OpalData* OpalData::getInstance() {$/;"	f	class:OpalData
getInteger	src/OpalParser/Token.cpp	/^int Token::getInteger() const {$/;"	f	class:Token
getInterpolatedValue	src/Utilities/SDDSParser.h	/^        void getInterpolatedValue(double spos, std::string col_name, T& nval) {$/;"	f	class:SDDS::SDDSParser
getInterpolatedValue	src/Utilities/SDDSParser.h	/^        void getInterpolatedValue(std::string ref_name, double ref_val,$/;"	f	class:SDDS::SDDSParser
getInterpolator	src/Fields/SectorMagneticFieldMap.cpp	/^VectorMap* SectorMagneticFieldMap::IO::getInterpolator$/;"	f	class:SectorMagneticFieldMap::IO
getInterpolator	src/Fields/SectorMagneticFieldMap.cpp	/^VectorMap* SectorMagneticFieldMap::getInterpolator() {$/;"	f	class:SectorMagneticFieldMap
getInterpolatorPolyPatch	src/Fields/SectorMagneticFieldMap.cpp	/^VectorMap* SectorMagneticFieldMap::IO::getInterpolatorPolyPatch($/;"	f	class:SectorMagneticFieldMap::IO
getIntersectionPoint	src/Structure/BoundingBox.cpp	/^boost::optional<Vector_t<double, 3>> BoundingBox::getIntersectionPoint($/;"	f	class:BoundingBox
getInverse	src/Utilities/MSLang/AffineTransformation.h	/^        AffineTransformation getInverse() const {$/;"	f	struct:mslang::AffineTransformation
getIsClosed	src/AbsBeamline/Ring.h	/^    double getIsClosed() const {$/;"	f	class:Ring
getIsLocal	src/AbsBeamline/Offset.cpp	/^bool Offset::getIsLocal() const {$/;"	f	class:Offset
getKickX	src/AbsBeamline/Corrector.h	/^double Corrector::getKickX() const {$/;"	f	class:Corrector
getKickY	src/AbsBeamline/Corrector.h	/^double Corrector::getKickY() const {$/;"	f	class:Corrector
getKineticEnergy	src/Utilities/Util.h	/^    inline double getKineticEnergy(ippl::Vector<double, 3> p, double mass) {$/;"	f	namespace:Util
getL1	src/Structure/BoundaryGeometry.h	/^    inline double getL1() {$/;"	f	class:BoundaryGeometry
getL2	src/Structure/BoundaryGeometry.h	/^    inline double getL2() {$/;"	f	class:BoundaryGeometry
getLambda	src/AbsBeamline/EndFieldModel/Enge.h	/^    inline double getLambda() const {return _lambda;}$/;"	f	class:endfieldmodel::Enge
getLambda	src/AbsBeamline/EndFieldModel/Tanh.h	/^    inline double getLambda() const {return _lambda;}$/;"	f	class:endfieldmodel::Tanh
getLambdaLeft	src/BeamlineGeometry/VarRadiusGeometry.h	/^    double VarRadiusGeometry::getLambdaLeft() const {$/;"	f	class:VarRadiusGeometry
getLambdaRight	src/BeamlineGeometry/VarRadiusGeometry.h	/^    double VarRadiusGeometry::getLambdaRight() const {$/;"	f	class:VarRadiusGeometry
getLastEmittedEnergyBin	src/PartBunch/PartBunch.hpp	/^    int getLastEmittedEnergyBin() {$/;"	f	class:PartBunch
getLastEnergyData	src/AbstractObjects/OpalData.cpp	/^energyEvolution_t::iterator OpalData::getLastEnergyData() {$/;"	f	class:OpalData
getLastMaxPhases	src/AbstractObjects/OpalData.cpp	/^std::vector<MaxPhasesT>::iterator OpalData::getLastMaxPhases() {$/;"	f	class:OpalData
getLastPosition	src/Structure/H5PartWrapper.h	/^inline double H5PartWrapper::getLastPosition() {$/;"	f	class:H5PartWrapper
getLastPosition	src/Structure/H5Writer.h	/^inline double H5Writer::getLastPosition() {$/;"	f	class:H5Writer
getLastSectionPlaced	src/AbsBeamline/Ring.cpp	/^RingSection* Ring::getLastSectionPlaced() const {$/;"	f	class:Ring
getLastStep	src/AbstractObjects/OpalData.cpp	/^int OpalData::getLastStep() const {$/;"	f	class:OpalData
getLastValue	src/Structure/SDDSWriter.cpp	/^double SDDSWriter::getLastValue(const std::string& column) {$/;"	f	class:SDDSWriter
getLastemittedBin	src/Algorithms/.PartBunchBase.hpp	/^int PartBunch<T, Dim>::getLastemittedBin() {$/;"	f	class:PartBunch
getLastemittedBin	src/Algorithms/PartBins.h	/^    int getLastemittedBin() {return nemittedBins_m; }$/;"	f	class:PartBins
getLastemittedBin	src/PartBunch/PartBunch.hpp	/^    int getLastemittedBin() {$/;"	f	class:PartBunch
getLatticePhiInit	src/AbsBeamline/Ring.h	/^    double getLatticePhiInit() const {$/;"	f	class:Ring
getLatticeRInit	src/AbsBeamline/Ring.h	/^    double getLatticeRInit() const {$/;"	f	class:Ring
getLatticeThetaInit	src/AbsBeamline/Ring.h	/^    double getLatticeThetaInit() const {$/;"	f	class:Ring
getLayout	src/Algorithms/.PartBunch.h	/^    ParticleLayout<double, 3>& getLayout() {$/;"	f	class:PartBunch
getLayout	src/Algorithms/.PartBunch.h	/^    const ParticleLayout<double, 3>& getLayout() const {$/;"	f	class:PartBunch
getLayout	src/Algorithms/.PartBunchBase.hpp	/^ParticleLayout<T, Dim> & PartBunch<T, Dim>::getLayout() {$/;"	f	class:PartBunch
getLayout	src/Algorithms/.PartBunchBase.hpp	/^const ParticleLayout<T, Dim>& PartBunch<T, Dim>::getLayout() const {$/;"	f	class:PartBunch
getLength	src/AbsBeamline/MultipoleT.h	/^inline double MultipoleT::getLength() const {$/;"	f	class:MultipoleT
getLength	src/AbsBeamline/MultipoleTBase.h	/^inline double MultipoleTBase::getLength() const {$/;"	f	class:MultipoleTBase
getLength	src/Elements/OpalElement.cpp	/^double OpalElement::getLength() const {$/;"	f	class:OpalElement
getLength	src/Lines/Line.cpp	/^double Line::getLength() const {$/;"	f	class:Line
getLength	src/Lines/Sequence.cpp	/^double Sequence::getLength() const {$/;"	f	class:Sequence
getLength	src/Structure/BoundaryGeometry.h	/^    inline double getLength() {$/;"	f	class:BoundaryGeometry
getLength	src/Utilities/ClassicField.h	/^inline double ClassicField::getLength() const {$/;"	f	class:ClassicField
getLengthConsumed	src/Utilities/MSLang/ArgumentExtractor.cpp	/^    unsigned int ArgumentExtractor::getLengthConsumed() const {$/;"	f	class:mslang::ArgumentExtractor
getLengthString	src/Utilities/Util.h	/^    inline std::string getLengthString(double spos, unsigned int precision = 3) {$/;"	f	namespace:Util
getLengthString	src/Utilities/Util.h	/^    inline std::string getLengthString(ippl::Vector<double, 3> spos, unsigned int precision = 3) {$/;"	f	namespace:Util
getLex	src/OpalParser/Token.cpp	/^const std::string &Token::getLex() const {$/;"	f	class:Token
getLine	src/Fields/Fieldmap.cpp	/^void Fieldmap::getLine(std::ifstream& in, int& lines_read, std::string& buffer) {$/;"	f	class:Fieldmap
getLine	src/Fields/Fieldmap.h	/^    void getLine(std::ifstream& in, std::string& buffer) {$/;"	f	class:Fieldmap
getLine	src/OpalParser/Token.cpp	/^int Token::getLine() const {$/;"	f	class:Token
getLine	src/OpalParser/TokenStream.cpp	/^int TokenStream::getLine() const {$/;"	f	class:TokenStream
getListFieldmapNames	src/Fields/Fieldmap.cpp	/^std::vector<std::string> Fieldmap::getListFieldmapNames() {$/;"	f	class:Fieldmap
getLoadBalance	src/Algorithms/.PartBunchBase.hpp	/^size_t PartBunch<T, Dim>::getLoadBalance(int p) const {$/;"	f	class:PartBunch
getLoadBalance	src/PartBunch/PartBunch.hpp	/^    size_t getLoadBalance(int p) {$/;"	f	class:PartBunch
getLoadBalanceThreshold	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    double getLoadBalanceThreshold() const { return lbt_m; }$/;"	f	class:AlpineManager
getLoadBalanceThreshold	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        double getLoadBalanceThreshold() const { return loadbalancethreshold_m; }$/;"	f	class:LoadBalancer
getLoadBalanceThreshold	src/PartBunch/LoadBalancer.hpp	/^    double getLoadBalanceThreshold() const {$/;"	f	class:LoadBalancer
getLocalBoundingSphere	src/Algorithms/.PartBunchBase.hpp	/^std::pair<Vector_t<double, 3>, double> PartBunch<T, Dim>::getLocalBoundingSphere() {$/;"	f	class:PartBunch
getLocalBounds	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::getLocalBounds(Vector_t<double, 3>& rmin, Vector_t<double, 3>& rmax) const {$/;"	f	class:PartBunch
getLocalBounds	src/PartBunch/PartBunch.hpp	/^    void getLocalBounds(Vector_t<double, Dim>& rmin, Vector_t<double, Dim>& rmax) {$/;"	f	class:PartBunch
getLocalNum	src/Algorithms/.PartBunchBase.hpp	/^size_t PartBunch<T, Dim>::getLocalNum() const {$/;"	f	class:PartBunch
getLocalNum	src/PartBunch/PartBunch.hpp	/^    size_t getLocalNum() const {$/;"	f	class:PartBunch
getLocalTrackStep	src/Algorithms/.PartBunchBase.hpp	/^long long PartBunch<T, Dim>::getLocalTrackStep() const {$/;"	f	class:PartBunch
getLocalTrackStep	src/PartBunch/PartBunch.hpp	/^    long long getLocalTrackStep() const {$/;"	f	class:PartBunch
getM	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getM() const {$/;"	f	class:PartBunch
getM	src/Algorithms/PartData.h	/^KOKKOS_INLINE_FUNCTION double PartData::getM() const {$/;"	f	class:PartData
getM	src/PartBunch/PartBunch.hpp	/^    double getM() const {$/;"	f	class:PartBunch
getMass	src/AbstractObjects/OpalParticle.h	/^inline double OpalParticle::getMass() const {$/;"	f	class:OpalParticle
getMass	src/Algorithms/OpalParticle.h	/^inline double OpalParticle::getMass() const {$/;"	f	class:OpalParticle
getMass	src/Structure/Beam.cpp	/^double Beam::getMass() const {$/;"	f	class:Beam
getMassDensity	src/Physics/Material.h	/^    double Material::getMassDensity() const {$/;"	f	class:Physics::Material
getMassPerParticle	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getMassPerParticle() const {$/;"	f	class:PartBunch
getMassPerParticle	src/PartBunch/PartBunch.hpp	/^    double getMassPerParticle() const {$/;"	f	class:PartBunch
getMassPerParticle	src/Structure/Beam.cpp	/^double Beam::getMassPerParticle() const {$/;"	f	class:Beam
getMaterial	src/Physics/Material.cpp	/^std::shared_ptr<Material> Material::getMaterial(const std::string& name) {$/;"	f	class:Material
getMaxBinCount	src/PartBunch/Binning/AdaptBins.h	/^        bin_index_type getMaxBinCount() const { return maxBins_m; }$/;"	f	class:ParticleBinning::AdaptBins
getMaxDesignEnergy	src/Algorithms/OrbitThreader.cpp	/^double OrbitThreader::getMaxDesignEnergy(const IndexMap::value_t& elementSet) const {$/;"	f	class:OrbitThreader
getMaxNormalComponentIndex	src/AbsBeamline/Multipole.h	/^inline size_t Multipole::getMaxNormalComponentIndex() const {$/;"	f	class:Multipole
getMaxOrder	src/AbsBeamline/MultipoleT.h	/^inline std::size_t MultipoleT::getMaxOrder() const {$/;"	f	class:MultipoleT
getMaxOrder	src/AbsBeamline/MultipoleTBase.h	/^inline std::size_t MultipoleTBase::getMaxOrder() const {$/;"	f	class:MultipoleTBase
getMaxOrder	src/AbsBeamline/ScalingFFAMagnet.h	/^    size_t getMaxOrder() const {return maxOrder_m;}$/;"	f	class:ScalingFFAMagnet
getMaxOrder	src/AbsBeamline/VerticalFFAMagnet.h	/^    size_t getMaxOrder() const {$/;"	f	class:VerticalFFAMagnet
getMaxPosition	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::getMaxPosition() const {$/;"	f	class:DistributionMoments
getMaxR	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::getMaxR() const {$/;"	f	class:DistributionMoments
getMaxR	src/PartBunch/ParticleContainer.hpp	/^    Vector_t<double, 3> getMaxR() const {$/;"	f	class:ParticleContainer
getMaxSDerivatives	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.h	/^    std::size_t RecursionRelation::getMaxSDerivatives() const {$/;"	f	class:polynomial::RecursionRelation
getMaxSDerivatives	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^    std::size_t RecursionRelationTwo::getMaxSDerivatives() const {$/;"	f	class:polynomial::RecursionRelationTwo
getMaxSkewComponentIndex	src/AbsBeamline/Multipole.h	/^inline size_t Multipole::getMaxSkewComponentIndex() const {$/;"	f	class:Multipole
getMaxSorder	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    std::size_t TwoPolynomial::getMaxSorder() const {$/;"	f	class:polynomial::TwoPolynomial
getMaxSteps	src/Algorithms/StepSizeConfig.cpp	/^unsigned long long StepSizeConfig::getMaxSteps() const {$/;"	f	class:StepSizeConfig
getMaxSteps	src/Track/TrackCmd.cpp	/^std::vector<unsigned long long> TrackCmd::getMaxSteps() const {$/;"	f	class:TrackCmd
getMaxTrackSteps	src/AbstractObjects/OpalData.cpp	/^unsigned long long OpalData::getMaxTrackSteps() {$/;"	f	class:OpalData
getMaxXDerivatives	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.h	/^    std::size_t RecursionRelation::getMaxXDerivatives() const {$/;"	f	class:polynomial::RecursionRelation
getMaxXDerivatives	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^    std::size_t RecursionRelationTwo::getMaxXDerivatives() const {$/;"	f	class:polynomial::RecursionRelationTwo
getMaxXOrder	src/AbsBeamline/MultipoleT.h	/^inline std::size_t MultipoleT::getMaxXOrder() const {$/;"	f	class:MultipoleT
getMaxXOrder	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    std::size_t MultipoleTCurvedConstRadius::getMaxXOrder() const {$/;"	f	class:MultipoleTCurvedConstRadius
getMaxXOrder	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    std::size_t MultipoleTCurvedVarRadius::getMaxXOrder() const {$/;"	f	class:MultipoleTCurvedVarRadius
getMaxXorder	src/AbsBeamline/MultipoleTFunctions/Polynomial.h	/^    int Polynomial::getMaxXorder() const{$/;"	f	class:polynomial::Polynomial
getMaxXorder	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    std::size_t TwoPolynomial::getMaxXorder() const {$/;"	f	class:polynomial::TwoPolynomial
getMaxZ	src/.Solvers/IrregularDomain.h	/^    double getMaxZ() const {$/;"	f	class:IrregularDomain
getMeanExcitationEnergy	src/Physics/Material.h	/^    double Material::getMeanExcitationEnergy() const {$/;"	f	class:Physics::Material
getMeanGamma	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getMeanGamma() const {$/;"	f	class:DistributionMoments
getMeanGammaZ	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getMeanGammaZ() const {$/;"	f	class:DistributionMoments
getMeanGammaZ	src/PartBunch/ParticleContainer.hpp	/^   double getMeanGammaZ() const {$/;"	f	class:ParticleContainer
getMeanKineticEnergy	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getMeanKineticEnergy() const {$/;"	f	class:DistributionMoments
getMeanKineticEnergy	src/PartBunch/ParticleContainer.hpp	/^    double getMeanKineticEnergy() const {$/;"	f	class:ParticleContainer
getMeanMomentum	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::getMeanMomentum() const {$/;"	f	class:DistributionMoments
getMeanP	src/PartBunch/ParticleContainer.hpp	/^    Vector_t<double, 3> getMeanP() const{$/;"	f	class:ParticleContainer
getMeanPosition	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::getMeanPosition() const {$/;"	f	class:DistributionMoments
getMeanR	src/PartBunch/ParticleContainer.hpp	/^    Vector_t<double, 3> getMeanR() const{$/;"	f	class:ParticleContainer
getMeanTime	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getMeanTime() const {$/;"	f	class:DistributionMoments
getMeans	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 6> DistributionMoments::getMeans() const {$/;"	f	class:DistributionMoments
getMeans	src/PartBunch/ParticleContainer.hpp	/^    Vector_t<double, 6> getMeans() const {$/;"	f	class:ParticleContainer
getMesh	src/Algorithms/.PartBunch.h	/^inline Mesh_t& PartBunch::getMesh() {$/;"	f	class:PartBunch
getMesh	src/Algorithms/.PartBunch.h	/^inline const Mesh_t& PartBunch::getMesh() const {$/;"	f	class:PartBunch
getMesh	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^ThreeDGrid* Interpolator3dGridTo1d::getMesh() const {$/;"	f	class:interpolation::Interpolator3dGridTo1d
getMesh	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^ThreeDGrid* Interpolator3dGridTo3d::getMesh() const {$/;"	f	class:interpolation::Interpolator3dGridTo3d
getMesh	src/Fields/Interpolation/PolynomialPatch.h	/^    Mesh* getMesh() const {return validity_region_;}$/;"	f	class:interpolation::PolynomialPatch
getMesh	src/Fields/Interpolation/VectorMap.h	/^    virtual Mesh* getMesh() const {return nullptr;}$/;"	f	class:interpolation::VectorMap
getMesh	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    Mesh_t<Dim>& getMesh() { return mesh_m; }$/;"	f	class:FieldContainer
getMesh	src/PartBunch/FieldContainer.hpp	/^    Mesh_t<Dim>& getMesh() {$/;"	f	class:FieldContainer
getMinPosition	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::getMinPosition() const {$/;"	f	class:DistributionMoments
getMinR	src/PartBunch/ParticleContainer.hpp	/^    Vector_t<double, 3> getMinR() const {$/;"	f	class:ParticleContainer
getMinTimeStep	src/Algorithms/StepSizeConfig.cpp	/^double StepSizeConfig::getMinTimeStep() const {$/;"	f	class:StepSizeConfig
getMinZ	src/.Solvers/IrregularDomain.h	/^    double getMinZ() const {$/;"	f	class:IrregularDomain
getMinimalSignificantDigits	src/Elements/OpalBeamline.cpp	/^    unsigned int getMinimalSignificantDigits(double num, const unsigned int maxDigits) {$/;"	f	namespace:__anon47
getMisalignment	src/AbsBeamline/ElementBase.h	/^inline CoordinateSystemTrafo ElementBase::getMisalignment() const {$/;"	f	class:ElementBase
getMisalignment	src/Elements/OpalBeamline.h	/^inline CoordinateSystemTrafo OpalBeamline::getMisalignment($/;"	f	class:OpalBeamline
getMomentaKick	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::getMomentaKick($/;"	f	class:RFCavity
getMoments6x6	src/Algorithms/DistributionMoments.h	/^inline matrix_t DistributionMoments::getMoments6x6() const {$/;"	f	class:DistributionMoments
getMomentum	src/Structure/Beam.cpp	/^double Beam::getMomentum() const {$/;"	f	class:Beam
getNBins	src/Algorithms/PartBins.h	/^    virtual int getNBins() {return gsl_histogram_bins(h_m.get()) \/ sBins_m; }$/;"	f	class:PartBins
getNPartInBin	src/PartBunch/Binning/AdaptBins.h	/^        size_type getNPartInBin(bin_index_type binIndex, bool global = false) {$/;"	f	class:ParticleBinning::AdaptBins
getNPartInBin	src/PartBunch/Binning/BinHisto.h	/^        size_type getNPartInBin(bin_index_type binIndex) {$/;"	f	class:ParticleBinning::Histogram
getNSlices	src/AbsBeamline/Drift.cpp	/^std::size_t Drift::getNSlices() const {$/;"	f	class:Drift
getNSlices	src/AbsBeamline/Multipole.cpp	/^std::size_t Multipole::getNSlices() const {$/;"	f	class:Multipole
getNX	src/Structure/FieldSolverCmd.cpp	/^double FieldSolverCmd::getNX() const {$/;"	f	class:FieldSolverCmd
getNY	src/Structure/FieldSolverCmd.cpp	/^double FieldSolverCmd::getNY() const {$/;"	f	class:FieldSolverCmd
getNZ	src/Structure/FieldSolverCmd.cpp	/^double FieldSolverCmd::getNZ() const {$/;"	f	class:FieldSolverCmd
getName	src/AbsBeamline/ElementBase.cpp	/^const std::string& ElementBase::getName() const {$/;"	f	class:ElementBase
getName	src/AbsBeamline/EndFieldModel/EndFieldModel.cpp	/^std::string EndFieldModel::getName(std::shared_ptr<EndFieldModel> efm) {$/;"	f	class:endfieldmodel::EndFieldModel
getName	src/AbstractObjects/Attribute.cpp	/^const std::string &Attribute::getName() const {$/;"	f	class:Attribute
getName	src/AbstractObjects/AttributeHandler.cpp	/^const std::string &AttributeHandler::getName() const {$/;"	f	class:AttributeHandler
getName	src/Algorithms/AbstractTimeDependence.cpp	/^std::string AbstractTimeDependence::getName(std::shared_ptr<AbstractTimeDependence> time_dep) {$/;"	f	class:AbstractTimeDependence
getName	src/OpalParser/TokenStream.cpp	/^const std::string &TokenStream::getName() const {$/;"	f	class:TokenStream
getNdSfactors	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    std::size_t TwoPolynomial::getNdSfactors() const {$/;"	f	class:polynomial::TwoPolynomial
getNearbyPointsSquares	src/Fields/Interpolation/PPSolveFactory.cpp	/^std::vector<std::vector<int> > PPSolveFactory::getNearbyPointsSquares($/;"	f	class:interpolation::PPSolveFactory
getNearest	src/Fields/Interpolation/NDGrid.cpp	/^Mesh::Iterator NDGrid::getNearest(const double* position) const {$/;"	f	class:interpolation::NDGrid
getNearest	src/Fields/Interpolation/ThreeDGrid.cpp	/^Mesh::Iterator ThreeDGrid::getNearest(const double* position) const {$/;"	f	class:interpolation::ThreeDGrid
getNegTanh	src/AbsBeamline/EndFieldModel/Tanh.cpp	/^double Tanh::getNegTanh(double x, int n) const {$/;"	f	class:endfieldmodel::Tanh
getNegativeVerticalExtent	src/AbsBeamline/VerticalFFAMagnet.h	/^    double getNegativeVerticalExtent() const {$/;"	f	class:VerticalFFAMagnet
getNeighbours	src/.Solvers/IrregularDomain.cpp	/^void IrregularDomain::getNeighbours(int id, StencilIndex_t& index) const {$/;"	f	class:IrregularDomain
getNeighbours	src/.Solvers/IrregularDomain.cpp	/^void IrregularDomain::getNeighbours(int x, int y, int z, StencilIndex_t& index) const$/;"	f	class:IrregularDomain
getNextNormal	src/AbsBeamline/Ring.cpp	/^Vector_t<double, 3> Ring::getNextNormal() const {$/;"	f	class:Ring
getNextPart	src/Utilities/PortableBitmapReader.cpp	/^std::string PortableBitmapReader::getNextPart(std::istream &in) {$/;"	f	class:PortableBitmapReader
getNextPart	src/Utilities/PortableGraymapReader.cpp	/^std::string PortableGraymapReader::getNextPart(std::istream &in) {$/;"	f	class:PortableGraymapReader
getNextPosition	src/AbsBeamline/Ring.cpp	/^Vector_t<double, 3> Ring::getNextPosition() const {$/;"	f	class:Ring
getNormEmit	src/PartBunch/ParticleContainer.hpp	/^    Vector_t<double, 3> getNormEmit() const {$/;"	f	class:ParticleContainer
getNormalComponent	src/AbsBeamline/Multipole.cpp	/^double Multipole::getNormalComponent(int n) const {$/;"	f	class:Multipole
getNormalComponent	src/Fields/BMultipoleField.h	/^inline double BMultipoleField::getNormalComponent(int n) const {$/;"	f	class:BMultipoleField
getNormalizedEmittance	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::getNormalizedEmittance() const {$/;"	f	class:DistributionMoments
getNormalizedEmittance68Percentile	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::getNormalizedEmittance68Percentile() const {$/;"	f	class:DistributionMoments
getNormalizedEmittance95Percentile	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::getNormalizedEmittance95Percentile() const {$/;"	f	class:DistributionMoments
getNormalizedEmittance99Percentile	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::getNormalizedEmittance99Percentile() const {$/;"	f	class:DistributionMoments
getNormalizedEmittance99_99Percentile	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::getNormalizedEmittance99_99Percentile() const {$/;"	f	class:DistributionMoments
getNp	src/Algorithms/PartBins.h	/^    size_t getNp() {$/;"	f	class:PartBins
getNr	src/.Solvers/IrregularDomain.h	/^    IntVector_t<double, 3> getNr() const {$/;"	f	class:IrregularDomain
getNr	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    const Vector_t<int, Dim>& getNr() const { return nr_m; }$/;"	f	class:AlpineManager
getNt	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    int getNt() const { return nt_m; }$/;"	f	class:AlpineManager
getNumArguments	src/Utilities/MSLang/ArgumentExtractor.cpp	/^    unsigned int ArgumentExtractor::getNumArguments() const {$/;"	f	class:mslang::ArgumentExtractor
getNumBFaces	src/Structure/BoundaryGeometry.h	/^    inline size_t getNumBFaces() {$/;"	f	class:BoundaryGeometry
getNumBunch	src/Algorithms/.PartBunchBase.hpp	/^short PartBunch<T, Dim>::getNumBunch() const {$/;"	f	class:PartBunch
getNumBunch	src/Algorithms/Tracker.h	/^    virtual short getNumBunch() {$/;"	f	class:Tracker
getNumBunch	src/PartBunch/PartBunch.hpp	/^    short getNumBunch() const {$/;"	f	class:PartBunch
getNumOfLocalParticlesToCreate	src/Distribution/Distribution.cpp	/^size_t Distribution::getNumOfLocalParticlesToCreate(size_t n) {$/;"	f	class:Distribution
getNumParticles	src/Structure/H5PartWrapper.cpp	/^size_t H5PartWrapper::getNumParticles() const {$/;"	f	class:H5PartWrapper
getNumSteps	src/Algorithms/StepSizeConfig.cpp	/^unsigned long StepSizeConfig::getNumSteps() const {$/;"	f	class:StepSizeConfig
getNumSteps	src/Fields/FM3DH5BlockBase.cpp	/^long long FM3DH5BlockBase::getNumSteps(void) {$/;"	f	class:FM3DH5BlockBase
getNumStepsFinestResolution	src/Algorithms/StepSizeConfig.cpp	/^unsigned long long StepSizeConfig::getNumStepsFinestResolution() const {$/;"	f	class:StepSizeConfig
getNumXY	src/.Solvers/IrregularDomain.h	/^    virtual int getNumXY() const {$/;"	f	class:IrregularDomain
getNumberOfEmissionSteps	src/PartBunch/PartBunch.hpp	/^    size_t getNumberOfEmissionSteps() {$/;"	f	class:PartBunch
getNumberOfEnergyBins	src/Algorithms/.PartBunchBase.hpp	/^int PartBunch<T, Dim>::getNumberOfEnergyBins() {$/;"	f	class:PartBunch
getNumberOfEnergyBins	src/PartBunch/PartBunch.hpp	/^    int getNumberOfEnergyBins() {$/;"	f	class:PartBunch
getNumberOfMaxPhases	src/AbstractObjects/OpalData.cpp	/^int OpalData::getNumberOfMaxPhases() {$/;"	f	class:OpalData
getNumberOfParticles	src/Structure/Beam.cpp	/^size_t Beam::getNumberOfParticles() const {$/;"	f	class:Beam
getNumberOfXCoords	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^int Interpolator3dGridTo1d::getNumberOfXCoords() const {$/;"	f	class:interpolation::Interpolator3dGridTo1d
getNumberOfXCoords	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^int Interpolator3dGridTo3d::getNumberOfXCoords() const {$/;"	f	class:interpolation::Interpolator3dGridTo3d
getNumberOfYCoords	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^int Interpolator3dGridTo1d::getNumberOfYCoords() const {$/;"	f	class:interpolation::Interpolator3dGridTo1d
getNumberOfYCoords	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^int Interpolator3dGridTo3d::getNumberOfYCoords() const {$/;"	f	class:interpolation::Interpolator3dGridTo3d
getNumberOfZCoords	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^int Interpolator3dGridTo1d::getNumberOfZCoords() const {$/;"	f	class:interpolation::Interpolator3dGridTo1d
getNumberOfZCoords	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^int Interpolator3dGridTo3d::getNumberOfZCoords() const {$/;"	f	class:interpolation::Interpolator3dGridTo3d
getOnaxisEz	src/Fields/Astra1DDynamic.cpp	/^void Astra1DDynamic::getOnaxisEz(std::vector<std::pair<double, double> >& F) {$/;"	f	class:Astra1DDynamic
getOnaxisEz	src/Fields/Astra1DDynamic_fast.cpp	/^void Astra1DDynamic_fast::getOnaxisEz(std::vector<std::pair<double, double> >& F) {$/;"	f	class:Astra1DDynamic_fast
getOnaxisEz	src/Fields/Astra1D_fast.cpp	/^void Astra1D_fast::getOnaxisEz(std::vector<std::pair<double, double> >& \/*F*\/) {$/;"	f	class:Astra1D_fast
getOnaxisEz	src/Fields/FM1DDynamic.cpp	/^void FM1DDynamic::getOnaxisEz(std::vector<std::pair<double, double>>& eZ) {$/;"	f	class:FM1DDynamic
getOnaxisEz	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::getOnaxisEz(std::vector<std::pair<double, double>>& eZ) {$/;"	f	class:FM1DDynamic_fast
getOnaxisEz	src/Fields/FM2DDynamic.cpp	/^void FM2DDynamic::getOnaxisEz(std::vector<std::pair<double, double> >& F) {$/;"	f	class:FM2DDynamic
getOnaxisEz	src/Fields/FM3DDynamic.cpp	/^void FM3DDynamic::getOnaxisEz(std::vector<std::pair<double, double>>& F) {$/;"	f	class:FM3DDynamic
getOnaxisEz	src/Fields/FM3DH5BlockBase.cpp	/^void FM3DH5BlockBase::getOnaxisEz(std::vector<std::pair<double, double>>& F) {$/;"	f	class:FM3DH5BlockBase
getOnaxisEz	src/Fields/Fieldmap.cpp	/^void Fieldmap::getOnaxisEz(std::vector<std::pair<double, double>>& \/*onaxis*\/) {$/;"	f	class:Fieldmap
getOpalName	src/AbstractObjects/Object.cpp	/^const std::string &Object::getOpalName() const {$/;"	f	class:Object
getOpenMode	src/AbstractObjects/OpalData.cpp	/^OpalData::OpenMode OpalData::getOpenMode() const {$/;"	f	class:OpalData
getOrigin	src/AbsBeamline/ElementBase.h	/^inline double ElementBase::getOrigin() const {$/;"	f	class:ElementBase
getOrigin	src/Algorithms/CoordinateSystemTrafo.h	/^inline ippl::Vector<double, 3> CoordinateSystemTrafo::getOrigin() const {$/;"	f	class:CoordinateSystemTrafo
getOrigin	src/BeamlineGeometry/Geometry.cpp	/^double BGeometryBase::getOrigin() const {$/;"	f	class:BGeometryBase
getOrigin	src/BeamlineGeometry/NullGeometry.cpp	/^double NullGeometry::getOrigin() const {$/;"	f	class:NullGeometry
getOrigin	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^double PlanarArcGeometry::getOrigin() const {$/;"	f	class:PlanarArcGeometry
getOrigin	src/BeamlineGeometry/StraightGeometry.cpp	/^double StraightGeometry::getOrigin() const {$/;"	f	class:StraightGeometry
getOrigin	src/Beamlines/BeamlineGeometry.cpp	/^double BeamlineGeometry::getOrigin() const {$/;"	f	class:BeamlineGeometry
getOrigin	src/Beamlines/TBeamline.h	/^double TBeamline<T>::getOrigin() const {$/;"	f	class:TBeamline
getOrigin	src/Utilities/MSLang/AffineTransformation.h	/^        Vector_t<double, 3> getOrigin() const {$/;"	f	struct:mslang::AffineTransformation
getOrigin3D	src/Beamlines/Beamline.cpp	/^Vector_t<double, 3> Beamline::getOrigin3D() const {$/;"	f	class:Beamline
getOrigin3D	src/Beamlines/TBeamline.h	/^inline Vector_t<double, 3> TBeamline<T>::getOrigin3D() const {$/;"	f	class:TBeamline
getOutputFN	src/AbsBeamline/ElementBase.cpp	/^std::string ElementBase::getOutputFN() const {$/;"	f	class:ElementBase
getOwner	src/AbstractObjects/AttributeHandler.cpp	/^std::multimap<AttributeHandler::OwnerType, std::string> AttributeHandler::getOwner(const std::string &att) {$/;"	f	class:AttributeHandler
getP	src/AbstractObjects/OpalParticle.h	/^inline const Vector_t<double, 3>& OpalParticle::getP() const {$/;"	f	class:OpalParticle
getP	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getP() const {$/;"	f	class:PartBunch
getP	src/Algorithms/OpalParticle.h	/^inline const Vector_t<double, 3>& OpalParticle::getP() const {$/;"	f	class:OpalParticle
getP	src/Algorithms/PartData.h	/^inline double PartData::getP() const {$/;"	f	class:PartData
getP0	src/AbstractObjects/OpalData.cpp	/^double OpalData::getP0() const {$/;"	f	class:OpalData
getPL	src/PartBunch/Binning/test/alpine/ParticleContainer.hpp	/^        std::shared_ptr<PLayout_t<T, Dim>> getPL() { return pl_m; }$/;"	f	class:ParticleContainer
getPL	src/PartBunch/ParticleContainer.hpp	/^    PLayout_t<T, Dim>& getPL() {$/;"	f	class:ParticleContainer
getPOrigin	src/Algorithms/.PartBunchBase.hpp	/^ParticleOrigin PartBunch<T, Dim>::getPOrigin() const {$/;"	f	class:PartBunch
getPType	src/Algorithms/.PartBunchBase.hpp	/^ParticleType PartBunch<T, Dim>::getPType() const {$/;"	f	class:PartBunch
getParameterValue	src/Utilities/SDDSParser.h	/^        void getParameterValue(std::string parameter_name, T& nval) {$/;"	f	class:SDDS::SDDSParser
getParent	src/AbstractObjects/Object.cpp	/^Object *Object::getParent() const {$/;"	f	class:Object
getPart	src/Algorithms/PartBins.cpp	/^bool PartBins::getPart(size_t n, int bin, std::vector<double>& p) {$/;"	f	class:PartBins
getPartBunch	src/AbstractObjects/OpalData.cpp	/^PartBunch_t* OpalData::getPartBunch() {$/;"	f	class:OpalData
getParticleCharge	src/Physics/ParticleProperties.cpp	/^double ParticleProperties::getParticleCharge(const ParticleType& type) {$/;"	f	class:ParticleProperties
getParticleChargeInCoulomb	src/Physics/ParticleProperties.cpp	/^double ParticleProperties::getParticleChargeInCoulomb(const ParticleType& type) {$/;"	f	class:ParticleProperties
getParticleContainer	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        std::shared_ptr<ParticleContainer<T, Dim>> getParticleContainer() const { return pc_m; }$/;"	f	class:LoadBalancer
getParticleContainer	src/PartBunch/LoadBalancer.hpp	/^    std::shared_ptr<ParticleContainer<T, Dim>> getParticleContainer() const {$/;"	f	class:LoadBalancer
getParticleContainer	src/PartBunch/PartBunch.hpp	/^    std::shared_ptr<ParticleContainer_t> getParticleContainer() {$/;"	f	class:PartBunch
getParticleMass	src/Physics/ParticleProperties.cpp	/^double ParticleProperties::getParticleMass(const ParticleType& type) {$/;"	f	class:ParticleProperties
getParticleMatterInteraction	src/AbsBeamline/ElementBase.h	/^inline ParticleMatterInteractionHandler* ElementBase::getParticleMatterInteraction() const {$/;"	f	class:ElementBase
getParticleMatterInteraction	src/Elements/OpalElement.cpp	/^const std::string OpalElement::getParticleMatterInteraction() const {$/;"	f	class:OpalElement
getParticleName	src/Structure/Beam.cpp	/^std::string Beam::getParticleName() const {$/;"	f	class:Beam
getParticleType	src/Physics/ParticleProperties.cpp	/^ParticleType ParticleProperties::getParticleType(const std::string& str) {$/;"	f	class:ParticleProperties
getParticleTypeString	src/Physics/ParticleProperties.cpp	/^std::string ParticleProperties::getParticleTypeString(const ParticleType& type) {$/;"	f	class:ParticleProperties
getPathLengthRange	src/Algorithms/StepSizeConfig.cpp	/^ValueRange<double> StepSizeConfig::getPathLengthRange() const {$/;"	f	class:StepSizeConfig
getPerpenDistance	src/AbsBeamline/RFCavity.cpp	/^double RFCavity::getPerpenDistance() const {$/;"	f	class:RFCavity
getPhase	src/BeamlineCore/RFCavityRep.cpp	/^double RFCavityRep::getPhase() const {$/;"	f	class:RFCavityRep
getPhase	src/BeamlineCore/TravelingWaveRep.cpp	/^double TravelingWaveRep::getPhase() const {$/;"	f	class:TravelingWaveRep
getPhase	src/Fields/OscillatingField.h	/^double OscillatingField<Field>::getPhase() const$/;"	f	class:OscillatingField
getPhaseAtMaxEnergy	src/Algorithms/CavityAutophaser.cpp	/^double CavityAutophaser::getPhaseAtMaxEnergy($/;"	f	class:CavityAutophaser
getPhaseError	src/AbsBeamline/RFCavity.h	/^inline double RFCavity::getPhaseError() const {$/;"	f	class:RFCavity
getPhaseModelName	src/AbsBeamline/RFCavity.h	/^inline std::string RFCavity::getPhaseModelName() {$/;"	f	class:RFCavity
getPhasem	src/AbsBeamline/RFCavity.h	/^inline double RFCavity::getPhasem() const {$/;"	f	class:RFCavity
getPhasem	src/AbsBeamline/RFCavity.h	/^inline double RFCavity::getPhasem(double t) const {$/;"	f	class:RFCavity
getPhi	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    Field<T, Dim>& getPhi() { return phi_m; }$/;"	f	class:FieldContainer
getPhi	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    Field<T, Dim> *getPhi() const { return phi_m; }$/;"	f	class:FieldSolver
getPhi	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        Field<T, Dim>* getPhi() { return phi_m; }$/;"	f	class:LoadBalancer
getPhi	src/PartBunch/FieldContainer.hpp	/^    Field<T, Dim>& getPhi() {$/;"	f	class:FieldContainer
getPhi	src/PartBunch/FieldSolver.hpp	/^    Field<T, Dim>* getPhi() const {$/;"	f	class:FieldSolver
getPhi	src/PartBunch/LoadBalancer.hpp	/^    Field<T, Dim>* getPhi() {$/;"	f	class:LoadBalancer
getPhi0	src/AbsBeamline/RFCavity.cpp	/^double RFCavity::getPhi0() const {$/;"	f	class:RFCavity
getPhiEnd	src/AbsBeamline/ScalingFFAMagnet.h	/^    double getPhiEnd() const {return phiEnd_m;}$/;"	f	class:ScalingFFAMagnet
getPhiOffset	src/Fields/SectorMagneticFieldMap.h	/^    double getPhiOffset() const {return phiOffset_m;}$/;"	f	class:SectorMagneticFieldMap
getPhiStart	src/AbsBeamline/ScalingFFAMagnet.h	/^    double getPhiStart() const {return phiStart_m;}$/;"	f	class:ScalingFFAMagnet
getPixel	src/Utilities/PortableGraymapReader.h	/^unsigned short PortableGraymapReader::getPixel(unsigned int i, unsigned int j) const {$/;"	f	class:PortableGraymapReader
getPixels	src/Utilities/PortableBitmapReader.h	/^std::vector<bool> PortableBitmapReader::getPixels() const {$/;"	f	class:PortableBitmapReader
getPixels	src/Utilities/PortableGraymapReader.h	/^std::vector<unsigned short> PortableGraymapReader::getPixels() const {$/;"	f	class:PortableGraymapReader
getPlace	src/Attributes/Attributes.cpp	/^    PlaceRep getPlace(const Attribute &attr) {$/;"	f	namespace:Attributes
getPlane	src/BeamlineCore/MonitorRep.cpp	/^Monitor::Plane MonitorRep::getPlane() const {$/;"	f	class:MonitorRep
getPlasmaParameter	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getPlasmaParameter() const {$/;"	f	class:DistributionMoments
getPlasmaParameter	src/PartBunch/ParticleContainer.hpp	/^    double getPlasmaParameter() const {$/;"	f	class:ParticleContainer
getPoint	src/Structure/BoundaryGeometry.h	/^    inline const Vector_t<double, 3>& getPoint(const int triangle_id, const int vertex_id) {$/;"	f	class:BoundaryGeometry
getPointDimension	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^unsigned int Interpolator3dGridTo1d::getPointDimension()  const {$/;"	f	class:interpolation::Interpolator3dGridTo1d
getPointDimension	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^unsigned int Interpolator3dGridTo3d::getPointDimension()  const {$/;"	f	class:interpolation::Interpolator3dGridTo3d
getPointDimension	src/Fields/Interpolation/PolynomialPatch.h	/^    inline unsigned int getPointDimension() const {return point_dimension_;}$/;"	f	class:interpolation::PolynomialPatch
getPoints	src/Fields/Interpolation/PPSolveFactory.cpp	/^void PPSolveFactory::getPoints() {$/;"	f	class:interpolation::PPSolveFactory
getPolarBoundingBoxMax	src/Fields/SectorField.cpp	/^std::vector<double> SectorField::getPolarBoundingBoxMax() const {$/;"	f	class:SectorField
getPolarBoundingBoxMin	src/Fields/SectorField.cpp	/^std::vector<double> SectorField::getPolarBoundingBoxMin() const {$/;"	f	class:SectorField
getPolynomialVector	src/Fields/Interpolation/PolynomialPatch.cpp	/^SquarePolynomialVector* PolynomialPatch::getPolynomialVector(const double* point) const {$/;"	f	class:interpolation::PolynomialPatch
getPolynomials	src/Fields/Interpolation/PolynomialPatch.h	/^    std::vector<SquarePolynomialVector*> getPolynomials() const {return points_;}$/;"	f	class:interpolation::PolynomialPatch
getPosition	src/AbstractObjects/TableRowRep.cpp	/^PlaceRep TableRowRep::getPosition() const {$/;"	f	class:TableRowRep
getPosition	src/Fields/Interpolation/NDGrid.h	/^void NDGrid::getPosition(const Mesh::Iterator& it, double * position) const {$/;"	f	class:interpolation::NDGrid
getPosition	src/Fields/Interpolation/ThreeDGrid.cpp	/^void ThreeDGrid::getPosition(const Mesh::Iterator& it,$/;"	f	class:interpolation::ThreeDGrid
getPositionDimension	src/Fields/Interpolation/NDGrid.h	/^int NDGrid::getPositionDimension() const {$/;"	f	class:interpolation::NDGrid
getPositionDimension	src/Fields/Interpolation/ThreeDGrid.h	/^int ThreeDGrid::getPositionDimension() const {$/;"	f	class:interpolation::ThreeDGrid
getPositiveVerticalExtent	src/AbsBeamline/VerticalFFAMagnet.h	/^    double getPositiveVerticalExtent() const {$/;"	f	class:VerticalFFAMagnet
getPostSum	src/PartBunch/Binning/BinHisto.h	/^        view_type getPostSum() { return postSum_m; }        $/;"	f	class:ParticleBinning::Histogram
getPotential	src/AbsBeamline/Component.h	/^    virtual bool getPotential($/;"	f	class:Component
getProblemCharacteristicValues	src/AbstractObjects/OpalData.cpp	/^const std::map<std::string, unsigned int>& OpalData::getProblemCharacteristicValues() const {$/;"	f	class:OpalData
getProfileMax	src/Distribution/LaserProfile.cpp	/^unsigned short LaserProfile::getProfileMax(unsigned short* image) {$/;"	f	class:LaserProfile
getPx	src/AbstractObjects/OpalParticle.h	/^inline double OpalParticle::getPx() const {$/;"	f	class:OpalParticle
getPx	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getPx(int \/*i*\/) {$/;"	f	class:PartBunch
getPx	src/Algorithms/OpalParticle.h	/^inline double OpalParticle::getPx() const {$/;"	f	class:OpalParticle
getPx	src/PartBunch/PartBunch.hpp	/^    double getPx(int i) {$/;"	f	class:PartBunch
getPx0	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getPx0(int) {$/;"	f	class:PartBunch
getPx0	src/PartBunch/PartBunch.hpp	/^    double getPx0(int i) {$/;"	f	class:PartBunch
getPy	src/AbstractObjects/OpalParticle.h	/^inline double OpalParticle::getPy() const {$/;"	f	class:OpalParticle
getPy	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getPy(int) {$/;"	f	class:PartBunch
getPy	src/Algorithms/OpalParticle.h	/^inline double OpalParticle::getPy() const {$/;"	f	class:OpalParticle
getPy	src/PartBunch/PartBunch.hpp	/^    double getPy(int i) {$/;"	f	class:PartBunch
getPy0	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getPy0(int) {$/;"	f	class:PartBunch
getPy0	src/PartBunch/PartBunch.hpp	/^    double getPy0(int i) {$/;"	f	class:PartBunch
getPz	src/AbstractObjects/OpalParticle.h	/^inline double OpalParticle::getPz() const {$/;"	f	class:OpalParticle
getPz	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getPz(int) {$/;"	f	class:PartBunch
getPz	src/Algorithms/OpalParticle.h	/^inline double OpalParticle::getPz() const {$/;"	f	class:OpalParticle
getPz	src/PartBunch/PartBunch.hpp	/^    double getPz(int i) {$/;"	f	class:PartBunch
getQ	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getQ() const {$/;"	f	class:PartBunch
getQ	src/Algorithms/PartData.h	/^KOKKOS_INLINE_FUNCTION double PartData::getQ() const {$/;"	f	class:PartData
getQ	src/PartBunch/PartBunch.hpp	/^    double getQ() const {$/;"	f	class:PartBunch
getQIndex	src/AbsBeamline/EndFieldModel/Enge.h	/^std::vector< std::vector<int> > Enge::getQIndex(int n) {$/;"	f	class:endfieldmodel::Enge
getQuaternion	src/Algorithms/Quaternion.cpp	/^Quaternion getQuaternion(ippl::Vector<double, 3> u, ippl::Vector<double, 3> ref) {$/;"	f
getR	src/AbstractObjects/OpalParticle.h	/^inline const Vector_t<double, 3>& OpalParticle::getR() const {$/;"	f	class:OpalParticle
getR	src/Algorithms/OpalParticle.h	/^inline const Vector_t<double, 3>& OpalParticle::getR() const {$/;"	f	class:OpalParticle
getR0	src/AbsBeamline/ScalingFFAMagnet.h	/^    double getR0() const {return r0_m;}$/;"	f	class:ScalingFFAMagnet
getRFFreq	src/AbsBeamline/Ring.h	/^    double getRFFreq() const {$/;"	f	class:Ring
getRMax	src/AbsBeamline/ScalingFFAMagnet.h	/^    double getRMax() const {return rMax_m;}$/;"	f	class:ScalingFFAMagnet
getRMax	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    Vector_t<double, Dim>& getRMax() { return rmax_m; }$/;"	f	class:FieldContainer
getRMax	src/PartBunch/FieldContainer.hpp	/^    Vector_t<double, Dim>& getRMax() {$/;"	f	class:FieldContainer
getRMin	src/AbsBeamline/ScalingFFAMagnet.h	/^    double getRMin() const {return rMin_m;}$/;"	f	class:ScalingFFAMagnet
getRMin	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    Vector_t<double, Dim>& getRMin() { return rmin_m; }$/;"	f	class:FieldContainer
getRMin	src/PartBunch/FieldContainer.hpp	/^    Vector_t<double, Dim>& getRMin() {$/;"	f	class:FieldContainer
getRadiationLength	src/Physics/Material.h	/^    double Material::getRadiationLength() const {$/;"	f	class:Physics::Material
getRadius	src/AbsBeamline/MultipoleT.cpp	/^double MultipoleT::getRadius(double s) {$/;"	f	class:MultipoleT
getRadius	src/AbsBeamline/MultipoleTCurvedConstRadius.cpp	/^double MultipoleTCurvedConstRadius::getRadius(const double &\/*s*\/) {$/;"	f	class:MultipoleTCurvedConstRadius
getRadius	src/AbsBeamline/MultipoleTCurvedVarRadius.cpp	/^double MultipoleTCurvedVarRadius::getRadius(const double &s) {$/;"	f	class:MultipoleTCurvedVarRadius
getRadius	src/AbsBeamline/MultipoleTStraight.h	/^    double MultipoleTStraight::getRadius(const double &\/*s*\/) {$/;"	f	class:MultipoleTStraight
getRadius	src/BeamlineGeometry/VarRadiusGeometry.h	/^    double VarRadiusGeometry::getRadius() const {$/;"	f	class:VarRadiusGeometry
getRange	src/Algorithms/IndexMap.cpp	/^IndexMap::key_t IndexMap::getRange(const IndexMap::value_t::value_type &element,$/;"	f	class:IndexMap
getRange	src/Algorithms/OrbitThreader.h	/^IndexMap::key_t OrbitThreader::getRange(const IndexMap::value_t::value_type &element,$/;"	f	class:OrbitThreader
getRange	src/Attributes/Attributes.cpp	/^    RangeRep getRange(const Attribute &attr) {$/;"	f	namespace:Attributes
getReal	src/AbstractObjects/ValueDefinition.cpp	/^double ValueDefinition::getReal() const {$/;"	f	class:ValueDefinition
getReal	src/Attributes/Attributes.cpp	/^    double getReal(const Attribute &attr) {$/;"	f	namespace:Attributes
getReal	src/Expressions/SRefAttr.h	/^    double SRefAttr<T>::getReal() {$/;"	f	class:Expressions::SRefAttr
getReal	src/Expressions/SRefAttr.h	/^    double SRefAttr<double>::getReal() {$/;"	f	class:Expressions::SRefAttr
getReal	src/OpalParser/Token.cpp	/^double Token::getReal() const {$/;"	f	class:Token
getReal	src/ValueDefinitions/RealConstant.cpp	/^double RealConstant::getReal() const {$/;"	f	class:RealConstant
getReal	src/ValueDefinitions/RealVariable.cpp	/^double RealVariable::getReal() const {$/;"	f	class:RealVariable
getRealArray	src/Attributes/Attributes.cpp	/^    std::vector<double> getRealArray(const Attribute &attr) {$/;"	f	namespace:Attributes
getRealComponent	src/AbstractObjects/ValueDefinition.cpp	/^double ValueDefinition::getRealComponent(int) const {$/;"	f	class:ValueDefinition
getRealComponent	src/ValueDefinitions/RealVector.cpp	/^double RealVector::getRealComponent(int index) const {$/;"	f	class:RealVector
getReference	src/Algorithms/.PartBunchBase.hpp	/^const PartData* PartBunch<T, Dim>::getReference() const {$/;"	f	class:PartBunch
getReference	src/Lines/Sequence.cpp	/^Sequence::ReferenceType Sequence::getReference() const {$/;"	f	class:Sequence
getReference	src/PartBunch/PartBunch.hpp	/^    PartData* getReference() {$/;"	f	class:PartBunch
getReference	src/Structure/Beam.cpp	/^const PartData& Beam::getReference() const {$/;"	f	class:Beam
getReflectionFlag	src/Beamlines/FlaggedElmPtr.h	/^inline bool FlaggedElmPtr::getReflectionFlag() const {$/;"	f	class:FlaggedElmPtr
getRelativeFlag	src/Beamlines/Beamline.cpp	/^bool Beamline::getRelativeFlag() const {$/;"	f	class:Beamline
getRelativeFlag	src/Beamlines/TBeamline.h	/^inline bool TBeamline<T>::getRelativeFlag() const {$/;"	f	class:TBeamline
getRequiredNumberOfTimeSteps	src/AbsBeamline/Drift.h	/^inline int Drift::getRequiredNumberOfTimeSteps() const {$/;"	f	class:Drift
getRequiredNumberOfTimeSteps	src/AbsBeamline/ElementBase.h	/^inline int ElementBase::getRequiredNumberOfTimeSteps() const {$/;"	f	class:ElementBase
getRequiredNumberOfTimeSteps	src/AbsBeamline/Marker.h	/^int Marker::getRequiredNumberOfTimeSteps() const$/;"	f	class:Marker
getRequiredNumberOfTimeSteps	src/AbsBeamline/Monitor.h	/^inline int Monitor::getRequiredNumberOfTimeSteps() const {$/;"	f	class:Monitor
getResonanceFrequency	src/Fields/FM3DH5BlockBase.cpp	/^void FM3DH5BlockBase::getResonanceFrequency(void) {$/;"	f	class:FM3DH5BlockBase
getRestartDumpFreq	src/AbstractObjects/OpalData.cpp	/^int OpalData::getRestartDumpFreq() const {$/;"	f	class:OpalData
getRestartFileName	src/AbstractObjects/OpalData.cpp	/^std::string OpalData::getRestartFileName() {$/;"	f	class:OpalData
getRestartStep	src/AbstractObjects/OpalData.cpp	/^int OpalData::getRestartStep() {$/;"	f	class:OpalData
getRho	src/Algorithms/.PartBunch.h	/^inline double PartBunch::getRho(int x, int y, int z) {$/;"	f	class:PartBunch
getRho	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    Field_t<Dim>& getRho() { return rho_m; }$/;"	f	class:FieldContainer
getRho	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    Field_t<Dim> *getRho() const { return rho_m; }$/;"	f	class:FieldSolver
getRho	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        Field_t<Dim>* getRho() const { return rho_m; }$/;"	f	class:LoadBalancer
getRho	src/PartBunch/FieldContainer.hpp	/^    Field_t<Dim>& getRho() {$/;"	f	class:FieldContainer
getRho	src/PartBunch/FieldSolver.hpp	/^    Field_t<Dim>* getRho() const {$/;"	f	class:FieldSolver
getRho	src/PartBunch/LoadBalancer.hpp	/^    Field_t<Dim>* getRho() const {$/;"	f	class:LoadBalancer
getRho	src/PartBunch/PartBunch.hpp	/^    double getRho(int x, int y, int z) {$/;"	f	class:PartBunch
getRingMaxR	src/AbsBeamline/Ring.h	/^    double getRingMaxR() const {$/;"	f	class:Ring
getRingMinR	src/AbsBeamline/Ring.h	/^    double getRingMinR() const {$/;"	f	class:Ring
getRmax	src/AbsBeamline/RFCavity.cpp	/^double RFCavity::getRmax() const {$/;"	f	class:RFCavity
getRmin	src/AbsBeamline/RFCavity.cpp	/^double RFCavity::getRmin() const {$/;"	f	class:RFCavity
getRmsP	src/PartBunch/ParticleContainer.hpp	/^    Vector_t<double, 3> getRmsP() const{$/;"	f	class:ParticleContainer
getRmsR	src/PartBunch/ParticleContainer.hpp	/^    Vector_t<double, 3> getRmsR() const{$/;"	f	class:ParticleContainer
getRmsRP	src/PartBunch/ParticleContainer.hpp	/^    Vector_t<double, 3> getRmsRP() const{$/;"	f	class:ParticleContainer
getRotation	src/AbsBeamline/MultipoleT.h	/^inline double MultipoleT::getRotation() const {$/;"	f	class:MultipoleT
getRotation	src/AbsBeamline/MultipoleTBase.h	/^inline double MultipoleTBase::getRotation() const {$/;"	f	class:MultipoleTBase
getRotation	src/Algorithms/CoordinateSystemTrafo.h	/^inline Quaternion CoordinateSystemTrafo::getRotation() const {$/;"	f	class:CoordinateSystemTrafo
getRotation	src/BeamlineGeometry/Euclid3D.cpp	/^const Rotation3D &Euclid3D::getRotation() const {$/;"	f	class:Euclid3D
getRotationAboutZ	src/AbsBeamline/ElementBase.h	/^inline double ElementBase::getRotationAboutZ() const {$/;"	f	class:ElementBase
getRotationMatrix	src/Algorithms/CoordinateSystemTrafo.h	/^inline matrix_t CoordinateSystemTrafo::getRotationMatrix() const {$/;"	f	class:CoordinateSystemTrafo
getRotationMatrix	src/Algorithms/Quaternion.cpp	/^matrix_t Quaternion::getRotationMatrix() const {$/;"	f	class:Quaternion
getRotationStartToEnd	src/AbsBeamline/Ring.cpp	/^Rotation3D Ring::getRotationStartToEnd(Euclid3D delta) const {$/;"	f	class:Ring
getRunMethodName	src/Track/TrackRun.cpp	/^std::string TrackRun::getRunMethodName() const {$/;"	f	class:TrackRun
getS	src/Structure/BoundaryGeometry.h	/^    inline double getS() {$/;"	f	class:BoundaryGeometry
getS0	src/BeamlineGeometry/VarRadiusGeometry.h	/^    double VarRadiusGeometry::getS0() const {$/;"	f	class:VarRadiusGeometry
getSBins	src/Algorithms/PartBins.h	/^    int getSBins() { return sBins_m; };$/;"	f	class:PartBins
getSDerivatives	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.h	/^    std::size_t DifferentialOperator::getSDerivatives() const {$/;"	f	class:polynomial::DifferentialOperator
getSDerivatives	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.h	/^    std::size_t DifferentialOperatorTwo::getSDerivatives() const {$/;"	f	class:polynomial::DifferentialOperatorTwo
getScaleFactor	src/AbsBeamline/MultipoleT.cpp	/^double MultipoleT::getScaleFactor(double x, double s) {$/;"	f	class:MultipoleT
getScaleFactor	src/AbsBeamline/MultipoleTCurvedConstRadius.cpp	/^double MultipoleTCurvedConstRadius::getScaleFactor(const double &x,$/;"	f	class:MultipoleTCurvedConstRadius
getScaleFactor	src/AbsBeamline/MultipoleTCurvedVarRadius.cpp	/^double MultipoleTCurvedVarRadius::getScaleFactor(const double &x,$/;"	f	class:MultipoleTCurvedVarRadius
getScaleFactor	src/AbsBeamline/MultipoleTStraight.h	/^    double MultipoleTStraight::getScaleFactor(const double &\/*x*\/,$/;"	f	class:MultipoleTStraight
getSectionsAt	src/AbsBeamline/Ring.cpp	/^std::vector<RingSection*> Ring::getSectionsAt(const Vector_t<double, 3>& \/*r*\/) {$/;"	f	class:Ring
getSelectionFlag	src/Beamlines/FlaggedElmPtr.h	/^inline bool FlaggedElmPtr::getSelectionFlag() const {$/;"	f	class:FlaggedElmPtr
getSigmaMatrix	src/Algorithms/.PartBunchBase.hpp	/^matrix_t PartBunch<T, Dim>::getSigmaMatrix() const {$/;"	f	class:PartBunch
getSigmaP	src/Distribution/Distribution.h	/^inline ippl::Vector<double, 3> Distribution::getSigmaP() const {$/;"	f	class:Distribution
getSigmaR	src/Distribution/Distribution.h	/^inline ippl::Vector<double, 3> Distribution::getSigmaR() const {$/;"	f	class:Distribution
getSigmaTFall	src/Distribution/Distribution.h	/^inline double Distribution::getSigmaTFall() const {$/;"	f	class:Distribution
getSigmaTRise	src/Distribution/Distribution.h	/^inline double Distribution::getSigmaTRise() const {$/;"	f	class:Distribution
getSinAzimuth	src/AbsBeamline/RFCavity.cpp	/^double RFCavity::getSinAzimuth() const {$/;"	f	class:RFCavity
getSingleElement	tests/ippl_src/Particle/EdgeCentering.cpp	/^NDIdx_t getSingleElement(unsigned int i,$/;"	f
getSkewComponent	src/AbsBeamline/Multipole.cpp	/^double Multipole::getSkewComponent(int n) const {$/;"	f	class:Multipole
getSkewComponent	src/Fields/BMultipoleField.h	/^inline double BMultipoleField::getSkewComponent(int n) const {$/;"	f	class:BMultipoleField
getSolver	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    const std::string& getSolver() const { return solver_m; }$/;"	f	class:AlpineManager
getStandardDeviationMomentum	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::getStandardDeviationMomentum() const {$/;"	f	class:DistributionMoments
getStandardDeviationPosition	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::getStandardDeviationPosition() const {$/;"	f	class:DistributionMoments
getStandardDeviationRP	src/Algorithms/DistributionMoments.h	/^inline Vector_t<double, 3> DistributionMoments::getStandardDeviationRP() const {$/;"	f	class:DistributionMoments
getStart	src/Utilities/ClassicField.h	/^inline const double &ClassicField::getStart() const {$/;"	f	class:ClassicField
getStartNormal	src/Utilities/RingSection.h	/^    inline Vector_t<double, 3> getStartNormal() const {$/;"	f	class:RingSection
getStartPosition	src/Utilities/RingSection.h	/^    inline Vector_t<double, 3> getStartPosition() const {$/;"	f	class:RingSection
getStdKineticEnergy	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getStdKineticEnergy() const {$/;"	f	class:DistributionMoments
getStdKineticEnergy	src/PartBunch/ParticleContainer.hpp	/^    double getStdKineticEnergy() const {$/;"	f	class:ParticleContainer
getStdTime	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getStdTime() const {$/;"	f	class:DistributionMoments
getStep	src/AbsBeamline/Probe.cpp	/^double Probe::getStep() const {$/;"	f	class:Probe
getStepMethod	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    const std::string& getStepMethod() const { return stepMethod_m; }$/;"	f	class:AlpineManager
getStepsPerTurn	src/Algorithms/.PartBunchBase.hpp	/^int PartBunch<T, Dim>::getStepsPerTurn() const {$/;"	f	class:PartBunch
getStepsPerTurn	src/PartBunch/PartBunch.hpp	/^    int getStepsPerTurn() const {$/;"	f	class:PartBunch
getStepsPerTurn	src/Track/TrackCmd.cpp	/^int TrackCmd::getStepsPerTurn() const {$/;"	f	class:TrackCmd
getSteptoLastInj	src/Algorithms/.PartBunchBase.hpp	/^int PartBunch<T, Dim>::getSteptoLastInj() const {$/;"	f	class:PartBunch
getSteptoLastInj	src/PartBunch/PartBunch.hpp	/^    int getSteptoLastInj() const {$/;"	f	class:PartBunch
getStoppingPowerFitCoefficients	src/Physics/Material.h	/^    double Material::getStoppingPowerFitCoefficients(Material::FitCoeffs n) const {$/;"	f	class:Physics::Material
getString	src/AbstractObjects/ValueDefinition.cpp	/^std::string ValueDefinition::getString() const {$/;"	f	class:ValueDefinition
getString	src/Attributes/Attributes.cpp	/^    std::string getString(const Attribute &attr) {$/;"	f	namespace:Attributes
getString	src/OpalParser/Token.cpp	/^std::string Token::getString() const {$/;"	f	class:Token
getString	src/ValueDefinitions/StringConstant.cpp	/^std::string StringConstant::getString() const {$/;"	f	class:StringConstant
getStringArray	src/Attributes/Attributes.cpp	/^    std::vector<std::string> getStringArray(const Attribute &attr) {$/;"	f	namespace:Attributes
getStringComponent	src/AbstractObjects/ValueDefinition.cpp	/^std::string ValueDefinition::getStringComponent(int) const {$/;"	f	class:ValueDefinition
getSymmetry	src/AbsBeamline/Ring.h	/^    double getSymmetry() const {$/;"	f	class:Ring
getSymmetry	src/Fields/SectorMagneticFieldMap.cpp	/^std::string SectorMagneticFieldMap::getSymmetry() const {$/;"	f	class:SectorMagneticFieldMap
getT	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getT() const {$/;"	f	class:PartBunch
getT	src/PartBunch/PartBunch.hpp	/^    double getT() const {$/;"	f	class:PartBunch
getT0	src/Track/TrackCmd.cpp	/^double TrackCmd::getT0() const {$/;"	f	class:TrackCmd
getTEmission	src/Distribution/Distribution.cpp	/^double Distribution::getTEmission() const {$/;"	f	class:Distribution
getTEmission	src/PartBunch/PartBunch.hpp	/^    double getTEmission() {$/;"	f	class:PartBunch
getTPulseLengthFWHM	src/Distribution/Distribution.h	/^inline double Distribution::getTPulseLengthFWHM() const {$/;"	f	class:Distribution
getTabName	src/AbstractObjects/TableRowRep.cpp	/^const std::string &TableRowRep::getTabName() const {$/;"	f	class:TableRowRep
getTableRow	src/Attributes/Attributes.cpp	/^    TableRowRep getTableRow(const Attribute &attr) {$/;"	f	namespace:Attributes
getTaitBryantAngles	src/Utilities/Util.cpp	/^    Vector_t<double, 3> getTaitBryantAngles($/;"	f	namespace:Util
getTanDelta	src/AbsBeamline/ScalingFFAMagnet.h	/^    double getTanDelta() const {return tanDelta_m;}$/;"	f	class:ScalingFFAMagnet
getTanh	src/AbsBeamline/EndFieldModel/Tanh.cpp	/^double Tanh::getTanh(double x, int n) const {$/;"	f	class:endfieldmodel::Tanh
getTanhDiffIndices	src/AbsBeamline/EndFieldModel/Tanh.cpp	/^std::vector< std::vector<int> > Tanh::getTanhDiffIndices(size_t n) {$/;"	f	class:endfieldmodel::Tanh
getTempEField	src/PartBunch/PartBunch.hpp	/^    std::shared_ptr<VField_t<T, Dim>> getTempEField() { return this->Etmp_m; }$/;"	f	class:PartBunch
getTemperature	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getTemperature() const {$/;"	f	class:DistributionMoments
getTemperature	src/PartBunch/ParticleContainer.hpp	/^    double getTemperature() const {$/;"	f	class:ParticleContainer
getTheta	src/AbsBeamline/Offset.cpp	/^double Offset::getTheta(Vector_t<double, 3> vec1, Vector_t<double, 3> vec2) {$/;"	f	class:Offset
getTime	src/AbstractObjects/OpalParticle.h	/^inline double OpalParticle::getTime() const {$/;"	f	class:OpalParticle
getTime	src/Algorithms/OpalParticle.h	/^inline double OpalParticle::getTime() const {$/;"	f	class:OpalParticle
getTime	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    double getTime() const { return time_m; }$/;"	f	class:AlpineManager
getTimeDependence	src/Algorithms/AbstractTimeDependence.cpp	/^std::shared_ptr<AbstractTimeDependence> AbstractTimeDependence::getTimeDependence(std::string name) {$/;"	f	class:AbstractTimeDependence
getTimeIntegrator	src/Track/TrackCmd.cpp	/^Steppers::TimeIntegrator TrackCmd::getTimeIntegrator() {$/;"	f	class:TrackCmd
getTimeString	src/Utilities/Util.h	/^    inline std::string getTimeString(double time, unsigned int precision = 3) {$/;"	f	namespace:Util
getTitle	src/AbstractObjects/OpalData.cpp	/^std::string OpalData::getTitle() {$/;"	f	class:OpalData
getTokenList	src/Attributes/Attributes.cpp	/^    std::list<Token> getTokenList(const Attribute &attr) {$/;"	f	namespace:Attributes
getTokenListArray	src/Attributes/Attributes.cpp	/^    std::vector<std::list<Token> > getTokenListArray(const Attribute &attr) {$/;"	f	namespace:Attributes
getTopology	src/Structure/BoundaryGeometry.h	/^    inline Topology getTopology() const {$/;"	f	class:BoundaryGeometry
getTotalCharge	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getTotalCharge() const {$/;"	f	class:DistributionMoments
getTotalMass	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getTotalMass() const {$/;"	f	class:DistributionMoments
getTotalNum	src/Algorithms/.PartBunchBase.hpp	/^size_t PartBunch<T, Dim>::getTotalNum() const {$/;"	f	class:PartBunch
getTotalNum	src/Algorithms/PartBins.cpp	/^size_t PartBins::getTotalNum() {$/;"	f	class:PartBins
getTotalNum	src/PartBunch/PartBunch.hpp	/^    size_t getTotalNum() const {$/;"	f	class:PartBunch
getTotalNumParticles	src/Algorithms/DistributionMoments.h	/^inline double DistributionMoments::getTotalNumParticles() const {$/;"	f	class:DistributionMoments
getTotalNumPerBin	src/Algorithms/PartBins.cpp	/^size_t PartBins::getTotalNumPerBin(int b) {$/;"	f	class:PartBins
getTotalP	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    size_type getTotalP() const { return totalP_m; }$/;"	f	class:AlpineManager
getTotalTransform	src/AbsBeamline/ElementBase.h	/^inline Euclid3D ElementBase::getTotalTransform() const {$/;"	f	class:ElementBase
getTotalTransform	src/BeamlineGeometry/Euclid3DGeometry.cpp	/^Euclid3D Euclid3DGeometry::getTotalTransform() const {$/;"	f	class:Euclid3DGeometry
getTotalTransform	src/BeamlineGeometry/Geometry.cpp	/^Euclid3D BGeometryBase::getTotalTransform() const {$/;"	f	class:BGeometryBase
getTotalTransform	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^Euclid3D PlanarArcGeometry::getTotalTransform() const {$/;"	f	class:PlanarArcGeometry
getTotalTransform	src/BeamlineGeometry/RBendGeometry.cpp	/^Euclid3D RBendGeometry::getTotalTransform() const {$/;"	f	class:RBendGeometry
getTotalTransform	src/BeamlineGeometry/StraightGeometry.cpp	/^Euclid3D StraightGeometry::getTotalTransform() const {$/;"	f	class:StraightGeometry
getTotalTransform	src/Beamlines/BeamlineGeometry.cpp	/^Euclid3D BeamlineGeometry::getTotalTransform() const {$/;"	f	class:BeamlineGeometry
getTotalTransform	src/Beamlines/TBeamline.h	/^Euclid3D TBeamline<T>::getTotalTransform() const {$/;"	f	class:TBeamline
getTouchingElements	src/Algorithms/IndexMap.cpp	/^IndexMap::value_t IndexMap::getTouchingElements(const IndexMap::key_t &range) const {$/;"	f	class:IndexMap
getTouchingElements	src/Algorithms/OrbitThreader.h	/^IndexMap::value_t OrbitThreader::getTouchingElements(const IndexMap::key_t &range) const {$/;"	f	class:OrbitThreader
getTransDeriv	src/AbsBeamline/MultipoleT.cpp	/^double MultipoleT::getTransDeriv(std::size_t n, double x) {$/;"	f	class:MultipoleT
getTransDeriv	src/AbsBeamline/MultipoleTBase.cpp	/^double MultipoleTBase::getTransDeriv(const std::size_t &n, const double &x) {$/;"	f	class:MultipoleTBase
getTransMaxOrder	src/AbsBeamline/MultipoleT.h	/^inline std::size_t MultipoleT::getTransMaxOrder() const {$/;"	f	class:MultipoleT
getTransMaxOrder	src/AbsBeamline/MultipoleTBase.h	/^inline std::size_t MultipoleTBase::getTransMaxOrder() const {$/;"	f	class:MultipoleTBase
getTransProfile	src/AbsBeamline/MultipoleT.h	/^inline double MultipoleT::getTransProfile(int n) const {$/;"	f	class:MultipoleT
getTransProfile	src/AbsBeamline/MultipoleT.h	/^inline std::vector<double> MultipoleT::getTransProfile() const {$/;"	f	class:MultipoleT
getTransProfile	src/AbsBeamline/MultipoleTBase.h	/^inline double MultipoleTBase::getTransProfile(const std::size_t& n) const {$/;"	f	class:MultipoleTBase
getTransProfile	src/AbsBeamline/MultipoleTBase.h	/^inline std::vector<double> MultipoleTBase::getTransProfile() const {$/;"	f	class:MultipoleTBase
getTransform	src/AbsBeamline/ElementBase.h	/^inline Euclid3D ElementBase::getTransform(double fromS, double toS) const {$/;"	f	class:ElementBase
getTransform	src/AbsBeamline/ElementBase.h	/^inline Euclid3D ElementBase::getTransform(double s) const {$/;"	f	class:ElementBase
getTransform	src/BeamlineGeometry/Euclid3DGeometry.cpp	/^Euclid3D Euclid3DGeometry::getTransform(double \/*fromS*\/, double \/*toS*\/) const {$/;"	f	class:Euclid3DGeometry
getTransform	src/BeamlineGeometry/Geometry.cpp	/^Euclid3D BGeometryBase::getTransform(double s) const {$/;"	f	class:BGeometryBase
getTransform	src/BeamlineGeometry/NullGeometry.cpp	/^Euclid3D NullGeometry::getTransform(double) const {$/;"	f	class:NullGeometry
getTransform	src/BeamlineGeometry/NullGeometry.cpp	/^Euclid3D NullGeometry::getTransform(double, double) const {$/;"	f	class:NullGeometry
getTransform	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^Euclid3D PlanarArcGeometry::getTransform(double fromS, double toS) const {$/;"	f	class:PlanarArcGeometry
getTransform	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^Euclid3D PlanarArcGeometry::getTransform(double s) const {$/;"	f	class:PlanarArcGeometry
getTransform	src/BeamlineGeometry/StraightGeometry.cpp	/^Euclid3D StraightGeometry::getTransform(double fromS, double toS) const {$/;"	f	class:StraightGeometry
getTransform	src/BeamlineGeometry/StraightGeometry.cpp	/^Euclid3D StraightGeometry::getTransform(double s) const {$/;"	f	class:StraightGeometry
getTransform	src/BeamlineGeometry/VarRadiusGeometry.cpp	/^Euclid3D VarRadiusGeometry::getTransform(double fromS, double toS) const {$/;"	f	class:VarRadiusGeometry
getTransform	src/Beamlines/BeamlineGeometry.cpp	/^Euclid3D BeamlineGeometry::getTransform(double fromS, double toS) const {$/;"	f	class:BeamlineGeometry
getTransform	src/Beamlines/BeamlineGeometry.cpp	/^Euclid3D BeamlineGeometry::getTransform(double s) const {$/;"	f	class:BeamlineGeometry
getTransform	src/Beamlines/TBeamline.h	/^Euclid3D TBeamline<T>::getTransform(double fromS, double toS) const {$/;"	f	class:TBeamline
getTransform	src/Beamlines/TBeamline.h	/^Euclid3D TBeamline<T>::getTransform(double s) const {$/;"	f	class:TBeamline
getTransformation	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^std::vector<double> CoordinateTransform::getTransformation() const {$/;"	f	class:coordinatetransform::CoordinateTransform
getTriangles	src/Utilities/Mesher.cpp	/^std::vector<mslang::Triangle> Mesher::getTriangles() const {$/;"	f	class:Mesher
getType	src/AbsBeamline/Component.cpp	/^ElementType Component::getType() const {$/;"	f	class:Component
getType	src/AbsBeamline/Corrector.cpp	/^ElementType Corrector::getType() const {$/;"	f	class:Corrector
getType	src/AbsBeamline/Drift.cpp	/^ElementType Drift::getType() const {$/;"	f	class:Drift
getType	src/AbsBeamline/Marker.cpp	/^ElementType Marker::getType() const {$/;"	f	class:Marker
getType	src/AbsBeamline/Monitor.cpp	/^ElementType Monitor::getType() const {$/;"	f	class:Monitor
getType	src/AbsBeamline/Multipole.cpp	/^ElementType Multipole::getType() const {$/;"	f	class:Multipole
getType	src/AbsBeamline/Probe.cpp	/^ElementType Probe::getType() const {$/;"	f	class:Probe
getType	src/AbsBeamline/RFCavity.cpp	/^ElementType RFCavity::getType() const {$/;"	f	class:RFCavity
getType	src/AbsBeamline/Solenoid.cpp	/^ElementType Solenoid::getType() const {$/;"	f	class:Solenoid
getType	src/AbsBeamline/TravelingWave.cpp	/^ElementType TravelingWave::getType() const {$/;"	f	class:TravelingWave
getType	src/AbstractObjects/Attribute.cpp	/^const std::string &Attribute::getType() const {$/;"	f	class:Attribute
getType	src/Attributes/Bool.cpp	/^    const std::string &Bool::getType() const {$/;"	f	class:Attributes::Bool
getType	src/Attributes/BoolArray.cpp	/^    const std::string &BoolArray::getType() const {$/;"	f	class:Attributes::BoolArray
getType	src/Attributes/Place.cpp	/^    const std::string &Place::getType() const {$/;"	f	class:Attributes::Place
getType	src/Attributes/PredefinedString.cpp	/^    const std::string &PredefinedString::getType() const {$/;"	f	class:Attributes::PredefinedString
getType	src/Attributes/Range.cpp	/^    const std::string &Range::getType() const {$/;"	f	class:Attributes::Range
getType	src/Attributes/Real.cpp	/^    const std::string &Real::getType() const {$/;"	f	class:Attributes::Real
getType	src/Attributes/RealArray.cpp	/^    const std::string &RealArray::getType() const {$/;"	f	class:Attributes::RealArray
getType	src/Attributes/Reference.cpp	/^    const std::string &Reference::getType() const {$/;"	f	class:Attributes::Reference
getType	src/Attributes/String.cpp	/^    const std::string &String::getType() const {$/;"	f	class:Attributes::String
getType	src/Attributes/StringArray.cpp	/^    const std::string &StringArray::getType() const {$/;"	f	class:Attributes::StringArray
getType	src/Attributes/TableRow.cpp	/^    const std::string &TableRow::getType() const {$/;"	f	class:Attributes::TableRow
getType	src/Attributes/TokenList.cpp	/^    const std::string &TokenList::getType() const {$/;"	f	class:Attributes::TokenList
getType	src/Attributes/TokenListArray.cpp	/^    const std::string &TokenListArray::getType() const {$/;"	f	class:Attributes::TokenListArray
getType	src/Attributes/UpperCaseString.cpp	/^    const std::string &UpperCaseString::getType() const {$/;"	f	class:Attributes::UpperCaseString
getType	src/Attributes/UpperCaseStringArray.cpp	/^    const std::string &UpperCaseStringArray::getType() const {$/;"	f	class:Attributes::UpperCaseStringArray
getType	src/Beamlines/TBeamline.h	/^inline ElementType TBeamline<T>::getType() const {$/;"	f	class:TBeamline
getType	src/Distribution/Distribution.h	/^inline DistributionType Distribution::getType() const {$/;"	f	class:Distribution
getType	src/Fields/Fieldmap.h	/^    MapType getType() {$/;"	f	class:Fieldmap
getType	src/OpalParser/Token.cpp	/^Token::Type Token::getType() const {$/;"	f	class:Token
getType	src/Structure/FieldSolverCmd.cpp	/^std::string FieldSolverCmd::getType() {$/;"	f	class:FieldSolverCmd
getType	tests/opal_src/Elements/OpalPolynomialTimeDependenceTest.cpp	/^    ElementType getType() const {return ElementType::ANY;}$/;"	f	class:TestElement
getTypeName	src/Elements/OpalElement.cpp	/^const std::string OpalElement::getTypeName() const {$/;"	f	class:OpalElement
getTypeString	src/AbsBeamline/ElementBase.cpp	/^std::string ElementBase::getTypeString(ElementType type) {$/;"	f	class:ElementBase
getTypeString	src/AbsBeamline/ElementBase.h	/^inline std::string ElementBase::getTypeString() const {$/;"	f	class:ElementBase
getTypeofDistribution	src/Distribution/Distribution.h	/^inline std::string Distribution::getTypeofDistribution() {$/;"	f	class:Distribution
getUnitTangentVector	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^std::vector<double> CoordinateTransform::getUnitTangentVector($/;"	f	class:coordinatetransform::CoordinateTransform
getUnitTangentVectorX	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^double getUnitTangentVectorX(double s, void *p) {$/;"	f	namespace:coordinatetransform
getUnitTangentVectorY	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^double getUnitTangentVectorY(double s, void *p) {$/;"	f	namespace:coordinatetransform
getUpdateFlag	src/Algorithms/.PartBunchBase.hpp	/^bool PartBunch<T, Dim>::getUpdateFlag(UpdateFlags_t f) const {$/;"	f	class:PartBunch
getValue	src/Algorithms/PolynomialTimeDependence.h	/^double PolynomialTimeDependence::getValue(double time) {$/;"	f	class:PolynomialTimeDependence
getValue	src/Algorithms/SplineTimeDependence.h	/^double SplineTimeDependence::getValue(double time) {$/;"	f	class:SplineTimeDependence
getValue	src/Utilities/SDDSParser.h	/^        void getValue(int t, std::string column_name, T& nval) {$/;"	f	class:SDDS::SDDSParser
getValueDimension	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^unsigned int Interpolator3dGridTo1d::getValueDimension()  const {$/;"	f	class:interpolation::Interpolator3dGridTo1d
getValueDimension	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^unsigned int Interpolator3dGridTo3d::getValueDimension()  const {$/;"	f	class:interpolation::Interpolator3dGridTo3d
getValueDimension	src/Fields/Interpolation/PolynomialPatch.h	/^    inline unsigned int getValueDimension() const {return value_dimension_;}$/;"	f	class:interpolation::PolynomialPatch
getValues	src/Fields/Interpolation/PPSolveFactory.cpp	/^void PPSolveFactory::getValues(Mesh::Iterator it) {$/;"	f	class:interpolation::PPSolveFactory
getVarRadius	src/AbsBeamline/MultipoleT.h	/^inline bool MultipoleT::getVarRadius() const {$/;"	f	class:MultipoleT
getVariableData	src/AbstractObjects/OpalData.cpp	/^std::map<std::string, std::string> OpalData::getVariableData() {$/;"	f	class:OpalData
getVariableNames	src/AbstractObjects/OpalData.cpp	/^std::vector<std::string> OpalData::getVariableNames() {$/;"	f	class:OpalData
getVector	src/BeamlineGeometry/Euclid3D.cpp	/^const Vector3D &Euclid3D::getVector() const {$/;"	f	class:Euclid3D
getVerticalExtent	src/AbsBeamline/ScalingFFAMagnet.h	/^    double getVerticalExtent() const {return verticalExtent_m;}$/;"	f	class:ScalingFFAMagnet
getVirtualBoundingBox	src/Utilities/RingSection.cpp	/^std::vector<Vector_t<double, 3>> RingSection::getVirtualBoundingBox() const {$/;"	f	class:RingSection
getWake	src/AbsBeamline/ElementBase.h	/^inline WakeFunction* ElementBase::getWake() const {$/;"	f	class:ElementBase
getWakeF	src/Elements/OpalElement.cpp	/^const std::string OpalElement::getWakeF() const {$/;"	f	class:OpalElement
getWeightedData	src/Fields/FM3DH5BlockBase.cpp	/^double FM3DH5BlockBase::getWeightedData($/;"	f	class:FM3DH5BlockBase
getWeightedData	src/Fields/FM3DMagnetoStatic.cpp	/^double FM3DMagnetoStatic::getWeightedData($/;"	f	class:FM3DMagnetoStatic
getWeightedData	src/Fields/FM3DMagnetoStaticExtended.cpp	/^double FM3DMagnetoStaticExtended::getWeightedData($/;"	f	class:FM3DMagnetoStaticExtended
getWidth	src/AbsBeamline/VerticalFFAMagnet.h	/^    double getWidth() const {$/;"	f	class:VerticalFFAMagnet
getWidth	src/Utilities/PortableBitmapReader.h	/^unsigned int PortableBitmapReader::getWidth() const {$/;"	f	class:PortableBitmapReader
getWidth	src/Utilities/PortableGraymapReader.h	/^unsigned int PortableGraymapReader::getWidth() const {$/;"	f	class:PortableGraymapReader
getWord	src/OpalParser/Token.cpp	/^std::string Token::getWord() const {$/;"	f	class:Token
getX	src/AbstractObjects/OpalParticle.h	/^inline double OpalParticle::getX() const {$/;"	f	class:OpalParticle
getX	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getX(int i) {$/;"	f	class:PartBunch
getX	src/Algorithms/OpalParticle.h	/^inline double OpalParticle::getX() const {$/;"	f	class:OpalParticle
getX	src/BeamlineGeometry/Euclid3D.h	/^inline double Euclid3D::getX() const {$/;"	f	class:Euclid3D
getX	src/BeamlineGeometry/Vector3D.h	/^inline double Vector3D::getX() const$/;"	f	class:Vector3D
getX	src/Fields/EMField.cpp	/^double Point3D::getX() const$/;"	f	class:Point3D
getX	src/PartBunch/PartBunch.hpp	/^    double getX(int i) {$/;"	f	class:PartBunch
getX0	src/AbsBeamline/EndFieldModel/Enge.h	/^    inline double getX0() const {return _x0;}$/;"	f	class:endfieldmodel::Enge
getX0	src/AbsBeamline/EndFieldModel/Tanh.h	/^    inline double getX0() const {return _x0;}$/;"	f	class:endfieldmodel::Tanh
getX0	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getX0(int \/*i*\/) {$/;"	f	class:PartBunch
getX0	src/PartBunch/PartBunch.hpp	/^    double getX0(int i) {$/;"	f	class:PartBunch
getX0End	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^double AsymmetricEnge::getX0End() const {$/;"	f	class:endfieldmodel::AsymmetricEnge
getX0Start	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^double AsymmetricEnge::getX0Start() const {$/;"	f	class:endfieldmodel::AsymmetricEnge
getXDerivatives	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.h	/^    std::size_t DifferentialOperator::getXDerivatives() const {$/;"	f	class:polynomial::DifferentialOperator
getXDerivatives	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.h	/^    std::size_t DifferentialOperatorTwo::getXDerivatives() const {$/;"	f	class:polynomial::DifferentialOperatorTwo
getXEnd	src/AbsBeamline/PluginElement.cpp	/^double PluginElement::getXEnd() const {$/;"	f	class:PluginElement
getXRangeMax	src/.Solvers/FFTPoissonSolver.h	/^    double getXRangeMax(unsigned short \/*level*\/) {$/;"	f	class:FFTPoissonSolver
getXRangeMax	src/.Solvers/IrregularDomain.h	/^    double getXRangeMax() const {$/;"	f	class:IrregularDomain
getXRangeMin	src/.Solvers/FFTPoissonSolver.h	/^    double getXRangeMin(unsigned short \/*level*\/) {$/;"	f	class:FFTPoissonSolver
getXRangeMin	src/.Solvers/IrregularDomain.h	/^    double getXRangeMin() const {$/;"	f	class:IrregularDomain
getXStart	src/AbsBeamline/PluginElement.cpp	/^double PluginElement::getXStart() const {$/;"	f	class:PluginElement
getXY	src/Distribution/LaserProfile.cpp	/^void LaserProfile::getXY(double& x, double& y) {$/;"	f	class:LaserProfile
getY	src/AbstractObjects/OpalParticle.h	/^inline double OpalParticle::getY() const {$/;"	f	class:OpalParticle
getY	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getY(int i) {$/;"	f	class:PartBunch
getY	src/Algorithms/OpalParticle.h	/^inline double OpalParticle::getY() const {$/;"	f	class:OpalParticle
getY	src/BeamlineGeometry/Euclid3D.h	/^inline double Euclid3D::getY() const {$/;"	f	class:Euclid3D
getY	src/BeamlineGeometry/Vector3D.h	/^inline double Vector3D::getY() const$/;"	f	class:Vector3D
getY	src/Fields/EMField.cpp	/^double Point3D::getY() const$/;"	f	class:Point3D
getY	src/PartBunch/PartBunch.hpp	/^    double getY(int i) {$/;"	f	class:PartBunch
getY0	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getY0(int \/*i*\/) {$/;"	f	class:PartBunch
getY0	src/PartBunch/PartBunch.hpp	/^    double getY0(int i) {$/;"	f	class:PartBunch
getYEnd	src/AbsBeamline/PluginElement.cpp	/^double PluginElement::getYEnd() const {$/;"	f	class:PluginElement
getYRangeMax	src/.Solvers/FFTPoissonSolver.h	/^    double getYRangeMax(unsigned short \/*level*\/) {$/;"	f	class:FFTPoissonSolver
getYRangeMax	src/.Solvers/IrregularDomain.h	/^    double getYRangeMax() const {$/;"	f	class:IrregularDomain
getYRangeMin	src/.Solvers/FFTPoissonSolver.h	/^    double getYRangeMin(unsigned short \/*level*\/) {$/;"	f	class:FFTPoissonSolver
getYRangeMin	src/.Solvers/IrregularDomain.h	/^    double getYRangeMin() const {$/;"	f	class:IrregularDomain
getYStart	src/AbsBeamline/PluginElement.cpp	/^double PluginElement::getYStart() const {$/;"	f	class:PluginElement
getZ	src/AbstractObjects/OpalParticle.h	/^inline double OpalParticle::getZ() const {$/;"	f	class:OpalParticle
getZ	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getZ(int i) {$/;"	f	class:PartBunch
getZ	src/Algorithms/OpalParticle.h	/^inline double OpalParticle::getZ() const {$/;"	f	class:OpalParticle
getZ	src/BeamlineGeometry/Euclid3D.h	/^inline double Euclid3D::getZ() const {$/;"	f	class:Euclid3D
getZ	src/BeamlineGeometry/Vector3D.h	/^inline double Vector3D::getZ() const$/;"	f	class:Vector3D
getZ	src/Fields/EMField.cpp	/^double Point3D::getZ() const$/;"	f	class:Point3D
getZ	src/PartBunch/PartBunch.hpp	/^    double getZ(int i) {$/;"	f	class:PartBunch
getZRangeMax	src/.Solvers/FFTPoissonSolver.h	/^    double getZRangeMax(unsigned short \/*level*\/) {$/;"	f	class:FFTPoissonSolver
getZRangeMax	src/.Solvers/IrregularDomain.h	/^    double getZRangeMax() const {$/;"	f	class:IrregularDomain
getZRangeMin	src/.Solvers/FFTPoissonSolver.h	/^    double getZRangeMin(unsigned short \/*level*\/) {$/;"	f	class:FFTPoissonSolver
getZRangeMin	src/.Solvers/IrregularDomain.h	/^    double getZRangeMin() const {$/;"	f	class:IrregularDomain
getZStart	src/Track/TrackCmd.cpp	/^double TrackCmd::getZStart() const {$/;"	f	class:TrackCmd
getZStop	src/Algorithms/StepSizeConfig.cpp	/^double StepSizeConfig::getZStop() const {$/;"	f	class:StepSizeConfig
getZStop	src/Track/TrackCmd.cpp	/^std::vector<double> TrackCmd::getZStop() const {$/;"	f	class:TrackCmd
get_68Percentile	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_68Percentile() const {$/;"	f	class:PartBunch
get_68Percentile	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_68Percentile() const {$/;"	f	class:PartBunch
get_95Percentile	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_95Percentile() const {$/;"	f	class:PartBunch
get_95Percentile	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_95Percentile() const {$/;"	f	class:PartBunch
get_99Percentile	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_99Percentile() const {$/;"	f	class:PartBunch
get_99Percentile	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_99Percentile() const {$/;"	f	class:PartBunch
get_99_99Percentile	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_99_99Percentile() const {$/;"	f	class:PartBunch
get_99_99Percentile	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_99_99Percentile() const {$/;"	f	class:PartBunch
get_DDx	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::get_DDx() const {$/;"	f	class:PartBunch
get_DDx	src/PartBunch/PartBunch.hpp	/^    double get_DDx() const {$/;"	f	class:PartBunch
get_DDy	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::get_DDy() const {$/;"	f	class:PartBunch
get_DDy	src/PartBunch/PartBunch.hpp	/^    double get_DDy() const {$/;"	f	class:PartBunch
get_Dx	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::get_Dx() const {$/;"	f	class:PartBunch
get_Dx	src/PartBunch/PartBunch.hpp	/^    double get_Dx() const {$/;"	f	class:PartBunch
get_Dy	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::get_Dy() const {$/;"	f	class:PartBunch
get_Dy	src/PartBunch/PartBunch.hpp	/^    double get_Dy() const {$/;"	f	class:PartBunch
get_PBounds	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::get_PBounds(Vector_t<double, 3> &min, Vector_t<double, 3> &max) const {$/;"	f	class:PartBunch
get_PBounds	src/PartBunch/PartBunch.hpp	/^    void get_PBounds(Vector_t<double, Dim>& min, Vector_t<double, Dim>& max) {$/;"	f	class:PartBunch
get_bounds	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::get_bounds(Vector_t<double, 3>& rmin, Vector_t<double, 3>& rmax) const {$/;"	f	class:PartBunch
get_bounds	src/PartBunch/PartBunch.hpp	/^    void get_bounds(Vector_t<double, Dim>& rmin, Vector_t<double, Dim>& rmax) {$/;"	f	class:PartBunch
get_centroid	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_centroid() const {$/;"	f	class:PartBunch
get_centroid	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, 2*Dim> get_centroid() const {$/;"	f	class:PartBunch
get_debyeLength	src/PartBunch/PartBunch.hpp	/^    double get_debyeLength() const {$/;"	f	class:PartBunch
get_emit	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_emit() const {$/;"	f	class:PartBunch
get_emit	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_emit() const {$/;"	f	class:PartBunch
get_fit_errors	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^    def get_fit_errors(self):$/;"	m	class:PlotInterpolation
get_fit_fig	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^    def get_fit_fig(self):$/;"	m	class:PlotInterpolation
get_gamma	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::get_gamma() const {$/;"	f	class:PartBunch
get_gamma	src/PartBunch/PartBunch.hpp	/^    double get_gamma() const {$/;"	f	class:PartBunch
get_halo	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_halo() const {$/;"	f	class:PartBunch
get_halo	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_halo() const {$/;"	f	class:PartBunch
get_hr	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_hr() const {$/;"	f	class:PartBunch
get_hr	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_hr() const {$/;"	f	class:PartBunch
get_line	src/Utilities/SDDSParser/error_handler.hpp	/^        std::string get_line(Iterator err_pos) const$/;"	f	struct:SDDS::error_handler
get_matrix	src/Fields/Interpolation/MMatrix.h	/^gsl_matrix         inline* MMatrix<Tmplt>::get_matrix(const MMatrix<double>&    m)$/;"	f	class:interpolation::MMatrix
get_matrix	src/Fields/Interpolation/MMatrix.h	/^gsl_matrix_complex inline* MMatrix<Tmplt>::get_matrix(const MMatrix<m_complex>& m)$/;"	f	class:interpolation::MMatrix
get_maxExtent	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_maxExtent() const {$/;"	f	class:PartBunch
get_maxExtent	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_maxExtent() const {$/;"	f	class:PartBunch
get_max_extent	src/Structure/BoundaryGeometry.cpp	/^    Vector_t<double, 3> get_max_extent(std::vector<Vector_t<double, 3>>& coords) {$/;"	f	namespace:__anon57
get_meanKineticEnergy	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::get_meanKineticEnergy() const {$/;"	f	class:PartBunch
get_meanKineticEnergy	src/PartBunch/PartBunch.hpp	/^    double get_meanKineticEnergy() {$/;"	f	class:PartBunch
get_min_extent	src/Structure/BoundaryGeometry.cpp	/^    Vector_t<double, 3> get_min_extent(std::vector<Vector_t<double, 3>>& coords) {$/;"	f	namespace:__anon57
get_mvector	src/Fields/Interpolation/MMatrix.cpp	/^MVector<Tmplt> MMatrix<Tmplt>::get_mvector(size_t column) const$/;"	f	class:interpolation::MMatrix
get_norm_emit	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_norm_emit() const {$/;"	f	class:PartBunch
get_norm_emit	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_norm_emit() const {$/;"	f	class:PartBunch
get_normalizedEps_68Percentile	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_normalizedEps_68Percentile() const {$/;"	f	class:PartBunch
get_normalizedEps_68Percentile	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_normalizedEps_68Percentile() const {$/;"	f	class:PartBunch
get_normalizedEps_95Percentile	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_normalizedEps_95Percentile() const {$/;"	f	class:PartBunch
get_normalizedEps_95Percentile	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_normalizedEps_95Percentile() const {$/;"	f	class:PartBunch
get_normalizedEps_99Percentile	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_normalizedEps_99Percentile() const {$/;"	f	class:PartBunch
get_normalizedEps_99Percentile	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_normalizedEps_99Percentile() const {$/;"	f	class:PartBunch
get_normalizedEps_99_99Percentile	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_normalizedEps_99_99Percentile() const {$/;"	f	class:PartBunch
get_normalizedEps_99_99Percentile	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_normalizedEps_99_99Percentile() const {$/;"	f	class:PartBunch
get_origin	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_origin() const {$/;"	f	class:PartBunch
get_origin	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_origin() const {$/;"	f	class:PartBunch
get_plasmaParameter	src/PartBunch/PartBunch.hpp	/^    double get_plasmaParameter() const {$/;"	f	class:PartBunch
get_pmean	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_pmean() const {$/;"	f	class:PartBunch
get_pmean	src/Distribution/Distribution.h	/^inline ippl::Vector<double, 3> Distribution::get_pmean() const {$/;"	f	class:Distribution
get_pmean	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_pmean() const {$/;"	f	class:PartBunch
get_pmean_Distribution	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_pmean_Distribution() const {$/;"	f	class:PartBunch
get_pmean_Distribution	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_pmean_Distribution() const {$/;"	f	class:PartBunch
get_pos	src/Utilities/SDDSParser/error_handler.hpp	/^        Iterator get_pos(Iterator err_pos, int& line) const$/;"	f	struct:SDDS::error_handler
get_prms	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_prms() const {$/;"	f	class:PartBunch
get_prms	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_prms() const {$/;"	f	class:PartBunch
get_residual_fig	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^    def get_residual_fig(self):$/;"	m	class:PlotInterpolation
get_rmean	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_rmean() const {$/;"	f	class:PartBunch
get_rmean	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_rmean() const {$/;"	f	class:PartBunch
get_rmsDensity	src/PartBunch/PartBunch.hpp	/^    double get_rmsDensity() const {$/;"	f	class:PartBunch
get_rprms	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_rprms() const {$/;"	f	class:PartBunch
get_rprms	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_rprms() const {$/;"	f	class:PartBunch
get_rrms	src/Algorithms/.PartBunchBase.hpp	/^Vector_t<double, 3> PartBunch<T, Dim>::get_rrms() const {$/;"	f	class:PartBunch
get_rrms	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> get_rrms() const {$/;"	f	class:PartBunch
get_sPos	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::get_sPos() const {$/;"	f	class:PartBunch
get_sPos	src/PartBunch/PartBunch.hpp	/^    double get_sPos() const {$/;"	f	class:PartBunch
get_s_data	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^    def get_s_data(self):$/;"	m	class:PlotInterpolation
get_temperature	src/PartBunch/PartBunch.hpp	/^    double get_temperature() const {$/;"	f	class:PartBunch
get_title_suffix	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^    def get_title_suffix(self):$/;"	m	class:PlotInterpolation
get_value	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^std::vector<double> get_value(std::vector<double> x, int np) {$/;"	f	namespace:__anon4
get_vector	src/Fields/Interpolation/MVector.h	/^gsl_vector inline* MVector<Tmplt>::get_vector(const MVector<double>&    m)$/;"	f	class:interpolation::MVector
get_vector	src/Fields/Interpolation/MVector.h	/^gsl_vector_complex inline* MVector<Tmplt>::get_vector(const MVector<m_complex>& m)$/;"	f	class:interpolation::MVector
get_xmean	src/Distribution/Distribution.h	/^inline ippl::Vector<double, 3> Distribution::get_xmean() const {$/;"	f	class:Distribution
getdA	src/AbsBeamline/RFCavity.h	/^inline double RFCavity::getdA($/;"	f	class:RFCavity
getdA	src/AbsBeamline/TravelingWave.h	/^double TravelingWave::getdA($/;"	f	class:TravelingWave
getdB	src/AbsBeamline/RFCavity.h	/^inline double RFCavity::getdB($/;"	f	class:RFCavity
getdB	src/AbsBeamline/TravelingWave.h	/^double TravelingWave::getdB($/;"	f	class:TravelingWave
getdE	src/AbsBeamline/RFCavity.h	/^inline double RFCavity::getdE($/;"	f	class:RFCavity
getdE	src/AbsBeamline/TravelingWave.h	/^double TravelingWave::getdE($/;"	f	class:TravelingWave
getdE	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getdE() const {$/;"	f	class:PartBunch
getdE	src/PartBunch/PartBunch.hpp	/^    double getdE() const {$/;"	f	class:PartBunch
getdSFactors	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^std::vector<std::size_t> DifferentialOperatorTwo::getdSFactors($/;"	f	class:polynomial::DifferentialOperatorTwo
getdSfactors	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^std::vector<std::size_t> PolynomialSum::getdSfactors($/;"	f	class:polynomial::PolynomialSum
getdSfactors	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^    std::vector<std::size_t> RecursionRelationTwo::getdSfactors($/;"	f	class:polynomial::RecursionRelationTwo
getdSfactors	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    std::vector<std::size_t> TwoPolynomial::getdSfactors() const {$/;"	f	class:polynomial::TwoPolynomial
getdT	src/AbsBeamline/RFCavity.h	/^inline double RFCavity::getdT($/;"	f	class:RFCavity
getdT	src/AbsBeamline/TravelingWave.h	/^double TravelingWave::getdT($/;"	f	class:TravelingWave
getdT	src/Algorithms/.PartBunchBase.hpp	/^double PartBunch<T, Dim>::getdT() const {$/;"	f	class:PartBunch
getdT	src/Algorithms/StepSizeConfig.cpp	/^double StepSizeConfig::getdT() const {$/;"	f	class:StepSizeConfig
getdT	src/PartBunch/PartBunch.hpp	/^    double getdT() const {$/;"	f	class:PartBunch
gethr	src/Structure/BoundaryGeometry.h	/^    inline Vector_t<double, 3> gethr() {$/;"	f	class:BoundaryGeometry
getmaxcoords	src/Structure/BoundaryGeometry.h	/^    inline Vector_t<double, 3> getmaxcoords() {$/;"	f	class:BoundaryGeometry
getmincoords	src/Structure/BoundaryGeometry.h	/^    inline Vector_t<double, 3> getmincoords() {$/;"	f	class:BoundaryGeometry
getnr	src/Structure/BoundaryGeometry.h	/^    inline Vector_t<int, 3> getnr() {$/;"	f	class:BoundaryGeometry
ghostDestroy	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::ghostDestroy(size_t M, size_t I) {$/;"	f	class:PartBunch
glob	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^import glob$/;"	i
globHist_m	src/Structure/PeakFinder.h	/^    container_t globHist_m;$/;"	m	class:PeakFinder
globalBinHisto_m	src/PartBunch/Binning/AdaptBins.h	/^        d_histo_type globalBinHisto_m;         \/\/\/< Global histogram view (over ranks reduced local histograms).$/;"	m	class:ParticleBinning::AdaptBins
globalBoundingBox_m	src/Algorithms/OrbitThreader.h	/^    BoundingBox globalBoundingBox_m;$/;"	m	class:OrbitThreader
globalCartesianOffset	src/AbsBeamline/Offset.cpp	/^Offset Offset::globalCartesianOffset($/;"	f	class:Offset
globalCreate	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::globalCreate(size_t np) {$/;"	f	class:PartBunch
globalCylindricalOffset	src/AbsBeamline/Offset.cpp	/^Offset Offset::globalCylindricalOffset($/;"	f	class:Offset
globalEOL_m	src/Algorithms/ParallelTracker.h	/^    bool globalEOL_m;$/;"	m	class:ParallelTracker
globalInsideP0_m	src/.Solvers/ArbitraryDomain.h	/^    Vector_t<double, 3> globalInsideP0_m;$/;"	m	class:ArbitraryDomain
globalMeanR_m	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> globalMeanR_m;$/;"	m	class:PartBunch
globalToLocalQuaternion_m	src/PartBunch/PartBunch.hpp	/^    Quaternion_t globalToLocalQuaternion_m;$/;"	m	class:PartBunch
globalTrackStep_m	src/PartBunch/PartBunch.hpp	/^    long long globalTrackStep_m;$/;"	m	class:PartBunch
globalTrackStep_m	src/Structure/LossDataSink.h	/^    std::vector<h5_int64_t> globalTrackStep_m;$/;"	m	class:LossDataSink
gmsg	src/Main.cpp	/^Inform* gmsg;$/;"	v
gmsg	tests/Main.cpp	/^Inform* gmsg;$/;"	v
goOffline	src/AbsBeamline/Component.cpp	/^void Component::goOffline() {$/;"	f	class:Component
goOffline	src/AbsBeamline/Monitor.cpp	/^void Monitor::goOffline() {$/;"	f	class:Monitor
goOffline	src/AbsBeamline/PluginElement.cpp	/^void PluginElement::goOffline() {$/;"	f	class:PluginElement
goOffline	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::goOffline() {$/;"	f	class:RFCavity
goOffline	src/AbsBeamline/Solenoid.cpp	/^void Solenoid::goOffline() {$/;"	f	class:Solenoid
goOffline	src/AbsBeamline/TravelingWave.cpp	/^void TravelingWave::goOffline() {$/;"	f	class:TravelingWave
goOnline	src/AbsBeamline/Component.cpp	/^void Component::goOnline(const double&) {$/;"	f	class:Component
goOnline	src/AbsBeamline/Corrector.cpp	/^void Corrector::goOnline(const double&) {$/;"	f	class:Corrector
goOnline	src/AbsBeamline/Monitor.cpp	/^void Monitor::goOnline(const double&) {$/;"	f	class:Monitor
goOnline	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::goOnline(const double&) {$/;"	f	class:RFCavity
goOnline	src/AbsBeamline/Solenoid.cpp	/^void Solenoid::goOnline(const double&) {$/;"	f	class:Solenoid
goOnline	src/AbsBeamline/TravelingWave.cpp	/^void TravelingWave::goOnline(const double&) {$/;"	f	class:TravelingWave
gold	src/Physics/Material.cpp	/^    auto gold          = Material::addMaterial("Gold",$/;"	m	namespace:__anon18	file:
grammar	src/Utilities/MSLang/matheval.hpp	/^            grammar() : grammar::base_type(expression)$/;"	f	struct:matheval::detail::grammar
grammar	src/Utilities/MSLang/matheval.hpp	/^        struct grammar$/;"	s	namespace:matheval::detail
graphite	src/Physics/Material.cpp	/^    auto graphite      = Material::addMaterial("Graphite",$/;"	m	namespace:__anon18	file:
graphiter6710	src/Physics/Material.cpp	/^    auto graphiter6710 = Material::addMaterial("GraphiteR6710",$/;"	m	namespace:__anon18	file:
greater	src/Expressions/Expressions.cpp	/^    static const TFunction2<bool, double> greater = {">", 3, Gt};$/;"	m	namespace:Expressions	file:
greaterEqual	src/Expressions/Expressions.cpp	/^    static const TFunction2<bool, double> greaterEqual = {">=", 3, Ge};$/;"	m	namespace:Expressions	file:
greensFunction	src/.Solvers/FFTPoissonSolver.cpp	/^void FFTPoissonSolver::greensFunction() {$/;"	f	class:FFTPoissonSolver
greentr_m	src/.Solvers/FFTPoissonSolver.h	/^    Field_t greentr_m;$/;"	m	class:FFTPoissonSolver
grid	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^    ThreeDGrid* grid;$/;"	m	class:PPSolveFactoryTestFixture	file:
grid2D	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^    NDGrid* grid2D;$/;"	m	class:PPSolveFactoryTestFixture	file:
grid2_m	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^    interpolation::NDGrid* grid2_m;$/;"	m	class:ndgridtest::NDGridTest	file:
grid_m	src/BasicActions/DumpEMFields.h	/^    interpolation::NDGrid* grid_m;$/;"	m	class:DumpEMFields
grid_m	src/BasicActions/DumpFields.h	/^    interpolation::ThreeDGrid* grid_m = nullptr;$/;"	m	class:DumpFields
grid_m	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^    interpolation::NDGrid* grid_m;$/;"	m	class:ndgridtest::NDGridTest	file:
grid_points_	src/Fields/Interpolation/PolynomialPatch.h	/^    Mesh* grid_points_;$/;"	m	class:interpolation::PolynomialPatch
grnIField_m	src/.Solvers/FFTPoissonSolver.h	/^    IField_t grnIField_m[3];$/;"	m	class:FFTPoissonSolver
grntr_m	src/.Solvers/FFTPoissonSolver.h	/^    CxField_t grntr_m;$/;"	m	class:FFTPoissonSolver
guessCavityPhase	src/Algorithms/CavityAutophaser.cpp	/^double CavityAutophaser::guessCavityPhase(double t) {$/;"	f	class:CavityAutophaser
h	src/BeamlineGeometry/PlanarArcGeometry.h	/^    double h;$/;"	m	class:PlanarArcGeometry
h5FileName_m	src/Structure/BoundaryGeometry.h	/^    std::string h5FileName_m;  \/\/ H5hut filename$/;"	m	class:BoundaryGeometry
h5Writer_m	src/Structure/DataSink.h	/^    h5Writer_t h5Writer_m;$/;"	m	class:DataSink
h5Writer_t	src/Structure/DataSink.h	/^    typedef std::unique_ptr<H5Writer> h5Writer_t;$/;"	t	class:DataSink
h5hut_mode_m	src/Structure/LossDataSink.h	/^    bool h5hut_mode_m;$/;"	m	class:LossDataSink
h5wrapper_m	src/Structure/H5Writer.h	/^    H5PartWrapper* h5wrapper_m;$/;"	m	class:H5Writer
hBin_m	src/Algorithms/PartBins.h	/^    double hBin_m;$/;"	m	class:PartBins
hN	src/AbsBeamline/EndFieldModel/Enge.cpp	/^double Enge::hN(double x, int n) const {$/;"	f	class:endfieldmodel::Enge
h_bar	src/Physics/Physics.h	/^    constexpr double h_bar      = 6.582119569e-25;$/;"	m	namespace:Physics
h_inv_	src/Fields/Interpolation/SolveFactory.h	/^    MMatrix<double> h_inv_;$/;"	m	class:interpolation::SolveFactory
h_m	src/Algorithms/PartBins.h	/^    std::unique_ptr<gsl_histogram> h_m;$/;"	m	class:PartBins
halfLength_s	src/AbsBeamline/Monitor.cpp	/^const double Monitor::halfLength_s = 0.005;$/;"	m	class:Monitor	file:
halfLength_s	src/AbsBeamline/Monitor.h	/^    static const double halfLength_s;$/;"	m	class:Monitor
halfWidth_m	src/AbsBeamline/VerticalFFAMagnet.h	/^    double halfWidth_m  = 0.;  \/\/ extent in either +x or -x$/;"	m	class:VerticalFFAMagnet
half_angle	src/BeamlineGeometry/RBendGeometry.h	/^    double half_angle;$/;"	m	class:RBendGeometry
haloShift	src/Utilities/Options.cpp	/^    double haloShift = 0.0;$/;"	m	namespace:Options	file:
halo_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> halo_m;$/;"	m	class:DistributionMoments
handleBeamline	src/Tables/RangeSelector.cpp	/^void RangeSelector::handleBeamline(const FlaggedElmPtr &fep) {$/;"	f	class:RangeSelector
handleElement	src/Tables/RangeSelector.cpp	/^void RangeSelector::handleElement(const FlaggedElmPtr &fep) {$/;"	f	class:RangeSelector
handleElement	src/Tables/Selector.cpp	/^void Selector::handleElement(const FlaggedElmPtr &fep) {$/;"	f	class:Selector
handleGSLErrors	src/GSLErrorHandling.h	/^inline void handleGSLErrors(const char *reason,$/;"	f
handlePsDumpFrame	src/BasicActions/Option.cpp	/^void Option::handlePsDumpFrame(const std::string& dumpFrame) {$/;"	f	class:Option
handler	src/AbstractObjects/Attribute.h	/^    std::shared_ptr<AttributeHandler> handler;$/;"	m	class:Attribute
hardCodedOutput	tests/ippl_src/Field/BCond.cpp	/^void hardCodedOutput(std::string filename)$/;"	f	namespace:__anon16
hardCodedOutput	tests/ippl_src/Field/FieldDebug.cpp	/^    void hardCodedOutput(std::string filename)$/;"	f	namespace:__anon13
hardCodedOutput	tests/ippl_src/Meshes/CartesianCentering.cpp	/^void hardCodedOutput(std::string filename)$/;"	f	namespace:__anon9
hardCodedOutput	tests/ippl_src/Particle/ParticleDebug.cpp	/^    void hardCodedOutput(std::string filename)$/;"	f	namespace:__anon7
hasAttribute	src/AbsBeamline/AttributeSet.cpp	/^bool AttributeSet::hasAttribute(const std::string &aKey) const {$/;"	f	class:AttributeSet
hasAttribute	src/AbsBeamline/ElementBase.cpp	/^bool ElementBase::hasAttribute(const std::string& aKey) const {$/;"	f	class:ElementBase
hasBinning	src/Algorithms/.PartBunchBase.hpp	/^bool PartBunch<T, Dim>::hasBinning() const {$/;"	f	class:PartBunch
hasBinning	src/PartBunch/PartBunch.hpp	/^    bool hasBinning() {$/;"	f	class:PartBunch
hasBoundaryGeometry	src/AbsBeamline/ElementBase.h	/^inline bool ElementBase::hasBoundaryGeometry() const {$/;"	f	class:ElementBase
hasBunchAllocated	src/AbstractObjects/OpalData.cpp	/^bool OpalData::hasBunchAllocated() {$/;"	f	class:OpalData
hasBunchAllocated_m	src/AbstractObjects/OpalData.cpp	/^    bool hasBunchAllocated_m;$/;"	m	struct:OpalDataImpl	file:
hasColumns	src/Structure/SDDSColumnSet.h	/^bool SDDSColumnSet::hasColumns() const {$/;"	f	class:SDDSColumnSet
hasColumns	src/Structure/SDDSWriter.h	/^inline bool SDDSWriter::hasColumns() const {$/;"	f	class:SDDSWriter
hasDataSinkAllocated	src/AbstractObjects/OpalData.cpp	/^bool OpalData::hasDataSinkAllocated() {$/;"	f	class:OpalData
hasDataSinkAllocated_m	src/AbstractObjects/OpalData.cpp	/^    bool hasDataSinkAllocated_m;$/;"	m	struct:OpalDataImpl	file:
hasEndOfLineReached	src/Algorithms/ParallelTracker.cpp	/^bool ParallelTracker::hasEndOfLineReached(const BoundingBox& globalBoundingBox) {$/;"	f	class:ParallelTracker
hasFieldSolver	src/Algorithms/.PartBunchBase.hpp	/^bool PartBunch<T, Dim>::hasFieldSolver() {$/;"	f	class:PartBunch
hasFieldSolver	src/PartBunch/PartBunch.hpp	/^    bool hasFieldSolver() {$/;"	f	class:PartBunch
hasGeometryChanged	src/.Solvers/IrregularDomain.h	/^    bool hasGeometryChanged() const {$/;"	f	class:IrregularDomain
hasGeometryChanged_m	src/.Solvers/IrregularDomain.h	/^    bool hasGeometryChanged_m;$/;"	m	class:IrregularDomain
hasGlobalGeometry	src/AbstractObjects/OpalData.cpp	/^bool OpalData::hasGlobalGeometry() {$/;"	f	class:OpalData
hasNoParticlesToDump	src/Structure/LossDataSink.cpp	/^bool LossDataSink::hasNoParticlesToDump() const {$/;"	f	class:LossDataSink
hasParticleMatterInteraction	src/AbsBeamline/ElementBase.h	/^inline bool ElementBase::hasParticleMatterInteraction() const {$/;"	f	class:ElementBase
hasPriorRun_m	src/AbstractObjects/OpalData.cpp	/^    bool hasPriorRun_m;$/;"	m	struct:OpalDataImpl	file:
hasPriorTrack	src/AbstractObjects/OpalData.cpp	/^bool OpalData::hasPriorTrack() {$/;"	f	class:OpalData
hasRestartFile	src/AbstractObjects/OpalData.cpp	/^bool OpalData::hasRestartFile() {$/;"	f	class:OpalData
hasRestartFile_m	src/AbstractObjects/OpalData.cpp	/^    bool hasRestartFile_m;$/;"	m	struct:OpalDataImpl	file:
hasTurnInformations	src/Structure/LossDataSink.cpp	/^bool LossDataSink::hasTurnInformations() const {$/;"	f	class:LossDataSink
hasValidSolver	src/Structure/FieldSolverCmd.cpp	/^bool FieldSolverCmd::hasValidSolver() {$/;"	f	class:FieldSolverCmd
hasWake	src/AbsBeamline/ElementBase.h	/^inline bool ElementBase::hasWake() const {$/;"	f	class:ElementBase
haveInsidePoint_m	src/Structure/BoundaryGeometry.h	/^    bool haveInsidePoint_m;$/;"	m	class:BoundaryGeometry
header	src/Structure/MemoryProfiler.cpp	/^void MemoryProfiler::header() {$/;"	f	class:MemoryProfiler
height_m	src/Utilities/MSLang/BoundingBox2D.h	/^        double height_m;$/;"	m	struct:mslang::BoundingBox2D
height_m	src/Utilities/MSLang/Ellipse.h	/^        double height_m;$/;"	m	struct:mslang::Ellipse
height_m	src/Utilities/MSLang/Rectangle.h	/^        double height_m;$/;"	m	struct:mslang::Rectangle
height_m	src/Utilities/PortableBitmapReader.h	/^    unsigned int height_m;$/;"	m	class:PortableBitmapReader
height_m	src/Utilities/PortableGraymapReader.h	/^    unsigned int height_m;$/;"	m	class:PortableGraymapReader
highestXorder_m	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.h	/^    std::size_t highestXorder_m;$/;"	m	class:polynomial::RecursionRelation
highestXorder_m	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^    std::size_t highestXorder_m;$/;"	m	class:polynomial::RecursionRelationTwo
hist2d_m	src/Distribution/LaserProfile.h	/^    gsl_histogram2d* hist2d_m;$/;"	m	class:LaserProfile
hist_m	src/Structure/PeakFinder.h	/^    std::string hist_m;$/;"	m	class:PeakFinder
histogram_m	src/PartBunch/Binning/BinHisto.h	/^        view_type       histogram_m;      \/\/\/ \\brief View storing the particle counts in each bin.$/;"	m	class:ParticleBinning::Histogram
holds_alternative	src/Utilities/MSLang/matheval.hpp	/^        bool holds_alternative(boost::variant<Ts...> const &v) {$/;"	f	namespace:matheval::detail
holds_alternative_impl	src/Utilities/MSLang/matheval.hpp	/^        template <typename T> struct holds_alternative_impl {$/;"	s	namespace:matheval::detail
horizApert_m	src/AbsBeamline/MultipoleT.h	/^    double horizApert_m;$/;"	m	class:MultipoleT
horizontalApert_m	src/AbsBeamline/MultipoleTBase.h	/^    double horizontalApert_m;$/;"	m	class:MultipoleTBase
hos_m	src/Structure/PeakFinder.h	/^    std::ofstream hos_m;$/;"	m	class:PeakFinder
howMany	src/Algorithms/ParallelTracker.cpp	/^    unsigned int howMany;$/;"	m	struct:DistributionInfo	file:
hr_m	src/.Solvers/FFTPoissonSolver.h	/^    Vector_t<double, 3> hr_m;$/;"	m	class:FFTPoissonSolver
hr_m	src/.Solvers/IrregularDomain.h	/^    Vector_t<double, 3> hr_m;$/;"	m	class:IrregularDomain
hr_m	src/Fields/FM2DDynamic.h	/^    double hr_m;                   \/**< length between points in grid, r-direction, m*\/$/;"	m	class:FM2DDynamic
hr_m	src/Fields/FM2DElectroStatic.h	/^    double hr_m;                   \/**< length between points in grid, r-direction, m*\/$/;"	m	class:FM2DElectroStatic
hr_m	src/Fields/FM2DMagnetoStatic.h	/^    double hr_m;                   \/**< length between points in grid, r-direction, m*\/$/;"	m	class:FM2DMagnetoStatic
hr_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    Vector_t<double, Dim> hr_m;$/;"	m	class:AlpineManager
hr_m	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    Vector_t<double, Dim> hr_m;$/;"	m	class:FieldContainer
hr_m	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    Vector_t hr_m;$/;"	m	class:ChargedParticles	file:
hr_m	src/PartBunch/FieldContainer.hpp	/^    Vector_t<double, Dim> hr_m;$/;"	m	class:FieldContainer
hr_m	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> hr_m;$/;"	m	class:PartBunch
hx_m	src/Fields/FM3DDynamic.h	/^    double hx_m;                   \/**< length between points in grid, x-direction *\/$/;"	m	class:FM3DDynamic
hx_m	src/Fields/FM3DH5BlockBase.h	/^    double hx_m;            \/**< length between points in grid, x-direction *\/$/;"	m	class:FM3DH5BlockBase
hx_m	src/Fields/FM3DMagnetoStatic.h	/^    double hx_m;                   \/**< length between points in grid, x-direction *\/$/;"	m	class:FM3DMagnetoStatic
hx_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    double hx_m;                   \/**< length between points in grid, x-direction, m*\/$/;"	m	class:FM3DMagnetoStaticExtended
hy_m	src/Fields/FM3DDynamic.h	/^    double hy_m;                   \/**< length between points in grid, y-direction *\/$/;"	m	class:FM3DDynamic
hy_m	src/Fields/FM3DH5BlockBase.h	/^    double hy_m;            \/**< length between points in grid, y-direction *\/$/;"	m	class:FM3DH5BlockBase
hy_m	src/Fields/FM3DMagnetoStatic.h	/^    double hy_m;                   \/**< length between points in grid, y-direction *\/$/;"	m	class:FM3DMagnetoStatic
hy_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    double hy_m;                   \/**< length between points in grid, y-direction, m*\/$/;"	m	class:FM3DMagnetoStaticExtended
hz_m	src/Fields/Astra1D_fast.h	/^    double hz_m;$/;"	m	class:Astra1D_fast
hz_m	src/Fields/FM2DDynamic.h	/^    double hz_m;                   \/**< length between points in grid, z-direction, m*\/$/;"	m	class:FM2DDynamic
hz_m	src/Fields/FM2DElectroStatic.h	/^    double hz_m;                   \/**< length between points in grid, z-direction, m*\/$/;"	m	class:FM2DElectroStatic
hz_m	src/Fields/FM2DMagnetoStatic.h	/^    double hz_m;                   \/**< length between points in grid, z-direction, m*\/$/;"	m	class:FM2DMagnetoStatic
hz_m	src/Fields/FM3DDynamic.h	/^    double hz_m;                   \/**< length between points in grid, z-direction *\/$/;"	m	class:FM3DDynamic
hz_m	src/Fields/FM3DH5BlockBase.h	/^    double hz_m;            \/**< length between points in grid, z-direction *\/$/;"	m	class:FM3DH5BlockBase
hz_m	src/Fields/FM3DMagnetoStatic.h	/^    double hz_m;                   \/**< length between points in grid, z-direction *\/$/;"	m	class:FM3DMagnetoStatic
hz_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    double hz_m;                   \/**< length between points in grid, z-direction, m*\/$/;"	m	class:FM3DMagnetoStaticExtended
i	src/Fields/FM3DH5BlockBase.h	/^        unsigned int i;$/;"	m	struct:FM3DH5BlockBase::IndexTriplet
i	src/Fields/FM3DMagnetoStatic.h	/^        unsigned int i;$/;"	m	struct:FM3DMagnetoStatic::IndexTriplet
i	src/Fields/FM3DMagnetoStaticExtended.h	/^        unsigned int i;$/;"	m	struct:FM3DMagnetoStaticExtended::IndexTriplet
i64transform	src/Structure/LossDataSink.cpp	/^    void i64transform($/;"	f	namespace:__anon59
i_m	tests/classic_src/AbsBeamline/RingTest.cpp	/^    int i_m;$/;"	m	class:OffsetFactory	file:
i_value	src/OpalParser/Token.h	/^    int      i_value;$/;"	m	class:Token
id_m	src/AbstractObjects/OpalParticle.h	/^    int64_t id_m;$/;"	m	class:OpalParticle
id_m	src/Algorithms/OpalParticle.h	/^    int64_t id_m;$/;"	m	class:OpalParticle
idealized	src/Utilities/Options.cpp	/^    bool idealized = false;$/;"	m	namespace:Options	file:
identity	src/BeamlineGeometry/Euclid3D.cpp	/^Euclid3D Euclid3D::identity() {$/;"	f	class:Euclid3D
ids	src/Structure/BoundaryGeometry.h	/^            ids;  \/\/ intersecting triangles$/;"	m	struct:BoundaryGeometry::__anon60
idxMap_m	src/.Solvers/IrregularDomain.h	/^    std::map<int, int> idxMap_m;$/;"	m	class:IrregularDomain
ignoreCavities	src/BeamlineCore/RFCavityRep.cpp	/^bool RFCavityRep::ignoreCavities = false;$/;"	m	class:RFCavityRep	file:
ignoreCavities	src/BeamlineCore/RFCavityRep.h	/^    static bool ignoreCavities;$/;"	m	class:RFCavityRep
ignoreCavities	src/BeamlineCore/TravelingWaveRep.cpp	/^bool TravelingWaveRep::ignoreCavities = false;$/;"	m	class:TravelingWaveRep	file:
ignoreCavities	src/BeamlineCore/TravelingWaveRep.h	/^    static bool ignoreCavities;$/;"	m	class:TravelingWaveRep
im	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<double>    im(MMatrix<m_complex> mc)$/;"	f	namespace:interpolation
im	src/Fields/Interpolation/MVector.cpp	/^MVector<double>    im     (MVector<m_complex> c)$/;"	f	namespace:interpolation
im	src/Fields/Interpolation/MVector.h	/^inline const double& im(const m_complex& c) {return c.dat[1];}$/;"	f	namespace:interpolation
im	src/Fields/Interpolation/MVector.h	/^inline double&       im(m_complex& c)       {return c.dat[1];}$/;"	f	namespace:interpolation
imag	src/Algorithms/Quaternion.hpp	/^inline ippl::Vector<double, 3> Quaternion::imag() const {$/;"	f	class:Quaternion
imap_m	src/Algorithms/OrbitThreader.h	/^    IndexMap imap_m;$/;"	m	class:OrbitThreader
imgrho2tr_m	src/.Solvers/FFTPoissonSolver.h	/^    CxField_t imgrho2tr_m;$/;"	m	class:FFTPoissonSolver
inH5Mode	src/Structure/LossDataSink.h	/^    bool inH5Mode() {$/;"	f	class:LossDataSink
inRestartRun	src/AbstractObjects/OpalData.cpp	/^bool OpalData::inRestartRun() {$/;"	f	class:OpalData
in_evaluation	src/Expressions/ADeferred.h	/^        mutable bool in_evaluation;$/;"	m	class:Expressions::ADeferred
in_evaluation	src/Expressions/SDeferred.h	/^        mutable bool in_evaluation;$/;"	m	class:Expressions::SDeferred
incMaxTrackSteps	src/AbstractObjects/OpalData.cpp	/^void OpalData::incMaxTrackSteps(unsigned long long s) {$/;"	f	class:OpalData
incTrackSteps	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::incTrackSteps() {$/;"	f	class:PartBunch
incTrackSteps	src/PartBunch/PartBunch.hpp	/^    void incTrackSteps() {$/;"	f	class:PartBunch
include	src/Utilities/SDDSParser/include.hpp	/^    struct include$/;"	s	namespace:SDDS
includeList	src/Utilities/SDDSParser/include.hpp	/^    struct includeList: std::list<include> {};$/;"	s	namespace:SDDS
include_filename	src/Utilities/SDDSParser/include.hpp	/^                include_filename;$/;"	m	struct:SDDS::parser::include_parser
include_m	src/Utilities/SDDSParser/file.hpp	/^        include_parser<Iterator> include_m;$/;"	m	struct:SDDS::parser::file_parser
include_parser	src/Utilities/SDDSParser/include.cpp	/^template struct SDDS::parser::include_parser<iterator_t>;$/;"	m	class:SDDS::parser	typeref:struct:SDDS::parser::	file:
include_parser	src/Utilities/SDDSParser/include.hpp	/^    struct include_parser: qi::grammar<Iterator, include(), skipper<Iterator> >$/;"	s	namespace:SDDS::parser
include_parser	src/Utilities/SDDSParser/include_def.hpp	/^    include_parser<Iterator>::include_parser(error_handler<Iterator> & _error_handler):$/;"	f	class:SDDS::parser::include_parser
increment	src/AbstractObjects/Object.cpp	/^int Object::increment() {$/;"	f	class:Object
incrementT	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::incrementT() {$/;"	f	class:PartBunch
incrementT	src/PartBunch/PartBunch.hpp	/^    void incrementT() {$/;"	f	class:PartBunch
indent_m	src/Structure/SDDSWriter.h	/^    std::string indent_m;$/;"	m	class:SDDSWriter
indexAccess	src/.Solvers/RectangularDomain.h	/^    int indexAccess(int x, int y, int z) const {$/;"	f	class:RectangularDomain
index_m	src/Algorithms/.PartBunchBase.h	/^        unsigned int index_m;$/;"	m	class:PartBunch::ConstIterator
info	src/Utilities/Options.cpp	/^    bool info     = true;$/;"	m	namespace:Options	file:
infoLevel	src/Utilities/Options.cpp	/^    int infoLevel = 1;$/;"	m	namespace:Options	file:
infoLevel_m	src/Structure/IpplInfoWrapper.h	/^    unsigned int infoLevel_m;$/;"	m	class:IpplInfoWrapper
info_m	src/Structure/IpplInfoWrapper.h	/^    unsigned int info_m;$/;"	m	class:IpplInfoWrapper
info_m	src/Structure/SDDSWriter.h	/^    data_t info_m;$/;"	m	class:SDDSWriter
ingerateTrapezoidal	src/Distribution/FlatTop.hpp	/^    double ingerateTrapezoidal(double x1, double x2, double y1, double y2){$/;"	f	class:FlatTop
init	src/PartBunch/Binning/BinHisto.h	/^        void init() { \/\/ const value_type constBinWidth$/;"	f	class:ParticleBinning::Histogram
init	src/Structure/DataSink.cpp	/^void DataSink::init(bool restart, H5PartWrapper* h5wrapper) {$/;"	f	class:DataSink
init	src/Utilities/RegularExpression.cpp	/^void RegularExpression::init() {$/;"	f	class:RegularExpression
init55	src/Utilities/ClassicRandom.cpp	/^void Random::init55(int seed) {$/;"	f	class:Random
initCGSolver	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    void initCGSolver() {$/;"	f	class:FieldSolver
initCGSolver	src/PartBunch/FieldSolver.hpp	/^    void initCGSolver() { }$/;"	f	class:FieldSolver
initConstBinWidths	src/PartBunch/Binning/BinHisto.h	/^        void initConstBinWidths(const value_type constBinWidth) {$/;"	f	class:ParticleBinning::Histogram
initDataSink	src/Track/TrackRun.cpp	/^void TrackRun::initDataSink() {$/;"	f	class:TrackRun
initFFTSolver	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    void initFFTSolver() {$/;"	f	class:FieldSolver
initFFTSolver	src/PartBunch/FieldSolver.hpp	/^    void initFFTSolver() {$/;"	f	class:FieldSolver
initFields	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    void initFields() {$/;"	f	class:ChargedParticles
initGlobalHistogram	src/PartBunch/Binning/AdaptBins.hpp	/^    void AdaptBins<BunchType, BinningSelector>::initGlobalHistogram() {$/;"	f	class:ParticleBinning::AdaptBins
initHistogram	src/PartBunch/Binning/AdaptBins.h	/^        void initHistogram(HistoReductionMode modePreference = HistoReductionMode::Standard) {$/;"	f	class:ParticleBinning::AdaptBins
initLimits	src/PartBunch/Binning/AdaptBins.hpp	/^    void AdaptBins<BunchType, BinningSelector>::initLimits() {$/;"	f	class:ParticleBinning::AdaptBins
initLocalHisto	src/PartBunch/Binning/AdaptBins.hpp	/^    void AdaptBins<BunchType, BinningSelector>::initLocalHisto(HistoReductionMode modePreference) {$/;"	f	class:ParticleBinning::AdaptBins
initNullSolver	src/PartBunch/FieldSolver.hpp	/^    void initNullSolver() { }$/;"	f	class:FieldSolver
initOpalFilter	src/Utilities/OpalFilter.cpp	/^void OpalFilter::initOpalFilter() {$/;"	f	class:OpalFilter
initOpenSolver	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    void initOpenSolver() {$/;"	f	class:FieldSolver
initOpenSolver	src/PartBunch/FieldSolver.cpp	/^void FieldSolver<double,3>::initOpenSolver() {$/;"	f	class:FieldSolver
initP3MSolver	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    void initP3MSolver() {$/;"	f	class:FieldSolver
initP3MSolver	src/PartBunch/FieldSolver.hpp	/^    void initP3MSolver() { }$/;"	f	class:FieldSolver
initPositions	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    void initPositions(FieldLayout_t& fl, Vector_t& hr, unsigned int nloc, int tag = 2) {$/;"	f	class:ChargedParticles
initPostSum	src/PartBunch/Binning/BinHisto.h	/^        void initPostSum() {$/;"	f	class:ParticleBinning::Histogram
initScalarCell	tests/ippl_src/Field/Cell.cpp	/^    void initScalarCell(Field<double,2U,UniformCartesian<2U>,Cell>& C1) {$/;"	f	namespace:__anon11
initScalarCell	tests/ippl_src/Field/Cell.cpp	/^    void initScalarCell(Field<double,3U,UniformCartesian<3U>,Cell>& C1) {$/;"	f	namespace:__anon11
initScalarVert	tests/ippl_src/Field/Cell.cpp	/^    void initScalarVert(Field<double,3U,UniformCartesian<3U>,Vert>& V1) {$/;"	f	namespace:__anon11
initSolver	src/PartBunch/FieldSolver.cpp	/^void FieldSolver<double,3>::initSolver() {$/;"	f	class:FieldSolver
initSolverWithParams	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    void initSolverWithParams(const ippl::ParameterList& sp) {$/;"	f	class:FieldSolver
initSolverWithParams	src/PartBunch/FieldSolver.hpp	/^    void initSolverWithParams(const ippl::ParameterList& sp) {$/;"	f	class:FieldSolver
initTenzorCell	tests/ippl_src/Field/Cell.cpp	/^    initTenzorCell(Field<Tenzor<double,2U>,2U,UniformCartesian<2U>,Cell>& C1) {$/;"	f	namespace:__anon11
initVectorCell	tests/ippl_src/Field/Cell.cpp	/^    initVectorCell(Field<Vektor<double,2U>,2U,UniformCartesian<2U>,Cell>& C1) {$/;"	f	namespace:__anon11
initVectorCell	tests/ippl_src/Field/Cell.cpp	/^    initVectorCell(Field<Vektor<double,3U>,3U,UniformCartesian<3U>,Cell>& C1) {$/;"	f	namespace:__anon11
initVectorVert	tests/ippl_src/Field/Cell.cpp	/^    void initVectorVert(Field<Vektor<double,3U>,3U,UniformCartesian<3U>,Vert>& V1) {$/;"	f	namespace:__anon11
initialP_m	src/Algorithms/CavityAutophaser.h	/^    Vector_t<double, 3> initialP_m;$/;"	m	class:CavityAutophaser
initialR_m	src/Algorithms/CavityAutophaser.h	/^    Vector_t<double, 3> initialR_m;$/;"	m	class:CavityAutophaser
initialise	src/AbsBeamline/Corrector.cpp	/^void Corrector::initialise(PartBunch_t* bunch, double& startField, double& endField) {$/;"	f	class:Corrector
initialise	src/AbsBeamline/Drift.cpp	/^void Drift::initialise(PartBunch_t *bunch, double &startField, double &endField) {$/;"	f	class:Drift
initialise	src/AbsBeamline/Marker.cpp	/^void Marker::initialise(PartBunch_t *bunch, double &\/*startField*\/, double &\/*endField*\/) {$/;"	f	class:Marker
initialise	src/AbsBeamline/Monitor.cpp	/^void Monitor::initialise(PartBunch_t* bunch, double& startField, double& endField) {$/;"	f	class:Monitor
initialise	src/AbsBeamline/Multipole.cpp	/^void Multipole::initialise(PartBunch_t* bunch, double& startField, double& endField) {$/;"	f	class:Multipole
initialise	src/AbsBeamline/MultipoleT.cpp	/^void MultipoleT::initialise() {$/;"	f	class:MultipoleT
initialise	src/AbsBeamline/MultipoleT.cpp	/^void MultipoleT::initialise(PartBunch_t* bunch, double& \/*startField*\/, double& \/*endField*\/) {$/;"	f	class:MultipoleT
initialise	src/AbsBeamline/MultipoleTBase.h	/^inline void MultipoleTBase::initialise($/;"	f	class:MultipoleTBase
initialise	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    void MultipoleTCurvedConstRadius::initialise(PartBunch_t* bunch,$/;"	f	class:MultipoleTCurvedConstRadius
initialise	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    void MultipoleTCurvedVarRadius::initialise(PartBunch_t* bunch,$/;"	f	class:MultipoleTCurvedVarRadius
initialise	src/AbsBeamline/MultipoleTStraight.h	/^    void MultipoleTStraight::initialise(PartBunch_t* bunch,$/;"	f	class:MultipoleTStraight
initialise	src/AbsBeamline/Offset.cpp	/^void Offset::initialise(PartBunch_t* bunch, double& \/*startField*\/, double& \/*endField*\/) {$/;"	f	class:Offset
initialise	src/AbsBeamline/PluginElement.cpp	/^void PluginElement::initialise(PartBunch_t* bunch) {$/;"	f	class:PluginElement
initialise	src/AbsBeamline/PluginElement.cpp	/^void PluginElement::initialise(PartBunch_t* bunch, double&, double&) {$/;"	f	class:PluginElement
initialise	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::initialise($/;"	f	class:RFCavity
initialise	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::initialise(PartBunch_t* bunch, double& startField, double& endField) {$/;"	f	class:RFCavity
initialise	src/AbsBeamline/Ring.cpp	/^void Ring::initialise(PartBunch_t* bunch) {$/;"	f	class:Ring
initialise	src/AbsBeamline/Ring.cpp	/^void Ring::initialise(PartBunch_t* bunch, double& \/*startField*\/, double& \/*endField*\/) {$/;"	f	class:Ring
initialise	src/AbsBeamline/ScalingFFAMagnet.cpp	/^void ScalingFFAMagnet::initialise($/;"	f	class:ScalingFFAMagnet
initialise	src/AbsBeamline/ScalingFFAMagnet.cpp	/^void ScalingFFAMagnet::initialise() {$/;"	f	class:ScalingFFAMagnet
initialise	src/AbsBeamline/Solenoid.cpp	/^void Solenoid::initialise(PartBunch_t* bunch, double& startField, double& endField) {$/;"	f	class:Solenoid
initialise	src/AbsBeamline/TravelingWave.cpp	/^void TravelingWave::initialise(PartBunch_t* bunch, double& startField, double& endField) {$/;"	f	class:TravelingWave
initialise	src/AbsBeamline/VerticalFFAMagnet.cpp	/^void VerticalFFAMagnet::initialise() {$/;"	f	class:VerticalFFAMagnet
initialise	src/AbsBeamline/VerticalFFAMagnet.cpp	/^void VerticalFFAMagnet::initialise(PartBunch_t *bunch, double &\/*startField*\/, double &\/*endField*\/) {$/;"	f	class:VerticalFFAMagnet
initialise	src/Steppers/BorisPusher.h	/^KOKKOS_INLINE_FUNCTION void BorisPusher::initialise(const PartData* ref) {$/;"	f	class:BorisPusher
initialise	tests/opal_src/Utilities/MockComponent.h	/^    void initialise(PartBunchBase<double, 3>*, double&, double&) {}$/;"	f	class:MockComponent
initialise	tests/opal_src/Utilities/MockComponent.h	/^    void initialise(PartBunchBase<double, 3>*, double&, double&) {}$/;"	f	class:MockComponent2
initialize	src/AbstractObjects/PlaceRep.cpp	/^void PlaceRep::initialize() {$/;"	f	class:PlaceRep
initialize	src/AbstractObjects/RangeRep.cpp	/^void RangeRep::initialize() {$/;"	f	class:RangeRep
initialize	src/Algorithms/.PartBunch.cpp	/^void PartBunch::initialize(FieldLayout_t *fLayout) {$/;"	f	class:PartBunch
initialize	src/Structure/BoundaryGeometry.cpp	/^void BoundaryGeometry::initialize() {$/;"	f	class:BoundaryGeometry
initializeFields	src/.Solvers/FFTPoissonSolver.cpp	/^void FFTPoissonSolver::initializeFields() {$/;"	f	class:FFTPoissonSolver
initializeFields	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    void initializeFields(std::string stype_m = "") {$/;"	f	class:FieldContainer
initializeFields	src/PartBunch/FieldContainer.hpp	/^    void initializeFields(std::string stype_m = "") {$/;"	f	class:FieldContainer
initializeORB	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        void initializeORB(ippl::FieldLayout<Dim>* fl, ippl::UniformCartesian<T, Dim>* mesh) {$/;"	f	class:LoadBalancer
initializeORB	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    void initializeORB(FieldLayout_t& fl, Mesh_t& mesh) { orb.initialize(fl, mesh, EFDMag_m); }$/;"	f	class:ChargedParticles
initializeORB	src/PartBunch/LoadBalancer.hpp	/^    void initializeORB(ippl::FieldLayout<Dim>* fl, ippl::UniformCartesian<T, Dim>* mesh) {$/;"	f	class:LoadBalancer
initializeParticles	src/PartBunch/Binning/test/alpine/BinningLandauDampingManager.h	/^    void initializeParticles(){$/;"	f	class:LandauDampingManager
inputArguments_m	src/Utilities/MSLang/ArgumentExtractor.h	/^        std::string inputArguments_m;$/;"	m	struct:mslang::ArgumentExtractor
inputFileName_m	src/Structure/IpplInfoWrapper.h	/^    unsigned int inputFileName_m;$/;"	m	class:IpplInfoWrapper
inputFn_m	src/AbstractObjects/OpalData.cpp	/^    std::string inputFn_m;$/;"	m	struct:OpalDataImpl	file:
inputStack	src/OpalParser/OpalParser.cpp	/^std::vector<std::shared_ptr<TokenStream> > OpalParser::inputStack;$/;"	m	class:OpalParser	file:
inputStack	src/OpalParser/OpalParser.h	/^    static std::vector<std::shared_ptr<TokenStream> > inputStack;$/;"	m	class:OpalParser
insert	src/AbstractObjects/Directory.cpp	/^void Directory::insert(const std::string &name, Object *newObject) {$/;"	f	class:Directory
insertDrifts	src/Lines/Sequence.cpp	/^void Sequence::insertDrifts(Sequence::TLine& line) {$/;"	f	class:Sequence
insertFlags	src/Algorithms/IndexMap.cpp	/^    void insertFlags(std::vector<double> &flags, std::shared_ptr<Component> element) {$/;"	f	namespace:__anon83
insideAperture	src/AbsBeamline/MultipoleT.cpp	/^bool MultipoleT::insideAperture(const Vector_t<double, 3>& R) {$/;"	f	class:MultipoleT
insideAperture	src/AbsBeamline/MultipoleTBase.h	/^inline bool MultipoleTBase::insideAperture(const Vector_t<double, 3>& R) {$/;"	f	class:MultipoleTBase
insidePoint_m	src/Structure/BoundaryGeometry.h	/^    Vector_t<double, 3> insidePoint_m;  \/\/ attribute INSIDEPOINT$/;"	m	class:BoundaryGeometry
install_gtest	tests/tools/install_gtest.bash	/^install_gtest() {$/;"	f
instance	src/AbstractObjects/OpalData.cpp	/^OpalData* OpalData::instance  = nullptr;$/;"	m	class:OpalData	file:
instance	src/AbstractObjects/OpalData.h	/^    static OpalData* instance;             \/\/ \\todo should be a smart pointer and we then should get ridd of deleteInstance$/;"	m	class:OpalData
instantiateHistogram	src/PartBunch/Binning/AdaptBins.hpp	/^    void AdaptBins<BunchType, BinningSelector>::instantiateHistogram(bool setToZero) {$/;"	f	class:ParticleBinning::AdaptBins
instantiateHistograms	src/PartBunch/Binning/BinHisto.h	/^        void instantiateHistograms() {$/;"	f	class:ParticleBinning::Histogram
integer	src/OpalParser/Statement.cpp	/^bool Statement::integer(int &value) {$/;"	f	class:Statement
integer	src/OpalParser/Statement.cpp	/^bool Statement::integer(unsigned &value) {$/;"	f	class:Statement
integer	src/Utilities/ClassicRandom.cpp	/^int Random::integer() {$/;"	f	class:Random
integrate	src/AbsBeamline/MultipoleTFunctions/tanhDeriv.cpp	/^double integrate(const double &a,$/;"	f	namespace:tanhderiv
integrate	src/Algorithms/OrbitThreader.cpp	/^void OrbitThreader::integrate(const IndexMap::value_t& activeSet, double \/*maxDrift*\/) {$/;"	f	class:OrbitThreader
integrateBx	src/Fields/FM3DMagnetoStaticExtended.cpp	/^void FM3DMagnetoStaticExtended::integrateBx(unsigned j) {$/;"	f	class:FM3DMagnetoStaticExtended
integrateBy	src/Fields/FM3DMagnetoStaticExtended.cpp	/^void FM3DMagnetoStaticExtended::integrateBy(unsigned j) {$/;"	f	class:FM3DMagnetoStaticExtended
integrateBz	src/Fields/FM3DMagnetoStaticExtended.cpp	/^void FM3DMagnetoStaticExtended::integrateBz(unsigned j) {$/;"	f	class:FM3DMagnetoStaticExtended
integratedGreensFunction	src/.Solvers/FFTPoissonSolver.cpp	/^void FFTPoissonSolver::integratedGreensFunction() {$/;"	f	class:FFTPoissonSolver
integratedGreens_m	src/.Solvers/FFTPoissonSolver.h	/^    bool integratedGreens_m;$/;"	m	class:FFTPoissonSolver
integration_method_m	src/PartBunch/PartBunch.hpp	/^    std::string integration_method_m;$/;"	m	class:PartBunch
integrator_m	src/Algorithms/OrbitThreader.h	/^    BorisPusher integrator_m;$/;"	m	class:OrbitThreader
interpolateFieldData	src/Fields/Astra1D_fast.cpp	/^std::vector<double> Astra1D_fast::interpolateFieldData(std::vector<double>& samplingPoints) {$/;"	f	class:Astra1D_fast
interpolateTrilinearly	src/Fields/FM3DH5BlockBase.cpp	/^Vector_t<double, 3> FM3DH5BlockBase::interpolateTrilinearly($/;"	f	class:FM3DH5BlockBase
interpolateTrilinearly	src/Fields/FM3DMagnetoStatic.cpp	/^Vector_t<double, 3> FM3DMagnetoStatic::interpolateTrilinearly(const Vector_t<double, 3>& X) const {$/;"	f	class:FM3DMagnetoStatic
interpolateTrilinearly	src/Fields/FM3DMagnetoStaticExtended.cpp	/^Vector_t<double, 3> FM3DMagnetoStaticExtended::interpolateTrilinearly($/;"	f	class:FM3DMagnetoStaticExtended
interpolation	src/BasicActions/DumpEMFields.h	/^namespace interpolation {$/;"	n
interpolation	src/BasicActions/DumpFields.h	/^namespace interpolation {$/;"	n
interpolation	src/Fields/Interpolation/Interpolator3dGridTo1d.cpp	/^namespace interpolation {$/;"	n	file:
interpolation	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^namespace interpolation {$/;"	n
interpolation	src/Fields/Interpolation/Interpolator3dGridTo3d.cpp	/^namespace interpolation {$/;"	n	file:
interpolation	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^namespace interpolation {$/;"	n
interpolation	src/Fields/Interpolation/MMatrix.cpp	/^namespace interpolation {$/;"	n	file:
interpolation	src/Fields/Interpolation/MMatrix.h	/^namespace interpolation {$/;"	n
interpolation	src/Fields/Interpolation/MVector.cpp	/^namespace interpolation {$/;"	n	file:
interpolation	src/Fields/Interpolation/MVector.h	/^namespace interpolation {$/;"	n
interpolation	src/Fields/Interpolation/Mesh.cpp	/^namespace interpolation {$/;"	n	file:
interpolation	src/Fields/Interpolation/Mesh.h	/^namespace interpolation {$/;"	n
interpolation	src/Fields/Interpolation/NDGrid.cpp	/^namespace interpolation {$/;"	n	file:
interpolation	src/Fields/Interpolation/NDGrid.h	/^namespace interpolation {$/;"	n
interpolation	src/Fields/Interpolation/PPSolveFactory.cpp	/^namespace interpolation {$/;"	n	file:
interpolation	src/Fields/Interpolation/PPSolveFactory.h	/^namespace interpolation {$/;"	n
interpolation	src/Fields/Interpolation/PolynomialCoefficient.cpp	/^namespace interpolation {$/;"	n	file:
interpolation	src/Fields/Interpolation/PolynomialCoefficient.h	/^namespace interpolation {$/;"	n
interpolation	src/Fields/Interpolation/PolynomialPatch.cpp	/^namespace interpolation {$/;"	n	file:
interpolation	src/Fields/Interpolation/PolynomialPatch.h	/^namespace interpolation {$/;"	n
interpolation	src/Fields/Interpolation/SolveFactory.cpp	/^namespace interpolation {$/;"	n	file:
interpolation	src/Fields/Interpolation/SolveFactory.h	/^namespace interpolation {$/;"	n
interpolation	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^namespace interpolation {$/;"	n	file:
interpolation	src/Fields/Interpolation/SquarePolynomialVector.h	/^namespace interpolation {$/;"	n
interpolation	src/Fields/Interpolation/ThreeDGrid.cpp	/^namespace interpolation {$/;"	n	file:
interpolation	src/Fields/Interpolation/ThreeDGrid.h	/^namespace interpolation {$/;"	n
interpolation	src/Fields/Interpolation/TriLinearInterpolator.cpp	/^namespace interpolation {$/;"	n	file:
interpolation	src/Fields/Interpolation/TriLinearInterpolator.h	/^namespace interpolation {$/;"	n
interpolation	src/Fields/Interpolation/VectorMap.h	/^namespace interpolation {$/;"	n
interpolation	src/Fields/SectorMagneticFieldMap.h	/^namespace interpolation {$/;"	n
interpolationAlgorithm	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^  enum interpolationAlgorithm {TRILINEAR};$/;"	g	class:interpolation::Interpolator3dGridTo3d
interpolationCacheSet_m	src/Algorithms/.PartBunch.h	/^    bool interpolationCacheSet_m;$/;"	m	class:PartBunch
interpolationCache_m	src/Algorithms/.PartBunch.h	/^    ParticleAttrib<CacheDataCIC<double, 3U> > interpolationCache_m;$/;"	m	class:PartBunch
interpolationMethod_m	src/.Solvers/IrregularDomain.h	/^    int interpolationMethod_m;$/;"	m	class:IrregularDomain
interpolator_m	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^  Interpolator3dGridTo1d *interpolator_m[3];$/;"	m	class:interpolation::Interpolator3dGridTo3d
interpolator_m	src/Fields/SectorMagneticFieldMap.h	/^    interpolation::VectorMap* interpolator_m;$/;"	m	class:SectorMagneticFieldMap
interpretLine	src/Fields/Fieldmap.hpp	/^bool Fieldmap::interpretLine(std::ifstream & in, S & value1, S & value2, S & value3, S & value4, S & value5, S & value6, const bool & file_length_known)$/;"	f	class:Fieldmap
interpretLine	src/Fields/Fieldmap.hpp	/^bool Fieldmap::interpretLine(std::ifstream & in, S & value1, T & value2, U & value3, V & value4, const bool & file_length_known)$/;"	f	class:Fieldmap
interpretLine	src/Fields/Fieldmap.hpp	/^bool Fieldmap::interpretLine(std::ifstream & in, S & value1, T & value2, U & value3, const bool & file_length_known)$/;"	f	class:Fieldmap
interpretLine	src/Fields/Fieldmap.hpp	/^bool Fieldmap::interpretLine(std::ifstream & in, S & value1, T & value2, const bool & file_length_known)$/;"	f	class:Fieldmap
interpretLine	src/Fields/Fieldmap.hpp	/^bool Fieldmap::interpretLine(std::ifstream & in, T & value, const bool & file_length_known)$/;"	f	class:Fieldmap
interpretWarning	src/Fields/Fieldmap.cpp	/^void Fieldmap::interpretWarning($/;"	f	class:Fieldmap
interpreteEOF	src/Fields/Fieldmap.cpp	/^bool Fieldmap::interpreteEOF(std::ifstream& in) {$/;"	f	class:Fieldmap
intersect	src/Structure/BoundaryGeometry.cpp	/^    bool intersect($/;"	f	class:Voxel
intersect	src/Structure/BoundaryGeometry.cpp	/^    inline bool intersect(const Ray& r) const {$/;"	f	class:Voxel
intersect	src/Structure/BoundaryGeometry.cpp	/^    inline int intersect(const Triangle& t) const {$/;"	f	class:Voxel
intersectHiX_m	src/.Solvers/ArbitraryDomain.h	/^    PointList_t intersectHiX_m, intersectLoX_m;$/;"	m	class:ArbitraryDomain
intersectHiY_m	src/.Solvers/ArbitraryDomain.h	/^    PointList_t intersectHiY_m, intersectLoY_m;$/;"	m	class:ArbitraryDomain
intersectHiZ_m	src/.Solvers/ArbitraryDomain.h	/^    PointList_t intersectHiZ_m, intersectLoZ_m;$/;"	m	class:ArbitraryDomain
intersectLineSegmentBoundary	src/Structure/BoundaryGeometry.cpp	/^int BoundaryGeometry::intersectLineSegmentBoundary($/;"	f	class:BoundaryGeometry
intersectLineTriangle	src/Structure/BoundaryGeometry.cpp	/^int BoundaryGeometry::intersectLineTriangle($/;"	f	class:BoundaryGeometry
intersectLoX_m	src/.Solvers/ArbitraryDomain.h	/^    PointList_t intersectHiX_m, intersectLoX_m;$/;"	m	class:ArbitraryDomain
intersectLoY_m	src/.Solvers/ArbitraryDomain.h	/^    PointList_t intersectHiY_m, intersectLoY_m;$/;"	m	class:ArbitraryDomain
intersectLoZ_m	src/.Solvers/ArbitraryDomain.h	/^    PointList_t intersectHiZ_m, intersectLoZ_m;$/;"	m	class:ArbitraryDomain
intersectRayBoundary	src/Structure/BoundaryGeometry.cpp	/^int BoundaryGeometry::intersectRayBoundary($/;"	f	class:BoundaryGeometry
intersectTinyLineSegmentBoundary	src/Structure/BoundaryGeometry.cpp	/^int BoundaryGeometry::intersectTinyLineSegmentBoundary($/;"	f	class:BoundaryGeometry
intersectTriangleVoxel	src/Structure/BoundaryGeometry.cpp	/^int BoundaryGeometry::intersectTriangleVoxel($/;"	f	class:BoundaryGeometry
intersectXDir_m	src/.Solvers/EllipticDomain.h	/^    EllipticPointList_t intersectXDir_m;$/;"	m	class:EllipticDomain
intersectYDir_m	src/.Solvers/EllipticDomain.h	/^    EllipticPointList_t intersectYDir_m;$/;"	m	class:EllipticDomain
inv_direction	src/Structure/BoundaryGeometry.cpp	/^    Vector_t<double, 3> inv_direction;$/;"	m	class:Ray	file:
invalid	src/OpalParser/Token.cpp	/^void Token::invalid(const char *type) const {$/;"	f	class:Token
invalidate	src/AbstractObjects/Invalidator.cpp	/^void Invalidator::invalidate() {$/;"	f	class:Invalidator
invalidate	src/AbstractObjects/Table.cpp	/^void Table::invalidate() {$/;"	f	class:Table
invalidate	src/Expressions/AAutomatic.h	/^    void AAutomatic<T>::invalidate() {$/;"	f	class:Expressions::AAutomatic
invalidate	src/Expressions/SAutomatic.h	/^    void SAutomatic<T>::invalidate() {$/;"	f	class:Expressions::SAutomatic
invalidate	src/Expressions/SRefAttr.h	/^    void SRefAttr<T>::invalidate() {$/;"	f	class:Expressions::SRefAttr
invalidate	src/Expressions/SRefExpr.h	/^    void SRefExpr<T>::invalidate() {$/;"	f	class:Expressions::SRefExpr
inverse	src/Algorithms/Quaternion.cpp	/^Quaternion Quaternion::inverse() const {$/;"	f	class:Quaternion
inverse	src/BeamlineGeometry/Euclid3D.cpp	/^Euclid3D Euclid3D::inverse() const {$/;"	f	class:Euclid3D
inverse	src/BeamlineGeometry/Matrix3D.cpp	/^Matrix3D Matrix3D::inverse() const {$/;"	f	class:Matrix3D
inverse	src/BeamlineGeometry/Rotation3D.cpp	/^Rotation3D Rotation3D::inverse() const {$/;"	f	class:Rotation3D
inverse	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<Tmplt> MMatrix<Tmplt>::inverse()     const$/;"	f	class:interpolation::MMatrix
invert	src/Algorithms/CoordinateSystemTrafo.cpp	/^void CoordinateSystemTrafo::invert() {$/;"	f	class:CoordinateSystemTrafo
invert	src/Fields/Interpolation/MMatrix.cpp	/^void MMatrix<double>::invert()$/;"	f	class:interpolation::MMatrix
invert	src/Fields/Interpolation/MMatrix.cpp	/^void MMatrix<m_complex>::invert()$/;"	f	class:interpolation::MMatrix
inverted	src/Algorithms/CoordinateSystemTrafo.h	/^inline CoordinateSystemTrafo CoordinateSystemTrafo::inverted() const {$/;"	f	class:CoordinateSystemTrafo
invertedMap_t	src/Algorithms/IndexMap.h	/^    typedef std::multimap<value_t::value_type, key_t> invertedMap_t;$/;"	t	class:IndexMap
ippl	tests/Main.cpp	/^Ippl *ippl;$/;"	v
ippl	tools/mslang/mslang.cpp	/^Ippl *ippl;$/;"	v
irn	src/Utilities/ClassicRandom.h	/^    int irn[nr];$/;"	m	class:Random
irngen	src/Utilities/ClassicRandom.cpp	/^void Random::irngen() {$/;"	f	class:Random
is	src/OpalParser/FileStream.h	/^    std::ifstream is;$/;"	m	class:FileStream
isASCII	src/Utilities/SDDSParser/data.hpp	/^        bool isASCII() const$/;"	f	struct:SDDS::data
isActive	src/AbstractObjects/PlaceRep.cpp	/^bool PlaceRep::isActive() const {$/;"	f	class:PlaceRep
isActive	src/AbstractObjects/RangeRep.cpp	/^bool RangeRep::isActive() const {$/;"	f	class:RangeRep
isAllPeriodic_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    bool isAllPeriodic_m;$/;"	m	class:AlpineManager
isBaseAllocated	src/AbstractObjects/Attribute.cpp	/^bool Attribute::isBaseAllocated() const {$/;"	f	class:Attribute
isBlack	src/Utilities/PortableBitmapReader.h	/^bool PortableBitmapReader::isBlack(unsigned int i, unsigned int j) const {$/;"	f	class:PortableBitmapReader
isBuiltin	src/AbstractObjects/Object.cpp	/^bool Object::isBuiltin() const {$/;"	f	class:Object
isClosed_m	src/AbsBeamline/Ring.h	/^    bool isClosed_m;$/;"	m	class:Ring
isConstant	src/AbstractObjects/Expressions.h	/^    bool OArray<T>::isConstant() const {$/;"	f	class:Expressions::OArray
isConstant	src/AbstractObjects/Expressions.h	/^    bool Scalar<T>::isConstant() const {$/;"	f	class:Expressions::Scalar
isConstant	src/Expressions/SConstant.h	/^    bool SConstant<T>::isConstant() const {$/;"	f	class:Expressions::SConstant
isConvex	src/Utilities/Mesher.cpp	/^bool Mesher::isConvex(unsigned int i) const {$/;"	f	class:Mesher
isDefault	src/AbstractObjects/Attribute.h	/^    bool isDefault;$/;"	m	class:Attribute
isDeferred	src/AbstractObjects/Attribute.cpp	/^bool Attribute::isDeferred() const {$/;"	f	class:Attribute
isDeferred	src/AbstractObjects/AttributeHandler.cpp	/^bool AttributeHandler::isDeferred() const {$/;"	f	class:AttributeHandler
isDel	src/OpalParser/Token.cpp	/^bool Token::isDel() const {$/;"	f	class:Token
isDel	src/OpalParser/Token.cpp	/^bool Token::isDel(char del) const {$/;"	f	class:Token
isDel	src/OpalParser/Token.cpp	/^bool Token::isDel(const char *del) const {$/;"	f	class:Token
isDirty	src/AbstractObjects/Object.cpp	/^bool Object::isDirty() const {$/;"	f	class:Object
isDrift	src/Elements/OpalDrift.cpp	/^bool OpalDrift::isDrift() const {$/;"	f	class:OpalDrift
isEOF	src/OpalParser/Token.cpp	/^bool Token::isEOF() const {$/;"	f	class:Token
isEar	src/Utilities/Mesher.cpp	/^bool Mesher::isEar(unsigned int i) const {$/;"	f	class:Mesher
isElementPositionSet	src/AbsBeamline/ElementBase.h	/^inline bool ElementBase::isElementPositionSet() const {$/;"	f	class:ElementBase
isEmitted	src/Algorithms/PartBins.h	/^    bool isEmitted(int n, int \/*bin*\/) {$/;"	f	class:PartBins
isEmitted_m	src/Algorithms/PartBins.h	/^    std::vector< bool > isEmitted_m;$/;"	m	class:PartBins
isError	src/OpalParser/Token.cpp	/^bool Token::isError() const {$/;"	f	class:Token
isExpression	src/AbstractObjects/Attribute.cpp	/^bool Attribute::isExpression() const {$/;"	f	class:Attribute
isExpression	src/AbstractObjects/AttributeBase.cpp	/^bool AttributeBase::isExpression() const {$/;"	f	class:AttributeBase
isExpression	src/Expressions/ADeferred.h	/^    bool ADeferred<T>::isExpression() const {$/;"	f	class:Expressions::ADeferred
isExpression	src/Expressions/SDeferred.h	/^    bool SDeferred<T>::isExpression() const {$/;"	f	class:Expressions::SDeferred
isFirstRepartition_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    bool isFirstRepartition_m;$/;"	m	class:AlpineManager
isFirstRepartition_m	src/PartBunch/PartBunch.hpp	/^    bool isFirstRepartition_m;$/;"	m	class:PartBunch
isFlagged	src/AbstractObjects/Object.cpp	/^bool Object::isFlagged() const {$/;"	f	class:Object
isFocusing	src/AbsBeamline/Multipole.cpp	/^bool Multipole::isFocusing(unsigned int component) const {$/;"	f	class:Multipole
isFollowupTrack_m	src/Track/TrackRun.h	/^    bool isFollowupTrack_m;$/;"	m	class:TrackRun
isGeometryAllocated	src/AbsBeamline/Offset.cpp	/^bool Offset::isGeometryAllocated() const {$/;"	f	class:Offset
isGreater	src/Fields/Interpolation/NDGrid.cpp	/^bool NDGrid::isGreater(const Mesh::Iterator& lhs, const Mesh::Iterator& rhs) const {$/;"	f	class:interpolation::NDGrid
isGreater	src/Fields/Interpolation/ThreeDGrid.cpp	/^bool ThreeDGrid::isGreater$/;"	f	class:interpolation::ThreeDGrid
isGridFixed	src/Algorithms/.PartBunchBase.hpp	/^bool PartBunch<T, Dim>::isGridFixed() const {$/;"	f	class:PartBunch
isGridFixed	src/PartBunch/PartBunch.hpp	/^    bool isGridFixed() {$/;"	f	class:PartBunch
isIdentity	src/BeamlineGeometry/Euclid3D.h	/^inline bool Euclid3D::isIdentity() const {$/;"	f	class:Euclid3D
isIdentity	src/BeamlineGeometry/Matrix3D.cpp	/^bool Matrix3D::isIdentity() const {$/;"	f	class:Matrix3D
isIdentity	src/BeamlineGeometry/Rotation3D.h	/^inline bool Rotation3D::isIdentity() const {$/;"	f	class:Rotation3D
isInBoundingBox	src/Fields/SectorField.h	/^bool SectorField::isInBoundingBox(const double R_p[]) const {$/;"	f	class:SectorField
isInOPALCyclMode	src/AbstractObjects/OpalData.cpp	/^bool OpalData::isInOPALCyclMode() {$/;"	f	class:OpalData
isInOPALCyclMode_m	src/AbstractObjects/OpalData.cpp	/^    bool isInOPALCyclMode_m;$/;"	m	struct:OpalDataImpl	file:
isInOPALTMode	src/AbstractObjects/OpalData.cpp	/^bool OpalData::isInOPALTMode() {$/;"	f	class:OpalData
isInOPALTMode_m	src/AbstractObjects/OpalData.cpp	/^    bool isInOPALTMode_m;$/;"	m	struct:OpalDataImpl	file:
isInPrepState	src/AbstractObjects/OpalData.cpp	/^bool OpalData::isInPrepState() {$/;"	f	class:OpalData
isInPrepState_m	src/AbstractObjects/OpalData.cpp	/^    bool isInPrepState_m;$/;"	m	struct:OpalDataImpl	file:
isInside	src/.Solvers/RectangularDomain.h	/^    inline bool isInside(int x, int y, int \/*z*\/) const {$/;"	f	class:RectangularDomain
isInside	src/AbsBeamline/ElementBase.h	/^inline bool ElementBase::isInside(const Vector_t<double, 3>& r) const {$/;"	f	class:ElementBase
isInside	src/AbsBeamline/Monitor.h	/^inline bool Monitor::isInside(const Vector_t<double, 3>& r) const {$/;"	f	class:Monitor
isInside	src/AbsBeamline/Multipole.cpp	/^bool Multipole::isInside(const Vector_t<double, 3>& r) const {$/;"	f	class:Multipole
isInside	src/AbsBeamline/RFCavity.cpp	/^bool RFCavity::isInside(const Vector_t<double, 3>& r) const {$/;"	f	class:RFCavity
isInside	src/AbsBeamline/Solenoid.cpp	/^bool Solenoid::isInside(const Vector_t<double, 3>& r) const {$/;"	f	class:Solenoid
isInside	src/AbsBeamline/TravelingWave.cpp	/^bool TravelingWave::isInside(const Vector_t<double, 3>& r) const {$/;"	f	class:TravelingWave
isInside	src/Fields/Astra1DDynamic.h	/^inline bool Astra1DDynamic::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:Astra1DDynamic
isInside	src/Fields/Astra1DElectroStatic.h	/^inline bool Astra1DElectroStatic::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:Astra1DElectroStatic
isInside	src/Fields/Astra1DMagnetoStatic.h	/^inline bool Astra1DMagnetoStatic::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:Astra1DMagnetoStatic
isInside	src/Fields/Astra1D_fast.h	/^inline bool Astra1D_fast::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:Astra1D_fast
isInside	src/Fields/FM1DDynamic.h	/^inline bool FM1DDynamic::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:FM1DDynamic
isInside	src/Fields/FM1DDynamic_fast.h	/^inline bool FM1DDynamic_fast::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:FM1DDynamic_fast
isInside	src/Fields/FM1DElectroStatic.h	/^inline bool FM1DElectroStatic::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:FM1DElectroStatic
isInside	src/Fields/FM1DElectroStatic_fast.h	/^inline bool FM1DElectroStatic_fast::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:FM1DElectroStatic_fast
isInside	src/Fields/FM1DMagnetoStatic.h	/^inline bool FM1DMagnetoStatic::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:FM1DMagnetoStatic
isInside	src/Fields/FM1DMagnetoStatic_fast.h	/^inline bool FM1DMagnetoStatic_fast::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:FM1DMagnetoStatic_fast
isInside	src/Fields/FM2DDynamic.h	/^inline bool FM2DDynamic::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:FM2DDynamic
isInside	src/Fields/FM2DElectroStatic.h	/^inline bool FM2DElectroStatic::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:FM2DElectroStatic
isInside	src/Fields/FM2DMagnetoStatic.h	/^inline bool FM2DMagnetoStatic::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:FM2DMagnetoStatic
isInside	src/Fields/FM3DDynamic.h	/^inline bool FM3DDynamic::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:FM3DDynamic
isInside	src/Fields/FM3DH5BlockBase.h	/^    virtual bool isInside ($/;"	f	class:FM3DH5BlockBase
isInside	src/Fields/FM3DMagnetoStatic.h	/^bool FM3DMagnetoStatic::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:FM3DMagnetoStatic
isInside	src/Fields/FM3DMagnetoStaticExtended.h	/^bool FM3DMagnetoStaticExtended::isInside(const Vector_t<double, 3> &r) const$/;"	f	class:FM3DMagnetoStaticExtended
isInside	src/Fields/Fieldmap.h	/^    virtual bool isInside(const Vector_t<double, 3>& \/*r*\/) const {$/;"	f	class:Fieldmap
isInside	src/Structure/BoundaryGeometry.cpp	/^    inline bool isInside(const Vector_t<double, 3>& P) const {$/;"	f	class:Voxel
isInside	src/Structure/BoundaryGeometry.cpp	/^bool BoundaryGeometry::isInside(const Vector_t<double, 3>& P  \/\/ [in] pt to test$/;"	f	class:BoundaryGeometry
isInside	src/Structure/BoundingBox.cpp	/^bool BoundingBox::isInside(const Vector_t<double, 3>& position) const {$/;"	f	class:BoundingBox
isInside	src/Structure/ValueRange.h	/^    bool isInside(T value) const$/;"	f	class:ValueRange
isInside	src/Utilities/MSLang/BoundingBox2D.cpp	/^    bool BoundingBox2D::isInside(const BoundingBox2D &b) const {$/;"	f	class:mslang::BoundingBox2D
isInside	src/Utilities/MSLang/BoundingBox2D.cpp	/^    bool BoundingBox2D::isInside(const Vector_t<double, 3> &X) const {$/;"	f	class:mslang::BoundingBox2D
isInside	src/Utilities/MSLang/Ellipse.cpp	/^    bool Ellipse::isInside(const Vector_t<double, 3> &R) const {$/;"	f	class:mslang::Ellipse
isInside	src/Utilities/MSLang/QuadTree.cpp	/^    bool QuadTree::isInside(const Vector_t<double, 3> &R) const {$/;"	f	class:mslang::QuadTree
isInside	src/Utilities/MSLang/Rectangle.cpp	/^    bool Rectangle::isInside(const Vector_t<double, 3> &R) const {$/;"	f	class:mslang::Rectangle
isInside	src/Utilities/MSLang/Triangle.cpp	/^    bool Triangle::isInside(const Vector_t<double, 3> &R) const {$/;"	f	class:mslang::Triangle
isInsideMap_m	src/.Solvers/ArbitraryDomain.h	/^    std::map<int, bool> isInsideMap_m;$/;"	m	class:ArbitraryDomain
isInsideTransverse	src/AbsBeamline/ElementBase.cpp	/^bool ElementBase::isInsideTransverse(const Vector_t<double, 3>& r) const {$/;"	f	class:ElementBase
isInstantiated	src/AbstractObjects/OpalData.cpp	/^bool OpalData::isInstantiated = false;$/;"	m	class:OpalData	file:
isInstantiated	src/AbstractObjects/OpalData.h	/^    static bool isInstantiated;$/;"	m	class:OpalData
isInteger	src/OpalParser/Token.cpp	/^bool Token::isInteger() const {$/;"	f	class:Token
isKey	src/OpalParser/Token.cpp	/^bool Token::isKey(const char *key) const {$/;"	f	class:Token
isLocked_m	src/AbsBeamline/Ring.h	/^    bool isLocked_m;$/;"	m	class:Ring
isOn	src/Utilities/ClassicField.h	/^inline const bool &ClassicField::isOn() const {$/;"	f	class:ClassicField
isOnOrPastStartPlane	src/Utilities/RingSection.cpp	/^bool RingSection::isOnOrPastStartPlane(const Vector_t<double, 3>& pos) const {$/;"	f	class:RingSection
isOptimizerFlag_m	src/AbstractObjects/OpalData.cpp	/^    bool isOptimizerFlag_m;$/;"	m	struct:OpalDataImpl	file:
isOptimizerRun	src/AbstractObjects/OpalData.cpp	/^bool OpalData::isOptimizerRun() {$/;"	f	class:OpalData
isOutside	src/Structure/BoundingBox.h	/^inline bool BoundingBox::isOutside(const Vector_t<double, 3>& position) const {$/;"	f	class:BoundingBox
isOutside	src/Structure/ValueRange.h	/^    bool isOutside(T value) const$/;"	f	class:ValueRange
isParallel_m	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    std::array<bool, Dim> isParallel_m;$/;"	m	class:ChargedParticles	file:
isParticleExcluded	src/Algorithms/DistributionMoments.cpp	/^bool DistributionMoments::isParticleExcluded(const OpalParticle& particle) const {$/;"	f	class:DistributionMoments
isPastEndPlane	src/Utilities/RingSection.cpp	/^bool RingSection::isPastEndPlane(const Vector_t<double, 3>& pos) const {$/;"	f	class:RingSection
isPointInsideCone	src/Utilities/Mesher.cpp	/^bool Mesher::isPointInsideCone(unsigned int i,$/;"	f	class:Mesher
isPointOnLine	src/Utilities/Mesher.cpp	/^bool Mesher::isPointOnLine(unsigned int i,$/;"	f	class:Mesher
isPointRightOfLine	src/Utilities/Mesher.cpp	/^bool Mesher::isPointRightOfLine(unsigned int i,$/;"	f	class:Mesher
isPolynomialZero	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^bool DifferentialOperator::isPolynomialZero(const std::size_t &x,$/;"	f	class:polynomial::DifferentialOperator
isPolynomialZero	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^bool DifferentialOperatorTwo::isPolynomialZero(const std::size_t &x,$/;"	f	class:polynomial::DifferentialOperatorTwo
isPolynomialZero	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^bool PolynomialSum::isPolynomialZero(const std::size_t &p) const {$/;"	f	class:polynomial::PolynomialSum
isPolynomialZero	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.h	/^    bool RecursionRelation::isPolynomialZero(const std::size_t &x,$/;"	f	class:polynomial::RecursionRelation
isPolynomialZero	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^    bool RecursionRelationTwo::isPolynomialZero(const std::size_t &x,$/;"	f	class:polynomial::RecursionRelationTwo
isPositioned	src/AbsBeamline/ElementBase.h	/^inline bool ElementBase::isPositioned() const {$/;"	f	class:ElementBase
isPotentialEdgeIntersected	src/Utilities/Mesher.cpp	/^bool Mesher::isPotentialEdgeIntersected(unsigned int i) const {$/;"	f	class:Mesher
isPure	src/Algorithms/Quaternion.hpp	/^inline bool Quaternion::isPure() const {$/;"	f	class:Quaternion
isPureTranslation	src/BeamlineGeometry/Euclid3D.cpp	/^bool Euclid3D::isPureTranslation() const {$/;"	f	class:Euclid3D
isPureUnit	src/Algorithms/Quaternion.hpp	/^inline bool Quaternion::isPureUnit() const {$/;"	f	class:Quaternion
isPureXRotation	src/BeamlineGeometry/Euclid3D.cpp	/^bool Euclid3D::isPureXRotation() const {$/;"	f	class:Euclid3D
isPureXRotation	src/BeamlineGeometry/Rotation3D.cpp	/^bool Rotation3D::isPureXRotation() const {$/;"	f	class:Rotation3D
isPureYRotation	src/BeamlineGeometry/Euclid3D.cpp	/^bool Euclid3D::isPureYRotation() const {$/;"	f	class:Euclid3D
isPureYRotation	src/BeamlineGeometry/Rotation3D.cpp	/^bool Rotation3D::isPureYRotation() const {$/;"	f	class:Rotation3D
isPureZRotation	src/BeamlineGeometry/Euclid3D.cpp	/^bool Euclid3D::isPureZRotation() const {$/;"	f	class:Euclid3D
isPureZRotation	src/BeamlineGeometry/Rotation3D.cpp	/^bool Rotation3D::isPureZRotation() const {$/;"	f	class:Rotation3D
isReadOnly	src/AbstractObjects/Attribute.cpp	/^bool Attribute::isReadOnly() const {$/;"	f	class:Attribute
isReadOnly	src/AbstractObjects/AttributeHandler.cpp	/^bool AttributeHandler::isReadOnly() const {$/;"	f	class:AttributeHandler
isReal	src/OpalParser/Token.cpp	/^bool Token::isReal() const {$/;"	f	class:Token
isReflected	src/Beamlines/FlaggedElmPtr.h	/^    mutable bool isReflected;$/;"	m	class:FlaggedElmPtr
isRestart_m	src/AbstractObjects/OpalData.cpp	/^    bool isRestart_m;$/;"	m	struct:OpalDataImpl	file:
isSelected	src/AbstractObjects/PlaceRep.cpp	/^bool PlaceRep::isSelected() const {$/;"	f	class:PlaceRep
isSelected	src/Beamlines/FlaggedElmPtr.h	/^    mutable bool isSelected;$/;"	m	class:FlaggedElmPtr
isSettable	src/Channels/Channel.cpp	/^bool Channel::isSettable() const {$/;"	f	class:Channel
isSettable	src/Channels/ConstChannel.cpp	/^bool ConstChannel::isSettable() const {$/;"	f	class:ConstChannel
isSettable	src/Channels/IndexedChannel.h	/^bool IndexedChannel<T>::isSettable() const {$/;"	f	class:IndexedChannel
isSettable	src/Channels/IndirectChannel.h	/^bool IndirectChannel<T>::isSettable() const {$/;"	f	class:IndirectChannel
isSharable	src/AbsBeamline/ElementBase.h	/^inline bool ElementBase::isSharable() const {$/;"	f	class:ElementBase
isShared	src/AbstractObjects/Object.cpp	/^bool Object::isShared() const {$/;"	f	class:Object
isShared	src/MemoryManagement/RCObject.h	/^inline bool RCObject::isShared() const {$/;"	f	class:RCObject
isString	src/OpalParser/Token.cpp	/^bool Token::isString() const {$/;"	f	class:Token
isTreeMember	src/AbstractObjects/Object.cpp	/^bool Object::isTreeMember(const Object *classObject) const {$/;"	f	class:Object
isUnit	src/Algorithms/Quaternion.hpp	/^inline bool Quaternion::isUnit() const {$/;"	f	class:Quaternion
isValid	src/MemoryManagement/OwnPtr.h	/^inline bool OwnPtr<Object>::isValid() const {$/;"	f	class:OwnPtr
isValid	src/MemoryManagement/Pointer.h	/^inline bool Pointer<Object>::isValid() const {$/;"	f	class:Pointer
isWord	src/OpalParser/Token.cpp	/^bool Token::isWord() const {$/;"	f	class:Token
isZero	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    bool TwoPolynomial::isZero() const {$/;"	f	class:polynomial::TwoPolynomial
isZero	src/BeamlineGeometry/Vector3D.cpp	/^bool Vector3D::isZero() const {$/;"	f	class:Vector3D
is_base64	src/Utilities/Util.cpp	/^    static inline bool is_base64(unsigned char c) {$/;"	f	namespace:Util
is_deferred	src/AbstractObjects/AttributeHandler.h	/^    bool is_deferred;$/;"	m	class:AttributeHandler
is_identity	src/BeamlineGeometry/Euclid3D.h	/^    mutable bool is_identity;  \/\/ True, when [b]this[\/b] is identity.$/;"	m	class:Euclid3D
is_known	src/Expressions/AAutomatic.h	/^        mutable bool is_known;$/;"	m	class:Expressions::AAutomatic
is_known	src/Expressions/SAutomatic.h	/^        mutable bool is_known;$/;"	m	class:Expressions::SAutomatic
is_on_m	src/Utilities/ClassicField.h	/^    bool is_on_m;$/;"	m	class:ClassicField
is_readonly	src/AbstractObjects/AttributeHandler.h	/^    bool is_readonly;$/;"	m	class:AttributeHandler
is_selected	src/AbstractObjects/PlaceRep.h	/^    bool is_selected;$/;"	m	class:PlaceRep
isinf	src/Utilities/MSLang/matheval.hpp	/^            T isinf(T x) { return std::isinf(x); }$/;"	f	namespace:matheval::detail::math
isnan	src/Utilities/MSLang/matheval.hpp	/^            T isnan(T x) { return std::isnan(x); }$/;"	f	namespace:matheval::detail::math
it_m	src/Algorithms/StepSizeConfig.h	/^    container_t::iterator it_m;$/;"	m	class:StepSizeConfig
it_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    int it_m;$/;"	m	class:AlpineManager
it_m	src/PartBunch/PartBunch.hpp	/^    int it_m;$/;"	m	class:PartBunch
iterate	src/Beamlines/TBeamline.h	/^void TBeamline<T>::iterate(BeamlineVisitor& visitor, bool r2l) const {$/;"	f	class:TBeamline
iterator	src/Utilities/MSLang.h	/^    typedef std::string::iterator iterator;$/;"	t	namespace:mslang
iterator_t	src/AbsBeamline/SpecificElementVisitor.h	/^    typedef typename ElementList_t::iterator iterator_t;$/;"	t	class:SpecificElementVisitor
iterator_t	src/Utilities/SDDSParser/array.cpp	/^typedef std::string::const_iterator iterator_t;$/;"	t	file:
iterator_t	src/Utilities/SDDSParser/associate.cpp	/^typedef std::string::const_iterator iterator_t;$/;"	t	file:
iterator_t	src/Utilities/SDDSParser/ast.cpp	/^typedef std::string::const_iterator iterator_t;$/;"	t	file:
iterator_t	src/Utilities/SDDSParser/column.cpp	/^typedef std::string::const_iterator iterator_t;$/;"	t	file:
iterator_t	src/Utilities/SDDSParser/data.cpp	/^typedef std::string::const_iterator iterator_t;$/;"	t	file:
iterator_t	src/Utilities/SDDSParser/description.cpp	/^typedef std::string::const_iterator iterator_t;$/;"	t	file:
iterator_t	src/Utilities/SDDSParser/file.cpp	/^typedef std::string::const_iterator iterator_t;$/;"	t	file:
iterator_t	src/Utilities/SDDSParser/include.cpp	/^typedef std::string::const_iterator iterator_t;$/;"	t	file:
iterator_t	src/Utilities/SDDSParser/parameter.cpp	/^typedef std::string::const_iterator iterator_t;$/;"	t	file:
iterator_t	src/Utilities/SDDSParser/version.cpp	/^typedef std::string::const_iterator iterator_t;$/;"	t	file:
iters	src/Utilities/SDDSParser/error_handler.hpp	/^        std::vector<Iterator> iters;$/;"	m	struct:SDDS::error_handler
itsAttr	src/AbstractObjects/Object.h	/^    std::vector<Attribute> itsAttr;$/;"	m	class:Object
itsAttr	src/Expressions/ARefExpr.h	/^        mutable Attribute *itsAttr;$/;"	m	class:Expressions::ARefExpr
itsAttr	src/Expressions/SRefAttr.h	/^        mutable Attribute *itsAttr;$/;"	m	class:Expressions::SRefAttr
itsAttr	src/Expressions/SRefExpr.h	/^        mutable Attribute *itsAttr;$/;"	m	class:Expressions::SRefExpr
itsBeamline_m	src/Algorithms/Tracker.h	/^    const Beamline& itsBeamline_m;$/;"	m	class:Tracker
itsBegin	src/Expressions/ATable.h	/^        int itsBegin, itsEnd, itsStep;$/;"	m	class:Expressions::ATable
itsBunch_m	src/Algorithms/Tracker.h	/^    PartBunch_t* itsBunch_m;$/;"	m	class:Tracker
itsCavity_m	src/Algorithms/CavityAutophaser.h	/^    std::shared_ptr<Component> itsCavity_m;$/;"	m	class:CavityAutophaser
itsChannel	src/Expressions/SCell.h	/^        mutable ConstChannel *itsChannel;$/;"	m	class:Expressions::SCell
itsClass	src/Tables/Selector.h	/^    const Element *itsClass;$/;"	m	class:Selector
itsClassicElement	src/AbstractObjects/Element.h	/^    std::shared_ptr<ElementBase> itsClassicElement;$/;"	m	class:Element
itsCode	src/Lines/Sequence.h	/^    ReferenceType itsCode;$/;"	m	class:Sequence
itsCoordTrafoTo_m	src/Beamlines/TBeamline.h	/^    Quaternion itsCoordTrafoTo_m;$/;"	m	class:TBeamline
itsCount	src/Tables/Selector.h	/^    int itsCount;$/;"	m	class:Selector
itsCounter	src/Beamlines/FlaggedElmPtr.h	/^    mutable int itsCounter;$/;"	m	class:FlaggedElmPtr
itsDataSink_m	src/Algorithms/ParallelTracker.h	/^    DataSink* itsDataSink_m;$/;"	m	class:ParallelTracker
itsDefault	src/AbstractObjects/AttributeHandler.h	/^    std::shared_ptr<AttributeBase> itsDefault;$/;"	m	class:AttributeHandler
itsElement	src/Beamlines/ElmPtr.h	/^    Pointer<ElementBase> itsElement;$/;"	m	class:ElmPtr
itsEnd	src/Expressions/ATable.h	/^        int itsBegin, itsEnd, itsStep;$/;"	m	class:Expressions::ATable
itsExpr	src/AbstractObjects/Table.h	/^        Expressions::PtrToScalar<double> itsExpr;$/;"	m	struct:Table::Cell
itsExpr	src/Expressions/ATable.h	/^        PtrToScalar<double> itsExpr;$/;"	m	class:Expressions::ATable
itsFlag	src/Lines/SequenceMember.h	/^    PositionType itsFlag;$/;"	m	class:SequenceMember
itsGeometry	src/Beamlines/TBeamline.h	/^    BeamlineGeometry itsGeometry;$/;"	m	class:TBeamline
itsHash	src/Expressions/ATable.h	/^        mutable int itsHash;$/;"	m	class:Expressions::ATable
itsHelp	src/AbstractObjects/AttributeHandler.h	/^    const std::string itsHelp;$/;"	m	class:AttributeHandler
itsHelp	src/AbstractObjects/Object.h	/^    std::string itsHelp;$/;"	m	class:Object
itsIndex	src/Expressions/SRefAttr.h	/^        const int itsIndex;$/;"	m	class:Expressions::SRefAttr
itsLaw	src/Expressions/ADeferred.h	/^        PtrToArray<T> itsLaw;$/;"	m	class:Expressions::ADeferred
itsLine	src/Algorithms/DefaultVisitor.h	/^    const Beamline& itsLine;$/;"	m	class:DefaultVisitor
itsLine	src/Beamlines/BeamlineGeometry.h	/^    const Beamline &itsLine;$/;"	m	class:BeamlineGeometry
itsLine	src/Lines/SequenceParser.h	/^    mutable TLine itsLine;$/;"	m	class:SequenceParser
itsList	src/Lines/SequenceParser.h	/^        std::list<SequenceMember *> itsList;$/;"	m	struct:SequenceParser::Reference
itsMap	src/AbsBeamline/AttributeSet.h	/^    NameMap itsMap;$/;"	m	class:AttributeSet
itsName	src/AbstractObjects/AttributeHandler.h	/^    const std::string itsName;$/;"	m	class:AttributeHandler
itsName	src/AbstractObjects/Object.h	/^    std::string itsName;$/;"	m	class:Object
itsName	src/Lines/Replacer.h	/^    const std::string itsName;$/;"	m	class:Replacer
itsObject	src/Channels/IndexedChannel.h	/^    T &itsObject;$/;"	m	class:IndexedChannel
itsObject	src/Channels/IndirectChannel.h	/^    T &itsObject;$/;"	m	class:IndirectChannel
itsObject	src/Expressions/ARefExpr.h	/^        mutable Object    *itsObject;$/;"	m	class:Expressions::ARefExpr
itsObject	src/Expressions/SRefAttr.h	/^        mutable Object    *itsObject;$/;"	m	class:Expressions::SRefAttr
itsObject	src/Expressions/SRefExpr.h	/^        mutable Object    *itsObject;$/;"	m	class:Expressions::SRefExpr
itsOpalBeamline_m	src/Algorithms/OrbitThreader.h	/^    OpalBeamline &itsOpalBeamline_m;$/;"	m	class:OrbitThreader
itsOpalBeamline_m	src/Algorithms/ParallelTracker.h	/^    OpalBeamline itsOpalBeamline_m;$/;"	m	class:ParallelTracker
itsOrder	src/Fields/BMultipoleField.h	/^    int itsOrder;$/;"	m	class:BMultipoleField
itsOrigin_m	src/Beamlines/TBeamline.h	/^    Vector_t<double, 3> itsOrigin_m;$/;"	m	class:TBeamline
itsOverrides	src/Expressions/ADeferred.h	/^        ArrayOfPtrs<T> itsOverrides;$/;"	m	class:Expressions::ADeferred
itsParent	src/AbstractObjects/Object.h	/^    Object *itsParent;$/;"	m	class:Object
itsParser	src/OpalParser/MacroCmd.h	/^    const Parser *itsParser;$/;"	m	class:MacroCmd
itsPattern	src/Tables/Selector.h	/^    const RegularExpression *itsPattern;$/;"	m	class:Selector
itsPosition	src/Lines/SequenceMember.h	/^    double itsPosition;$/;"	m	class:SequenceMember
itsPrefix	src/AbstractObjects/ValueDefinition.h	/^    const std::string itsPrefix;$/;"	m	class:ValueDefinition
itsRange	src/Expressions/AColumn.h	/^        RangeRep itsRange;$/;"	m	class:Expressions::AColumn
itsRange	src/Tables/RangeSelector.h	/^    RangeRep itsRange;$/;"	m	class:RangeSelector
itsRefPoint	src/Lines/Sequence.h	/^    std::string itsRefPoint;$/;"	m	class:Sequence
itsReference	src/Algorithms/AbstractTracker.h	/^    const PartData itsReference;$/;"	m	class:AbstractTracker
itsReference	src/Steppers/BorisPusher.h	/^    const PartData* itsReference;$/;"	m	class:BorisPusher
itsReference_m	src/Algorithms/CavityAutophaser.h	/^    const PartData &itsReference_m;$/;"	m	class:CavityAutophaser
itsSequence	src/Lines/SequenceParser.h	/^    Sequence* itsSequence;$/;"	m	class:SequenceParser
itsSize	src/Elements/OpalElement.h	/^    int itsSize;$/;"	m	class:OpalElement
itsStep	src/Expressions/ATable.h	/^        int itsBegin, itsEnd, itsStep;$/;"	m	class:Expressions::ATable
itsTable	src/Expressions/SHash.h	/^        const ATable &itsTable;$/;"	m	class:Expressions::SHash
itsTitle_m	src/AbstractObjects/OpalData.cpp	/^    std::string itsTitle_m;$/;"	m	struct:OpalDataImpl	file:
itsTracker_m	src/Track/TrackRun.h	/^    Tracker* itsTracker_m;$/;"	m	class:TrackRun
itsType	src/Lines/SequenceMember.h	/^    MemberType itsType;$/;"	m	class:SequenceMember
itsType	src/Tables/Selector.h	/^    const std::string itsType;$/;"	m	class:Selector
itsValue	src/Expressions/AList.h	/^        ArrayOfPtrs<T> itsValue;$/;"	m	class:Expressions::AList
ivector_t	src/Algorithms/ParallelTracker.h	/^    typedef std::vector<int> ivector_t;$/;"	t	class:ParallelTracker
j	src/Fields/FM3DH5BlockBase.h	/^        unsigned int j;$/;"	m	struct:FM3DH5BlockBase::IndexTriplet
j	src/Fields/FM3DMagnetoStatic.h	/^        unsigned int j;$/;"	m	struct:FM3DMagnetoStatic::IndexTriplet
j	src/Fields/FM3DMagnetoStaticExtended.h	/^        unsigned int j;$/;"	m	struct:FM3DMagnetoStaticExtended::IndexTriplet
k	src/Fields/FM3DH5BlockBase.h	/^        unsigned int k;$/;"	m	struct:FM3DH5BlockBase::IndexTriplet
k	src/Fields/FM3DMagnetoStatic.h	/^        unsigned int k;$/;"	m	struct:FM3DMagnetoStatic::IndexTriplet
k	src/Fields/FM3DMagnetoStaticExtended.h	/^        unsigned int k;$/;"	m	struct:FM3DMagnetoStaticExtended::IndexTriplet
kB	src/Physics/Physics.h	/^    constexpr double kB         = 8.617333262e-5;$/;"	m	namespace:Physics
kG2T	src/Physics/Units.h	/^    constexpr double kG2T = 1 \/ T2kG;$/;"	m	namespace:Units
kV2V	src/Physics/Units.h	/^    constexpr double kV2V = 1e+3;$/;"	m	namespace:Units
k_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    double k_m = 0.;$/;"	m	class:ScalingFFAMagnet
k_m	src/AbsBeamline/VerticalFFAMagnet.h	/^    double k_m          = 0.;$/;"	m	class:VerticalFFAMagnet
k_m	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^    double k_m = 1.0; \/\/ m^-1$/;"	m	class:VerticalFFAMagnetTest	file:
kapton	src/Physics/Material.cpp	/^    auto kapton        = Material::addMaterial("Kapton",$/;"	m	namespace:__anon18	file:
keV2GeV	src/Physics/Units.h	/^    constexpr double keV2GeV = keV2eV * eV2GeV;$/;"	m	namespace:Units
keV2MeV	src/Physics/Units.h	/^    constexpr double keV2MeV = 1 \/ MeV2keV;$/;"	m	namespace:Units
keV2eV	src/Physics/Units.h	/^    constexpr double keV2eV = 1e+3;$/;"	m	namespace:Units
keep	src/OpalParser/Statement.h	/^    TokenList::iterator keep;$/;"	m	class:Statement
key_t	src/Algorithms/IndexMap.h	/^    typedef Range key_t;$/;"	t	class:IndexMap
keyword	src/OpalParser/Statement.cpp	/^bool Statement::keyword(const char *key) {$/;"	f	class:Statement
kg2GeV	src/Physics/Units.h	/^    constexpr double kg2GeV = 1 \/ GeV2kg;$/;"	m	namespace:Units
kick	src/Steppers/BorisPusher.h	/^KOKKOS_INLINE_FUNCTION void BorisPusher::kick($/;"	f	class:BorisPusher
kickFieldSet_m	src/AbsBeamline/Corrector.h	/^    bool kickFieldSet_m;$/;"	m	class:Corrector
kickField_m	src/AbsBeamline/Corrector.h	/^    Vector_t<double, 3> kickField_m;$/;"	m	class:Corrector
kickParticles	src/Algorithms/ParallelTracker.h	/^inline void ParallelTracker::kickParticles(const BorisPusher& pusher) {$/;"	f	class:ParallelTracker
kickX_m	src/AbsBeamline/Corrector.h	/^    double kickX_m;$/;"	m	class:Corrector
kickY_m	src/AbsBeamline/Corrector.h	/^    double kickY_m;$/;"	m	class:Corrector
kick_m	src/Steppers/LF2.hpp	/^bool LF2<FieldFunction, Arguments...>::kick_m($/;"	f	class:LF2
kw_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    Vector_t<double, Dim> kw_m;$/;"	m	class:AlpineManager
lambda_left_m	src/BeamlineGeometry/VarRadiusGeometry.h	/^    double lambda_left_m;$/;"	m	class:VarRadiusGeometry
lambda_right_m	src/BeamlineGeometry/VarRadiusGeometry.h	/^    double lambda_right_m;$/;"	m	class:VarRadiusGeometry
lambdaleft	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^    double lambdaleft;$/;"	m	struct:coordinatetransform::myParams
lambdaleft	src/AbsBeamline/MultipoleTFunctions/tanhDeriv.cpp	/^    double lambdaleft;$/;"	m	struct:tanhderiv::my_f_params	file:
lambdaleft_m	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^    double lambdaleft_m;$/;"	m	class:coordinatetransform::CoordinateTransform
lambdaright	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^    double lambdaright;$/;"	m	struct:coordinatetransform::myParams
lambdaright	src/AbsBeamline/MultipoleTFunctions/tanhDeriv.cpp	/^    double lambdaright;$/;"	m	struct:tanhderiv::my_f_params	file:
lambdaright_m	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^    double lambdaright_m;$/;"	m	class:coordinatetransform::CoordinateTransform
lamda_e	src/Physics/Physics.h	/^    constexpr double lamda_e    = 3.8615926796e-13;$/;"	m	namespace:Physics
lamda_p	src/Physics/Physics.h	/^    constexpr double lamda_p    = 2.10308910336e-16;$/;"	m	namespace:Physics
last	src/AbstractObjects/RangeRep.h	/^    PlaceRep last;$/;"	m	class:RangeRep
last	src/Utilities/SDDSParser/error_handler.hpp	/^        Iterator last;$/;"	m	struct:SDDS::error_handler
lastPos	tests/opal_src/Utilities/MockComponent.h	/^    Vector_t lastPos;$/;"	m	class:MockComponent2
last_step_m	src/AbstractObjects/OpalData.cpp	/^    int last_step_m;$/;"	m	struct:OpalDataImpl	file:
latticePhiInit_m	src/AbsBeamline/Ring.h	/^    double latticePhiInit_m;$/;"	m	class:Ring
latticeRInit_m	src/AbsBeamline/Ring.h	/^    double latticeRInit_m;$/;"	m	class:Ring
latticeThetaInit_m	src/AbsBeamline/Ring.h	/^    double latticeThetaInit_m;$/;"	m	class:Ring
layout2_m	src/.Solvers/FFTPoissonSolver.h	/^    std::unique_ptr<FieldLayout_t> layout2_m;$/;"	m	class:FFTPoissonSolver
layout3_m	src/.Solvers/FFTPoissonSolver.h	/^    std::unique_ptr<FieldLayout_t> layout3_m;$/;"	m	class:FFTPoissonSolver
layout4_m	src/.Solvers/FFTPoissonSolver.h	/^    std::unique_ptr<FieldLayout_t> layout4_m;$/;"	m	class:FFTPoissonSolver
layoutVersion_m	src/Utilities/SDDSParser/version.hpp	/^        short layoutVersion_m;$/;"	m	struct:SDDS::version
layout_m	src/.Solvers/FFTPoissonSolver.h	/^    FieldLayout_t* layout_m;$/;"	m	class:FFTPoissonSolver
lbt_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    double lbt_m;$/;"	m	class:AlpineManager
lbt_m	src/PartBunch/PartBunch.hpp	/^    double lbt_m;$/;"	m	class:PartBunch
leave	src/AbstractObjects/PlaceRep.cpp	/^void PlaceRep::leave(const FlaggedElmPtr &fep) const {$/;"	f	class:PlaceRep
leave	src/AbstractObjects/RangeRep.cpp	/^void RangeRep::leave(const FlaggedElmPtr &fep) const {$/;"	f	class:RangeRep
len	src/BeamlineGeometry/PlanarArcGeometry.h	/^    double len;$/;"	m	class:PlanarArcGeometry
len	src/BeamlineGeometry/StraightGeometry.h	/^    double len;$/;"	m	class:StraightGeometry
length	src/Algorithms/Quaternion.hpp	/^inline double Quaternion::length() const {$/;"	f	class:Quaternion
lengthConsumed_m	src/Utilities/MSLang/ArgumentExtractor.h	/^        unsigned int lengthConsumed_m;$/;"	m	struct:mslang::ArgumentExtractor
lengthTolerance_m	src/AbsBeamline/Ring.cpp	/^const double Ring::lengthTolerance_m = 1e-2;$/;"	m	class:Ring	file:
lengthTolerance_m	src/AbsBeamline/Ring.h	/^    static const double lengthTolerance_m;$/;"	m	class:Ring
lengthUnits_m	src/AbsBeamline/Offset.cpp	/^const double Offset::lengthUnits_m = 1e3;$/;"	m	class:Offset	file:
lengthUnits_m	src/AbsBeamline/Offset.h	/^    static const double lengthUnits_m;$/;"	m	class:Offset
length_m	src/AbsBeamline/MultipoleT.h	/^    double length_m;$/;"	m	class:MultipoleT
length_m	src/AbsBeamline/MultipoleTBase.h	/^    double length_m;$/;"	m	class:MultipoleTBase
length_m	src/BeamlineGeometry/VarRadiusGeometry.h	/^    double length_m;$/;"	m	class:VarRadiusGeometry
length_m	src/Fields/Astra1DDynamic.h	/^    double length_m;$/;"	m	class:Astra1DDynamic
length_m	src/Fields/Astra1DElectroStatic.h	/^    double length_m;$/;"	m	class:Astra1DElectroStatic
length_m	src/Fields/Astra1DMagnetoStatic.h	/^    double length_m;$/;"	m	class:Astra1DMagnetoStatic
length_m	src/Fields/Astra1D_fast.h	/^    double length_m;$/;"	m	class:Astra1D_fast
length_m	src/Fields/FM1DDynamic.h	/^    double length_m;                        \/\/\/ Field length.$/;"	m	class:FM1DDynamic
length_m	src/Fields/FM1DDynamic_fast.h	/^    double length_m;                        \/\/\/ Field length.$/;"	m	class:FM1DDynamic_fast
length_m	src/Fields/FM1DElectroStatic.h	/^    double length_m;                        \/\/\/ Field length.$/;"	m	class:FM1DElectroStatic
length_m	src/Fields/FM1DElectroStatic_fast.h	/^    double length_m;                        \/\/\/ Field length.$/;"	m	class:FM1DElectroStatic_fast
length_m	src/Fields/FM1DMagnetoStatic.h	/^    double length_m;                        \/\/\/ Field length.$/;"	m	class:FM1DMagnetoStatic
length_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    double length_m;                        \/\/\/ Field length.$/;"	m	class:FM1DMagnetoStatic_fast
length_m	src/Fields/FM1DProfile2.h	/^    double length_m;$/;"	m	class:FM1DProfile2
length_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    double length_m;$/;"	m	class:FM3DMagnetoStaticExtended
length_m	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^    double length_m = 1.0;$/;"	m	class:VerticalFFAMagnetTest	file:
less	src/Expressions/Expressions.cpp	/^    static const TFunction2<bool, double> less = {"<", 3, Lt};$/;"	m	namespace:Expressions	file:
less	src/Structure/LossDataSink.h	/^    struct less<SetStatistics> {$/;"	s	namespace:std
lessEqual	src/Expressions/Expressions.cpp	/^    static const TFunction2<bool, double> lessEqual = {"<=", 3, Le};$/;"	m	namespace:Expressions	file:
level_m	src/Utilities/MSLang/QuadTree.h	/^        int level_m;$/;"	m	struct:mslang::QuadTree
lexeme	src/OpalParser/Token.h	/^    std::string lexeme;$/;"	m	class:Token
lft	src/Expressions/ABinary.h	/^        PtrToArray<U> lft;$/;"	m	class:Expressions::ABinary
lft	src/Expressions/Indexer.h	/^        PtrToArray<T> lft;$/;"	m	class:Expressions::Indexer
lft	src/Expressions/SBinary.h	/^        PtrToScalar<U> lft;$/;"	m	class:Expressions::SBinary
lhs	src/Utilities/MSLang/matheval.hpp	/^            expr_ast<real_t> lhs;$/;"	m	struct:matheval::detail::binary_op
line	src/OpalParser/AbsFileStream.h	/^    std::string line;$/;"	m	class:AbsFileStream
line	src/OpalParser/Token.h	/^    int line;$/;"	m	class:Token
lineSegmentTouchesOrCrossesLine	src/Utilities/Mesher.cpp	/^bool Mesher::lineSegmentTouchesOrCrossesLine(unsigned int i,$/;"	f	class:Mesher
line_m	src/OpalParser/StringStream.h	/^    const std::string line_m;$/;"	m	class:StringStream
linearInterpolation	src/.Solvers/ArbitraryDomain.cpp	/^void ArbitraryDomain::linearInterpolation($/;"	f	class:ArbitraryDomain
linearInterpolation	src/.Solvers/EllipticDomain.cpp	/^void EllipticDomain::linearInterpolation(int x, int y, int z, StencilValue_t& value,$/;"	f	class:EllipticDomain
linearInterpolation	src/.Solvers/IrregularDomain.cpp	/^void IrregularDomain::linearInterpolation(int \/*idx*\/, int \/*idy*\/, int \/*idz*\/,$/;"	f	class:IrregularDomain
lines_read_m	src/Fields/Fieldmap.h	/^    int lines_read_m;$/;"	m	class:Fieldmap
listskipper	src/Utilities/SDDSParser/skipper.hpp	/^        listskipper() : listskipper::base_type(start)$/;"	f	struct:SDDS::parser::listskipper
listskipper	src/Utilities/SDDSParser/skipper.hpp	/^    struct listskipper : qi::grammar<Iterator>$/;"	s	namespace:SDDS::parser
load_file	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^    def load_file(self, file_name):$/;"	m	class:PlotInterpolation
loadbalancefreq_m	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        unsigned int loadbalancefreq_m;$/;"	m	class:LoadBalancer
loadbalancefreq_m	src/PartBunch/LoadBalancer.hpp	/^    unsigned int loadbalancefreq_m;$/;"	m	class:LoadBalancer
loadbalancethreshold_m	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        double loadbalancethreshold_m;$/;"	m	class:LoadBalancer
loadbalancethreshold_m	src/PartBunch/LoadBalancer.hpp	/^    double loadbalancethreshold_m;$/;"	m	class:LoadBalancer
localBinHisto_m	src/PartBunch/Binning/AdaptBins.h	/^        d_histo_type localBinHisto_m;          \/\/\/< Local histogram view for bin counts.$/;"	m	class:ParticleBinning::AdaptBins
localCartesianOffset	src/AbsBeamline/Offset.cpp	/^Offset Offset::localCartesianOffset($/;"	f	class:Offset
localCylindricalOffset	src/AbsBeamline/Offset.cpp	/^Offset Offset::localCylindricalOffset($/;"	f	class:Offset
localTimeSteps	src/Track/Track.h	/^    std::vector<unsigned long long> localTimeSteps;$/;"	m	class:Track
localTrackStep_m	src/PartBunch/PartBunch.hpp	/^    long long localTrackStep_m;$/;"	m	class:PartBunch
local_flip	src/Algorithms/DefaultVisitor.h	/^    bool local_flip;$/;"	m	class:DefaultVisitor
lockRing	src/AbsBeamline/Ring.cpp	/^void Ring::lockRing() {$/;"	f	class:Ring
log10e	src/Physics/Physics.h	/^    constexpr double log10e     = 0.43429448190325182765;$/;"	m	namespace:Physics
logAnd	src/Expressions/Expressions.cpp	/^    static const TFunction2<bool, bool> logAnd = {"&&", 2, And};$/;"	m	namespace:Expressions	file:
logOr	src/Expressions/Expressions.cpp	/^    static const TFunction2<bool, bool> logOr = {"||", 1, Or};$/;"	m	namespace:Expressions	file:
logger_m	src/Algorithms/OrbitThreader.h	/^    std::ofstream logger_m;$/;"	m	class:OrbitThreader
loggingFrequency_m	src/Algorithms/OrbitThreader.h	/^    size_t loggingFrequency_m;$/;"	m	class:OrbitThreader
lossDS_m	src/AbsBeamline/Ring.h	/^    LossDataSink* lossDS_m;$/;"	m	class:Ring
lossDs_m	src/AbsBeamline/Monitor.h	/^    std::unique_ptr<LossDataSink> lossDs_m;$/;"	m	class:Monitor
lossDs_m	src/AbsBeamline/PluginElement.h	/^    std::unique_ptr<LossDataSink> lossDs_m;  \/\/\/< Pointer to Loss instance$/;"	m	class:PluginElement
lossWrCounter_m	src/Structure/DataSink.h	/^    unsigned int lossWrCounter_m;$/;"	m	class:DataSink
losses_t	src/Structure/DataSink.h	/^    typedef StatWriter::losses_t losses_t;$/;"	t	class:DataSink
losses_t	src/Structure/StatWriter.h	/^    typedef std::vector<std::pair<std::string, unsigned int> > losses_t;$/;"	t	class:StatWriter
lowResolutionWarning	src/Fields/Fieldmap.cpp	/^void Fieldmap::lowResolutionWarning(double squareError, double maxError) {$/;"	f	class:Fieldmap
lowerBound	src/Fields/Interpolation/NDGrid.h	/^void NDGrid::lowerBound(const std::vector<double>& pos, std::vector<int>& xIndex) const {$/;"	f	class:interpolation::NDGrid
lowerBound	src/Fields/Interpolation/ThreeDGrid.h	/^void ThreeDGrid::lowerBound(const double& x, int& xIndex,$/;"	f	class:interpolation::ThreeDGrid
lowerBound	src/Fields/Interpolation/ThreeDGrid.h	/^void ThreeDGrid::lowerBound(const double& x,$/;"	f	class:interpolation::ThreeDGrid
lowerLeftCorner_m	src/Structure/BoundingBox.h	/^    Vector_t<double, 3> lowerLeftCorner_m;$/;"	m	class:BoundingBox
lubksb	src/Filters/SavitzkyGolay.cpp	/^void lubksb(std::vector<double> &a, std::vector<int> &indx, std::vector<double> &b) {$/;"	f
ludcmp	src/Filters/SavitzkyGolay.cpp	/^void ludcmp(std::vector<double> &a, std::vector<int> &indx,  double &d) {$/;"	f
m	src/BeamlineGeometry/Matrix3D.h	/^    double m[3][3];$/;"	m	class:Matrix3D
m2cm	src/Physics/Units.h	/^    constexpr double m2cm = 1e+2;$/;"	m	namespace:Units
m2mm	src/Physics/Units.h	/^    constexpr double m2mm = 1e+3;$/;"	m	namespace:Units
mA2A	src/Physics/Units.h	/^    constexpr double mA2A = 1 \/ A2mA;$/;"	m	namespace:Units
m_alpha	src/Physics/Physics.h	/^    constexpr double m_alpha    = 4.001506179127 * amu;$/;"	m	namespace:Physics
m_c	src/Physics/Physics.h	/^    constexpr double m_c        = 11.9967074146787 * amu;$/;"	m	namespace:Physics
m_complex	src/Fields/Interpolation/MVector.h	/^typedef gsl_complex m_complex; \/\/typedef because I guess at some point I may want to do something else$/;"	t	namespace:interpolation
m_complex_build	src/Fields/Interpolation/MVector.h	/^inline m_complex m_complex_build(double r)           { m_complex c = {{r,0.}}; return c;}$/;"	f	namespace:interpolation
m_complex_build	src/Fields/Interpolation/MVector.h	/^inline m_complex m_complex_build(double r, double i) { m_complex c = {{r,i}}; return c;}$/;"	f	namespace:interpolation
m_d	src/Physics/Physics.h	/^    constexpr double m_d        = 2.013553212745 * amu;$/;"	m	namespace:Physics
m_e	src/Physics/Physics.h	/^    constexpr double m_e        = 0.51099895000e-03;$/;"	m	namespace:Physics
m_h	src/Physics/Physics.h	/^    constexpr double m_h        = 1.00782503224 * amu;$/;"	m	namespace:Physics
m_h2p	src/Physics/Physics.h	/^    constexpr double m_h2p       = 2.01510 * amu;$/;"	m	namespace:Physics
m_h3p	src/Physics/Physics.h	/^    constexpr double m_h3p       = 3.02293 * amu;$/;"	m	namespace:Physics
m_hm	src/Physics/Physics.h	/^    constexpr double m_hm       = 1.00837 * amu;$/;"	m	namespace:Physics
m_mu	src/Physics/Physics.h	/^    constexpr double m_mu       = 0.1056583755;$/;"	m	namespace:Physics
m_p	src/Physics/Physics.h	/^    constexpr double m_p        = 0.93827208816e+00;$/;"	m	namespace:Physics
m_u	src/Physics/Physics.h	/^    constexpr double m_u        = 237.999501 * amu;$/;"	m	namespace:Physics
m_xe	src/Physics/Physics.h	/^    constexpr double m_xe       = 128.87494026 * amu;$/;"	m	namespace:Physics
macrocharge_m	src/Track/TrackRun.h	/^    double macrocharge_m;$/;"	m	class:TrackRun
macromass_m	src/Track/TrackRun.h	/^    double macromass_m;$/;"	m	class:TrackRun
magnetLength_m	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    double magnetLength_m = 0.63; \/\/ m$/;"	m	class:ScalingFFAMagnetTest	file:
magnet_m	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^    std::unique_ptr<VerticalFFAMagnet> magnet_m;$/;"	m	class:VerticalFFAMagnetTest	file:
magnitude	src/Structure/BoundaryGeometry.cpp	/^static inline double magnitude(const Vector_t<double, 3>& v) {$/;"	f	file:
main	src/Main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	src/PartBunch/Binning/test/alpine/BinningLandauDamping.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tests/Main.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^    def main(self):$/;"	m	class:PlotInterpolation
main	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^def main():$/;"	f
main	tests/tools/install_gtest.bash	/^main() {$/;"	f
main	tools/BandRF/ascii2h5block.cpp	/^int main(int argc,char *argv[]) {$/;"	f
main	tools/Normalization2DMaps/normalization.py	/^def main(argv):$/;"	f
main	tools/SDDSReader/main.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tools/mslang/mslang.cpp	/^int main(int argc, char *argv[])$/;"	f
main	tools/opal2sdds/main.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tools/sdds2opal/main.cpp	/^int main(int argc, char **argv) {$/;"	f
mainDirectory	src/AbstractObjects/OpalData.cpp	/^    Directory mainDirectory;$/;"	m	struct:OpalDataImpl	file:
make	src/Expressions/ASUnary.h	/^    PtrToScalar<T> ASUnary<T>::make$/;"	f	class:Expressions::ASUnary
make	src/Expressions/SBinary.h	/^    Scalar<T> *SBinary<T, U>::make$/;"	f	class:Expressions::SBinary
make	src/Expressions/SNull.h	/^    Scalar<T> *SNull<T>::make(const TFunction0<T> &fun) {$/;"	f	class:Expressions::SNull
make	src/Expressions/SUnary.h	/^    Scalar<T> *SUnary<T, U>::make$/;"	f	class:Expressions::SUnary
makeActions	src/OpalConfigure/Configure.cpp	/^    void makeActions() {$/;"	f	namespace:__anon23
makeBool	src/Attributes/Attributes.cpp	/^    Attribute makeBool(const std::string &name, const std::string &help) {$/;"	f	namespace:Attributes
makeBool	src/Attributes/Attributes.cpp	/^    Attribute makeBool(const std::string &name, const std::string &help, bool ini) {$/;"	f	namespace:Attributes
makeBoolArray	src/Attributes/Attributes.cpp	/^    Attribute makeBoolArray(const std::string &name, const std::string &help) {$/;"	f	namespace:Attributes
makeDefinitions	src/OpalConfigure/Configure.cpp	/^    void makeDefinitions() {$/;"	f	namespace:__anon23
makeDirty	src/AbstractObjects/OpalData.cpp	/^void OpalData::makeDirty(Object* obj) {$/;"	f	class:OpalData
makeElements	src/OpalConfigure/Configure.cpp	/^    void makeElements() {$/;"	f	namespace:__anon23
makeInstance	src/AbstractObjects/Object.cpp	/^Object *Object::makeInstance(const std::string &\/*name*\/, Statement &, const Parser *) {$/;"	f	class:Object
makeInstance	src/Lines/LineTemplate.cpp	/^Object *LineTemplate::makeInstance$/;"	f	class:LineTemplate
makeInstance	src/Lines/SequenceTemplate.cpp	/^Object *SequenceTemplate::makeInstance$/;"	f	class:SequenceTemplate
makeInstance	src/OpalParser/MacroCmd.cpp	/^Object *MacroCmd::makeInstance$/;"	f	class:MacroCmd
makePlace	src/Attributes/Attributes.cpp	/^    Attribute makePlace(const std::string &name, const std::string &help) {$/;"	f	namespace:Attributes
makePredefinedString	src/Attributes/Attributes.cpp	/^    Attribute makePredefinedString(const std::string &name,$/;"	f	namespace:Attributes
makePredefinedString	src/Attributes/Attributes.cpp	/^    makePredefinedString(const std::string &name,$/;"	f	namespace:Attributes
makeRange	src/Attributes/Attributes.cpp	/^    Attribute makeRange(const std::string &name, const std::string &help) {$/;"	f	namespace:Attributes
makeReal	src/Attributes/Attributes.cpp	/^    Attribute makeReal(const std::string &name, const std::string &help) {$/;"	f	namespace:Attributes
makeReal	src/Attributes/Attributes.cpp	/^    makeReal(const std::string &name, const std::string &help, double initial) {$/;"	f	namespace:Attributes
makeRealArray	src/Attributes/Attributes.cpp	/^    Attribute makeRealArray(const std::string &name, const std::string &help) {$/;"	f	namespace:Attributes
makeReference	src/Attributes/Attributes.cpp	/^    Attribute makeReference(const std::string &name, const std::string &help) {$/;"	f	namespace:Attributes
makeSharable	src/AbsBeamline/ElementBase.cpp	/^void ElementBase::makeSharable() {$/;"	f	class:ElementBase
makeSharable	src/Beamlines/TBeamline.h	/^inline void TBeamline<T>::makeSharable() {$/;"	f	class:TBeamline
makeString	src/Attributes/Attributes.cpp	/^    Attribute makeString(const std::string &name, const std::string &help) {$/;"	f	namespace:Attributes
makeString	src/Attributes/Attributes.cpp	/^    makeString(const std::string &name, const std::string &help, const std::string &initial) {$/;"	f	namespace:Attributes
makeStringArray	src/Attributes/Attributes.cpp	/^    Attribute makeStringArray(const std::string &name, const std::string &help) {$/;"	f	namespace:Attributes
makeTableRow	src/Attributes/Attributes.cpp	/^    Attribute makeTableRow(const std::string &name, const std::string &help) {$/;"	f	namespace:Attributes
makeTemplate	src/AbstractObjects/Object.cpp	/^Object *Object::makeTemplate$/;"	f	class:Object
makeTemplate	src/Lines/Line.cpp	/^Object *Line::makeTemplate$/;"	f	class:Line
makeTemplate	src/Lines/LineTemplate.cpp	/^Object *LineTemplate::makeTemplate(const std::string &, TokenStream &, Statement &) {$/;"	f	class:LineTemplate
makeTemplate	src/Lines/Sequence.cpp	/^Object* Sequence::makeTemplate(const std::string& name, TokenStream& is, Statement& statement) {$/;"	f	class:Sequence
makeTemplate	src/Lines/SequenceTemplate.cpp	/^Object *SequenceTemplate::makeTemplate$/;"	f	class:SequenceTemplate
makeTemplate	src/OpalParser/MacroCmd.cpp	/^Object *MacroCmd::makeTemplate$/;"	f	class:MacroCmd
makeTokenList	src/Attributes/Attributes.cpp	/^    Attribute makeTokenList(const std::string &name, const std::string &help) {$/;"	f	namespace:Attributes
makeTokenListArray	src/Attributes/Attributes.cpp	/^    Attribute makeTokenListArray(const std::string &name, const std::string &help) {$/;"	f	namespace:Attributes
makeUpperCaseString	src/Attributes/Attributes.cpp	/^    Attribute makeUpperCaseString(const std::string &name, const std::string &help) {$/;"	f	namespace:Attributes
makeUpperCaseString	src/Attributes/Attributes.cpp	/^    makeUpperCaseString(const std::string &name, const std::string &help, const std::string &initial) {$/;"	f	namespace:Attributes
makeUpperCaseStringArray	src/Attributes/Attributes.cpp	/^    Attribute makeUpperCaseStringArray(const std::string &name, const std::string &help) {$/;"	f	namespace:Attributes
mapElement2Range_m	src/Algorithms/IndexMap.h	/^    invertedMap_t mapElement2Range_m;$/;"	m	class:IndexMap
mapIndices2Voxel	src/Structure/BoundaryGeometry.cpp	/^inline Vector_t<double, 3> BoundaryGeometry::mapIndices2Voxel($/;"	f	class:BoundaryGeometry
mapPoint2Voxel	src/Structure/BoundaryGeometry.cpp	/^inline Vector_t<double, 3> BoundaryGeometry::mapPoint2Voxel(const Vector_t<double, 3>& pt) {$/;"	f	class:BoundaryGeometry
mapPoint2VoxelIndices	src/Structure/BoundaryGeometry.cpp	1467;"	d	file:
mapRange2Element_m	src/Algorithms/IndexMap.h	/^    map_t mapRange2Element_m;$/;"	m	class:IndexMap
mapVoxelIndices2ID	src/Structure/BoundaryGeometry.cpp	/^inline int BoundaryGeometry::mapVoxelIndices2ID(const int i, const int j, const int k) {$/;"	f	class:BoundaryGeometry
map_t	src/Algorithms/IndexMap.h	/^    typedef std::map<key_t, value_t, myCompare> map_t;$/;"	t	class:IndexMap
mappedStartExitField_m	src/AbsBeamline/TravelingWave.h	/^    double mappedStartExitField_m;$/;"	m	class:TravelingWave
maps_m	src/Fields/Interpolation/NDGrid.h	/^    std::vector<VectorMap*>            maps_m;$/;"	m	class:interpolation::NDGrid
maps_m	src/Fields/Interpolation/ThreeDGrid.h	/^    std::vector<VectorMap*> maps_m;$/;"	m	class:interpolation::ThreeDGrid
margin	tests/classic_src/AbsBeamline/TrimCoilTest.cpp	/^const double margin = 1e-7;$/;"	v
margin	tests/ippl_src/AppTypes/Operators.cpp	/^constexpr double margin = 1e-7;$/;"	v
margin	tests/ippl_src/AppTypes/Tensor.cpp	/^constexpr double margin = 1e-7;$/;"	v
margin	tests/ippl_src/AppTypes/Vektor.cpp	/^constexpr double margin = 1e-7;$/;"	v
margin	tests/ippl_src/AppTypes/VektorTz.cpp	/^constexpr double margin = 1e-7;$/;"	v
mark	src/OpalParser/Statement.cpp	/^void Statement::mark() {$/;"	f	class:Statement
marker	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^    def marker(self):$/;"	m	class:PlotInterpolation
mass	src/Algorithms/PartData.h	/^    double mass;     \/\/ Particle mass.$/;"	m	class:PartData
massDensity_m	src/Physics/Material.h	/^        const double massDensity_m;$/;"	m	class:Physics::Material
mass_coeff	src/Steppers/RK4.h	/^    const double mass_coeff = 1.0e9 * Units::GeV2kg; \/\/ from GeV\/c^2 to basic unit: GV*C*s^2\/m^2, (1.0e9 converts V*C*s^2\/m^2 to GV*C*s^2\/m^2)$/;"	m	class:RK4
mass_m	src/AbstractObjects/OpalParticle.h	/^    double mass_m;$/;"	m	class:OpalParticle
mass_m	src/Algorithms/OpalParticle.h	/^    double mass_m;$/;"	m	class:OpalParticle
match	src/Utilities/RegularExpression.cpp	/^bool RegularExpression::match(const std::string &s) const {$/;"	f	class:RegularExpression
math	src/Utilities/MSLang/matheval.hpp	/^        namespace math {$/;"	n	namespace:matheval::detail
matheval	src/Utilities/MSLang/matheval.hpp	/^namespace matheval {$/;"	n
matplotlib	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^import matplotlib.pyplot$/;"	i
matrix_t	src/Algorithms/BoostMatrix.h	/^typedef boost::numeric::ublas::matrix<double> matrix_t;$/;"	t
matrix_t	src/Algorithms/DistributionMoments.h	/^typedef boost::numeric::ublas::matrix<double> matrix_t;$/;"	t
matrix_t	src/Algorithms/Matrix.h	/^typedef boost::numeric::ublas::matrix<double> matrix_t;$/;"	t
max	src/Fields/Interpolation/NDGrid.h	/^double NDGrid::max(const int& dimension) const {$/;"	f	class:interpolation::NDGrid
maxArrSize	src/PartBunch/Binning/ParallelReduceTools.h	/^    constexpr IndexType maxArrSize = 15; \/\/ 128 needs a few minutes to compile. Good in between magic number is 30. Fast compilation with 15$/;"	m	namespace:ParticleBinning
maxBins_m	src/PartBunch/Binning/AdaptBins.h	/^        const bin_index_type maxBins_m;              \/\/\/< Maximum number of bins.$/;"	m	class:ParticleBinning::AdaptBins
maxExtent	src/Structure/BoundaryGeometry.h	/^        Vector_t<double, 3> maxExtent;$/;"	m	struct:BoundaryGeometry::__anon60
maxExtent_m	src/Structure/BoundaryGeometry.h	/^    Vector_t<double, 3> maxExtent_m;  \/\/ maximum of geometry coordinate.$/;"	m	class:BoundaryGeometry
maxOrderX_m	src/AbsBeamline/MultipoleT.h	/^    std::size_t maxOrderX_m = 0;$/;"	m	class:MultipoleT
maxOrderX_m	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    std::size_t maxOrderX_m;$/;"	m	class:MultipoleTCurvedConstRadius
maxOrderX_m	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    std::size_t maxOrderX_m;$/;"	m	class:MultipoleTCurvedVarRadius
maxOrder_m	src/AbsBeamline/MultipoleT.h	/^    std::size_t maxOrder_m = 0;$/;"	m	class:MultipoleT
maxOrder_m	src/AbsBeamline/MultipoleTBase.h	/^    std::size_t maxOrder_m;$/;"	m	class:MultipoleTBase
maxOrder_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    size_t maxOrder_m = 0;$/;"	m	class:ScalingFFAMagnet
maxOrder_m	src/AbsBeamline/VerticalFFAMagnet.h	/^    size_t maxOrder_m   = 0;$/;"	m	class:VerticalFFAMagnet
maxOrder_m	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^    size_t maxOrder_m = 2;$/;"	m	class:VerticalFFAMagnetTest	file:
maxPhases_m	src/AbstractObjects/OpalData.cpp	/^    std::vector<MaxPhasesT> maxPhases_m;$/;"	m	struct:OpalDataImpl	file:
maxR2_m	src/AbsBeamline/Ring.h	/^    double maxR2_m;$/;"	m	class:Ring
maxR_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> maxR_m;$/;"	m	class:DistributionMoments
maxSorder_m	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    std::size_t maxSorder_m;$/;"	m	class:polynomial::TwoPolynomial
maxTrackSteps_m	src/AbstractObjects/OpalData.cpp	/^    unsigned long long maxTrackSteps_m;$/;"	m	struct:OpalDataImpl	file:
maxValue_m	src/Structure/ValueRange.h	/^    T maxValue_m;$/;"	m	class:ValueRange
maxX	src/Fields/Interpolation/ThreeDGrid.h	/^double ThreeDGrid::maxX() const {$/;"	f	class:interpolation::ThreeDGrid
maxXorder_m	src/AbsBeamline/MultipoleTFunctions/Polynomial.h	/^    std::size_t maxXorder_m;$/;"	m	class:polynomial::Polynomial
maxXorder_m	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    std::size_t maxXorder_m;$/;"	m	class:polynomial::TwoPolynomial
maxY	src/Fields/Interpolation/ThreeDGrid.h	/^double ThreeDGrid::maxY() const {$/;"	f	class:interpolation::ThreeDGrid
maxZ	src/Fields/Interpolation/ThreeDGrid.h	/^double ThreeDGrid::maxZ() const {$/;"	f	class:interpolation::ThreeDGrid
max_NormalComponent_m	src/AbsBeamline/Multipole.h	/^    int max_NormalComponent_m;$/;"	m	class:Multipole
max_SkewComponent_m	src/AbsBeamline/Multipole.h	/^    int max_SkewComponent_m;$/;"	m	class:Multipole
max_m	src/.Solvers/IrregularDomain.h	/^    Vector_t<double, 3> max_m;$/;"	m	class:IrregularDomain
max_m	src/Distribution/MultiVariateGaussian.hpp	/^    Vector_t<double, 6> max_m;$/;"	m	class:MultiVariateGaussian
max_m	src/Structure/PeakFinder.h	/^    double min_m, max_m;$/;"	m	class:PeakFinder
maxran	src/Utilities/ClassicRandom.h	/^static const int maxran = 1000000000;$/;"	v
meanExcitationEnergy_m	src/Physics/Material.h	/^        const double meanExcitationEnergy_m;$/;"	m	class:Physics::Material
meanGammaZ_m	src/Algorithms/DistributionMoments.h	/^    double meanGammaZ_m;$/;"	m	class:DistributionMoments
meanGamma_m	src/Algorithms/DistributionMoments.h	/^    double meanGamma_m;$/;"	m	class:DistributionMoments
meanKineticEnergy_m	src/Algorithms/DistributionMoments.h	/^    double meanKineticEnergy_m;$/;"	m	class:DistributionMoments
meanP_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> meanP_m;$/;"	m	class:DistributionMoments
meanR_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> meanR_m;$/;"	m	class:DistributionMoments
meanTime_m	src/Algorithms/DistributionMoments.h	/^    double meanTime_m;$/;"	m	class:DistributionMoments
means_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 6> means_m;$/;"	m	class:DistributionMoments
memoryDump	src/Utilities/Options.cpp	/^    bool memoryDump = false;$/;"	m	namespace:Options	file:
merge	src/Elements/OpalBeamline.cpp	/^void OpalBeamline::merge(OpalBeamline& rhs) {$/;"	f	class:OpalBeamline
mergeBins	src/PartBunch/Binning/BinHisto.hpp	/^    Histogram<size_type, bin_index_type, value_type, UseDualView, Properties...>::mergeBins(const value_type maxBinRatio) {$/;"	f	class:ParticleBinning::Histogram
mesh2_m	src/.Solvers/FFTPoissonSolver.h	/^    std::unique_ptr<Mesh_t> mesh2_m;$/;"	m	class:FFTPoissonSolver
mesh3_m	src/.Solvers/FFTPoissonSolver.h	/^    std::unique_ptr<Mesh_t> mesh3_m;$/;"	m	class:FFTPoissonSolver
mesh4_m	src/.Solvers/FFTPoissonSolver.h	/^    std::unique_ptr<Mesh_t> mesh4_m;$/;"	m	class:FFTPoissonSolver
mesh_m	src/.Solvers/FFTPoissonSolver.h	/^    Mesh_t* mesh_m;$/;"	m	class:FFTPoissonSolver
mesh_m	src/AbstractObjects/OpalData.cpp	/^    Mesh_t<3>* mesh_m;$/;"	m	struct:OpalDataImpl	file:
mesh_m	src/Fields/Interpolation/Mesh.h	/^    const Mesh*      mesh_m;$/;"	m	class:interpolation::Mesh::Iterator
mesh_m	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    Mesh_t<Dim> mesh_m;$/;"	m	class:FieldContainer
mesh_m	src/PartBunch/FieldContainer.hpp	/^    Mesh_t<Dim> mesh_m;$/;"	m	class:FieldContainer
message	src/Utilities/ClassicException.h	/^    const std::string message;$/;"	m	class:ClassicException
meth_	src/Utilities/SDDSParser/SDDSParserException.h	/^    std::string meth_;$/;"	m	class:SDDSParserException
method	src/Utilities/ClassicException.h	/^    const std::string method;$/;"	m	class:ClassicException
method_m	src/Track/TrackRun.h	/^    RunMethod method_m;$/;"	m	class:TrackRun
mi_m	src/PartBunch/PartBunch.hpp	/^    double mi_m;$/;"	m	class:PartBunch
min	src/Fields/Interpolation/NDGrid.h	/^double NDGrid::min(const int& dimension) const {$/;"	f	class:interpolation::NDGrid
minBinEmitted	src/Utilities/Options.cpp	/^    int minBinEmitted = 10;$/;"	m	namespace:Options	file:
minExtent	src/Structure/BoundaryGeometry.h	/^        Vector_t<double, 3> minExtent;$/;"	m	struct:BoundaryGeometry::__anon60
minExtent_m	src/Structure/BoundaryGeometry.h	/^    Vector_t<double, 3> minExtent_m;  \/\/ minimum of geometry coordinate.$/;"	m	class:BoundaryGeometry
minR2_m	src/AbsBeamline/Ring.h	/^    double minR2_m;$/;"	m	class:Ring
minR_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> minR_m;$/;"	m	class:DistributionMoments
minStepForRebin	src/Utilities/Options.cpp	/^    int minStepForRebin = 200;$/;"	m	namespace:Options	file:
minStepforReBin_m	src/Algorithms/ParallelTracker.h	/^    int minStepforReBin_m;$/;"	m	class:ParallelTracker
minValue_m	src/Structure/ValueRange.h	/^    T minValue_m;$/;"	m	class:ValueRange
minX	src/Fields/Interpolation/ThreeDGrid.h	/^double ThreeDGrid::minX() const {$/;"	f	class:interpolation::ThreeDGrid
minY	src/Fields/Interpolation/ThreeDGrid.h	/^double ThreeDGrid::minY() const {$/;"	f	class:interpolation::ThreeDGrid
minZ	src/Fields/Interpolation/ThreeDGrid.h	/^double ThreeDGrid::minZ() const {$/;"	f	class:interpolation::ThreeDGrid
min_m	src/.Solvers/IrregularDomain.h	/^    Vector_t<double, 3> min_m;$/;"	m	class:IrregularDomain
min_m	src/Distribution/MultiVariateGaussian.hpp	/^    Vector_t<double, 6> min_m;$/;"	m	class:MultiVariateGaussian
min_m	src/Structure/PeakFinder.h	/^    double min_m, max_m;$/;"	m	class:PeakFinder
minimizeNumberOfRectangles	src/Utilities/MSLang/Mask.cpp	/^    std::vector<Mask::IntPixel_t> Mask::minimizeNumberOfRectangles(std::vector<bool> pixels,$/;"	f	class:mslang::Mask
minus	src/Expressions/Expressions.cpp	/^    static const TFunction2<double, double> minus = {"-", 4, Sub};$/;"	m	namespace:Expressions	file:
mirrorRhoField	src/.Solvers/FFTPoissonSolver.cpp	/^void FFTPoissonSolver::mirrorRhoField() {$/;"	f	class:FFTPoissonSolver
mirrorRhoField	src/.Solvers/FFTPoissonSolver.cpp	/^void FFTPoissonSolver::mirrorRhoField(Field_t& ggrn2) {$/;"	f	class:FFTPoissonSolver
misalignment_m	src/AbsBeamline/ElementBase.h	/^    CoordinateSystemTrafo misalignment_m;$/;"	m	class:ElementBase
missingValuesWarning	src/Fields/Fieldmap.cpp	/^void Fieldmap::missingValuesWarning() {$/;"	f	class:Fieldmap
mm	src/AbsBeamline/VerticalFFAMagnet.h	/^    const double mm    = 1000.;$/;"	m	class:VerticalFFAMagnet
mm	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^    const double mm = 1e3;$/;"	m	class:VerticalFFAMagnetTest	file:
mm2m	src/Physics/Units.h	/^    constexpr double mm2m = 1 \/ m2mm;$/;"	m	namespace:Units
mockVec_m	tests/classic_src/AbsBeamline/RingTest.cpp	/^    std::vector<MockComponent*> mockVec_m;$/;"	m	class:OffsetFactory	file:
mode_m	src/AbsBeamline/TravelingWave.h	/^    double mode_m;$/;"	m	class:TravelingWave
mode_m	src/Structure/SDDSWriter.h	/^    std::ios_base::openmode mode_m;$/;"	m	class:SDDSWriter
mode_m	src/Utilities/SDDSParser/data.hpp	/^        ast::datamode mode_m;$/;"	m	struct:SDDS::data
modified	src/AbstractObjects/Object.h	/^    bool modified;$/;"	m	class:Object
modified	src/AbstractObjects/OpalData.cpp	/^    bool modified;$/;"	m	struct:OpalDataImpl	file:
modify_device	src/PartBunch/Binning/BinHisto.h	/^        void modify_device() { if constexpr (UseDualView) histogram_m.modify_device(); }$/;"	f	class:ParticleBinning::Histogram
modify_host	src/PartBunch/Binning/BinHisto.h	/^        void modify_host() { if constexpr (UseDualView) histogram_m.modify_host(); }$/;"	f	class:ParticleBinning::Histogram
molybdenum	src/Physics/Material.cpp	/^    auto molybdenum    = Material::addMaterial("Molybdenum",$/;"	m	namespace:__anon18	file:
moments_m	src/Algorithms/DistributionMoments.h	/^    matrix_t moments_m;$/;"	m	class:DistributionMoments
mrad2rad	src/Physics/Units.h	/^    constexpr double mrad2rad = 1 \/ rad2mrad;$/;"	m	namespace:Units
mslang	src/Utilities/MSLang.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/AffineTransformation.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/ArgumentExtractor.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/ArgumentExtractor.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/BoundingBox2D.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/BoundingBox2D.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/Difference.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/Difference.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/Ellipse.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/Ellipse.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/Intersection.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/Intersection.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/Mask.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/Mask.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/Polygon.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/Polygon.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/QuadTree.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/QuadTree.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/Rectangle.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/Rectangle.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/Repeat.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/Repeat.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/Rotation.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/Rotation.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/Shear.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/Shear.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/SymmetricDifference.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/SymmetricDifference.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/Translation.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/Translation.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/Triangle.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/Triangle.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/Union.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/Union.h	/^namespace mslang {$/;"	n
mslang	src/Utilities/MSLang/matheval.cpp	/^namespace mslang {$/;"	n	file:
mslang	src/Utilities/MSLang/matheval.h	/^namespace mslang {$/;"	n
mtrace	src/Utilities/Options.cpp	/^    bool mtrace = false;$/;"	m	namespace:Options	file:
mtsSubsteps	src/Utilities/Options.cpp	/^    int mtsSubsteps = 1;$/;"	m	namespace:Options	file:
mu_0	src/Physics/Physics.h	/^    constexpr double mu_0       = 1.25663706212e-06;$/;"	m	namespace:Physics
mult	src/Utilities/MSLang/AffineTransformation.h	/^        AffineTransformation mult(const AffineTransformation &B) {$/;"	f	struct:mslang::AffineTransformation
multiplyConstant	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^void TwoPolynomial::multiplyConstant (const int &constant) {$/;"	f	class:polynomial::TwoPolynomial
multiplyPolynomial	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^void DifferentialOperator::multiplyPolynomial(const Polynomial &poly) {$/;"	f	class:polynomial::DifferentialOperator
multiplyPolynomial	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^void DifferentialOperatorTwo::multiplyPolynomial(const TwoPolynomial &poly) {$/;"	f	class:polynomial::DifferentialOperatorTwo
multiplyPolynomial	src/AbsBeamline/MultipoleTFunctions/Polynomial.cpp	/^void Polynomial::multiplyPolynomial(const Polynomial &poly) {$/;"	f	class:polynomial::Polynomial
multiplyPolynomial	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^void PolynomialSum::multiplyPolynomial(const TwoPolynomial &poly) {$/;"	f	class:polynomial::PolynomialSum
multiplyPolynomial	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^void TwoPolynomial::multiplyPolynomial(const TwoPolynomial &poly) {$/;"	f	class:polynomial::TwoPolynomial
multiplydSfactors	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^void TwoPolynomial::multiplydSfactors(const TwoPolynomial &poly) {$/;"	f	class:polynomial::TwoPolynomial
myCompare	src/Algorithms/IndexMap.h	/^    class myCompare {$/;"	c	class:IndexMap
myElements	src/Algorithms/ParallelTracker.h	/^    std::list<Component*> myElements;$/;"	m	class:ParallelTracker
myParams	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^struct myParams {$/;"	s	namespace:coordinatetransform
my_f	src/AbsBeamline/MultipoleTFunctions/tanhDeriv.cpp	/^double my_f (double x, void *p) {$/;"	f	namespace:tanhderiv
my_f_params	src/AbsBeamline/MultipoleTFunctions/tanhDeriv.cpp	/^struct my_f_params {$/;"	s	namespace:tanhderiv	file:
mylar	src/Physics/Material.cpp	/^    auto mylar         = Material::addMaterial("Mylar",$/;"	m	namespace:__anon18	file:
n	src/AbsBeamline/MultipoleTFunctions/tanhDeriv.cpp	/^    int n;$/;"	m	struct:tanhderiv::my_f_params	file:
nBin_m	src/Algorithms/PartBins.h	/^    std::unique_ptr<size_t[]> nBin_m;$/;"	m	class:PartBins
nBins_m	src/Structure/PeakFinder.h	/^    unsigned int nBins_m;$/;"	m	class:PeakFinder
nDelBin_m	src/Algorithms/PartBins.h	/^    std::unique_ptr<size_t[]> nDelBin_m;$/;"	m	class:PartBins
nLHS	src/Utilities/Options.cpp	/^    int nLHS = 1;$/;"	m	namespace:Options	file:
nSlices_m	src/AbsBeamline/Drift.h	/^    std::size_t nSlices_m;$/;"	m	class:Drift
nSlices_m	src/AbsBeamline/Multipole.h	/^    std::size_t nSlices_m;$/;"	m	class:Multipole
nTotal_m	src/Structure/LossDataSink.h	/^    unsigned long nTotal_m;$/;"	m	struct:SetStatistics
n_poly_coeffs_	src/Fields/Interpolation/SolveFactory.h	/^    int n_poly_coeffs_;$/;"	m	class:interpolation::SolveFactory
name	src/BeamlineCore/DriftRep.cpp	/^        const char *name;$/;"	m	struct:__anon75::Entry	file:
name	src/BeamlineCore/MonitorRep.cpp	/^        const char *name;$/;"	m	struct:__anon74::Entry	file:
name	src/BeamlineCore/MultipoleRep.cpp	/^        const char *name;$/;"	m	struct:__anon70::Entry	file:
name	src/BeamlineCore/ProbeRep.cpp	/^        const char *name;$/;"	m	struct:__anon72::Entry	file:
name	src/BeamlineCore/RFCavityRep.cpp	/^        const char *name;$/;"	m	struct:__anon71::Entry	file:
name	src/BeamlineCore/SolenoidRep.cpp	/^        const char *name;$/;"	m	struct:__anon76::Entry	file:
name	src/BeamlineCore/TravelingWaveRep.cpp	/^        const char *name;$/;"	m	struct:__anon73::Entry	file:
name	src/Expressions/TFunction0.h	/^        const char *name;$/;"	m	struct:Expressions::TFunction0
name	src/Expressions/TFunction1.h	/^        const char *name;$/;"	m	struct:Expressions::TFunction1
name	src/Expressions/TFunction2.h	/^        const char *name;$/;"	m	struct:Expressions::TFunction2
name	src/Fields/Fieldmap.h	/^        static const char* name;$/;"	m	struct:Fieldmap::TypeParseTraits
name	tools/opal2sdds/main.cpp	/^    std::string name;$/;"	m	struct:Attribute	file:
name2idx_m	src/Structure/SDDSColumnSet.h	/^    std::map<std::string, unsigned int> name2idx_m;$/;"	m	class:SDDSColumnSet
name_m	src/Structure/SDDSColumn.h	/^    std::string name_m;$/;"	m	class:SDDSColumn
name_m	src/Utilities/SDDSParser/column.hpp	/^        boost::optional<std::string> name_m;$/;"	m	struct:SDDS::column
name_m	src/Utilities/SDDSParser/parameter.hpp	/^        boost::optional<std::string> name_m;$/;"	m	struct:SDDS::parameter
ndgridtest	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^namespace ndgridtest {$/;"	n	file:
nearbyPointsRecursive	src/Fields/Interpolation/PPSolveFactory.cpp	/^void PPSolveFactory::nearbyPointsRecursive($/;"	f	class:interpolation::PPSolveFactory
neg	tests/ippl_src/Field/FunctionFace.cpp	/^double neg  (const double& x) { return -x; }$/;"	f
negate	src/Expressions/Expressions.cpp	/^    static const TFunction1<double, double> negate = {"-", 5, Neg};$/;"	m	namespace:Expressions	file:
nemittedBins_m	src/Algorithms/PartBins.h	/^    int nemittedBins_m;$/;"	m	class:PartBins
newBase	src/Lines/Replacer.h	/^    ElementBase *newBase;$/;"	m	class:Replacer
newCoordArray	src/Fields/Interpolation/NDGrid.cpp	/^double* NDGrid::newCoordArray  ( const int& dimension)  const {$/;"	f	class:interpolation::NDGrid
newXArray	src/Fields/Interpolation/ThreeDGrid.h	/^double* ThreeDGrid::newXArray() {$/;"	f	class:interpolation::ThreeDGrid
newYArray	src/Fields/Interpolation/ThreeDGrid.h	/^double* ThreeDGrid::newYArray() {$/;"	f	class:interpolation::ThreeDGrid
newZArray	src/Fields/Interpolation/ThreeDGrid.h	/^double* ThreeDGrid::newZArray() {$/;"	f	class:interpolation::ThreeDGrid
next	src/Utilities/ClassicRandom.h	/^    int next;$/;"	m	class:Random
nextIsMock_m	tests/classic_src/AbsBeamline/RingTest.cpp	/^    bool nextIsMock_m;$/;"	m	class:OffsetFactory	file:
nextLine	tools/Normalization2DMaps/normalization.py	/^def nextLine(fh):$/;"	f
nil	src/Utilities/MSLang/matheval.hpp	/^        struct nil {};$/;"	s	namespace:matheval::detail
nil	src/Utilities/SDDSParser/ast.hpp	/^        struct nil {};$/;"	s	namespace:SDDS::ast
ninetyFivePercentile_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> ninetyFivePercentile_m;$/;"	m	class:DistributionMoments
ninetyNinePercentile_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> ninetyNinePercentile_m;$/;"	m	class:DistributionMoments
ninetyNine_NinetyNinePercentile_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> ninetyNine_NinetyNinePercentile_m;$/;"	m	class:DistributionMoments
noComm_m	src/Structure/IpplInfoWrapper.h	/^    unsigned int noComm_m;$/;"	m	class:IpplInfoWrapper
noFieldmapWarning	src/Fields/Fieldmap.cpp	/^void Fieldmap::noFieldmapWarning() {$/;"	f	class:Fieldmap
nodes_m	src/Utilities/MSLang/QuadTree.h	/^        std::vector<std::shared_ptr<QuadTree> > nodes_m;$/;"	m	struct:mslang::QuadTree
nodes_m	src/Utilities/MSLang/Triangle.h	/^        std::vector<Vector_t<double, 3>> nodes_m;$/;"	m	struct:mslang::Triangle
noexcept	src/Structure/LossDataSink.cpp	/^LossDataSink::~LossDataSink() noexcept(false) {$/;"	f
none	src/Fields/SectorMagneticFieldMap.h	/^    enum symmetry {none, dipole};$/;"	e	enum:SectorMagneticFieldMap::symmetry
normEmit_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> normEmit_m;$/;"	m	struct:SetStatistics
normMax_m	src/Distribution/MultiVariateGaussian.hpp	/^    Vector_t<double, 6> normMax_m;$/;"	m	class:MultiVariateGaussian
normMin_m	src/Distribution/MultiVariateGaussian.hpp	/^    Vector_t<double, 6> normMin_m;$/;"	m	class:MultiVariateGaussian
normPmax_m	src/Distribution/MultiVariateGaussian.hpp	/^    Vector_t<double, 3> normPmax_m;$/;"	m	class:MultiVariateGaussian
normPmin_m	src/Distribution/MultiVariateGaussian.hpp	/^    Vector_t<double, 3> normPmin_m;$/;"	m	class:MultiVariateGaussian
normRmax_m	src/Distribution/MultiVariateGaussian.hpp	/^    Vector_t<double, 3> normRmax_m;$/;"	m	class:MultiVariateGaussian
normRmin_m	src/Distribution/MultiVariateGaussian.hpp	/^    Vector_t<double, 3> normRmin_m;$/;"	m	class:MultiVariateGaussian
normal	src/Fields/BMultipoleField.h	/^inline double &BMultipoleField::normal(int n)$/;"	f	class:BMultipoleField
normal	src/Fields/BMultipoleField.h	/^inline double BMultipoleField::normal(int n) const$/;"	f	class:BMultipoleField
normalVector	src/Structure/BoundaryGeometry.cpp	/^static inline Vector_t<double, 3> normalVector($/;"	f	file:
normalise	src/Utilities/RingSection.h	/^inline Vector_t<double, 3>& RingSection::normalise(Vector_t<double, 3>& orientation) const {$/;"	f	class:RingSection
normalize	src/Algorithms/Quaternion.cpp	/^    ippl::Vector<double, 3> normalize(const ippl::Vector<double, 3>& vec) {$/;"	f	namespace:__anon78
normalize	src/Algorithms/Quaternion.cpp	/^Quaternion& Quaternion::normalize() {$/;"	f	class:Quaternion
normalizeField	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::normalizeField(double maxEz, std::vector<double>& fourierCoefs) {$/;"	f	class:FM1DDynamic_fast
normalizeField	src/Fields/FM1DElectroStatic_fast.cpp	/^void FM1DElectroStatic_fast::normalizeField(double maxEz, std::vector<double>& fourierCoefs) {$/;"	f	class:FM1DElectroStatic_fast
normalizeField	src/Fields/FM1DMagnetoStatic_fast.cpp	/^void FM1DMagnetoStatic_fast::normalizeField(double maxBz, std::vector<double>& fourierCoefs) {$/;"	f	class:FM1DMagnetoStatic_fast
normalizeFieldData	src/Fields/Astra1D_fast.cpp	/^void Astra1D_fast::normalizeFieldData(double maxValue) {$/;"	f	class:Astra1D_fast
normalizeProfileData	src/Distribution/LaserProfile.cpp	/^void LaserProfile::normalizeProfileData(double intensityCut, unsigned short* image) {$/;"	f	class:LaserProfile
normalize_m	src/Fields/FM3DDynamic.h	/^    bool normalize_m;$/;"	m	class:FM3DDynamic
normalize_m	src/Fields/Fieldmap.h	/^    bool normalize_m;$/;"	m	class:Fieldmap
normalizedEps68Percentile_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> normalizedEps68Percentile_m;$/;"	m	class:DistributionMoments
normalizedEps95Percentile_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> normalizedEps95Percentile_m;$/;"	m	class:DistributionMoments
normalizedEps99Percentile_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> normalizedEps99Percentile_m;$/;"	m	class:DistributionMoments
normalizedEps99_99Percentile_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> normalizedEps99_99Percentile_m;$/;"	m	class:DistributionMoments
normalizedEps_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> normalizedEps_m;$/;"	m	class:DistributionMoments
normalizedFlankArea_m	src/Distribution/FlatTop.hpp	/^    double normalizedFlankArea_m;$/;"	m	class:FlatTop
north	src/.Solvers/IrregularDomain.h	/^        T north;   \/\/ x,   y+1, z$/;"	m	struct:IrregularDomain::Stencil
notCentMoments_m	src/Algorithms/DistributionMoments.h	/^    matrix_t notCentMoments_m;$/;"	m	class:DistributionMoments
notEqual	src/Expressions/Expressions.cpp	/^    static const TFunction2<bool, double> notEqual = {"!=", 3, Ne};$/;"	m	namespace:Expressions	file:
notify	tests/ippl_src/AppTypes/Chsr-2.cpp	/^void notify( bool passedSingleTest, int *testNum, Timer *t) {$/;"	f
np1	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^    int np1, np2, np3;$/;"	m	class:PPSolveFactoryTestFixture	file:
np2	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^    int np1, np2, np3;$/;"	m	class:PPSolveFactoryTestFixture	file:
np3	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^    int np1, np2, np3;$/;"	m	class:PPSolveFactoryTestFixture	file:
nr	src/Utilities/ClassicRandom.h	/^const int nr = 55;$/;"	v
nr_m	src/.Solvers/FFTPoissonSolver.h	/^    Vector_t<int, 3> nr_m;$/;"	m	class:FFTPoissonSolver
nr_m	src/.Solvers/IrregularDomain.h	/^    IntVector_t<double, 3> nr_m;$/;"	m	class:IrregularDomain
nr_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    Vector_t<int, Dim> nr_m;$/;"	m	class:AlpineManager
nr_m	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    Vector<int, Dim> nr_m;$/;"	m	class:ChargedParticles	file:
nr_m	src/PartBunch/PartBunch.hpp	/^    Vector_t<int, Dim> nr_m;$/;"	m	class:PartBunch
nr_m	src/Structure/BoundaryGeometry.h	/^        Vector_t<int, 3> nr_m;  \/\/ number of intervals of geometry in X,Y,Z direction$/;"	m	struct:BoundaryGeometry::__anon60
ns2s	src/Physics/Units.h	/^    constexpr double ns2s = 1 \/ s2ns;$/;"	m	namespace:Units
nt_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    int nt_m;$/;"	m	class:AlpineManager
nt_m	src/PartBunch/PartBunch.hpp	/^    int nt_m;$/;"	m	class:PartBunch
numBins_m	src/PartBunch/Binning/BinHisto.h	/^        bin_index_type numBins_m;   \/\/\/ \\brief Number of bins in the histogram.$/;"	m	class:ParticleBinning::Histogram
numBlocks	src/Utilities/Options.cpp	/^    int numBlocks = 0;$/;"	m	namespace:Options	file:
numBunch_m	src/PartBunch/PartBunch.hpp	/^    short numBunch_m;$/;"	m	class:PartBunch
numCells_m	src/AbsBeamline/TravelingWave.h	/^    int numCells_m;$/;"	m	class:TravelingWave
numHeaderLines_m	src/Fields/Astra1D_fast.h	/^    int numHeaderLines_m;$/;"	m	class:Astra1D_fast
numParticlesInSimulation_m	src/Algorithms/ParallelTracker.h	/^    size_t numParticlesInSimulation_m;$/;"	m	class:ParallelTracker
numPassages_m	src/AbsBeamline/Monitor.h	/^    unsigned int numPassages_m;$/;"	m	class:Monitor
numPassages_m	src/AbsBeamline/PluginElement.h	/^    int numPassages_m = 0;  \/\/\/< Number of turns (number of times save() method is called)$/;"	m	class:PluginElement
numSteps_m	src/Structure/H5PartWrapper.h	/^    h5_int64_t numSteps_m;$/;"	m	class:H5PartWrapper
numXY_m	src/.Solvers/ArbitraryDomain.h	/^    std::map<int, int> numXY_m;$/;"	m	class:ArbitraryDomain
num_col	src/Fields/Interpolation/MMatrix.h	/^inline size_t MMatrix<double>::num_col()     const$/;"	f	class:interpolation::MMatrix
num_col	src/Fields/Interpolation/MMatrix.h	/^inline size_t MMatrix<m_complex>::num_col()     const$/;"	f	class:interpolation::MMatrix
num_gridpr_m	src/Fields/FM2DDynamic.h	/^    int num_gridpr_m;              \/**< Read in number of points after 0(not counted here) in grid, r-direction*\/$/;"	m	class:FM2DDynamic
num_gridpr_m	src/Fields/FM2DElectroStatic.h	/^    int num_gridpr_m;              \/**< Read in number of points after 0(not counted here) in grid, r-direction*\/$/;"	m	class:FM2DElectroStatic
num_gridpr_m	src/Fields/FM2DMagnetoStatic.h	/^    int num_gridpr_m;              \/**< Read in number of points after 0(not counted here) in grid, r-direction*\/$/;"	m	class:FM2DMagnetoStatic
num_gridpx_m	src/Fields/FM3DDynamic.h	/^    unsigned int num_gridpx_m;              \/**< Read in number of points after 0(not counted here) in grid, r-direction*\/$/;"	m	class:FM3DDynamic
num_gridpx_m	src/Fields/FM3DH5BlockBase.h	/^    double num_gridpx_m;    \/**< number of points after 0(not counted here) in grid, x-direction*\/$/;"	m	class:FM3DH5BlockBase
num_gridpx_m	src/Fields/FM3DMagnetoStatic.h	/^    unsigned int num_gridpx_m;              \/**< Read in number of points after 0(not counted here) in grid, r-direction*\/$/;"	m	class:FM3DMagnetoStatic
num_gridpx_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    unsigned int num_gridpx_m;     \/**< Read in number of points after 0(not counted here) in grid, x-direction*\/$/;"	m	class:FM3DMagnetoStaticExtended
num_gridpy_m	src/Fields/FM3DDynamic.h	/^    unsigned int num_gridpy_m;              \/**< Read in number of points after 0(not counted here) in grid, r-direction*\/$/;"	m	class:FM3DDynamic
num_gridpy_m	src/Fields/FM3DH5BlockBase.h	/^    double num_gridpy_m;    \/**< number of points after 0(not counted here) in grid, y-direction*\/$/;"	m	class:FM3DH5BlockBase
num_gridpy_m	src/Fields/FM3DMagnetoStatic.h	/^    unsigned int num_gridpy_m;              \/**< Read in number of points after 0(not counted here) in grid, r-direction*\/$/;"	m	class:FM3DMagnetoStatic
num_gridpy_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    unsigned int num_gridpy_m;     \/**< Read in number of points after 0(not counted here) in grid, y-direction*\/$/;"	m	class:FM3DMagnetoStaticExtended
num_gridpz_m	src/Fields/Astra1DDynamic.h	/^    int num_gridpz_m;$/;"	m	class:Astra1DDynamic
num_gridpz_m	src/Fields/Astra1DElectroStatic.h	/^    int num_gridpz_m;$/;"	m	class:Astra1DElectroStatic
num_gridpz_m	src/Fields/Astra1DMagnetoStatic.h	/^    int num_gridpz_m;$/;"	m	class:Astra1DMagnetoStatic
num_gridpz_m	src/Fields/Astra1D_fast.h	/^    int num_gridpz_m;$/;"	m	class:Astra1D_fast
num_gridpz_m	src/Fields/FM2DDynamic.h	/^    int num_gridpz_m;              \/**< Read in number of points after 0(not counted here) in grid, z-direction*\/$/;"	m	class:FM2DDynamic
num_gridpz_m	src/Fields/FM2DElectroStatic.h	/^    int num_gridpz_m;              \/**< Read in number of points after 0(not counted here) in grid, z-direction*\/$/;"	m	class:FM2DElectroStatic
num_gridpz_m	src/Fields/FM2DMagnetoStatic.h	/^    int num_gridpz_m;              \/**< Read in number of points after 0(not counted here) in grid, z-direction*\/$/;"	m	class:FM2DMagnetoStatic
num_gridpz_m	src/Fields/FM3DDynamic.h	/^    unsigned int num_gridpz_m;              \/**< Read in number of points after 0(not counted here) in grid, z-direction*\/$/;"	m	class:FM3DDynamic
num_gridpz_m	src/Fields/FM3DH5BlockBase.h	/^    double num_gridpz_m;    \/**< number of points after 0(not counted here) in grid, z-direction*\/$/;"	m	class:FM3DH5BlockBase
num_gridpz_m	src/Fields/FM3DMagnetoStatic.h	/^    unsigned int num_gridpz_m;              \/**< Read in number of points after 0(not counted here) in grid, z-direction*\/$/;"	m	class:FM3DMagnetoStatic
num_gridpz_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    unsigned int num_gridpz_m;     \/**< Read in number of points after 0(not counted here) in grid, z-direction*\/$/;"	m	class:FM3DMagnetoStaticExtended
num_points_m	src/AbsBeamline/RFCavity.h	/^    int num_points_m;$/;"	m	class:RFCavity
num_row	src/Fields/Interpolation/MMatrix.h	/^inline size_t MMatrix<double>::num_row()     const$/;"	f	class:interpolation::MMatrix
num_row	src/Fields/Interpolation/MMatrix.h	/^inline size_t MMatrix<m_complex>::num_row()     const$/;"	f	class:interpolation::MMatrix
num_row	src/Fields/Interpolation/MVector.cpp	/^size_t MVector<Tmplt>::num_row() const$/;"	f	class:interpolation::MVector
numberOfGridPoints_m	src/Fields/FM1DDynamic.h	/^    int numberOfGridPoints_m;               \/\/\/ Number of grid points in field input file.$/;"	m	class:FM1DDynamic
numberOfGridPoints_m	src/Fields/FM1DDynamic_fast.h	/^    unsigned int numberOfGridPoints_m;      \/\/\/ Number of grid points in field input file.$/;"	m	class:FM1DDynamic_fast
numberOfGridPoints_m	src/Fields/FM1DElectroStatic.h	/^    int numberOfGridPoints_m;               \/\/\/ Number of grid points in field input file.$/;"	m	class:FM1DElectroStatic
numberOfGridPoints_m	src/Fields/FM1DElectroStatic_fast.h	/^    unsigned int numberOfGridPoints_m;      \/\/\/ Number of grid points in field input file.$/;"	m	class:FM1DElectroStatic_fast
numberOfGridPoints_m	src/Fields/FM1DMagnetoStatic.h	/^    int numberOfGridPoints_m;               \/\/\/ Number of grid points in field input file.$/;"	m	class:FM1DMagnetoStatic
numberOfGridPoints_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    unsigned int numberOfGridPoints_m;      \/\/\/ Number of grid points in field input file.$/;"	m	class:FM1DMagnetoStatic_fast
numberOfTerms	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^std::size_t DifferentialOperatorTwo::numberOfTerms($/;"	f	class:polynomial::DifferentialOperatorTwo
numberOfTerms	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.h	/^    std::size_t PolynomialSum::numberOfTerms() const {$/;"	f	class:polynomial::PolynomialSum
numberOfTerms	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^    std::size_t RecursionRelationTwo::numberOfTerms($/;"	f	class:polynomial::RecursionRelationTwo
numberRows_m	src/Utilities/SDDSParser/data.hpp	/^        long numberRows_m;$/;"	m	struct:SDDS::data
number_frequencies_m	src/Filters/FixedFFTLowPass.h	/^    int number_frequencies_m;$/;"	m	class:FixedFFTLowPassFilter
nx	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    std::size_t nx;$/;"	m	struct:polynomial::vectorLengths
nx	tests/ippl_src/Meshes/Average.cpp	/^const unsigned nx = 4, ny = 4, nz = 4;$/;"	v
nx1	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    std::size_t nx1;$/;"	m	struct:polynomial::vectorLengths
nx2	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    std::size_t nx2;$/;"	m	struct:polynomial::vectorLengths
nxy_m	src/.Solvers/RegularDomain.h	/^    int nxy_m;$/;"	m	class:RegularDomain
ny	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    std::size_t ny;$/;"	m	struct:polynomial::vectorLengths
ny	tests/ippl_src/Meshes/Average.cpp	/^const unsigned nx = 4, ny = 4, nz = 4;$/;"	v
ny1	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    std::size_t ny1;$/;"	m	struct:polynomial::vectorLengths
ny2	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    std::size_t ny2;$/;"	m	struct:polynomial::vectorLengths
nz	tests/ippl_src/Meshes/Average.cpp	/^const unsigned nx = 4, ny = 4, nz = 4;$/;"	v
obgeo_m	src/Elements/OpalCavity.h	/^    BoundaryGeometry *obgeo_m;$/;"	m	class:OpalCavity
obj_name	src/Expressions/ARefExpr.h	/^        const std::string obj_name;$/;"	m	class:Expressions::ARefExpr
obj_name	src/Expressions/SRefAttr.h	/^        const std::string obj_name;$/;"	m	class:Expressions::SRefAttr
obj_name	src/Expressions/SRefExpr.h	/^        const std::string obj_name;$/;"	m	class:Expressions::SRefExpr
object	src/MemoryManagement/OwnPtr.h	/^    mutable Object *object;$/;"	m	class:OwnPtr
object	src/MemoryManagement/Pointer.h	/^    Object *object;$/;"	m	class:Pointer
objects_m	src/Utilities/MSLang/QuadTree.h	/^        std::list<std::shared_ptr<Base> > objects_m;$/;"	m	struct:mslang::QuadTree
occurrence	src/AbstractObjects/Object.h	/^    int occurrence;$/;"	m	class:Object
occurrenceCount	src/AbstractObjects/Object.cpp	/^int Object::occurrenceCount() {$/;"	f	class:Object
offVec_m	tests/classic_src/AbsBeamline/RingTest.cpp	/^    std::vector<Offset*> offVec_m;$/;"	m	class:OffsetFactory	file:
okFlag	src/Lines/SequenceParser.h	/^    mutable bool okFlag;$/;"	m	class:SequenceParser
onAxisAccel_m	src/Fields/Astra1D_fast.h	/^    gsl_interp_accel *onAxisAccel_m[4];$/;"	m	class:Astra1D_fast
onAxisFieldAccel_m	src/Fields/FM1DDynamic_fast.h	/^    gsl_interp_accel *onAxisFieldAccel_m;$/;"	m	class:FM1DDynamic_fast
onAxisFieldAccel_m	src/Fields/FM1DElectroStatic_fast.h	/^    gsl_interp_accel *onAxisFieldAccel_m;$/;"	m	class:FM1DElectroStatic_fast
onAxisFieldAccel_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    gsl_interp_accel *onAxisFieldAccel_m;$/;"	m	class:FM1DMagnetoStatic_fast
onAxisFieldInterpolants_m	src/Fields/FM1DDynamic_fast.h	/^    gsl_spline *onAxisFieldInterpolants_m;      \/\/\/ On axis field interpolation structure.$/;"	m	class:FM1DDynamic_fast
onAxisFieldInterpolants_m	src/Fields/FM1DElectroStatic_fast.h	/^    gsl_spline *onAxisFieldInterpolants_m;      \/\/\/ On axis field interpolation structure.$/;"	m	class:FM1DElectroStatic_fast
onAxisFieldInterpolants_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    gsl_spline *onAxisFieldInterpolants_m;      \/\/\/ On axis field interpolation structure.$/;"	m	class:FM1DMagnetoStatic_fast
onAxisFieldPAccel_m	src/Fields/FM1DDynamic_fast.h	/^    gsl_interp_accel *onAxisFieldPAccel_m;$/;"	m	class:FM1DDynamic_fast
onAxisFieldPAccel_m	src/Fields/FM1DElectroStatic_fast.h	/^    gsl_interp_accel *onAxisFieldPAccel_m;$/;"	m	class:FM1DElectroStatic_fast
onAxisFieldPAccel_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    gsl_interp_accel *onAxisFieldPAccel_m;$/;"	m	class:FM1DMagnetoStatic_fast
onAxisFieldPInterpolants_m	src/Fields/FM1DDynamic_fast.h	/^    gsl_spline *onAxisFieldPInterpolants_m;     \/\/\/ On axis field first derivative interpolation structure.$/;"	m	class:FM1DDynamic_fast
onAxisFieldPInterpolants_m	src/Fields/FM1DElectroStatic_fast.h	/^    gsl_spline *onAxisFieldPInterpolants_m;     \/\/\/ On axis field first derivative interpolation structure.$/;"	m	class:FM1DElectroStatic_fast
onAxisFieldPInterpolants_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    gsl_spline *onAxisFieldPInterpolants_m;     \/\/\/ On axis field first derivative interpolation structure.$/;"	m	class:FM1DMagnetoStatic_fast
onAxisFieldPPAccel_m	src/Fields/FM1DDynamic_fast.h	/^    gsl_interp_accel *onAxisFieldPPAccel_m;$/;"	m	class:FM1DDynamic_fast
onAxisFieldPPAccel_m	src/Fields/FM1DElectroStatic_fast.h	/^    gsl_interp_accel *onAxisFieldPPAccel_m;$/;"	m	class:FM1DElectroStatic_fast
onAxisFieldPPAccel_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    gsl_interp_accel *onAxisFieldPPAccel_m;$/;"	m	class:FM1DMagnetoStatic_fast
onAxisFieldPPInterpolants_m	src/Fields/FM1DDynamic_fast.h	/^    gsl_spline *onAxisFieldPPInterpolants_m;    \/\/\/ On axis field second derivative interpolation structure.$/;"	m	class:FM1DDynamic_fast
onAxisFieldPPInterpolants_m	src/Fields/FM1DElectroStatic_fast.h	/^    gsl_spline *onAxisFieldPPInterpolants_m;    \/\/\/ On axis field second derivative interpolation structure.$/;"	m	class:FM1DElectroStatic_fast
onAxisFieldPPInterpolants_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    gsl_spline *onAxisFieldPPInterpolants_m;    \/\/\/ On axis field second derivative interpolation structure.$/;"	m	class:FM1DMagnetoStatic_fast
onAxisFieldPPPAccel_m	src/Fields/FM1DDynamic_fast.h	/^    gsl_interp_accel *onAxisFieldPPPAccel_m;$/;"	m	class:FM1DDynamic_fast
onAxisFieldPPPAccel_m	src/Fields/FM1DElectroStatic_fast.h	/^    gsl_interp_accel *onAxisFieldPPPAccel_m;$/;"	m	class:FM1DElectroStatic_fast
onAxisFieldPPPAccel_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    gsl_interp_accel *onAxisFieldPPPAccel_m;$/;"	m	class:FM1DMagnetoStatic_fast
onAxisFieldPPPInterpolants_m	src/Fields/FM1DDynamic_fast.h	/^    gsl_spline *onAxisFieldPPPInterpolants_m;   \/\/\/ On axis field third derivative interpolation structure.$/;"	m	class:FM1DDynamic_fast
onAxisFieldPPPInterpolants_m	src/Fields/FM1DElectroStatic_fast.h	/^    gsl_spline *onAxisFieldPPPInterpolants_m;   \/\/\/ On axis field third derivative interpolation structure.$/;"	m	class:FM1DElectroStatic_fast
onAxisFieldPPPInterpolants_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    gsl_spline *onAxisFieldPPPInterpolants_m;   \/\/\/ On axis field third derivative interpolation structure.$/;"	m	class:FM1DMagnetoStatic_fast
onAxisField_m	src/Fields/Astra1D_fast.h	/^    double* onAxisField_m;$/;"	m	class:Astra1D_fast
onAxisField_m	src/Fields/FM1DDynamic_fast.h	/^    double* onAxisField_m;                      \/\/\/ On axis field data.$/;"	m	class:FM1DDynamic_fast
onAxisField_m	src/Fields/FM1DElectroStatic_fast.h	/^    double* onAxisField_m;                      \/\/\/ On axis field data.$/;"	m	class:FM1DElectroStatic_fast
onAxisField_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    double* onAxisField_m;                      \/\/\/ On axis field data.$/;"	m	class:FM1DMagnetoStatic_fast
onAxisInterpolants_m	src/Fields/Astra1D_fast.h	/^    gsl_spline *onAxisInterpolants_m[4];$/;"	m	class:Astra1D_fast
one	tests/ippl_src/Field/FunctionFace.cpp	/^double one  (const double&)   { return 1.0; }$/;"	f
oneMinusEpsilon_m	src/Algorithms/IndexMap.cpp	/^const double IndexMap::oneMinusEpsilon_m = 1.0 - std::numeric_limits<double>::epsilon();$/;"	m	class:IndexMap	file:
oneMinusEpsilon_m	src/Algorithms/IndexMap.h	/^    static const double oneMinusEpsilon_m;$/;"	m	class:IndexMap
online_m	src/AbsBeamline/Component.h	/^    bool online_m;$/;"	m	class:Component
op	src/Utilities/MSLang/matheval.hpp	/^            op_t op;$/;"	m	struct:matheval::detail::binary_op
op	src/Utilities/MSLang/matheval.hpp	/^            op_t op;$/;"	m	struct:matheval::detail::unary_op
opal	tools/emacs/opal.el	/^(defgroup opal nil$/;"	f
opal-font-lock-keywords	tools/emacs/opal.el	/^(defvar opal-font-lock-keywords opal-font-lock-keywords-3$/;"	f
opal-font-lock-keywords-3	tools/emacs/opal.el	/^(defconst opal-font-lock-keywords-3$/;"	f
opal-font-lock-keywords-beamspec	tools/emacs/opal.el	/^(defconst opal-font-lock-keywords-beamspec$/;"	f
opal-font-lock-keywords-constants	tools/emacs/opal.el	/^(defconst opal-font-lock-keywords-constants$/;"	f
opal-font-lock-keywords-controlstm	tools/emacs/opal.el	/^(defconst opal-font-lock-keywords-controlstm$/;"	f
opal-font-lock-keywords-elements	tools/emacs/opal.el	/^(defconst opal-font-lock-keywords-elements$/;"	f
opal-font-lock-keywords-errordef	tools/emacs/opal.el	/^(defconst opal-font-lock-keywords-errordef$/;"	f
opal-font-lock-keywords-functions	tools/emacs/opal.el	/^(defconst opal-font-lock-keywords-functions$/;"	f
opal-font-lock-keywords-optimise	tools/emacs/opal.el	/^(defconst opal-font-lock-keywords-optimise$/;"	f
opal-font-lock-keywords-orbit_corr	tools/emacs/opal.el	/^(defconst opal-font-lock-keywords-orbit_corr$/;"	f
opal-font-lock-keywords-parameters	tools/emacs/opal.el	/^(defconst opal-font-lock-keywords-parameters$/;"	f
opal-font-lock-keywords-programflow	tools/emacs/opal.el	/^(defconst opal-font-lock-keywords-programflow$/;"	f
opal-font-lock-keywords-simul	tools/emacs/opal.el	/^(defconst opal-font-lock-keywords-simul$/;"	f
opal-font-lock-keywords-stringatt	tools/emacs/opal.el	/^(defconst opal-font-lock-keywords-stringatt$/;"	f
opal-font-lock-special_constants	tools/emacs/opal.el	/^(defconst opal-font-lock-special_constants$/;"	f
opal-font-lock-special_operators	tools/emacs/opal.el	/^(defconst opal-font-lock-special_operators$/;"	f
opal-mode	tools/emacs/opal.el	/^(defun opal-mode ()$/;"	f
opal-mode-hook	tools/emacs/opal.el	/^(defvar opal-mode-hook nil)$/;"	f
opal-mode-syntax-table	tools/emacs/opal.el	/^(defvar opal-mode-syntax-table$/;"	f
opalDist_m	src/Distribution/SamplingBase.hpp	/^        std::shared_ptr<Distribution_t> opalDist_m;$/;"	m	class:SamplingBase
opalRing_m	src/Algorithms/ParallelTracker.h	/^    Ring* opalRing_m;$/;"	m	class:ParallelTracker
opal_m	src/Track/TrackRun.h	/^    OpalData* opal_m;$/;"	m	class:TrackRun
open	src/Structure/H5PartWrapper.cpp	/^void H5PartWrapper::open(h5_int32_t flags) {$/;"	f	class:H5PartWrapper
open	src/Structure/SDDSWriter.cpp	/^void SDDSWriter::open() {$/;"	f	class:SDDSWriter
openASCII	src/Structure/LossDataSink.h	/^    void openASCII() {$/;"	f	class:LossDataSink
openFileMPIOCollective	src/Fields/FM3DH5BlockBase.cpp	/^void FM3DH5BlockBase::openFileMPIOCollective(const std::string aFilename) {$/;"	f	class:FM3DH5BlockBase
openH5	src/Structure/LossDataSink.cpp	/^void LossDataSink::openH5(h5_int32_t mode) {$/;"	f	class:LossDataSink
openMode_m	src/AbstractObjects/OpalData.cpp	/^    OpalData::OpenMode openMode_m = OpalData::OpenMode::WRITE;$/;"	m	struct:OpalDataImpl	file:
open_m	src/Structure/PeakFinder.cpp	/^void PeakFinder::open_m() {$/;"	f	class:PeakFinder
operator !=	src/AbsBeamline/Offset.cpp	/^bool operator!=(const Offset& off1, const Offset& off2) {$/;"	f
operator !=	src/Algorithms/.PartBunchBase.h	/^        bool operator!=(ConstIterator const& rhs) const {$/;"	f	class:PartBunch::ConstIterator
operator !=	src/BeamlineGeometry/Euclid3D.cpp	/^bool Euclid3D::operator!=(const Euclid3D &rhs) const {$/;"	f	class:Euclid3D
operator !=	src/BeamlineGeometry/Matrix3D.cpp	/^bool Matrix3D::operator!=(const Matrix3D &rhs) const {$/;"	f	class:Matrix3D
operator !=	src/BeamlineGeometry/Rotation3D.h	/^inline bool Rotation3D::operator!=(const Rotation3D &rhs) const$/;"	f	class:Rotation3D
operator !=	src/BeamlineGeometry/Vector3D.cpp	/^bool Vector3D::operator!=(const Vector3D &rhs) const {$/;"	f	class:Vector3D
operator !=	src/Fields/Interpolation/MMatrix.h	/^bool inline operator!=(const MMatrix<Tmplt>& lhs, const MMatrix<Tmplt>& rhs) {return ! (lhs == rhs);}$/;"	f	namespace:interpolation
operator !=	src/Fields/Interpolation/MVector.h	/^inline bool      operator !=(m_complex c1, m_complex c2) {return !(c1==c2);}$/;"	f	namespace:interpolation
operator !=	src/Fields/Interpolation/MVector.h	/^template <class Tmplt> bool inline operator!=(const MVector<Tmplt>& c1, const MVector<Tmplt>& c2)$/;"	f	namespace:interpolation
operator !=	src/MemoryManagement/Pointer.h	/^inline bool Pointer<Object>::operator!=(const Pointer &rhs) const {$/;"	f	class:Pointer
operator ()	src/AbstractObjects/OpalData.cpp	/^void OpalData::ClearReference::operator()(Object* object) const {$/;"	f	class:OpalData::ClearReference
operator ()	src/Algorithms/IndexMap.h	/^        bool operator()(const key_t x , const key_t y) const$/;"	f	class:IndexMap::myCompare
operator ()	src/Algorithms/OrbitThreader.h	/^        bool operator() (const elementPosition &a, const elementPosition &b) const {$/;"	f	struct:OrbitThreader::elementPositionComp
operator ()	src/Algorithms/PartBins.h	/^    bool operator()(const std::vector<double>& first_part, const std::vector<double>& second_part) {$/;"	f	class:AscendingLocationSort
operator ()	src/Algorithms/PartBins.h	/^    bool operator()(const std::vector<double>& first_part, const std::vector<double>& second_part) {$/;"	f	class:DescendingLocationSort
operator ()	src/BeamlineGeometry/Matrix3D.h	/^inline double &Matrix3D::operator()(int i, int k)$/;"	f	class:Matrix3D
operator ()	src/BeamlineGeometry/Matrix3D.h	/^inline double Matrix3D::operator()(int i, int k) const$/;"	f	class:Matrix3D
operator ()	src/BeamlineGeometry/Rotation3D.h	/^inline double Rotation3D::operator()(int row, int col) const$/;"	f	class:Rotation3D
operator ()	src/BeamlineGeometry/Vector3D.h	/^inline double &Vector3D::operator()(int i)$/;"	f	class:Vector3D
operator ()	src/BeamlineGeometry/Vector3D.h	/^inline double Vector3D::operator()(int i) const$/;"	f	class:Vector3D
operator ()	src/Fields/Interpolation/MMatrix.h	/^const double inline & MMatrix<double>::operator()(size_t i, size_t j) const$/;"	f	class:interpolation::MMatrix
operator ()	src/Fields/Interpolation/MMatrix.h	/^const m_complex inline & MMatrix<m_complex>::operator()(size_t i, size_t j) const$/;"	f	class:interpolation::MMatrix
operator ()	src/Fields/Interpolation/MMatrix.h	/^double inline & MMatrix<double>::operator()(size_t i, size_t j)$/;"	f	class:interpolation::MMatrix
operator ()	src/Fields/Interpolation/MMatrix.h	/^m_complex inline & MMatrix<m_complex>::operator()(size_t i, size_t j)$/;"	f	class:interpolation::MMatrix
operator ()	src/Fields/Interpolation/MVector.cpp	/^const double& MVector<double>::operator()(const size_t i) const$/;"	f	class:interpolation::MVector
operator ()	src/Fields/Interpolation/MVector.cpp	/^const m_complex& MVector<m_complex>::operator()(const size_t i) const$/;"	f	class:interpolation::MVector
operator ()	src/Fields/Interpolation/MVector.cpp	/^double& MVector<double>::operator()(const size_t i)$/;"	f	class:interpolation::MVector
operator ()	src/Fields/Interpolation/MVector.cpp	/^m_complex& MVector<m_complex>::operator()(const size_t i)$/;"	f	class:interpolation::MVector
operator ()	src/PartBunch/Binning/BinningTools.h	/^        value_type operator()(const size_type& i) const {$/;"	f	struct:ParticleBinning::CoordinateSelector
operator ()	src/PartBunch/Binning/test/alpine/BinningLandauDampingManager.h	/^        KOKKOS_INLINE_FUNCTION double operator()(double u, unsigned int d, double const *params_p) const {$/;"	f	struct:CustomDistributionFunctions::Estimate
operator ()	src/PartBunch/Binning/test/alpine/BinningLandauDampingManager.h	/^       KOKKOS_INLINE_FUNCTION double operator()(double x, unsigned int d, const double *params_p) const {$/;"	f	struct:CustomDistributionFunctions::CDF
operator ()	src/PartBunch/Binning/test/alpine/BinningLandauDampingManager.h	/^       KOKKOS_INLINE_FUNCTION double operator()(double x, unsigned int d, double const *params_p) const {$/;"	f	struct:CustomDistributionFunctions::PDF
operator ()	src/Structure/BoundaryGeometry.cpp	/^        bool operator()(Vector_t<double, 3> x1, Vector_t<double, 3> x2) {$/;"	f	struct:__anon57::VectorLessX
operator ()	src/Structure/BoundaryGeometry.cpp	/^        bool operator()(Vector_t<double, 3> x1, Vector_t<double, 3> x2) {$/;"	f	struct:__anon57::VectorLessY
operator ()	src/Structure/BoundaryGeometry.cpp	/^        bool operator()(Vector_t<double, 3> x1, Vector_t<double, 3> x2) {$/;"	f	struct:__anon57::VectorLessZ
operator ()	src/Structure/LossDataSink.h	/^        bool operator()(const SetStatistics& x, const SetStatistics& y) const {$/;"	f	struct:std::less
operator ()	src/Utilities/MSLang/matheval.hpp	/^            expr_ast<real_t> operator()(typename binary_op<real_t>::op_t op,$/;"	f	struct:matheval::detail::binary_expr_
operator ()	src/Utilities/MSLang/matheval.hpp	/^            expr_ast<real_t> operator()(typename unary_op<real_t>::op_t op,$/;"	f	struct:matheval::detail::unary_expr_
operator ()	src/Utilities/MSLang/matheval.hpp	/^            result_type operator()(binary_op<real_t> const &tree) const {$/;"	f	struct:matheval::detail::ConstantFolder
operator ()	src/Utilities/MSLang/matheval.hpp	/^            result_type operator()(binary_op<real_t> const& tree) const$/;"	f	class:matheval::detail::eval_ast
operator ()	src/Utilities/MSLang/matheval.hpp	/^            result_type operator()(expr_ast<real_t> const &ast) const {$/;"	f	struct:matheval::detail::ConstantFolder
operator ()	src/Utilities/MSLang/matheval.hpp	/^            result_type operator()(expr_ast<real_t> const& ast) const$/;"	f	class:matheval::detail::eval_ast
operator ()	src/Utilities/MSLang/matheval.hpp	/^            result_type operator()(nil \/*unused*\/) const { return 0; }$/;"	f	class:matheval::detail::eval_ast
operator ()	src/Utilities/MSLang/matheval.hpp	/^            result_type operator()(nil \/*unused*\/) const { return 0; }$/;"	f	struct:matheval::detail::ConstantFolder
operator ()	src/Utilities/MSLang/matheval.hpp	/^            result_type operator()(real_t n) const { return n; }$/;"	f	struct:matheval::detail::ConstantFolder
operator ()	src/Utilities/MSLang/matheval.hpp	/^            result_type operator()(result_type n)  const { return n; }$/;"	f	class:matheval::detail::eval_ast
operator ()	src/Utilities/MSLang/matheval.hpp	/^            result_type operator()(std::string const &c) const { return c; }$/;"	f	struct:matheval::detail::ConstantFolder
operator ()	src/Utilities/MSLang/matheval.hpp	/^            result_type operator()(std::string const &c) const$/;"	f	class:matheval::detail::eval_ast
operator ()	src/Utilities/MSLang/matheval.hpp	/^            result_type operator()(unary_op<real_t> const &tree) const {$/;"	f	struct:matheval::detail::ConstantFolder
operator ()	src/Utilities/MSLang/matheval.hpp	/^            result_type operator()(unary_op<real_t> const& tree) const$/;"	f	class:matheval::detail::eval_ast
operator ()	src/Utilities/MSLang/matheval.hpp	/^            template <typename U> bool operator()(U const & \/*unused*\/) const {$/;"	f	struct:matheval::detail::holds_alternative_impl
operator ()	src/Utilities/MSLang/matheval.hpp	/^            void operator()(Iterator first, Iterator last,$/;"	f	struct:matheval::detail::expectation_handler
operator ()	src/Utilities/SDDSParser/column.hpp	/^        void operator()(column& col, Iterator) const$/;"	f	struct:SDDS::columnOrder
operator ()	src/Utilities/SDDSParser/error_handler.hpp	/^        void operator()($/;"	f	struct:SDDS::error_handler
operator ()	src/Utilities/SDDSParser/parameter.hpp	/^        void operator()(parameter& param, Iterator) const$/;"	f	struct:SDDS::parameterOrder
operator *	src/Algorithms/.PartBunchBase.h	/^        OpalParticle operator*() const {$/;"	f	class:PartBunch::ConstIterator
operator *	src/Algorithms/CoordinateSystemTrafo.cpp	/^CoordinateSystemTrafo CoordinateSystemTrafo::operator*(const CoordinateSystemTrafo& right) const {$/;"	f	class:CoordinateSystemTrafo
operator *	src/Algorithms/Quaternion.cpp	/^Quaternion Quaternion::operator*(const Quaternion& other) const {$/;"	f	class:Quaternion
operator *	src/Algorithms/Quaternion.cpp	/^Quaternion Quaternion::operator*(const double& d) const {$/;"	f	class:Quaternion
operator *	src/BeamlineGeometry/Euclid3D.cpp	/^Euclid3D Euclid3D::operator*(const Euclid3D &rhs) const {$/;"	f	class:Euclid3D
operator *	src/BeamlineGeometry/Matrix3D.cpp	/^Matrix3D operator*(const Matrix3D &lhs, const Matrix3D &rhs) {$/;"	f
operator *	src/BeamlineGeometry/Matrix3D.cpp	/^Vector3D operator*(const Matrix3D &lhs, const Vector3D &rhs) {$/;"	f
operator *	src/BeamlineGeometry/Rotation3D.h	/^inline Rotation3D Rotation3D::operator*(const Rotation3D &rhs) const {$/;"	f	class:Rotation3D
operator *	src/BeamlineGeometry/Rotation3D.h	/^inline Vector3D Rotation3D::operator*(const Vector3D &rhs) const {$/;"	f	class:Rotation3D
operator *	src/BeamlineGeometry/Vector3D.cpp	/^Vector3D operator*(const Vector3D &lhs, double rhs) {$/;"	f
operator *	src/BeamlineGeometry/Vector3D.cpp	/^Vector3D operator*(double lhs, const Vector3D &rhs) {$/;"	f
operator *	src/Fields/BMultipoleField.cpp	/^BMultipoleField::Pair::operator*(double scale) const$/;"	f	class:BMultipoleField::Pair
operator *	src/Fields/EMField.cpp	/^BVector BVector::operator*(double scale) const$/;"	f	class:BVector
operator *	src/Fields/EMField.cpp	/^EVector EVector::operator*(double scale) const$/;"	f	class:EVector
operator *	src/Fields/Interpolation/MMatrix.h	/^MVector<double> inline operator * (MMatrix<double>     m,  MVector<double>    v)$/;"	f	namespace:interpolation
operator *	src/Fields/Interpolation/MMatrix.h	/^MVector<m_complex> inline     operator * (MMatrix<m_complex> m,  MVector<m_complex>    v)$/;"	f	namespace:interpolation
operator *	src/Fields/Interpolation/MMatrix.h	/^template <class Tmplt> MMatrix<Tmplt> inline operator*(MMatrix<Tmplt> m, MVector<Tmplt> v)$/;"	f	namespace:interpolation
operator *	src/Fields/Interpolation/MMatrix.h	/^template <class Tmplt> MMatrix<Tmplt> inline operator*(MMatrix<Tmplt> m, Tmplt t)$/;"	f	namespace:interpolation
operator *	src/Fields/Interpolation/MMatrix.h	/^template <class Tmplt> MMatrix<Tmplt> inline operator*(MMatrix<Tmplt> m1, MMatrix<Tmplt> m2) $/;"	f	namespace:interpolation
operator *	src/Fields/Interpolation/MVector.h	/^inline m_complex operator *(double    d,  m_complex c)  {return gsl_complex_mul_real(c,d);}$/;"	f	namespace:interpolation
operator *	src/Fields/Interpolation/MVector.h	/^inline m_complex operator *(m_complex c,  double    d)  {return gsl_complex_mul_real(c,d);}$/;"	f	namespace:interpolation
operator *	src/Fields/Interpolation/MVector.h	/^inline m_complex operator *(m_complex c1, m_complex c2) {return gsl_complex_mul(c1,c2);}$/;"	f	namespace:interpolation
operator *	src/Fields/Interpolation/MVector.h	/^template <class Tmplt> MVector<Tmplt> inline operator *(MVector<Tmplt> v, Tmplt d) $/;"	f	namespace:interpolation
operator *	src/Fields/Interpolation/MVector.h	/^template <class Tmplt> MVector<Tmplt> inline operator *(Tmplt d,       MVector<Tmplt> v) $/;"	f	namespace:interpolation
operator *	src/MemoryManagement/OwnPtr.h	/^inline Object &OwnPtr<Object>::operator*() const {$/;"	f	class:OwnPtr
operator *	src/MemoryManagement/Pointer.h	/^inline Object &Pointer<Object>::operator*() const {$/;"	f	class:Pointer
operator *=	src/Algorithms/CoordinateSystemTrafo.cpp	/^void CoordinateSystemTrafo::operator*=(const CoordinateSystemTrafo& right) {$/;"	f	class:CoordinateSystemTrafo
operator *=	src/Algorithms/Quaternion.cpp	/^Quaternion& Quaternion::operator*=(const Quaternion& other) {$/;"	f	class:Quaternion
operator *=	src/BeamlineGeometry/Euclid3D.cpp	/^const Euclid3D &Euclid3D::operator*=(const Euclid3D &rhs) {$/;"	f	class:Euclid3D
operator *=	src/BeamlineGeometry/Matrix3D.cpp	/^Matrix3D &Matrix3D::operator*=(const Matrix3D &rhs) {$/;"	f	class:Matrix3D
operator *=	src/BeamlineGeometry/Matrix3D.cpp	/^Matrix3D &Matrix3D::operator*=(double rhs) {$/;"	f	class:Matrix3D
operator *=	src/BeamlineGeometry/Rotation3D.h	/^inline Rotation3D &Rotation3D::operator*=(const Rotation3D &rhs) {$/;"	f	class:Rotation3D
operator *=	src/BeamlineGeometry/Vector3D.cpp	/^Vector3D &Vector3D::operator*=(double rhs) {$/;"	f	class:Vector3D
operator *=	src/Fields/BMultipoleField.cpp	/^inline void BMultipoleField::Pair::operator*=(double scale)$/;"	f	class:BMultipoleField::Pair
operator *=	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<double>& operator *= (MMatrix<double>& m1,  MMatrix<double>  m2)$/;"	f	namespace:interpolation
operator *=	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<m_complex> & operator *= (MMatrix<m_complex>& m1,  MMatrix<m_complex>  m2)$/;"	f	namespace:interpolation
operator *=	src/Fields/Interpolation/MMatrix.h	/^MMatrix<double>    inline & operator *=(MMatrix<double>& m,  double d)$/;"	f	namespace:interpolation
operator *=	src/Fields/Interpolation/MMatrix.h	/^MMatrix<m_complex> inline & operator *=(MMatrix<m_complex>& m,  m_complex c)$/;"	f	namespace:interpolation
operator *=	src/Fields/Interpolation/MVector.h	/^MVector<double>    inline & operator *=(MVector<double>&    v, double d) $/;"	f	namespace:interpolation
operator *=	src/Fields/Interpolation/MVector.h	/^MVector<m_complex> inline & operator *=(MVector<m_complex>& v, gsl_complex c)$/;"	f	namespace:interpolation
operator *=	src/Fields/Interpolation/MVector.h	/^inline m_complex& operator *=(m_complex& c,  double    d)  {c  = gsl_complex_mul_real(c,d); return c;}$/;"	f	namespace:interpolation
operator *=	src/Fields/Interpolation/MVector.h	/^inline m_complex& operator *=(m_complex& c1, m_complex c2) {c1 = gsl_complex_mul(c1,c2);    return c1;}$/;"	f	namespace:interpolation
operator *=	src/Utilities/MSLang/matheval.hpp	/^        expr_ast<real_t>& expr_ast<real_t>::operator*=(expr_ast<real_t> const &rhs)$/;"	f	class:matheval::detail::expr_ast
operator +	src/BeamlineGeometry/Matrix3D.cpp	/^Matrix3D operator+(const Matrix3D &lhs, const Matrix3D &rhs) {$/;"	f
operator +	src/BeamlineGeometry/Vector3D.cpp	/^Vector3D operator+(const Vector3D &lhs, const Vector3D &rhs) {$/;"	f
operator +	src/Fields/BMultipoleField.cpp	/^BMultipoleField::Pair::operator+(const Pair &rhs) const$/;"	f	class:BMultipoleField::Pair
operator +	src/Fields/Interpolation/MMatrix.h	/^template <class Tmplt> MMatrix<Tmplt> inline operator+(MMatrix<Tmplt> m1, MMatrix<Tmplt> m2)$/;"	f	namespace:interpolation
operator +	src/Fields/Interpolation/MVector.h	/^inline m_complex operator +(double    d,  m_complex c)  {return gsl_complex_add_real(c, d);}$/;"	f	namespace:interpolation
operator +	src/Fields/Interpolation/MVector.h	/^inline m_complex operator +(m_complex c,  double    d)  {return gsl_complex_add_real(c, d);}$/;"	f	namespace:interpolation
operator +	src/Fields/Interpolation/MVector.h	/^inline m_complex operator +(m_complex c1, m_complex c2) {return gsl_complex_add     (c1,c2);}$/;"	f	namespace:interpolation
operator +	src/Fields/Interpolation/MVector.h	/^template <class Tmplt> MVector<Tmplt>     inline operator +(MVector<Tmplt> v1, MVector<Tmplt> v2) $/;"	f	namespace:interpolation
operator ++	src/Algorithms/.PartBunchBase.h	/^        ConstIterator operator++() {$/;"	f	class:PartBunch::ConstIterator
operator ++	src/Algorithms/.PartBunchBase.h	/^        ConstIterator operator++(int) {$/;"	f	class:PartBunch::ConstIterator
operator ++	src/Algorithms/StepSizeConfig.cpp	/^StepSizeConfig& StepSizeConfig::operator++() {$/;"	f	class:StepSizeConfig
operator +=	src/BeamlineGeometry/Matrix3D.cpp	/^Matrix3D &Matrix3D::operator+=(const Matrix3D &rhs) {$/;"	f	class:Matrix3D
operator +=	src/BeamlineGeometry/Vector3D.cpp	/^Vector3D &Vector3D::operator+=(const Vector3D &rhs) {$/;"	f	class:Vector3D
operator +=	src/Channels/Channel.h	/^    double operator+=(double value)$/;"	f	class:Channel
operator +=	src/Fields/BMultipoleField.cpp	/^inline void BMultipoleField::Pair::operator+=(const Pair &rhs)$/;"	f	class:BMultipoleField::Pair
operator +=	src/Fields/Interpolation/MMatrix.h	/^MMatrix<double> inline &    operator +=(MMatrix<double>& m1, const MMatrix<double>&    m2)$/;"	f	namespace:interpolation
operator +=	src/Fields/Interpolation/MMatrix.h	/^MMatrix<m_complex> inline & operator +=(MMatrix<m_complex>& m1, const MMatrix<m_complex>& m2)$/;"	f	namespace:interpolation
operator +=	src/Fields/Interpolation/MVector.h	/^MVector<double> inline &    operator +=(MVector<double>&    v1, MVector<double>    v2)$/;"	f	namespace:interpolation
operator +=	src/Fields/Interpolation/MVector.h	/^MVector<m_complex> inline & operator +=(MVector<m_complex>& v1, MVector<m_complex> v2)$/;"	f	namespace:interpolation
operator +=	src/Fields/Interpolation/MVector.h	/^inline m_complex& operator +=(m_complex& c,  double    d)  {c  = gsl_complex_add_real(c, d);  return c;}$/;"	f	namespace:interpolation
operator +=	src/Fields/Interpolation/MVector.h	/^inline m_complex& operator +=(m_complex& c1, m_complex c2) {c1 = gsl_complex_add     (c1,c2); return c1;}$/;"	f	namespace:interpolation
operator +=	src/PartBunch/Binning/ParallelReduceTools.h	/^        ArrayReduction& operator+=(const ArrayReduction& src) {$/;"	f	struct:ParticleBinning::ArrayReduction
operator +=	src/PartBunch/Binning/ParallelReduceTools.h	/^        HostArrayReduction& operator+=(const HostArrayReduction& src) {$/;"	f	struct:ParticleBinning::HostArrayReduction
operator +=	src/Utilities/MSLang/matheval.hpp	/^        expr_ast<real_t>& expr_ast<real_t>::operator+=(expr_ast<real_t> const &rhs)$/;"	f	class:matheval::detail::expr_ast
operator +=	src/Utilities/Util.cpp	/^    KahanAccumulation& KahanAccumulation::operator+=(double value) {$/;"	f	class:Util::KahanAccumulation
operator -	src/Algorithms/.PartBunchBase.h	/^        int operator-(const ConstIterator& other) const {$/;"	f	class:PartBunch::ConstIterator
operator -	src/BeamlineGeometry/Matrix3D.cpp	/^Matrix3D operator-(const Matrix3D &lhs, const Matrix3D &rhs) {$/;"	f
operator -	src/BeamlineGeometry/Vector3D.cpp	/^Vector3D Vector3D::operator-() const {$/;"	f	class:Vector3D
operator -	src/BeamlineGeometry/Vector3D.cpp	/^Vector3D operator-(const Vector3D &lhs, const Vector3D &rhs) {$/;"	f
operator -	src/Fields/BMultipoleField.cpp	/^BMultipoleField::Pair::operator-(const Pair &rhs) const$/;"	f	class:BMultipoleField::Pair
operator -	src/Fields/BMultipoleField.cpp	/^inline BMultipoleField::Pair BMultipoleField::Pair::operator-() const$/;"	f	class:BMultipoleField::Pair
operator -	src/Fields/Interpolation/MMatrix.h	/^template <class Tmplt> MMatrix<Tmplt> inline operator - (MMatrix<Tmplt>    m1)$/;"	f	namespace:interpolation
operator -	src/Fields/Interpolation/MMatrix.h	/^template <class Tmplt> MMatrix<Tmplt> inline operator-(MMatrix<Tmplt>  m1, MMatrix<Tmplt> m2)$/;"	f	namespace:interpolation
operator -	src/Fields/Interpolation/MVector.h	/^inline m_complex  operator -(double     d,  m_complex c)  {return -gsl_complex_sub_real(c, d);}$/;"	f	namespace:interpolation
operator -	src/Fields/Interpolation/MVector.h	/^inline m_complex  operator -(m_complex  c)                {c.dat[0] = -c.dat[0]; c.dat[1] = -c.dat[1]; return c;}$/;"	f	namespace:interpolation
operator -	src/Fields/Interpolation/MVector.h	/^inline m_complex  operator -(m_complex  c,  double    d)  {return gsl_complex_sub_real(c, d);}$/;"	f	namespace:interpolation
operator -	src/Fields/Interpolation/MVector.h	/^inline m_complex  operator -(m_complex  c1, m_complex c2) {return gsl_complex_sub     (c1,c2);}$/;"	f	namespace:interpolation
operator -	src/Fields/Interpolation/MVector.h	/^template <class Tmplt> MVector<Tmplt> inline   operator - (MVector<Tmplt>  v1, MVector<Tmplt> v2) $/;"	f	namespace:interpolation
operator -	src/Fields/Interpolation/MVector.h	/^template <class Tmplt> MVector<Tmplt> inline operator - (const MVector<Tmplt>& v)$/;"	f	namespace:interpolation
operator --	src/Algorithms/StepSizeConfig.cpp	/^StepSizeConfig& StepSizeConfig::operator--() {$/;"	f	class:StepSizeConfig
operator -=	src/BeamlineGeometry/Matrix3D.cpp	/^Matrix3D &Matrix3D::operator-=(const Matrix3D &rhs) {$/;"	f	class:Matrix3D
operator -=	src/BeamlineGeometry/Vector3D.cpp	/^Vector3D &Vector3D::operator-=(const Vector3D &rhs) {$/;"	f	class:Vector3D
operator -=	src/Channels/Channel.h	/^    double operator-=(double value)$/;"	f	class:Channel
operator -=	src/Fields/BMultipoleField.cpp	/^inline void BMultipoleField::Pair::operator-=(const Pair &rhs)$/;"	f	class:BMultipoleField::Pair
operator -=	src/Fields/Interpolation/MMatrix.h	/^template <class Tmplt> MMatrix<Tmplt> inline & operator-=(MMatrix<Tmplt>& m1, MMatrix<Tmplt> m2)$/;"	f	namespace:interpolation
operator -=	src/Fields/Interpolation/MVector.h	/^inline m_complex& operator -=(m_complex& c,  double    d)  {c  = gsl_complex_sub_real(c, d);  return c;}$/;"	f	namespace:interpolation
operator -=	src/Fields/Interpolation/MVector.h	/^inline m_complex& operator -=(m_complex& c1, m_complex c2) {c1 = gsl_complex_sub     (c1,c2); return c1;}$/;"	f	namespace:interpolation
operator -=	src/Fields/Interpolation/MVector.h	/^template <class Tmplt> MVector<Tmplt> inline & operator -=(MVector<Tmplt>& v1, MVector<Tmplt> v2) $/;"	f	namespace:interpolation
operator -=	src/Utilities/MSLang/matheval.hpp	/^        expr_ast<real_t>& expr_ast<real_t>::operator-=(expr_ast<real_t> const &rhs)$/;"	f	class:matheval::detail::expr_ast
operator ->	src/MemoryManagement/OwnPtr.h	/^inline Object *OwnPtr<Object>::operator->() const {$/;"	f	class:OwnPtr
operator ->	src/MemoryManagement/Pointer.h	/^inline Object *Pointer<Object>::operator->() const {$/;"	f	class:Pointer
operator /	src/Algorithms/Quaternion.cpp	/^Quaternion Quaternion::operator\/(const double& d) const {$/;"	f	class:Quaternion
operator /	src/Fields/Interpolation/MMatrix.h	/^template <class Tmplt> MMatrix<Tmplt> inline operator\/(MMatrix<Tmplt>  m, Tmplt t)$/;"	f	namespace:interpolation
operator /	src/Fields/Interpolation/MVector.h	/^inline m_complex operator \/(double    d,  m_complex c)  {m_complex c1 = m_complex_build(d); return gsl_complex_div(c1,c);}$/;"	f	namespace:interpolation
operator /	src/Fields/Interpolation/MVector.h	/^inline m_complex operator \/(m_complex c,  double    d)  {return gsl_complex_div_real(c,d);}$/;"	f	namespace:interpolation
operator /	src/Fields/Interpolation/MVector.h	/^inline m_complex operator \/(m_complex c1, m_complex c2) {return gsl_complex_div(c1,c2);}$/;"	f	namespace:interpolation
operator /	src/Fields/Interpolation/MVector.h	/^template <class Tmplt> MVector<Tmplt> inline   operator \/ (MVector<Tmplt>  v, Tmplt d) $/;"	f	namespace:interpolation
operator /=	src/Fields/Interpolation/MMatrix.h	/^template <class Tmplt> MMatrix<Tmplt> inline & operator\/=(MMatrix<Tmplt>& m, Tmplt t)$/;"	f	namespace:interpolation
operator /=	src/Fields/Interpolation/MVector.h	/^inline m_complex& operator \/=(m_complex& c,  double    d)  {c  = gsl_complex_div_real(c,d); return c;}$/;"	f	namespace:interpolation
operator /=	src/Fields/Interpolation/MVector.h	/^inline m_complex& operator \/=(m_complex& c1, m_complex c2) {c1 = gsl_complex_div(c1,c2);    return c1;}$/;"	f	namespace:interpolation
operator /=	src/Fields/Interpolation/MVector.h	/^template <class Tmplt> MVector<Tmplt> inline & operator \/=(MVector<Tmplt>& v, Tmplt d) $/;"	f	namespace:interpolation
operator /=	src/Utilities/MSLang/matheval.hpp	/^        expr_ast<real_t>& expr_ast<real_t>::operator\/=(expr_ast<real_t> const &rhs)$/;"	f	class:matheval::detail::expr_ast
operator <	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^bool operator < (const TwoPolynomial &left, const TwoPolynomial &right) {$/;"	f	namespace:polynomial
operator <	tools/opal2sdds/main.cpp	/^    bool operator< (const Attribute& at) const {$/;"	f	struct:Attribute
operator <<	src/.Solvers/FFTPoissonSolver.h	/^inline Inform& operator<<(Inform& os, const FFTPoissonSolver& fs) {$/;"	f
operator <<	src/.Solvers/PoissonSolver.h	/^inline Inform& operator<<(Inform& os, const PoissonSolver& \/*fs*\/) {$/;"	f
operator <<	src/AbsBeamline/Offset.cpp	/^std::ostream& operator<<(std::ostream& out, const Offset& off) {$/;"	f
operator <<	src/AbstractObjects/Attribute.cpp	/^std::ostream &operator<<(std::ostream &os, const Attribute &attr) {$/;"	f
operator <<	src/AbstractObjects/Object.cpp	/^std::ostream &operator<<(std::ostream &os, const Object &object) {$/;"	f
operator <<	src/AbstractObjects/PlaceRep.h	/^inline std::ostream &operator<<(std::ostream &os, const PlaceRep &data) {$/;"	f
operator <<	src/AbstractObjects/RangeRep.h	/^inline std::ostream &operator<<(std::ostream &os, const RangeRep &val) {$/;"	f
operator <<	src/AbstractObjects/TableRowRep.h	/^inline std::ostream &operator<<(std::ostream &os, const TableRowRep &row) {$/;"	f
operator <<	src/Algorithms/.PartBunch.h	/^inline Inform& operator<<(Inform& os, PartBunch& p) {$/;"	f
operator <<	src/Algorithms/.PartBunchBase.hpp	/^Inform& operator<<(Inform &os, PartBunch<T, Dim>& p) {$/;"	f
operator <<	src/Algorithms/CoordinateSystemTrafo.h	/^inline Inform& operator<<(Inform& os, const CoordinateSystemTrafo& trafo) {$/;"	f
operator <<	src/Algorithms/CoordinateSystemTrafo.h	/^inline std::ostream& operator<<(std::ostream& os, const CoordinateSystemTrafo& trafo) {$/;"	f
operator <<	src/Algorithms/IndexMap.h	/^Inform& operator<< (Inform &out, const IndexMap &im) {$/;"	f
operator <<	src/Algorithms/IndexMap.h	/^std::ostream& operator<< (std::ostream &out, const IndexMap &im)$/;"	f
operator <<	src/Algorithms/PartBins.h	/^inline Inform &operator<<(Inform &os, PartBins &p) {$/;"	f
operator <<	src/Algorithms/PolynomialTimeDependence.h	/^Inform &operator<<(Inform &os, PolynomialTimeDependence &p) {$/;"	f
operator <<	src/Algorithms/SplineTimeDependence.h	/^Inform &operator<<(Inform &os, SplineTimeDependence &p) {$/;"	f
operator <<	src/BasicActions/DumpEMFields.h	/^inline std::ostream& operator<<(std::ostream& os, const DumpEMFields& b) {$/;"	f
operator <<	src/BasicActions/DumpFields.h	/^inline std::ostream& operator<<(std::ostream& os, const DumpFields& b) {$/;"	f
operator <<	src/Distribution/Distribution.h	/^inline Inform& operator<<(Inform& os, const Distribution& d) {$/;"	f
operator <<	src/Expressions/SRefAttr.h	/^    inline std::ostream &operator<<(std::ostream &os, const SRefAttr<T> &a) {$/;"	f	namespace:Expressions
operator <<	src/Fields/Interpolation/MMatrix.cpp	/^template <class Tmplt> std::ostream& operator<<(std::ostream& out, MMatrix<Tmplt> mat)$/;"	f	namespace:interpolation
operator <<	src/Fields/Interpolation/MVector.cpp	/^std::ostream& operator<<(std::ostream& out, m_complex  c)$/;"	f	namespace:interpolation
operator <<	src/Fields/Interpolation/MVector.cpp	/^template <class Tmplt> std::ostream& operator<<(std::ostream& out, MVector<Tmplt> v)$/;"	f	namespace:interpolation
operator <<	src/Fields/Interpolation/Mesh.cpp	/^std::ostream& operator<<(std::ostream& out, const Mesh::Iterator& it) {$/;"	f	namespace:interpolation
operator <<	src/Fields/Interpolation/PolynomialCoefficient.cpp	/^std::ostream& operator << (std::ostream& out,$/;"	f	namespace:interpolation
operator <<	src/Fields/Interpolation/SquarePolynomialVector.cpp	/^std::ostream& operator<<(std::ostream& out, const SquarePolynomialVector& spv)$/;"	f	namespace:interpolation
operator <<	src/OpalParser/Statement.h	/^inline Inform &operator<<(Inform &os, const Statement &statement) {$/;"	f
operator <<	src/OpalParser/Statement.h	/^inline std::ostream &operator<<(std::ostream &os, const Statement &statement) {$/;"	f
operator <<	src/OpalParser/Token.cpp	/^std::ostream &operator<<(std::ostream &os, const Token &token) {$/;"	f
operator <<	src/Structure/Beam.h	/^inline std::ostream &operator<<(std::ostream& os, const Beam& b) {$/;"	f
operator <<	src/Structure/BoundaryGeometry.h	/^inline Inform& operator<<(Inform& os, const BoundaryGeometry& b) {$/;"	f
operator <<	src/Structure/FieldSolverCmd.h	/^inline Inform& operator<<(Inform& os, const FieldSolverCmd& fs) {$/;"	f	class:FieldSolverCmdType
operator <<	src/Structure/SDDSColumn.cpp	/^std::ostream& operator<<(std::ostream& os,$/;"	f
operator <<	src/Structure/ValueRange.h	/^Inform& operator<<(Inform& out, ValueRange<T> const& range)$/;"	f
operator <<	src/Track/TrackRun.h	/^inline Inform& operator<<(Inform& os, const TrackRun& b) {$/;"	f
operator <<	src/Utilities/MSLang/BoundingBox2D.cpp	/^    std::ostream & operator<< (std::ostream &out, const BoundingBox2D &bb) {$/;"	f	namespace:mslang
operator <<	src/Utilities/OpalFilter.h	/^inline std::ostream& operator<<(std::ostream& os, const OpalFilter& b) {$/;"	f
operator <<	src/Utilities/SDDSParser/array.hpp	/^    inline std::ostream& operator<<(std::ostream& out, const array& ) {$/;"	f	namespace:SDDS
operator <<	src/Utilities/SDDSParser/associate.hpp	/^    inline std::ostream& operator<<(std::ostream& out, const associate& ) {$/;"	f	namespace:SDDS
operator <<	src/Utilities/SDDSParser/column.hpp	/^    inline std::ostream& operator<<(std::ostream& out, const column& col) {$/;"	f	namespace:SDDS
operator <<	src/Utilities/SDDSParser/data.hpp	/^    inline std::ostream& operator<<(std::ostream& out, const data& data_) {$/;"	f	namespace:SDDS
operator <<	src/Utilities/SDDSParser/description.hpp	/^    inline std::ostream& operator<<(std::ostream& out, const description& desc) {$/;"	f	namespace:SDDS
operator <<	src/Utilities/SDDSParser/file.hpp	/^    inline std::ostream& operator<<(std::ostream& out, const file& fh) {$/;"	f	namespace:SDDS
operator <<	src/Utilities/SDDSParser/include.hpp	/^    inline std::ostream& operator<<(std::ostream& out, const include& ) {$/;"	f	namespace:SDDS
operator <<	src/Utilities/SDDSParser/parameter.hpp	/^    inline std::ostream& operator<<(std::ostream& out, const parameter& param) {$/;"	f	namespace:SDDS
operator <<	src/Utilities/SDDSParser/version.hpp	/^    inline std::ostream& operator<<(std::ostream& out, const version& head) {$/;"	f	namespace:SDDS
operator =	src/AbsBeamline/AttributeSet.cpp	/^const AttributeSet &AttributeSet::operator=(const AttributeSet &rhs) {$/;"	f	class:AttributeSet
operator =	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^CoordinateTransform& CoordinateTransform::operator= ($/;"	f	class:coordinatetransform::CoordinateTransform
operator =	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^DifferentialOperator& DifferentialOperator::operator= ($/;"	f	class:polynomial::DifferentialOperator
operator =	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^DifferentialOperatorTwo& DifferentialOperatorTwo::operator= ($/;"	f	class:polynomial::DifferentialOperatorTwo
operator =	src/AbsBeamline/MultipoleTFunctions/Polynomial.cpp	/^Polynomial& Polynomial::operator= (const Polynomial& poly) {$/;"	f	class:polynomial::Polynomial
operator =	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^PolynomialSum& PolynomialSum::operator= (const PolynomialSum &sum) {$/;"	f	class:polynomial::PolynomialSum
operator =	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.cpp	/^RecursionRelation& RecursionRelation::operator= ($/;"	f	class:polynomial::RecursionRelation
operator =	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.cpp	/^RecursionRelationTwo& RecursionRelationTwo::operator= ($/;"	f	class:polynomial::RecursionRelationTwo
operator =	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^TwoPolynomial& TwoPolynomial::operator= (const TwoPolynomial &poly) {$/;"	f	class:polynomial::TwoPolynomial
operator =	src/AbsBeamline/Offset.cpp	/^Offset& Offset::operator=(const Offset& rhs) {$/;"	f	class:Offset
operator =	src/AbstractObjects/Attribute.cpp	/^const Attribute &Attribute::operator=(const Attribute &rhs) {$/;"	f	class:Attribute
operator =	src/AbstractObjects/PlaceRep.cpp	/^const PlaceRep &PlaceRep::operator=(const PlaceRep &rhs) {$/;"	f	class:PlaceRep
operator =	src/AbstractObjects/RangeRep.cpp	/^const RangeRep &RangeRep::operator=(const RangeRep &rep) {$/;"	f	class:RangeRep
operator =	src/AbstractObjects/TableRowRep.cpp	/^const TableRowRep &TableRowRep::operator=(const TableRowRep &rhs) {$/;"	f	class:TableRowRep
operator =	src/BeamlineGeometry/Euclid3DGeometry.cpp	/^const Euclid3DGeometry &Euclid3DGeometry::operator=(const Euclid3DGeometry &rhs) {$/;"	f	class:Euclid3DGeometry
operator =	src/BeamlineGeometry/Geometry.h	/^inline const BGeometryBase &BGeometryBase::operator=(const BGeometryBase &)$/;"	f	class:BGeometryBase
operator =	src/BeamlineGeometry/NullGeometry.h	/^NullGeometry::operator=(const NullGeometry &) {$/;"	f	class:NullGeometry
operator =	src/BeamlineGeometry/PlanarArcGeometry.h	/^inline const PlanarArcGeometry &PlanarArcGeometry::operator=$/;"	f	class:PlanarArcGeometry
operator =	src/BeamlineGeometry/StraightGeometry.h	/^inline const StraightGeometry &StraightGeometry::operator=$/;"	f	class:StraightGeometry
operator =	src/BeamlineGeometry/VarRadiusGeometry.h	/^    const VarRadiusGeometry &VarRadiusGeometry::operator= ($/;"	f	class:VarRadiusGeometry
operator =	src/Channels/Channel.h	/^    double operator=(double value)$/;"	f	class:Channel
operator =	src/Fields/BMultipoleField.cpp	/^BMultipoleField &BMultipoleField::operator=(const BMultipoleField &rhs) {$/;"	f	class:BMultipoleField
operator =	src/Fields/BMultipoleField.cpp	/^inline void BMultipoleField::Pair::operator=(const Pair &rhs)$/;"	f	class:BMultipoleField::Pair
operator =	src/Fields/BSingleMultipoleField.h	/^operator=(const BSingleMultipoleField &field) {$/;"	f	class:BSingleMultipoleField
operator =	src/Fields/EMField.cpp	/^const EMField &EMField::operator=(const EMField &) {$/;"	f	class:EMField
operator =	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<double>& MMatrix<double>::operator= (const MMatrix<double>& mm)$/;"	f	class:interpolation::MMatrix
operator =	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<m_complex>& MMatrix<m_complex>::operator= (const MMatrix<m_complex>& mm)$/;"	f	class:interpolation::MMatrix
operator =	src/Fields/Interpolation/MVector.cpp	/^MVector<double>& MVector<double>::operator= (const MVector<double>& mv)$/;"	f	class:interpolation::MVector
operator =	src/Fields/Interpolation/MVector.cpp	/^MVector<m_complex>& MVector<m_complex>::operator= (const MVector<m_complex>& mv)$/;"	f	class:interpolation::MVector
operator =	src/Fields/NullField.cpp	/^const NullField &NullField::operator=(const NullField &)$/;"	f	class:NullField
operator =	src/MemoryManagement/OwnPtr.h	/^inline OwnPtr<Object> &OwnPtr<Object>::operator=(Object *obj) {$/;"	f	class:OwnPtr
operator =	src/MemoryManagement/OwnPtr.h	/^inline OwnPtr<Object> &OwnPtr<Object>::operator=(const OwnPtr &rhs) {$/;"	f	class:OwnPtr
operator =	src/MemoryManagement/Pointer.h	/^inline Pointer<Object> &Pointer<Object>::operator=(Object *obj) {$/;"	f	class:Pointer
operator =	src/MemoryManagement/Pointer.h	/^inline Pointer<Object> &Pointer<Object>::operator=(const Pointer &rhs) {$/;"	f	class:Pointer
operator =	src/MemoryManagement/RCObject.h	/^inline RCObject &RCObject::operator=(const RCObject &\/*rhs*\/) {$/;"	f	class:RCObject
operator =	src/OpalParser/Token.cpp	/^const Token &Token::operator=(const Token &rhs) {$/;"	f	class:Token
operator =	src/PartBunch/Binning/BinHisto.h	/^        Histogram& operator=(const Histogram& other) {$/;"	f	class:ParticleBinning::Histogram
operator =	src/PartBunch/Binning/ParallelReduceTools.h	/^        ArrayReduction& operator=(const ArrayReduction& rhs) {$/;"	f	struct:ParticleBinning::ArrayReduction
operator =	src/PartBunch/Binning/ParallelReduceTools.h	/^        HostArrayReduction& operator=(const HostArrayReduction& rhs) {$/;"	f	struct:ParticleBinning::HostArrayReduction
operator =	src/Utilities/MSLang/QuadTree.cpp	/^    void QuadTree::operator=(const QuadTree &right) {$/;"	f	class:mslang::QuadTree
operator =	src/Utilities/RingSection.cpp	/^RingSection& RingSection::operator=(const RingSection& rhs) {$/;"	f	class:RingSection
operator =	tests/ippl_src/Particle/ParticleDebug.cpp	/^    Particles& operator=(const Particles& p) {$/;"	f	class:Particles
operator ==	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^bool operator == (const TwoPolynomial &left, const TwoPolynomial &right) {$/;"	f	namespace:polynomial
operator ==	src/AbsBeamline/Offset.cpp	/^bool operator==(const Offset& off1, const Offset& off2) {$/;"	f
operator ==	src/Algorithms/.PartBunchBase.h	/^        bool operator==(ConstIterator const& rhs) const {$/;"	f	class:PartBunch::ConstIterator
operator ==	src/BeamlineGeometry/Euclid3D.cpp	/^bool Euclid3D::operator==(const Euclid3D &rhs) const {$/;"	f	class:Euclid3D
operator ==	src/BeamlineGeometry/Matrix3D.cpp	/^bool Matrix3D::operator==(const Matrix3D &rhs) const {$/;"	f	class:Matrix3D
operator ==	src/BeamlineGeometry/Rotation3D.h	/^inline bool Rotation3D::operator==(const Rotation3D &rhs) const$/;"	f	class:Rotation3D
operator ==	src/BeamlineGeometry/Vector3D.cpp	/^bool Vector3D::operator==(const Vector3D &rhs) const {$/;"	f	class:Vector3D
operator ==	src/Fields/Interpolation/MMatrix.h	/^bool operator==(const MMatrix<Tmplt>& lhs, const MMatrix<Tmplt>& rhs)$/;"	f	namespace:interpolation
operator ==	src/Fields/Interpolation/MVector.cpp	/^template <class Tmplt> bool operator==(const MVector<Tmplt>& c1, const MVector<Tmplt>& c2)$/;"	f	namespace:interpolation
operator ==	src/Fields/Interpolation/MVector.h	/^inline bool      operator ==(m_complex c1, m_complex c2) {return c1.dat[0] == c2.dat[0] && c1.dat[1] == c2.dat[1];}$/;"	f	namespace:interpolation
operator ==	src/MemoryManagement/Pointer.h	/^inline bool Pointer<Object>::operator==(const Pointer &rhs) const {$/;"	f	class:Pointer
operator >>	src/Fields/Interpolation/MMatrix.cpp	/^template <class Tmplt> std::istream& operator>>(std::istream& in, MMatrix<Tmplt>& mat)$/;"	f	namespace:interpolation
operator >>	src/Fields/Interpolation/MVector.cpp	/^std::istream& operator>>(std::istream& in,  m_complex& c)$/;"	f	namespace:interpolation
operator >>	src/Fields/Interpolation/MVector.cpp	/^template <class Tmplt> std::istream& operator>>(std::istream& in, MVector<Tmplt>& v)$/;"	f	namespace:interpolation
operator BMultipoleField	src/Fields/BSingleMultipoleField.h	/^BSingleMultipoleField<order>::operator BMultipoleField() const {$/;"	f	class:BSingleMultipoleField
operator []	src/AbstractObjects/OpalParticle.h	/^inline double OpalParticle::operator[](unsigned int i) const {$/;"	f	class:OpalParticle
operator []	src/Algorithms/OpalParticle.h	/^inline double OpalParticle::operator[](unsigned int i) const {$/;"	f	class:OpalParticle
operator bool	src/AbstractObjects/Attribute.h	/^inline Attribute::operator bool() const {$/;"	f	class:Attribute
operator double	src/Channels/ConstChannel.h	/^    operator double() const$/;"	f	class:ConstChannel
operator_m	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.h	/^    DifferentialOperator operator_m;$/;"	m	class:polynomial::RecursionRelation
operator_m	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^    DifferentialOperatorTwo operator_m;$/;"	m	class:polynomial::RecursionRelationTwo
opr	src/Expressions/ASUnary.h	/^        PtrToArray<T> opr;$/;"	m	class:Expressions::ASUnary
opr	src/Expressions/AUnary.h	/^        PtrToArray<U> opr;$/;"	m	class:Expressions::AUnary
opr	src/Expressions/SUnary.h	/^        PtrToScalar<U> opr;$/;"	m	class:Expressions::SUnary
optimize	src/Utilities/MSLang/matheval.hpp	/^        void optimize() {$/;"	f	class:matheval::Parser
optimizeCavityPhase	src/Algorithms/CavityAutophaser.cpp	/^std::pair<double, double> CavityAutophaser::optimizeCavityPhase($/;"	f	class:CavityAutophaser
orb	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        ORB<T, Dim> orb;$/;"	m	class:LoadBalancer
orb	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    ORB orb;$/;"	m	class:ChargedParticles	file:
orb	src/PartBunch/LoadBalancer.hpp	/^    ORB<T, Dim> orb;$/;"	m	class:LoadBalancer
order	src/Fields/BMultipoleField.h	/^inline int BMultipoleField::order() const {$/;"	f	class:BMultipoleField
order_m	src/Utilities/ClassicField.h	/^    unsigned int order_m;$/;"	m	class:ClassicField
order_m	src/Utilities/SDDSParser/column.hpp	/^        unsigned int order_m;$/;"	m	struct:SDDS::column
order_m	src/Utilities/SDDSParser/parameter.hpp	/^        unsigned int order_m;$/;"	m	struct:SDDS::parameter
orientNodesCCW	src/Utilities/MSLang/Triangle.cpp	/^    void Triangle::orientNodesCCW() {$/;"	f	class:mslang::Triangle
orientVerticesCCW	src/Utilities/Mesher.cpp	/^void Mesher::orientVerticesCCW() {$/;"	f	class:Mesher
orientation_m	src/Algorithms/CoordinateSystemTrafo.h	/^    Quaternion orientation_m;$/;"	m	class:CoordinateSystemTrafo
origin	src/Structure/BoundaryGeometry.cpp	/^    Vector_t<double, 3> origin;$/;"	m	class:Ray	file:
origin_m	src/Algorithms/CoordinateSystemTrafo.h	/^    ippl::Vector<double, 3> origin_m;$/;"	m	class:CoordinateSystemTrafo
origin_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    Vector_t<double, Dim> origin_m;$/;"	m	class:AlpineManager
origin_m	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> origin_m;$/;"	m	class:PartBunch
os	tools/Normalization2DMaps/normalization.py	/^import sys,re,os,string,fileinput$/;"	i
os_m	src/Structure/LossDataSink.h	/^    std::ofstream os_m;$/;"	m	class:LossDataSink
os_m	src/Structure/PeakFinder.h	/^    std::ofstream os_m;$/;"	m	class:PeakFinder
os_m	src/Structure/SDDSWriter.h	/^    std::ofstream os_m;$/;"	m	class:SDDSWriter
outFiles_m	src/AbstractObjects/OpalData.cpp	/^    std::set<std::string> outFiles_m;$/;"	m	struct:OpalDataImpl	file:
outOfBoundsPosition	src/Fields/Interpolation/PPSolveFactory.cpp	/^std::vector<double> PPSolveFactory::outOfBoundsPosition($/;"	f	class:interpolation::PPSolveFactory
outputName_m	src/Structure/LossDataSink.h	/^    std::string outputName_m;$/;"	m	class:LossDataSink
outputName_m	src/Structure/LossDataSink.h	/^    std::string outputName_m;$/;"	m	struct:SetStatistics
outputName_m	src/Structure/PeakFinder.h	/^    std::string outputName_m;$/;"	m	class:PeakFinder
outputfn_m	src/AbsBeamline/ElementBase.h	/^    std::string outputfn_m; \/**< The name of the outputfile*\/$/;"	m	class:ElementBase
override	src/.Solvers/ArbitraryDomain.h	/^                               double &scaleFactor) const override;$/;"	m	class:ArbitraryDomain
override	src/.Solvers/ArbitraryDomain.h	/^                             double &scaleFactor) const override;$/;"	m	class:ArbitraryDomain
override	src/.Solvers/ArbitraryDomain.h	/^    void compute(Vector_t<double, 3> hr, NDIndex<3> localId) override;$/;"	m	class:ArbitraryDomain
override	src/.Solvers/EllipticDomain.h	/^                                double &scaleFactor) const override;$/;"	m	class:EllipticDomain
override	src/.Solvers/EllipticDomain.h	/^                             double &scaleFactor) const override;$/;"	m	class:EllipticDomain
override	src/.Solvers/EllipticDomain.h	/^    void compute(Vector_t<double, 3> hr, NDIndex<3> localId) override;$/;"	m	class:EllipticDomain
override	src/.Solvers/RegularDomain.h	/^                               double &scaleFactor) const override;$/;"	m	class:RegularDomain
override	src/.Solvers/RegularDomain.h	/^                    const Vector_t<double, 3>& rmax, double dh) override;$/;"	m	class:RegularDomain
override	src/AbsBeamline/Drift.h	/^    virtual ElementType getType() const override;$/;"	m	class:Drift
override	src/AbsBeamline/Drift.h	/^    virtual bool bends() const override;$/;"	m	class:Drift
override	src/AbsBeamline/Drift.h	/^    virtual int getRequiredNumberOfTimeSteps() const override;$/;"	m	class:Drift
override	src/AbsBeamline/Drift.h	/^    virtual void accept(BeamlineVisitor&) const override;$/;"	m	class:Drift
override	src/AbsBeamline/Drift.h	/^    virtual void finalise() override;$/;"	m	class:Drift
override	src/AbsBeamline/Drift.h	/^    virtual void getDimensions(double& zBegin, double& zEnd) const override;$/;"	m	class:Drift
override	src/AbsBeamline/Drift.h	/^    virtual void initialise(PartBunch_t* bunch, double& startField, double& endField) override;$/;"	m	class:Drift
override	src/AbsBeamline/Marker.h	/^    virtual ElementType getType() const override;$/;"	m	class:Marker
override	src/AbsBeamline/Marker.h	/^    virtual bool bends() const override;$/;"	m	class:Marker
override	src/AbsBeamline/Marker.h	/^    virtual int getRequiredNumberOfTimeSteps() const override;$/;"	m	class:Marker
override	src/AbsBeamline/Marker.h	/^    virtual void accept(BeamlineVisitor &) const override;$/;"	m	class:Marker
override	src/AbsBeamline/Marker.h	/^    virtual void finalise() override;$/;"	m	class:Marker
override	src/AbsBeamline/Marker.h	/^    virtual void getDimensions(double &zBegin, double &zEnd) const override;$/;"	m	class:Marker
override	src/AbsBeamline/Marker.h	/^    virtual void initialise(PartBunch_t *bunch, double &startField, double &endField) override;$/;"	m	class:Marker
override	src/AbsBeamline/Monitor.h	/^        Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:Monitor
override	src/AbsBeamline/Monitor.h	/^        const size_t& i, const double& t, Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:Monitor
override	src/AbsBeamline/Monitor.h	/^    virtual ElementType getType() const override;$/;"	m	class:Monitor
override	src/AbsBeamline/Monitor.h	/^    virtual StraightGeometry& getGeometry() override = 0;$/;"	m	class:Monitor
override	src/AbsBeamline/Monitor.h	/^    virtual bool bends() const override;$/;"	m	class:Monitor
override	src/AbsBeamline/Monitor.h	/^    virtual bool isInside(const Vector_t<double, 3>& r) const override;$/;"	m	class:Monitor
override	src/AbsBeamline/Monitor.h	/^    virtual const StraightGeometry& getGeometry() const override = 0;$/;"	m	class:Monitor
override	src/AbsBeamline/Monitor.h	/^    virtual int getRequiredNumberOfTimeSteps() const override;$/;"	m	class:Monitor
override	src/AbsBeamline/Monitor.h	/^    virtual void accept(BeamlineVisitor&) const override;$/;"	m	class:Monitor
override	src/AbsBeamline/Monitor.h	/^    virtual void finalise() override;$/;"	m	class:Monitor
override	src/AbsBeamline/Monitor.h	/^    virtual void getDimensions(double& zBegin, double& zEnd) const override;$/;"	m	class:Monitor
override	src/AbsBeamline/Monitor.h	/^    virtual void goOffline() override;$/;"	m	class:Monitor
override	src/AbsBeamline/Monitor.h	/^    virtual void goOnline(const double& kineticEnergy) override;$/;"	m	class:Monitor
override	src/AbsBeamline/Monitor.h	/^    virtual void initialise(PartBunch_t* bunch, double& startField, double& endField) override;$/;"	m	class:Monitor
override	src/AbsBeamline/Multipole.h	/^        Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:Multipole
override	src/AbsBeamline/Multipole.h	/^        const size_t& i, const double& t, Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:Multipole
override	src/AbsBeamline/Multipole.h	/^    virtual BMultipoleField& getField() override = 0;$/;"	m	class:Multipole
override	src/AbsBeamline/Multipole.h	/^    virtual ElementType getType() const override;$/;"	m	class:Multipole
override	src/AbsBeamline/Multipole.h	/^    virtual StraightGeometry& getGeometry() override = 0;$/;"	m	class:Multipole
override	src/AbsBeamline/Multipole.h	/^    virtual bool bends() const override;$/;"	m	class:Multipole
override	src/AbsBeamline/Multipole.h	/^    virtual bool isInside(const Vector_t<double, 3>& r) const override;$/;"	m	class:Multipole
override	src/AbsBeamline/Multipole.h	/^    virtual const BMultipoleField& getField() const override = 0;$/;"	m	class:Multipole
override	src/AbsBeamline/Multipole.h	/^    virtual const StraightGeometry& getGeometry() const override = 0;$/;"	m	class:Multipole
override	src/AbsBeamline/Multipole.h	/^    virtual void accept(BeamlineVisitor&) const override;$/;"	m	class:Multipole
override	src/AbsBeamline/Multipole.h	/^    virtual void finalise() override;$/;"	m	class:Multipole
override	src/AbsBeamline/Multipole.h	/^    virtual void getDimensions(double& zBegin, double& zEnd) const override;$/;"	m	class:Multipole
override	src/AbsBeamline/Multipole.h	/^    virtual void initialise(PartBunch_t* bunch, double& startField, double& endField) override;$/;"	m	class:Multipole
override	src/AbsBeamline/MultipoleT.h	/^        Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:MultipoleT
override	src/AbsBeamline/MultipoleT.h	/^        const size_t& i, const double& t, Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:MultipoleT
override	src/AbsBeamline/MultipoleT.h	/^    EMField& getField() override;$/;"	m	class:MultipoleT
override	src/AbsBeamline/MultipoleT.h	/^    ElementBase* clone() const override;$/;"	m	class:MultipoleT
override	src/AbsBeamline/MultipoleT.h	/^    PlanarArcGeometry& getGeometry() override;$/;"	m	class:MultipoleT
override	src/AbsBeamline/MultipoleT.h	/^    bool bends() const override;$/;"	m	class:MultipoleT
override	src/AbsBeamline/MultipoleT.h	/^    const EMField& getField() const override;$/;"	m	class:MultipoleT
override	src/AbsBeamline/MultipoleT.h	/^    const PlanarArcGeometry& getGeometry() const override;$/;"	m	class:MultipoleT
override	src/AbsBeamline/MultipoleT.h	/^    void accept(BeamlineVisitor& visitor) const override;$/;"	m	class:MultipoleT
override	src/AbsBeamline/MultipoleT.h	/^    void finalise() override;$/;"	m	class:MultipoleT
override	src/AbsBeamline/MultipoleT.h	/^    void getDimensions(double& zBegin, double& zEnd) const override;$/;"	m	class:MultipoleT
override	src/AbsBeamline/MultipoleT.h	/^    void initialise(PartBunch_t*, double& startField, double& endField) override;$/;"	m	class:MultipoleT
override	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^                            double &endField) override;$/;"	m	class:MultipoleTCurvedConstRadius
override	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^                         const double &s) override;$/;"	m	class:MultipoleTCurvedConstRadius
override	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    PlanarArcGeometry& getGeometry() override;$/;"	m	class:MultipoleTCurvedConstRadius
override	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    const PlanarArcGeometry& getGeometry() const override;$/;"	m	class:MultipoleTCurvedConstRadius
override	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    virtual ElementBase* clone() const override;$/;"	m	class:MultipoleTCurvedConstRadius
override	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    virtual double getBendAngle() const override;$/;"	m	class:MultipoleTCurvedConstRadius
override	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    virtual double getRadius(const double &s) override;$/;"	m	class:MultipoleTCurvedConstRadius
override	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    virtual double getScaleFactor(const double &x, const double &s) override;$/;"	m	class:MultipoleTCurvedConstRadius
override	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    virtual void setBendAngle(const double &angle) override;$/;"	m	class:MultipoleTCurvedConstRadius
override	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    virtual void setMaxOrder(const std::size_t &maxOrder) override;$/;"	m	class:MultipoleTCurvedConstRadius
override	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    virtual void transformBField(Vector_t<double, 3> &B, const Vector_t<double, 3> &R) override;$/;"	m	class:MultipoleTCurvedConstRadius
override	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    virtual void transformCoords(Vector_t<double, 3> &R) override;$/;"	m	class:MultipoleTCurvedConstRadius
override	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    void accept(BeamlineVisitor &visitor) const override;$/;"	m	class:MultipoleTCurvedConstRadius
override	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^                            double &endField) override;$/;"	m	class:MultipoleTCurvedVarRadius
override	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^                         const double &s) override;$/;"	m	class:MultipoleTCurvedVarRadius
override	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    VarRadiusGeometry& getGeometry() override;$/;"	m	class:MultipoleTCurvedVarRadius
override	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    const VarRadiusGeometry& getGeometry() const override;$/;"	m	class:MultipoleTCurvedVarRadius
override	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    virtual ElementBase* clone() const override;$/;"	m	class:MultipoleTCurvedVarRadius
override	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    virtual double getBendAngle() const override;$/;"	m	class:MultipoleTCurvedVarRadius
override	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    virtual double getRadius(const double &s) override;$/;"	m	class:MultipoleTCurvedVarRadius
override	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    virtual double getScaleFactor(const double &x, const double &s) override;$/;"	m	class:MultipoleTCurvedVarRadius
override	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    virtual void setBendAngle(const double &angle) override;$/;"	m	class:MultipoleTCurvedVarRadius
override	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    virtual void setMaxOrder(const std::size_t &maxOrder) override;$/;"	m	class:MultipoleTCurvedVarRadius
override	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    virtual void transformBField(Vector_t<double, 3> &B, const Vector_t<double, 3> &R) override;$/;"	m	class:MultipoleTCurvedVarRadius
override	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    virtual void transformCoords(Vector_t<double, 3> &R) override;$/;"	m	class:MultipoleTCurvedVarRadius
override	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    void accept(BeamlineVisitor &visitor) const override;$/;"	m	class:MultipoleTCurvedVarRadius
override	src/AbsBeamline/MultipoleTStraight.h	/^                            double &endField) override;$/;"	m	class:MultipoleTStraight
override	src/AbsBeamline/MultipoleTStraight.h	/^                         const double &s) override;$/;"	m	class:MultipoleTStraight
override	src/AbsBeamline/MultipoleTStraight.h	/^    StraightGeometry& getGeometry() override;$/;"	m	class:MultipoleTStraight
override	src/AbsBeamline/MultipoleTStraight.h	/^    const StraightGeometry& getGeometry() const override;$/;"	m	class:MultipoleTStraight
override	src/AbsBeamline/MultipoleTStraight.h	/^    virtual ElementBase* clone() const override;$/;"	m	class:MultipoleTStraight
override	src/AbsBeamline/MultipoleTStraight.h	/^    virtual double getBs (const Vector_t<double, 3> &R) override;$/;"	m	class:MultipoleTStraight
override	src/AbsBeamline/MultipoleTStraight.h	/^    virtual double getBx (const Vector_t<double, 3> &R) override;$/;"	m	class:MultipoleTStraight
override	src/AbsBeamline/MultipoleTStraight.h	/^    virtual double getRadius(const double &s) override;$/;"	m	class:MultipoleTStraight
override	src/AbsBeamline/MultipoleTStraight.h	/^    virtual double getScaleFactor(const double &x, const double &s) override;$/;"	m	class:MultipoleTStraight
override	src/AbsBeamline/MultipoleTStraight.h	/^    virtual void setMaxOrder(const std::size_t &maxOrder) override;$/;"	m	class:MultipoleTStraight
override	src/AbsBeamline/MultipoleTStraight.h	/^    virtual void transformBField(Vector_t<double, 3> &B, const Vector_t<double, 3> &R) override;$/;"	m	class:MultipoleTStraight
override	src/AbsBeamline/MultipoleTStraight.h	/^    virtual void transformCoords(Vector_t<double, 3> &R) override;$/;"	m	class:MultipoleTStraight
override	src/AbsBeamline/MultipoleTStraight.h	/^    void accept(BeamlineVisitor &visitor) const override;$/;"	m	class:MultipoleTStraight
override	src/AbsBeamline/Offset.h	/^                            double &endField) override;$/;"	m	class:Offset
override	src/AbsBeamline/Offset.h	/^    EMField &getField() override;$/;"	m	class:Offset
override	src/AbsBeamline/Offset.h	/^    ElementBase* clone() const override;$/;"	m	class:Offset
override	src/AbsBeamline/Offset.h	/^    Euclid3DGeometry& getGeometry() override;$/;"	m	class:Offset
override	src/AbsBeamline/Offset.h	/^    bool bends() const override;$/;"	m	class:Offset
override	src/AbsBeamline/Offset.h	/^    const EMField &getField() const override;$/;"	m	class:Offset
override	src/AbsBeamline/Offset.h	/^    const Euclid3DGeometry& getGeometry() const override;$/;"	m	class:Offset
override	src/AbsBeamline/Offset.h	/^    void accept(BeamlineVisitor &) const override;$/;"	m	class:Offset
override	src/AbsBeamline/Offset.h	/^    void finalise() override;$/;"	m	class:Offset
override	src/AbsBeamline/PluginElement.h	/^        PartBunch_t* bunch, double& startField, double& endField) override;  \/\/ not used?$/;"	m	class:PluginElement
override	src/AbsBeamline/PluginElement.h	/^        Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:PluginElement
override	src/AbsBeamline/PluginElement.h	/^        const size_t& i, const double& t, Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:PluginElement
override	src/AbsBeamline/PluginElement.h	/^    virtual bool bends() const override;$/;"	m	class:PluginElement
override	src/AbsBeamline/PluginElement.h	/^    virtual void getDimensions(double& zBegin, double& zEnd) const override;$/;"	m	class:PluginElement
override	src/AbsBeamline/Probe.h	/^    virtual ElementType getType() const override;$/;"	m	class:Probe
override	src/AbsBeamline/Probe.h	/^    virtual bool doCheck(PartBunch_t *bunch, const int turnnumber, const double t, const double tstep) override;$/;"	m	class:Probe
override	src/AbsBeamline/Probe.h	/^    virtual bool doPreCheck(PartBunch_t*) override;$/;"	m	class:Probe
override	src/AbsBeamline/Probe.h	/^    virtual void accept(BeamlineVisitor &) const override;$/;"	m	class:Probe
override	src/AbsBeamline/Probe.h	/^    virtual void doGoOffline() override;$/;"	m	class:Probe
override	src/AbsBeamline/Probe.h	/^    virtual void doInitialise(PartBunch_t *bunch) override;$/;"	m	class:Probe
override	src/AbsBeamline/RFCavity.h	/^        Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^        const size_t& i, const double& t, Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^    virtual CoordinateSystemTrafo getEdgeToBegin() const override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^    virtual CoordinateSystemTrafo getEdgeToEnd() const override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^    virtual ElementType getType() const override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^    virtual bool bends() const override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^    virtual bool isInside(const Vector_t<double, 3>& r) const override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^    virtual double getDesignEnergy() const override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^    virtual double getElementLength() const override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^    virtual void accept(BeamlineVisitor&) const override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^    virtual void finalise() override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^    virtual void getDimensions(double& zBegin, double& zEnd) const override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^    virtual void getElementDimensions(double& begin, double& end) const override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^    virtual void goOffline() override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^    virtual void goOnline(const double& kineticEnergy) override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^    virtual void initialise(PartBunch_t* bunch, double& startField, double& endField) override;$/;"	m	class:RFCavity
override	src/AbsBeamline/RFCavity.h	/^    virtual void setDesignEnergy(const double& ekin, bool changeable = true) override;$/;"	m	class:RFCavity
override	src/AbsBeamline/Ring.h	/^        Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:Ring
override	src/AbsBeamline/Ring.h	/^        const size_t& id, const double& t, Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:Ring
override	src/AbsBeamline/Ring.h	/^    virtual void accept(BeamlineVisitor& visitor) const override;$/;"	m	class:Ring
override	src/AbsBeamline/Ring.h	/^    virtual void finalise() override;$/;"	m	class:Ring
override	src/AbsBeamline/Ring.h	/^    virtual void getDimensions(double& zBegin, double& zEnd) const override;$/;"	m	class:Ring
override	src/AbsBeamline/Ring.h	/^    virtual void initialise(PartBunch_t* bunch, double& startField, double& endField) override;$/;"	m	class:Ring
override	src/AbsBeamline/ScalingFFAMagnet.h	/^               Vector_t<double, 3> &E, Vector_t<double, 3> &B) override;$/;"	m	class:ScalingFFAMagnet
override	src/AbsBeamline/ScalingFFAMagnet.h	/^      void initialise(PartBunch_t *bunch, double &startField, double &endField) override;$/;"	m	class:ScalingFFAMagnet
override	src/AbsBeamline/ScalingFFAMagnet.h	/^    BGeometryBase& getGeometry() override;$/;"	m	class:ScalingFFAMagnet
override	src/AbsBeamline/ScalingFFAMagnet.h	/^    EMField &getField() override;$/;"	m	class:ScalingFFAMagnet
override	src/AbsBeamline/ScalingFFAMagnet.h	/^    ScalingFFAMagnet* clone() const override;$/;"	m	class:ScalingFFAMagnet
override	src/AbsBeamline/ScalingFFAMagnet.h	/^    bool apply(const size_t &i, const double &t, Vector_t<double, 3> &E, Vector_t<double, 3> &B) override;$/;"	m	class:ScalingFFAMagnet
override	src/AbsBeamline/ScalingFFAMagnet.h	/^    const BGeometryBase& getGeometry() const override;$/;"	m	class:ScalingFFAMagnet
override	src/AbsBeamline/ScalingFFAMagnet.h	/^    const EMField &getField() const override;$/;"	m	class:ScalingFFAMagnet
override	src/AbsBeamline/ScalingFFAMagnet.h	/^    inline bool bends() const override;$/;"	m	class:ScalingFFAMagnet
override	src/AbsBeamline/ScalingFFAMagnet.h	/^    void accept(BeamlineVisitor& visitor) const override;$/;"	m	class:ScalingFFAMagnet
override	src/AbsBeamline/ScalingFFAMagnet.h	/^    void finalise() override;$/;"	m	class:ScalingFFAMagnet
override	src/AbsBeamline/Solenoid.h	/^        Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:Solenoid
override	src/AbsBeamline/Solenoid.h	/^        const size_t& i, const double& t, Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:Solenoid
override	src/AbsBeamline/Solenoid.h	/^    virtual CoordinateSystemTrafo getEdgeToBegin() const override;$/;"	m	class:Solenoid
override	src/AbsBeamline/Solenoid.h	/^    virtual CoordinateSystemTrafo getEdgeToEnd() const override;$/;"	m	class:Solenoid
override	src/AbsBeamline/Solenoid.h	/^    virtual ElementType getType() const override;$/;"	m	class:Solenoid
override	src/AbsBeamline/Solenoid.h	/^    virtual bool bends() const override;$/;"	m	class:Solenoid
override	src/AbsBeamline/Solenoid.h	/^    virtual bool isInside(const Vector_t<double, 3>& r) const override;$/;"	m	class:Solenoid
override	src/AbsBeamline/Solenoid.h	/^    virtual void accept(BeamlineVisitor&) const override;$/;"	m	class:Solenoid
override	src/AbsBeamline/Solenoid.h	/^    virtual void finalise() override;$/;"	m	class:Solenoid
override	src/AbsBeamline/Solenoid.h	/^    virtual void getDimensions(double& zBegin, double& zEnd) const override;$/;"	m	class:Solenoid
override	src/AbsBeamline/Solenoid.h	/^    virtual void getElementDimensions(double& zBegin, double& zEnd) const override;$/;"	m	class:Solenoid
override	src/AbsBeamline/Solenoid.h	/^    virtual void goOffline() override;$/;"	m	class:Solenoid
override	src/AbsBeamline/Solenoid.h	/^    virtual void goOnline(const double& kineticEnergy) override;$/;"	m	class:Solenoid
override	src/AbsBeamline/Solenoid.h	/^    virtual void initialise(PartBunch_t* bunch, double& startField, double& endField) override;$/;"	m	class:Solenoid
override	src/AbsBeamline/TravelingWave.h	/^        Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^        const double& E0, const double& t0, const double& q, const double& m) override;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^        const size_t& i, const double& t, Vector_t<double, 3>& E, Vector_t<double, 3>& B) override;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual CoordinateSystemTrafo getEdgeToBegin() const override;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual CoordinateSystemTrafo getEdgeToEnd() const override;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual ElementType getType() const override;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual bool bends() const override;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual bool isInside(const Vector_t<double, 3>& r) const override;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual double getAmplitude() const override = 0;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual double getFrequency() const override = 0;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual double getPhase() const override = 0;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual void accept(BeamlineVisitor&) const override;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual void finalise() override;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual void getDimensions(double& zBegin, double& zEnd) const override;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual void getElementDimensions(double& begin, double& end) const override;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual void goOffline() override;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual void goOnline(const double& kineticEnergy) override;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual void initialise(PartBunch_t* bunch, double& startField, double& endField) override;$/;"	m	class:TravelingWave
override	src/AbsBeamline/TravelingWave.h	/^    virtual void setPhasem(double phase) override;$/;"	m	class:TravelingWave
override	src/PartBunch/FieldSolver.hpp	/^    void initSolver() override ;$/;"	m	class:FieldSolver
override	src/PartBunch/FieldSolver.hpp	/^    void runSolver() override;$/;"	m	class:FieldSolver
override	src/PartBunch/PartBunch.hpp	/^    void pre_run() override ;$/;"	m	class:PartBunch
override	src/Structure/LBalWriter.h	/^    void write(const PartBunch_t* beam) override;$/;"	m	class:LBalWriter
override	src/Structure/MemoryProfiler.h	/^    void write(const PartBunch_t *beam) override;$/;"	m	class:MemoryProfiler
p	src/AbstractObjects/OpalData.h	/^    struct OpalDataImpl* p;$/;"	m	class:OpalData	typeref:struct:OpalData::OpalDataImpl
p_m	src/Algorithms/OrbitThreader.h	/^    Vector_t<double, 3> p_m;$/;"	m	class:OrbitThreader
pairs	src/Fields/BMultipoleField.h	/^    Pair *pairs;$/;"	m	class:BMultipoleField
par2gridPerBin	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    void par2gridPerBin(binIndex_t binIndex) {$/;"	f	class:AlpineManager
paramNameToID_m	src/Utilities/SDDSParser.h	/^        std::map<std::string, int> paramNameToID_m;$/;"	m	class:SDDS::SDDSParser
paramValues_m	src/Structure/SDDSWriter.h	/^    std::queue<std::string> paramValues_m;$/;"	m	class:SDDSWriter
param_t	src/Structure/SDDSWriter.h	/^    typedef std::tuple<std::string, std::string, std::string> param_t;$/;"	t	class:SDDSWriter
parameter	src/Utilities/SDDSParser/parameter.hpp	/^    struct parameter$/;"	s	namespace:SDDS
parameterList	src/Utilities/SDDSParser/parameter.hpp	/^    struct parameterList : std::vector<parameter> {};$/;"	s	namespace:SDDS
parameterOrder	src/Utilities/SDDSParser/parameter.hpp	/^    struct parameterOrder$/;"	s	namespace:SDDS
parameter_description	src/Utilities/SDDSParser/parameter.hpp	/^                parameter_description, parameter_symbol, parameter_format;$/;"	m	struct:SDDS::parser::parameter_parser
parameter_fixed	src/Utilities/SDDSParser/parameter.hpp	/^        qi::rule<Iterator, long(), skipper<Iterator> > parameter_fixed;$/;"	m	struct:SDDS::parser::parameter_parser
parameter_format	src/Utilities/SDDSParser/parameter.hpp	/^                parameter_description, parameter_symbol, parameter_format;$/;"	m	struct:SDDS::parser::parameter_parser
parameter_m	src/Utilities/SDDSParser/file.hpp	/^        parameter_parser<Iterator> parameter_m;$/;"	m	struct:SDDS::parser::file_parser
parameter_name	src/Utilities/SDDSParser/parameter.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > parameter_name, parameter_units,$/;"	m	struct:SDDS::parser::parameter_parser
parameter_parser	src/Utilities/SDDSParser/parameter.cpp	/^template struct SDDS::parser::parameter_parser<iterator_t>;$/;"	m	class:SDDS::parser	typeref:struct:SDDS::parser::	file:
parameter_parser	src/Utilities/SDDSParser/parameter.hpp	/^    struct parameter_parser: qi::grammar<Iterator, parameter(), skipper<Iterator> >$/;"	s	namespace:SDDS::parser
parameter_parser	src/Utilities/SDDSParser/parameter_def.hpp	/^    parameter_parser<Iterator>::parameter_parser(error_handler<Iterator> & _error_handler):$/;"	f	class:SDDS::parser::parameter_parser
parameter_symbol	src/Utilities/SDDSParser/parameter.hpp	/^                parameter_description, parameter_symbol, parameter_format;$/;"	m	struct:SDDS::parser::parameter_parser
parameter_type	src/Utilities/SDDSParser/parameter.hpp	/^        qi::rule<Iterator, ast::datatype(), skipper<Iterator> > parameter_type;$/;"	m	struct:SDDS::parser::parameter_parser
parameter_units	src/Utilities/SDDSParser/parameter.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > parameter_name, parameter_units,$/;"	m	struct:SDDS::parser::parameter_parser
parameter_unsupported_post	src/Utilities/SDDSParser/parameter.hpp	/^                parameter_unsupported_post;$/;"	m	struct:SDDS::parser::parameter_parser
parameter_unsupported_pre	src/Utilities/SDDSParser/parameter.hpp	/^        qi::rule<Iterator, ast::nil(), skipper<Iterator> > parameter_unsupported_pre,$/;"	m	struct:SDDS::parser::parameter_parser
params_m	src/Structure/SDDSWriter.h	/^    std::queue<param_t> params_m;$/;"	m	class:SDDSWriter
parmatint_m	src/AbsBeamline/ElementBase.h	/^    ParticleMatterInteractionHandler* parmatint_m;$/;"	m	class:ElementBase
parmatint_m	src/Elements/OpalVacuum.h	/^    ParticleMatterInteraction* parmatint_m;$/;"	m	class:OpalVacuum
parse	src/AbstractObjects/Attribute.cpp	/^void Attribute::parse(Statement &stat, bool eval) {$/;"	f	class:Attribute
parse	src/AbstractObjects/Object.cpp	/^void Object::parse(Statement &stat) {$/;"	f	class:Object
parse	src/Attributes/Bool.cpp	/^    void Bool::parse(Attribute &attr, Statement &stat, bool eval) const {$/;"	f	class:Attributes::Bool
parse	src/Attributes/BoolArray.cpp	/^    void BoolArray::parse(Attribute &attr, Statement &stat, bool eval) const {$/;"	f	class:Attributes::BoolArray
parse	src/Attributes/Place.cpp	/^    void Place::parse(Attribute &attr, Statement &stat, bool) const {$/;"	f	class:Attributes::Place
parse	src/Attributes/PredefinedString.cpp	/^    void PredefinedString::parse(Attribute &attr, Statement &stat, bool) const {$/;"	f	class:Attributes::PredefinedString
parse	src/Attributes/Range.cpp	/^    void Range::parse(Attribute &attr, Statement &stat, bool) const {$/;"	f	class:Attributes::Range
parse	src/Attributes/Real.cpp	/^    void Real::parse(Attribute &attr, Statement &statement, bool eval) const {$/;"	f	class:Attributes::Real
parse	src/Attributes/RealArray.cpp	/^    void RealArray::parse(Attribute &attr, Statement &statement, bool eval) const {$/;"	f	class:Attributes::RealArray
parse	src/Attributes/Reference.cpp	/^    void Reference::parse(Attribute &attr, Statement &stat, bool) const {$/;"	f	class:Attributes::Reference
parse	src/Attributes/String.cpp	/^    void String::parse(Attribute &attr, Statement &stat, bool) const {$/;"	f	class:Attributes::String
parse	src/Attributes/StringArray.cpp	/^    void StringArray::parse(Attribute &attr, Statement &stat, bool) const {$/;"	f	class:Attributes::StringArray
parse	src/Attributes/TableRow.cpp	/^    void TableRow::parse(Attribute &attr, Statement &stat, bool) const {$/;"	f	class:Attributes::TableRow
parse	src/Attributes/TokenList.cpp	/^    void TokenList::parse(Attribute &attr, Statement &stat, bool) const {$/;"	f	class:Attributes::TokenList
parse	src/Attributes/TokenListArray.cpp	/^    void TokenListArray::parse(Attribute &attr, Statement &stat, bool) const {$/;"	f	class:Attributes::TokenListArray
parse	src/Attributes/UpperCaseString.cpp	/^    void UpperCaseString::parse(Attribute &attr, Statement &stat, bool) const {$/;"	f	class:Attributes::UpperCaseString
parse	src/Attributes/UpperCaseStringArray.cpp	/^    void UpperCaseStringArray::parse(Attribute &attr, Statement &stat, bool) const {$/;"	f	class:Attributes::UpperCaseStringArray
parse	src/BasicActions/Call.cpp	/^void Call::parse(Statement& statement) {$/;"	f	class:Call
parse	src/BasicActions/Echo.cpp	/^void Echo::parse(Statement& statement) {$/;"	f	class:Echo
parse	src/BasicActions/Help.cpp	/^void Help::parse(Statement& statement) {$/;"	f	class:Help
parse	src/BasicActions/PSystem.cpp	/^void PSystem::parse(Statement& statement) {$/;"	f	class:PSystem
parse	src/BasicActions/System.cpp	/^void System::parse(Statement& statement) {$/;"	f	class:System
parse	src/BasicActions/Title.cpp	/^void Title::parse(Statement& statement) {$/;"	f	class:Title
parse	src/BasicActions/Value.cpp	/^void Value::parse(Statement& statement) {$/;"	f	class:Value
parse	src/Elements/OpalElement.cpp	/^void OpalElement::parse(Statement& stat) {$/;"	f	class:OpalElement
parse	src/Lines/Line.cpp	/^void Line::parse(Statement &stat) {$/;"	f	class:Line
parse	src/Lines/Sequence.cpp	/^void Sequence::parse(Statement& statement) {$/;"	f	class:Sequence
parse	src/Lines/SequenceParser.cpp	/^void SequenceParser::parse(Statement &stat) const {$/;"	f	class:SequenceParser
parse	src/OpalParser/OpalParser.cpp	/^void OpalParser::parse(Statement& stat) const {$/;"	f	class:OpalParser
parse	src/Utilities/MSLang.cpp	/^    bool Function::parse(iterator& it, const iterator& end, Function*& fun) {$/;"	f	class:mslang::Function
parse	src/Utilities/MSLang.cpp	/^    bool parse(std::string str, Function*& fun) {$/;"	f	namespace:mslang
parse	src/Utilities/MSLang/matheval.hpp	/^        detail::expr_ast<real_t> parse(Iterator first, Iterator last) {$/;"	f	namespace:matheval::detail
parse	src/Utilities/MSLang/matheval.hpp	/^        void parse(Iterator first, Iterator last)$/;"	f	class:matheval::Parser
parse	src/Utilities/MSLang/matheval.hpp	/^        void parse(std::string const &str)$/;"	f	class:matheval::Parser
parse	src/Utilities/MSLang/matheval.hpp	/^    real_t parse(Iterator first, Iterator last,$/;"	f	namespace:matheval
parse	src/Utilities/MSLang/matheval.hpp	/^    real_t parse(std::string const &str,$/;"	f	namespace:matheval
parse	src/Utilities/SDDSParser/column.hpp	/^        bool parse($/;"	f	struct:SDDS::column
parse	src/Utilities/SDDSParser/parameter.hpp	/^        bool parse($/;"	f	struct:SDDS::parameter
parseAction	src/OpalParser/OpalParser.cpp	/^void OpalParser::parseAction(Statement& stat) const {$/;"	f	class:OpalParser
parseActuals	src/OpalParser/Macro.cpp	/^void Macro::parseActuals(Statement &stat) {$/;"	f	class:Macro
parseAnd	src/Expressions/Expressions.cpp	/^    PtrToScalar<bool> parseAnd(Statement& stat) {$/;"	f	namespace:Expressions
parseArrayFactor	src/Expressions/Expressions.cpp	/^    PtrToArray<double> parseArrayFactor(Statement& stat) {$/;"	f	namespace:Expressions
parseArrayPrimary	src/Expressions/Expressions.cpp	/^    PtrToArray<double> parseArrayPrimary(Statement& stat) {$/;"	f	namespace:Expressions
parseArrayTerm	src/Expressions/Expressions.cpp	/^    PtrToArray<double> parseArrayTerm(Statement& stat) {$/;"	f	namespace:Expressions
parseAssign	src/OpalParser/OpalParser.cpp	/^void OpalParser::parseAssign(Statement& stat) const {$/;"	f	class:OpalParser
parseBool	src/Expressions/Expressions.cpp	/^    PtrToScalar<bool> parseBool(Statement& stat) {$/;"	f	namespace:Expressions
parseBoolArray	src/Expressions/Expressions.cpp	/^    PtrToArray<bool> parseBoolArray(Statement& stat) {$/;"	f	namespace:Expressions
parseBracketList	src/Expressions/Expressions.cpp	/^    void parseBracketList(Statement& stat, char close, std::list<Token>& result) {$/;"	f	namespace:Expressions
parseBracketList	src/OpalParser/OpalParser.cpp	/^void OpalParser::parseBracketList(char close, Statement& stat) {$/;"	f	class:OpalParser
parseColumnGenerator	src/Expressions/Expressions.cpp	/^    PtrToArray<double> parseColumnGenerator(Statement& stat) {$/;"	f	namespace:Expressions
parseComponent	src/AbstractObjects/Attribute.cpp	/^void Attribute::parseComponent(Statement &stat, bool eval, int index) {$/;"	f	class:Attribute
parseComponent	src/AbstractObjects/AttributeHandler.cpp	/^void AttributeHandler::parseComponent$/;"	f	class:AttributeHandler
parseComponent	src/Attributes/BoolArray.cpp	/^    void BoolArray::parseComponent$/;"	f	class:Attributes::BoolArray
parseComponent	src/Attributes/RealArray.cpp	/^    void RealArray::parseComponent$/;"	f	class:Attributes::RealArray
parseComponent	src/Attributes/StringArray.cpp	/^    void StringArray::parseComponent$/;"	f	class:Attributes::StringArray
parseComponent	src/Attributes/TokenListArray.cpp	/^    void TokenListArray::parseComponent$/;"	f	class:Attributes::TokenListArray
parseComponent	src/Attributes/UpperCaseStringArray.cpp	/^    void UpperCaseStringArray::parseComponent$/;"	f	class:Attributes::UpperCaseStringArray
parseCoordinateSystem	src/BasicActions/DumpEMFields.cpp	/^void DumpEMFields::parseCoordinateSystem() {$/;"	f	class:DumpEMFields
parseDefine	src/OpalParser/OpalParser.cpp	/^void OpalParser::parseDefine(Statement& stat) const {$/;"	f	class:OpalParser
parseDelimiter	src/Expressions/Expressions.cpp	/^    void parseDelimiter(Statement& stat, char delim) {$/;"	f	namespace:Expressions
parseDelimiter	src/Expressions/Expressions.cpp	/^    void parseDelimiter(Statement& stat, const char delim[2]) {$/;"	f	namespace:Expressions
parseEnd	src/OpalParser/OpalParser.cpp	/^void OpalParser::parseEnd(Statement& stat) const {$/;"	f	class:OpalParser
parseFactor	src/Expressions/Expressions.cpp	/^    PtrToScalar<double> parseFactor(Statement& stat) {$/;"	f	namespace:Expressions
parseFormals	src/OpalParser/Macro.cpp	/^void Macro::parseFormals(Statement &stat) {$/;"	f	class:Macro
parseInput	src/Elements/OpalBeamline.cpp	/^    std::string parseInput() {$/;"	f	namespace:__anon47
parseList	src/Lines/Line.cpp	/^void Line::parseList(Statement &stat) {$/;"	f	class:Line
parseMacro	src/OpalParser/OpalParser.cpp	/^void OpalParser::parseMacro(const std::string& macName, Statement& stat) const {$/;"	f	class:OpalParser
parseMathExpression	src/Utilities/MSLang/matheval.cpp	/^    double parseMathExpression(const std::string &str) {$/;"	f	namespace:mslang
parseMember	src/Lines/SequenceParser.cpp	/^void SequenceParser::parseMember(Statement &stat) const {$/;"	f	class:SequenceParser
parsePlace	src/Expressions/Expressions.cpp	/^    PlaceRep parsePlace(Statement& stat) {$/;"	f	namespace:Expressions
parsePosition	src/Lines/SequenceParser.cpp	/^void SequenceParser::parsePosition$/;"	f	class:SequenceParser
parsePrimary	src/Expressions/Expressions.cpp	/^    PtrToScalar<double> parsePrimary(Statement& stat) {$/;"	f	namespace:Expressions
parseRange	src/Expressions/Expressions.cpp	/^    RangeRep parseRange(Statement& stat) {$/;"	f	namespace:Expressions
parseReal	src/Expressions/Expressions.cpp	/^    PtrToScalar<double> parseReal(Statement& stat) {$/;"	f	namespace:Expressions
parseRealArray	src/Expressions/Expressions.cpp	/^    PtrToArray<double> parseRealArray(Statement& stat) {$/;"	f	namespace:Expressions
parseRealConst	src/Expressions/Expressions.cpp	/^    double parseRealConst(Statement& stat) {$/;"	f	namespace:Expressions
parseRealConstArray	src/Expressions/Expressions.cpp	/^    PtrToArray<double> parseRealConstArray(Statement& stat) {$/;"	f	namespace:Expressions
parseReference	src/Expressions/Expressions.cpp	/^    SRefAttr<double>* parseReference(Statement& stat) {$/;"	f	namespace:Expressions
parseRelation	src/Expressions/Expressions.cpp	/^    PtrToScalar<bool> parseRelation(Statement& stat) {$/;"	f	namespace:Expressions
parseRowGenerator	src/Expressions/Expressions.cpp	/^    PtrToArray<double> parseRowGenerator(Statement& stat) {$/;"	f	namespace:Expressions
parseShortcut	src/AbstractObjects/Object.cpp	/^void Object::parseShortcut(Statement &stat, bool eval) {$/;"	f	class:Object
parseString	src/Expressions/Expressions.cpp	/^    std::string parseString(Statement& stat, const char msg[]) {$/;"	f	namespace:Expressions
parseStringArray	src/Expressions/Expressions.cpp	/^    std::vector<std::string> parseStringArray(Statement& stat) {$/;"	f	namespace:Expressions
parseStringValue	src/Expressions/Expressions.cpp	/^    std::string parseStringValue(Statement& stat, const char msg[]) {$/;"	f	namespace:Expressions
parseTableExpression	src/Expressions/Expressions.cpp	/^    PtrToScalar<double> parseTableExpression(Statement& stat, const Table* t) {$/;"	f	namespace:Expressions
parseTableGenerator	src/Expressions/Expressions.cpp	/^    PtrToArray<double> parseTableGenerator(Statement& stat) {$/;"	f	namespace:Expressions
parseTableRow	src/Expressions/Expressions.cpp	/^    TableRowRep parseTableRow(Statement& stat) {$/;"	f	namespace:Expressions
parseTemplate	src/Lines/LineTemplate.cpp	/^void LineTemplate::parseTemplate(TokenStream &, Statement &statement) {$/;"	f	class:LineTemplate
parseTemplate	src/Lines/SequenceTemplate.cpp	/^void SequenceTemplate::parseTemplate(TokenStream &is, Statement &statement) {$/;"	f	class:SequenceTemplate
parseTerm	src/Expressions/Expressions.cpp	/^    PtrToScalar<double> parseTerm(Statement& stat) {$/;"	f	namespace:Expressions
parseTokenList	src/Expressions/Expressions.cpp	/^    std::list<Token> parseTokenList(Statement& stat) {$/;"	f	namespace:Expressions
parseTokenList	src/OpalParser/OpalParser.cpp	/^void OpalParser::parseTokenList(Statement& stat) {$/;"	f	class:OpalParser
parseTokenListArray	src/Expressions/Expressions.cpp	/^    std::vector<std::list<Token> > parseTokenListArray(Statement& stat) {$/;"	f	namespace:Expressions
parse_detail	src/Utilities/MSLang/Difference.cpp	/^    bool Difference::parse_detail(iterator &it, const iterator &end, Function* &fun) {$/;"	f	class:mslang::Difference
parse_detail	src/Utilities/MSLang/Ellipse.cpp	/^    bool Ellipse::parse_detail(iterator &it, const iterator &end, Function* fun) {$/;"	f	class:mslang::Ellipse
parse_detail	src/Utilities/MSLang/Intersection.cpp	/^    bool Intersection::parse_detail(iterator &it, const iterator &end, Function* &fun) {$/;"	f	class:mslang::Intersection
parse_detail	src/Utilities/MSLang/Mask.cpp	/^    bool Mask::parse_detail(iterator &it, const iterator &end, Function* &fun) {$/;"	f	class:mslang::Mask
parse_detail	src/Utilities/MSLang/Polygon.cpp	/^    bool Polygon::parse_detail(iterator &it, const iterator &end, Function* &fun) {$/;"	f	class:mslang::Polygon
parse_detail	src/Utilities/MSLang/Rectangle.cpp	/^    bool Rectangle::parse_detail(iterator &it, const iterator &end, Function* fun) {$/;"	f	class:mslang::Rectangle
parse_detail	src/Utilities/MSLang/Repeat.cpp	/^    bool Repeat::parse_detail(iterator &it, const iterator &end, Function* &fun) {$/;"	f	class:mslang::Repeat
parse_detail	src/Utilities/MSLang/Rotation.cpp	/^    bool Rotation::parse_detail(iterator &it, const iterator &end, Function* &fun) {$/;"	f	class:mslang::Rotation
parse_detail	src/Utilities/MSLang/Shear.cpp	/^    bool Shear::parse_detail(iterator &it, const iterator &end, Function* &fun) {$/;"	f	class:mslang::Shear
parse_detail	src/Utilities/MSLang/SymmetricDifference.cpp	/^    bool SymmetricDifference::parse_detail(iterator &it, const iterator &end, Function* &fun) {$/;"	f	class:mslang::SymmetricDifference
parse_detail	src/Utilities/MSLang/Translation.cpp	/^    bool Translation::parse_detail(iterator &it, const iterator &end, Function* &fun) {$/;"	f	class:mslang::Translation
parse_detail	src/Utilities/MSLang/Union.cpp	/^    bool Union::parse_detail(iterator &it, const iterator &end, Function* &fun) {$/;"	f	class:mslang::Union
parser	src/Track/Track.h	/^    TrackParser parser;$/;"	m	class:Track
parser	src/Utilities/SDDSParser/array.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/array_def.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/associate.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/associate_def.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/ast.hpp	/^    namespace parser {$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/ast_def.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/column.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/column_def.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/data.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/data_def.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/description.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/description_def.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/file.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/file_def.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/include.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/include_def.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/parameter.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/parameter_def.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/skipper.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/version.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
parser	src/Utilities/SDDSParser/version_def.hpp	/^namespace SDDS { namespace parser$/;"	n	namespace:SDDS
partInside	src/Structure/BoundaryGeometry.cpp	/^int BoundaryGeometry::partInside($/;"	f	class:BoundaryGeometry
partial	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^void partial(VariableRFCavityFringeField& cav, Vector_t pos, double t, double delta, int var, Vector_t& dE, Vector_t& dB) {$/;"	f
partialsDerivA	tests/opal_test_utilities/Maxwell.cpp	/^std::vector< std::vector<double> > MaxwellTest::partialsDerivA(const Vector_t &R, double t) const {$/;"	f	class:MaxwellTest
partialsDerivB	tests/classic_src/AbsBeamline/DipoleFieldTest.cpp	/^vector< vector<double> > partialsDerivB(const Vector_t &R,const Vector_t \/*B*\/, double stepSize, SBendRep* dummyField)$/;"	f
partialsDerivB	tests/classic_src/AbsBeamline/MultipoleTTest.cpp	/^vector< vector<double> > partialsDerivB(const Vector_t &R,const Vector_t \/*B*\/, double stepSize, Component* dummyField)$/;"	f
partialsDerivB	tests/opal_test_utilities/Maxwell.cpp	/^std::vector< std::vector<double> > MaxwellTest::partialsDerivB(const Vector_t &R, double t) const {$/;"	f	class:MaxwellTest
partialsDerivB_5	tests/classic_src/AbsBeamline/DipoleFieldTest.cpp	/^vector< vector<double> > partialsDerivB_5(const Vector_t &R,const Vector_t \/*B*\/, double stepSize, SBendRep* dummyField)$/;"	f
particleCharge_m	src/Physics/ParticleProperties.cpp	/^const std::map<ParticleType, double> ParticleProperties::particleCharge_m = {$/;"	m	class:ParticleProperties	file:
particleCharge_m	src/Physics/ParticleProperties.h	/^    static const std::map<ParticleType, double> particleCharge_m;$/;"	m	class:ParticleProperties
particleMass_m	src/Physics/ParticleProperties.cpp	/^const std::map<ParticleType, double> ParticleProperties::particleMass_m = {$/;"	m	class:ParticleProperties	file:
particleMass_m	src/Physics/ParticleProperties.h	/^    static const std::map<ParticleType, double> particleMass_m;$/;"	m	class:ParticleProperties
particleMatterStatus_m	src/Algorithms/ParallelTracker.h	/^    bool particleMatterStatus_m;$/;"	m	class:ParallelTracker
particleRefData_m	src/Distribution/Distribution.h	/^    PartData particleRefData_m;  \/\/\/ Reference data for particle type (charge,$/;"	m	class:Distribution
particles_m	src/Structure/LossDataSink.h	/^    std::vector<OpalParticle> particles_m;$/;"	m	class:LossDataSink
particles_m	tests/classic_src/Algorithms/DistributionMomentsTestFixture.h	/^    static std::vector<OpalParticle> particles_m;$/;"	m	class:DistributionMomentsTest
pathLengthRange_m	src/Algorithms/OrbitThreader.h	/^    ValueRange<double> pathLengthRange_m;$/;"	m	class:OrbitThreader
pathLength_m	src/Algorithms/OrbitThreader.h	/^    double pathLength_m;$/;"	m	class:OrbitThreader
pathLength_m	src/Algorithms/ParallelTracker.h	/^    double pathLength_m;$/;"	m	class:ParallelTracker
patt	src/Utilities/RegularExpression.h	/^    const std::string patt;$/;"	m	class:RegularExpression
pbase_t	src/Algorithms/.PartBunch.h	/^    typedef IpplParticleBase<Layout_t> pbase_t;$/;"	t	class:PartBunch
pc_m	src/Distribution/SamplingBase.hpp	/^        std::shared_ptr<ParticleContainer_t> pc_m;$/;"	m	class:SamplingBase
pc_m	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        std::shared_ptr<ParticleContainer<T, Dim>> pc_m;$/;"	m	class:LoadBalancer
pc_m	src/PartBunch/LoadBalancer.hpp	/^    std::shared_ptr<ParticleContainer<T, Dim>> pc_m;$/;"	m	class:LoadBalancer
pdf_m	src/Distribution/LaserProfile.h	/^    gsl_histogram2d_pdf* pdf_m;$/;"	m	class:LaserProfile
pdis_m	src/AbsBeamline/RFCavity.h	/^    double pdis_m;$/;"	m	class:RFCavity
peakRadius_m	src/Structure/PeakFinder.h	/^    double peakRadius_m;$/;"	m	class:PeakFinder
peakfinder_m	src/AbsBeamline/Probe.h	/^    std::unique_ptr<PeakFinder> peakfinder_m; \/\/\/< Pointer to Peakfinder instance$/;"	m	class:Probe
peaks_m	src/Structure/PeakFinder.h	/^    std::list<double> peaks_m;$/;"	m	class:PeakFinder
percentileFourSigmasNormalDist_m	src/Algorithms/DistributionMoments.cpp	/^const double DistributionMoments::percentileFourSigmasNormalDist_m  = std::erf(4 \/ sqrt(2));$/;"	m	class:DistributionMoments	file:
percentileFourSigmasNormalDist_m	src/Algorithms/DistributionMoments.h	/^    static const double percentileFourSigmasNormalDist_m;$/;"	m	class:DistributionMoments
percentileOneSigmaNormalDist_m	src/Algorithms/DistributionMoments.cpp	/^const double DistributionMoments::percentileOneSigmaNormalDist_m    = std::erf(1 \/ sqrt(2));$/;"	m	class:DistributionMoments	file:
percentileOneSigmaNormalDist_m	src/Algorithms/DistributionMoments.h	/^    static const double percentileOneSigmaNormalDist_m;$/;"	m	class:DistributionMoments
percentileThreeSigmasNormalDist_m	src/Algorithms/DistributionMoments.cpp	/^const double DistributionMoments::percentileThreeSigmasNormalDist_m = std::erf(3 \/ sqrt(2));$/;"	m	class:DistributionMoments	file:
percentileThreeSigmasNormalDist_m	src/Algorithms/DistributionMoments.h	/^    static const double percentileThreeSigmasNormalDist_m;$/;"	m	class:DistributionMoments
percentileTwoSigmasNormalDist_m	src/Algorithms/DistributionMoments.cpp	/^const double DistributionMoments::percentileTwoSigmasNormalDist_m   = std::erf(2 \/ sqrt(2));$/;"	m	class:DistributionMoments	file:
percentileTwoSigmasNormalDist_m	src/Algorithms/DistributionMoments.h	/^    static const double percentileTwoSigmasNormalDist_m;$/;"	m	class:DistributionMoments
performDestroy	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::performDestroy(bool updateLocalNum) {$/;"	f	class:PartBunch
periodLength_m	src/AbsBeamline/TravelingWave.h	/^    double periodLength_m;$/;"	m	class:TravelingWave
periodLength_m	src/PartBunch/PartBunch.hpp	/^    double periodLength_m;$/;"	m	class:PartBunch
phase	src/Fields/OscillatingField.h	/^    double phase;$/;"	m	class:OscillatingField
phaseCore1_m	src/AbsBeamline/TravelingWave.h	/^    double phaseCore1_m;$/;"	m	class:TravelingWave
phaseCore2_m	src/AbsBeamline/TravelingWave.h	/^    double phaseCore2_m;$/;"	m	class:TravelingWave
phaseError_m	src/AbsBeamline/RFCavity.h	/^    double phaseError_m; \/**< phase shift error (rad)*\/$/;"	m	class:RFCavity
phaseExit_m	src/AbsBeamline/TravelingWave.h	/^    double phaseExit_m;$/;"	m	class:TravelingWave
phaseName_m	src/AbsBeamline/RFCavity.h	/^    std::string phaseName_m;$/;"	m	class:RFCavity
phaseSpaceSink_m	src/Track/TrackRun.h	/^    H5PartWrapper* phaseSpaceSink_m;$/;"	m	class:TrackRun
phaseTD_m	src/AbsBeamline/RFCavity.h	/^    std::shared_ptr<AbstractTimeDependence> phaseTD_m;$/;"	m	class:RFCavity
phase_m	src/AbsBeamline/RFCavity.h	/^    double phase_m;      \/**< phase shift of time varying field (rad)*\/$/;"	m	class:RFCavity
phi0_m	src/AbsBeamline/RFCavity.h	/^    double phi0_m;$/;"	m	class:RFCavity
phiEnd_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    double phiEnd_m = 0.; \/\/ used for placement of next element$/;"	m	class:ScalingFFAMagnet
phiOffset_m	src/Fields/SectorMagneticFieldMap.h	/^    double phiOffset_m;$/;"	m	class:SectorMagneticFieldMap
phiStart_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    double phiStart_m = 0.; \/\/ offsets this element$/;"	m	class:ScalingFFAMagnet
phiStep_m	src/AbsBeamline/Ring.h	/^    double phiStep_m;$/;"	m	class:Ring
phi_m	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    Field<T, Dim> phi_m;$/;"	m	class:FieldContainer
phi_m	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    Field<T, Dim> *phi_m;$/;"	m	class:FieldSolver
phi_m	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        Field<T, Dim> *phi_m;$/;"	m	class:LoadBalancer
phi_m	src/PartBunch/FieldContainer.hpp	/^    Field<T, Dim> phi_m;$/;"	m	class:FieldContainer
phi_m	src/PartBunch/FieldSolver.hpp	/^    Field<T, Dim>* phi_m;$/;"	m	class:FieldSolver
phi_m	src/PartBunch/LoadBalancer.hpp	/^    Field<T, Dim>* phi_m;$/;"	m	class:LoadBalancer
pi	src/PartBunch/Binning/test/alpine/datatypes.h	/^const double pi = Kokkos::numbers::pi_v<T>;$/;"	v
pi	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^double pi = Kokkos::numbers::pi_v<double>;$/;"	v
pi	src/PartBunch/datatypes.h	/^const double pi = Kokkos::numbers::pi_v<double>;$/;"	v
pi	src/Physics/Physics.h	/^    constexpr double pi         = 3.14159265358979323846;$/;"	m	namespace:Physics
pixels_m	src/Utilities/MSLang/Mask.h	/^        std::vector<Rectangle> pixels_m;$/;"	m	struct:mslang::Mask
pixels_m	src/Utilities/PortableBitmapReader.h	/^    std::vector<bool> pixels_m;$/;"	m	class:PortableBitmapReader
pixels_m	src/Utilities/PortableGraymapReader.h	/^    std::vector<unsigned short> pixels_m;$/;"	m	class:PortableGraymapReader
pl_m	src/PartBunch/Binning/test/alpine/ParticleContainer.hpp	/^        PLayout_t<T, Dim> pl_m;$/;"	m	class:ParticleContainer
pl_m	src/PartBunch/ParticleContainer.hpp	/^    PLayout_t<T, Dim> pl_m;$/;"	m	class:ParticleContainer
planarArcGeometry_m	src/AbsBeamline/MultipoleT.h	/^    PlanarArcGeometry planarArcGeometry_m;$/;"	m	class:MultipoleT
planarArcGeometry_m	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    PlanarArcGeometry planarArcGeometry_m;$/;"	m	class:MultipoleTCurvedConstRadius
planarArcGeometry_m	src/AbsBeamline/Ring.h	/^    PlanarArcGeometry planarArcGeometry_m;$/;"	m	class:Ring
planarArcGeometry_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    PlanarArcGeometry planarArcGeometry_m;$/;"	m	class:ScalingFFAMagnet
plane_m	src/AbsBeamline/Corrector.h	/^    Plane plane_m;$/;"	m	class:Corrector
plane_m	src/AbsBeamline/Monitor.h	/^    Plane plane_m;$/;"	m	class:Monitor
plasmaParameter_m	src/Algorithms/DistributionMoments.h	/^    double plasmaParameter_m;$/;"	m	class:DistributionMoments
playout_t	tests/ippl_src/AppTypes/Chsr-2.cpp	/^typedef ParticleSpatialLayout<T,Dim> playout_t;$/;"	t	file:
plot	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^    void plot(int \/*n_points*\/, std::vector<double> \/*start*\/, std::vector<double> \/*end*\/, PolynomialPatch* \/*patch*\/, int \/*n_grid_points*\/, std::string \/*title*\/) {$/;"	f	namespace:__anon4
plot	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^void plot(int n_points, std::vector<double> start, std::vector<double> end, PolynomialPatch* patch, int n_grid_points, std::string title) {$/;"	f	namespace:__anon4
pluginElements_m	src/Algorithms/ParallelTracker.h	/^    std::vector<PluginElement*> pluginElements_m;$/;"	m	class:ParallelTracker
plus	src/Expressions/Expressions.cpp	/^    static const TFunction2<double, double> plus = {"+", 4, Add};$/;"	m	namespace:Expressions	file:
pmax_m	src/Distribution/MultiVariateGaussian.hpp	/^    Vector_t<double, 3> pmax_m;$/;"	m	class:MultiVariateGaussian
pmean_m	src/Distribution/Distribution.h	/^    ippl::Vector<double, 3> pmean_m, xmean_m, sigmaR_m, sigmaP_m, cutoffR_m, cutoffP_m;$/;"	m	class:Distribution
pmean_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> pmean_m;$/;"	m	struct:SetStatistics
pmin_m	src/Distribution/MultiVariateGaussian.hpp	/^    Vector_t<double, 3> pmin_m;$/;"	m	class:MultiVariateGaussian
point_dimension_	src/Fields/Interpolation/PolynomialPatch.h	/^    unsigned int point_dimension_;$/;"	m	class:interpolation::PolynomialPatch
point_triangle_intersection	src/Structure/BoundaryGeometry.cpp	/^static int point_triangle_intersection(const Vector_t<double, 3>& p, const Triangle& t) {$/;"	f	file:
points_	src/Fields/Interpolation/PolynomialPatch.h	/^    std::vector<SquarePolynomialVector*> points_;$/;"	m	class:interpolation::PolynomialPatch
points_m	src/Fields/Interpolation/PPSolveFactory.h	/^    Mesh* points_m;$/;"	m	class:interpolation::PPSolveFactory
polarBBMax_m	src/Fields/SectorField.h	/^    std::vector<double> polarBBMax_m;$/;"	m	class:SectorField
polarBBMin_m	src/Fields/SectorField.h	/^    std::vector<double> polarBBMin_m;$/;"	m	class:SectorField
polyDim_m	src/Fields/Interpolation/PPSolveFactory.h	/^    int polyDim_m;$/;"	m	class:interpolation::PPSolveFactory
polyMesh_m	src/Fields/Interpolation/PPSolveFactory.h	/^    Mesh* polyMesh_m;$/;"	m	class:interpolation::PPSolveFactory
polyOrderEntry_m	src/Fields/FM1DProfile1.h	/^     int polyOrderEntry_m;           \/\/\/ Enge function order for entry region.$/;"	m	class:FM1DProfile1
polyOrderExit_m	src/Fields/FM1DProfile1.h	/^     int polyOrderExit_m;            \/\/\/ Enge function order for entry region.$/;"	m	class:FM1DProfile1
polyPatchOrder_m	src/Fields/Interpolation/PPSolveFactory.h	/^    int polyPatchOrder_m;$/;"	m	class:interpolation::PPSolveFactory
poly_order_m	src/Fields/SectorMagneticFieldMap.h	/^    int poly_order_m;$/;"	m	class:SectorMagneticFieldMap
polynomial	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^namespace polynomial {$/;"	n	file:
polynomial	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.h	/^namespace polynomial {$/;"	n
polynomial	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^namespace polynomial {$/;"	n	file:
polynomial	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.h	/^namespace polynomial {$/;"	n
polynomial	src/AbsBeamline/MultipoleTFunctions/Polynomial.cpp	/^namespace polynomial {$/;"	n	file:
polynomial	src/AbsBeamline/MultipoleTFunctions/Polynomial.h	/^namespace polynomial {$/;"	n
polynomial	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^namespace polynomial {$/;"	n	file:
polynomial	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.h	/^namespace polynomial {$/;"	n
polynomial	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.cpp	/^namespace polynomial {$/;"	n	file:
polynomial	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.h	/^namespace polynomial {$/;"	n
polynomial	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.cpp	/^namespace polynomial {$/;"	n	file:
polynomial	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^namespace polynomial {$/;"	n
polynomial	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^namespace polynomial {$/;"	n	file:
polynomial	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^namespace polynomial {$/;"	n
polynomialOrder_entry_m	src/Fields/FM1DProfile2.h	/^    int polynomialOrder_entry_m;$/;"	m	class:FM1DProfile2
polynomialOrder_exit_m	src/Fields/FM1DProfile2.h	/^    int polynomialOrder_exit_m;$/;"	m	class:FM1DProfile2
polynomialOrigin_entry_m	src/Fields/FM1DProfile2.h	/^    double polynomialOrigin_entry_m;$/;"	m	class:FM1DProfile2
polynomialOrigin_exit_m	src/Fields/FM1DProfile2.h	/^    double polynomialOrigin_exit_m;$/;"	m	class:FM1DProfile2
polynomialSum_m	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.h	/^    std::vector<TwoPolynomial> polynomialSum_m;$/;"	m	class:polynomial::PolynomialSum
polynomials_m	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.h	/^    std::vector<std::vector<Polynomial>> polynomials_m;$/;"	m	class:polynomial::DifferentialOperator
polynomials_m	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.h	/^    std::vector<std::vector<PolynomialSum>> polynomials_m;$/;"	m	class:polynomial::DifferentialOperatorTwo
polynomials_m	src/Fields/Interpolation/PPSolveFactory.h	/^    std::vector<SquarePolynomialVector*> polynomials_m;$/;"	m	class:interpolation::PPSolveFactory
popInstance	src/AbstractObjects/OpalData.cpp	/^OpalData* OpalData::popInstance() {$/;"	f	class:OpalData
position	src/AbstractObjects/TableRowRep.h	/^    PlaceRep position;   \/\/ Position reference.$/;"	m	class:TableRowRep
position	src/Expressions/ARow.h	/^        PlaceRep position;$/;"	m	class:Expressions::ARow
position	src/Expressions/SCell.h	/^        const PlaceRep position;$/;"	m	class:Expressions::SCell
position	src/Expressions/SFunction.cpp	/^double SFunction::position(double flag) const {$/;"	f	class:SFunction
position	src/OpalParser/Statement.cpp	/^unsigned int Statement::position() const {$/;"	f	class:Statement
positionElementRelative	src/Elements/OpalBeamline.cpp	/^void OpalBeamline::positionElementRelative(std::shared_ptr<ElementBase> element) {$/;"	f	class:OpalBeamline
positionIsFixed	src/AbsBeamline/ElementBase.h	/^    bool positionIsFixed;$/;"	m	class:ElementBase
postSum_m	src/PartBunch/Binning/BinHisto.h	/^        view_type       postSum_m;        \/\/\/ \\brief View storing the cumulative sum of bin counts (used in sorting, generating range policies).$/;"	m	class:ParticleBinning::Histogram
power	src/Expressions/Expressions.cpp	/^    static TFunction2<double, double> power = {"^", 6, pow};$/;"	m	namespace:Expressions	file:
power_m	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.h	/^    std::size_t power_m;$/;"	m	class:polynomial::RecursionRelation
power_m	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^    std::size_t power_m;$/;"	m	class:polynomial::RecursionRelationTwo
preCheck	src/AbsBeamline/PluginElement.h	/^    bool preCheck(PartBunch_t* bunch) {$/;"	f	class:PluginElement
pre_run	src/PartBunch/PartBunch.cpp	/^void PartBunch<double,3>::pre_run() {$/;"	f	class:PartBunch
precedence	src/Expressions/TFunction0.h	/^        int precedence;$/;"	m	struct:Expressions::TFunction0
precedence	src/Expressions/TFunction1.h	/^        int precedence;$/;"	m	struct:Expressions::TFunction1
precedence	src/Expressions/TFunction2.h	/^        int precedence;$/;"	m	struct:Expressions::TFunction2
precision_m	src/Structure/SDDSWriter.h	/^    static constexpr unsigned int precision_m = 15;$/;"	m	class:SDDSWriter
predecessorIsSameFlavour	src/Structure/H5PartWrapperForPT.h	/^inline bool H5PartWrapperForPT::predecessorIsSameFlavour() const {$/;"	f	class:H5PartWrapperForPT
predecessorOPALFlavour_m	src/Structure/H5PartWrapper.h	/^    std::string predecessorOPALFlavour_m;$/;"	m	class:H5PartWrapper
predefinedStrings_m	src/Attributes/PredefinedString.h	/^        std::set<std::string> predefinedStrings_m;$/;"	m	class:Attributes::PredefinedString
prepareForMapCheck	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::prepareForMapCheck(std::vector<double>& fourierCoefs) {$/;"	f	class:FM1DDynamic_fast
prepareForMapCheck	src/Fields/FM1DElectroStatic_fast.cpp	/^void FM1DElectroStatic_fast::prepareForMapCheck(std::vector<double>& fourierCoefs) {$/;"	f	class:FM1DElectroStatic_fast
prepareForMapCheck	src/Fields/FM1DMagnetoStatic_fast.cpp	/^void FM1DMagnetoStatic_fast::prepareForMapCheck(std::vector<double>& fourierCoefs) {$/;"	f	class:FM1DMagnetoStatic_fast
prepareSections	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::prepareSections() {$/;"	f	class:ParallelTracker
prepareSections	src/Elements/OpalBeamline.cpp	/^void OpalBeamline::prepareSections() {$/;"	f	class:OpalBeamline
prepared_m	src/Elements/OpalBeamline.h	/^    bool prepared_m;$/;"	m	class:OpalBeamline
prepend	src/Beamlines/TBeamline.h	/^inline void TBeamline<T>::prepend(const T& obj) {$/;"	f	class:TBeamline
primary	src/Utilities/MSLang/matheval.hpp	/^            qi::rule<Iterator, expr_ast<real_t>(), ascii::space_type> primary;$/;"	m	struct:matheval::detail::grammar
print	gen_OPALrevision	/^print () {$/;"	f
print	src/.Solvers/FFTPoissonSolver.cpp	/^Inform& FFTPoissonSolver::print(Inform& os) const {$/;"	f	class:FFTPoissonSolver
print	src/AbsBeamline/EndFieldModel/AsymmetricEnge.cpp	/^std::ostream& AsymmetricEnge::print(std::ostream& out) const {$/;"	f	class:endfieldmodel::AsymmetricEnge
print	src/AbsBeamline/EndFieldModel/Enge.cpp	/^std::ostream& Enge::print(std::ostream& out) const {$/;"	f	class:endfieldmodel::Enge
print	src/AbsBeamline/EndFieldModel/Tanh.cpp	/^std::ostream& Tanh::print(std::ostream& out) const {$/;"	f	class:endfieldmodel::Tanh
print	src/AbstractObjects/Attribute.cpp	/^void Attribute::print(int &pos) const {$/;"	f	class:Attribute
print	src/AbstractObjects/Object.cpp	/^void Object::print(std::ostream & msg) const {$/;"	f	class:Object
print	src/AbstractObjects/PlaceRep.cpp	/^void PlaceRep::print(std::ostream &os) const {$/;"	f	class:PlaceRep
print	src/AbstractObjects/RangeRep.cpp	/^void RangeRep::print(std::ostream &os) const {$/;"	f	class:RangeRep
print	src/AbstractObjects/TableRowRep.cpp	/^void TableRowRep::print(std::ostream &os) const {$/;"	f	class:TableRowRep
print	src/Algorithms/.PartBunch.cpp	/^Inform &PartBunch::print(Inform &os) {$/;"	f	class:PartBunch
print	src/Algorithms/.PartBunchBase.hpp	/^Inform& PartBunch<T, Dim>::print(Inform& os) {$/;"	f	class:PartBunch
print	src/Algorithms/CoordinateSystemTrafo.h	/^inline void CoordinateSystemTrafo::print(std::ostream& os) const {$/;"	f	class:CoordinateSystemTrafo
print	src/Algorithms/IndexMap.cpp	/^void IndexMap::print(std::ostream &out) const {$/;"	f	class:IndexMap
print	src/Algorithms/PartBins.cpp	/^Inform& PartBins::print(Inform& os) {$/;"	f	class:PartBins
print	src/Algorithms/PolynomialTimeDependence.cpp	/^Inform &PolynomialTimeDependence::print(Inform &os) {$/;"	f	class:PolynomialTimeDependence
print	src/Algorithms/SplineTimeDependence.cpp	/^Inform& SplineTimeDependence::print(Inform &os) {$/;"	f	class:SplineTimeDependence
print	src/Algorithms/StepSizeConfig.cpp	/^Inform& StepSizeConfig::print(Inform &out) const {$/;"	f	class:StepSizeConfig
print	src/BasicActions/DumpEMFields.cpp	/^void DumpEMFields::print(std::ostream& os) const {$/;"	f	class:DumpEMFields
print	src/BasicActions/DumpFields.cpp	/^void DumpFields::print(std::ostream& os) const {$/;"	f	class:DumpFields
print	src/Elements/OpalBeamline.cpp	/^void OpalBeamline::print(Inform& \/*msg*\/) const {$/;"	f	class:OpalBeamline
print	src/Elements/OpalElement.cpp	/^void OpalElement::print(std::ostream& os) const {$/;"	f	class:OpalElement
print	src/Elements/OpalMarker.cpp	/^void OpalMarker::print(std::ostream &os) const {$/;"	f	class:OpalMarker
print	src/Elements/OpalMultipole.cpp	/^void OpalMultipole::print(std::ostream &os) const {$/;"	f	class:OpalMultipole
print	src/Elements/OpalMultipoleT.cpp	/^void OpalMultipoleT::print(std::ostream &os) const {$/;"	f	class:OpalMultipoleT
print	src/Elements/OpalOffset/OpalGlobalCartesianOffset.cpp	/^void OpalGlobalCartesianOffset::print(std::ostream& out) const {$/;"	f	class:OpalOffset::OpalGlobalCartesianOffset
print	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.cpp	/^void OpalGlobalCylindricalOffset::print(std::ostream& out) const {$/;"	f	class:OpalOffset::OpalGlobalCylindricalOffset
print	src/Elements/OpalOffset/OpalLocalCartesianOffset.cpp	/^void OpalLocalCartesianOffset::print(std::ostream& out) const {$/;"	f	class:OpalOffset::OpalLocalCartesianOffset
print	src/Elements/OpalOffset/OpalLocalCylindricalOffset.cpp	/^void OpalLocalCylindricalOffset::print(std::ostream& out) const {$/;"	f	class:OpalOffset::OpalLocalCylindricalOffset
print	src/Elements/OpalRingDefinition.cpp	/^void OpalRingDefinition::print(std::ostream& out) const {$/;"	f	class:OpalRingDefinition
print	src/Expressions/ABinary.h	/^    void ABinary<T, U>::print(std::ostream &os, int precedence) const {$/;"	f	class:Expressions::ABinary
print	src/Expressions/AColumn.cpp	/^    void AColumn::print(std::ostream &os, int) const {$/;"	f	class:Expressions::AColumn
print	src/Expressions/ADeferred.h	/^    void ADeferred<T>::print(std::ostream &os) const {$/;"	f	class:Expressions::ADeferred
print	src/Expressions/AList.h	/^    void AList<T>::print(std::ostream &os, int \/*precedence*\/) const {$/;"	f	class:Expressions::AList
print	src/Expressions/ARefExpr.h	/^    void ARefExpr<T>::print(std::ostream &os, int) const {$/;"	f	class:Expressions::ARefExpr
print	src/Expressions/ARow.cpp	/^    void ARow::print(std::ostream &os, int) const {$/;"	f	class:Expressions::ARow
print	src/Expressions/ASUnary.h	/^    void ASUnary<T>::print(std::ostream &os, int precedence) const {$/;"	f	class:Expressions::ASUnary
print	src/Expressions/ATable.cpp	/^    void ATable::print(std::ostream &os, int) const {$/;"	f	class:Expressions::ATable
print	src/Expressions/AUnary.h	/^    void AUnary<T, U>::print(std::ostream &os, int precedence) const {$/;"	f	class:Expressions::AUnary
print	src/Expressions/AValue.h	/^    void AValue<bool>::print(std::ostream &os) const {$/;"	f	class:Expressions::AValue
print	src/Expressions/AValue.h	/^    void AValue<double>::print(std::ostream &os) const {$/;"	f	class:Expressions::AValue
print	src/Expressions/AValue.h	/^    void AValue<std::list<Token> >::print(std::ostream &os) const {$/;"	f	class:Expressions::AValue
print	src/Expressions/AValue.h	/^    void AValue<std::string>::print(std::ostream &os) const {$/;"	f	class:Expressions::AValue
print	src/Expressions/Indexer.h	/^    void Indexer<T>::print(std::ostream &os, int \/*precedence*\/) const {$/;"	f	class:Expressions::Indexer
print	src/Expressions/SBinary.h	/^    void SBinary<T, U>::print(std::ostream &os, int precedence) const {$/;"	f	class:Expressions::SBinary
print	src/Expressions/SCell.cpp	/^    void SCell::print(std::ostream &os, int) const {$/;"	f	class:Expressions::SCell
print	src/Expressions/SConstant.h	/^    void SConstant<bool>::print(std::ostream &os, int) const {$/;"	f	class:Expressions::SConstant
print	src/Expressions/SConstant.h	/^    void SConstant<double>::print(std::ostream &os, int) const {$/;"	f	class:Expressions::SConstant
print	src/Expressions/SConstant.h	/^    void SConstant<std::list<Token> >::print(std::ostream &os, int) const {$/;"	f	class:Expressions::SConstant
print	src/Expressions/SConstant.h	/^    void SConstant<std::string>::print(std::ostream &os, int) const {$/;"	f	class:Expressions::SConstant
print	src/Expressions/SDeferred.h	/^    void SDeferred<T>::print(std::ostream &stream) const {$/;"	f	class:Expressions::SDeferred
print	src/Expressions/SHash.cpp	/^    void SHash::print(std::ostream &os, int \/*precedence*\/) const {$/;"	f	class:Expressions::SHash
print	src/Expressions/SNull.h	/^    void SNull<T>::print(std::ostream &stream, int) const {$/;"	f	class:Expressions::SNull
print	src/Expressions/SRefAttr.h	/^    void SRefAttr<T>::print(std::ostream &os) const {$/;"	f	class:Expressions::SRefAttr
print	src/Expressions/SRefExpr.h	/^    void SRefExpr<T>::print(std::ostream &os, int) const {$/;"	f	class:Expressions::SRefExpr
print	src/Expressions/SUnary.h	/^    void SUnary<T, U>::print(std::ostream &os, int precedence) const {$/;"	f	class:Expressions::SUnary
print	src/Expressions/SValue.h	/^    void SValue<T>::print(std::ostream &os) const {$/;"	f	class:Expressions::SValue
print	src/Expressions/SValue.h	/^    void SValue<bool>::print(std::ostream &os) const {$/;"	f	class:Expressions::SValue
print	src/Expressions/SValue.h	/^    void SValue<std::list<Token> >::print(std::ostream &os) const {$/;"	f	class:Expressions::SValue
print	src/Expressions/SValue.h	/^    void SValue<std::string>::print(std::ostream &os) const {$/;"	f	class:Expressions::SValue
print	src/Fields/SectorMagneticFieldMap.cpp	/^void SectorMagneticFieldMap::print(std::ostream& out) {$/;"	f	class:SectorMagneticFieldMap
print	src/Lines/Line.cpp	/^void Line::print(std::ostream &os) const {$/;"	f	class:Line
print	src/Lines/Sequence.cpp	/^void Sequence::print(std::ostream& os) const {$/;"	f	class:Sequence
print	src/OpalParser/Statement.cpp	/^void Statement::print(std::ostream &msg) const {$/;"	f	class:Statement
print	src/PartBunch/Binning/AdaptBins.h	/^        void print() {$/;"	f	class:ParticleBinning::AdaptBins
print	src/PartBunch/PartBunch.cpp	/^Inform& PartBunch<double,3>::print(Inform& os) {$/;"	f	class:PartBunch
print	src/Structure/Beam.cpp	/^void Beam::print(std::ostream& os) const {$/;"	f	class:Beam
print	src/Structure/BoundingBox.cpp	/^void BoundingBox::print(std::ostream& output) const {$/;"	f	class:BoundingBox
print	src/Structure/ValueRange.h	/^    void print(Inform& out) const$/;"	f	class:ValueRange
print	src/Track/TrackRun.cpp	/^Inform& TrackRun::print(Inform& os) const {$/;"	f	class:TrackRun
print	src/Utilities/MSLang/BoundingBox2D.cpp	/^    void BoundingBox2D::print(std::ostream &out) const {$/;"	f	class:mslang::BoundingBox2D
print	src/Utilities/MSLang/Difference.cpp	/^    void Difference::print(int indentwidth) {$/;"	f	class:mslang::Difference
print	src/Utilities/MSLang/Ellipse.cpp	/^    void Ellipse::print(int indentwidth) {$/;"	f	class:mslang::Ellipse
print	src/Utilities/MSLang/Intersection.cpp	/^    void Intersection::print(int indentwidth) {$/;"	f	class:mslang::Intersection
print	src/Utilities/MSLang/Mask.cpp	/^    void Mask::print(int ident) {$/;"	f	class:mslang::Mask
print	src/Utilities/MSLang/Polygon.cpp	/^    void Polygon::print(int \/*ident*\/) {$/;"	f	class:mslang::Polygon
print	src/Utilities/MSLang/Rectangle.cpp	/^    void Rectangle::print(int indentwidth) {$/;"	f	class:mslang::Rectangle
print	src/Utilities/MSLang/Repeat.cpp	/^    void Repeat::print(int indentwidth) {$/;"	f	class:mslang::Repeat
print	src/Utilities/MSLang/Rotation.cpp	/^    void Rotation::print(int indentwidth) {$/;"	f	class:mslang::Rotation
print	src/Utilities/MSLang/Shear.cpp	/^    void Shear::print(int indentwidth) {$/;"	f	class:mslang::Shear
print	src/Utilities/MSLang/SymmetricDifference.cpp	/^    void SymmetricDifference::print(int indentwidth) {$/;"	f	class:mslang::SymmetricDifference
print	src/Utilities/MSLang/Translation.cpp	/^    void Translation::print(int indentwidth) {$/;"	f	class:mslang::Translation
print	src/Utilities/MSLang/Triangle.cpp	/^    void Triangle::print(int indentwidth) {$/;"	f	class:mslang::Triangle
print	src/Utilities/MSLang/Union.cpp	/^    void Union::print(int indentwidth) {$/;"	f	class:mslang::Union
print	src/Utilities/OpalFilter.cpp	/^void OpalFilter::print(std::ostream& os) const {$/;"	f	class:OpalFilter
print	src/Utilities/PortableBitmapReader.cpp	/^void PortableBitmapReader::print(std::ostream &\/*out*\/) const {$/;"	f	class:PortableBitmapReader
print	src/Utilities/PortableGraymapReader.cpp	/^void PortableGraymapReader::print(std::ostream &\/*out*\/) const {$/;"	f	class:PortableGraymapReader
print	src/ValueDefinitions/BoolConstant.cpp	/^void BoolConstant::print(std::ostream &os) const {$/;"	f	class:BoolConstant
print	src/ValueDefinitions/RealConstant.cpp	/^void RealConstant::print(std::ostream& os) const {$/;"	f	class:RealConstant
print	src/ValueDefinitions/RealVariable.cpp	/^void RealVariable::print(std::ostream &os) const {$/;"	f	class:RealVariable
print	src/ValueDefinitions/RealVector.cpp	/^void RealVector::print(std::ostream &os) const {$/;"	f	class:RealVector
print	src/ValueDefinitions/StringConstant.cpp	/^void StringConstant::print(std::ostream& os) const {$/;"	f	class:StringConstant
printAllNames	src/AbstractObjects/OpalData.cpp	/^void OpalData::printAllNames(std::ostream& os) {$/;"	f	class:OpalData
printAttribute	src/Elements/OpalElement.cpp	/^void OpalElement::printAttribute$/;"	f	class:OpalElement
printAttribute	src/Elements/OpalElement.cpp	/^void OpalElement::printAttribute(std::ostream& os, const std::string& name,$/;"	f	class:OpalElement
printCoefficients	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    void printCoefficients() {$/;"	f	class:ScalingFFAMagnetTest
printDirect	src/Algorithms/StepSizeConfig.cpp	/^void StepSizeConfig::printDirect(Inform &out) const {$/;"	f	class:StepSizeConfig
printDist	src/Distribution/Distribution.cpp	/^void Distribution::printDist(Inform& os, size_t numberOfParticles) const {$/;"	f	class:Distribution
printDistFlatTop	src/Distribution/Distribution.cpp	/^void Distribution::printDistFlatTop(Inform& os)  const {$/;"	f	class:Distribution
printDistGauss	src/Distribution/Distribution.cpp	/^void Distribution::printDistGauss(Inform& os) const {$/;"	f	class:Distribution
printDistMultiVariateGauss	src/Distribution/Distribution.cpp	/^void Distribution::printDistMultiVariateGauss(Inform& os)  const {$/;"	f	class:Distribution
printHeading	tests/opal_test_utilities/Maxwell.cpp	/^std::ostream& MaxwellTest::printHeading(std::ostream& out) const {$/;"	f	class:MaxwellTest
printHelp	src/AbstractObjects/Object.cpp	/^void Object::printHelp(std::ostream &\/*os*\/) const {$/;"	f	class:Object
printHelp	src/Main.cpp	/^    void printHelp() {$/;"	f	namespace:OPALXMAIN
printHelp	src/OpalParser/OpalParser.cpp	/^void OpalParser::printHelp(const std::string& cmdName) const {$/;"	f	class:OpalParser
printHistogram	src/PartBunch/Binning/BinHisto.h	/^        void printHistogram(std::ostream &os = std::cout) {$/;"	f	class:ParticleBinning::Histogram
printInfo	src/Distribution/Distribution.cpp	/^Inform& Distribution::printInfo(Inform& os) const {$/;"	f	class:Distribution
printInfo	src/Distribution/LaserProfile.cpp	/^void LaserProfile::printInfo() {$/;"	f	class:LaserProfile
printInfo	src/Structure/BoundaryGeometry.cpp	/^Inform& BoundaryGeometry::printInfo(Inform& os) const {$/;"	f	class:BoundaryGeometry
printInfo	src/Structure/FieldSolverCmd.cpp	/^Inform& FieldSolverCmd::printInfo(Inform& os) const {$/;"	f	class:FieldSolverCmd
printInfo	tools/opal2sdds/main.cpp	/^void printInfo(const std::string &input) {$/;"	f
printLine	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    bool printLine(Vector_t posCyl, double aux, std::ofstream& fout, double maxwell_tolerance) {$/;"	f	class:ScalingFFAMagnetTest
printLine	tests/opal_test_utilities/Maxwell.cpp	/^std::ostream& MaxwellTest::printLine(std::ostream& out, const Vector_t& R, double t) const {$/;"	f	class:MaxwellTest
printMultipoleStrength	src/Elements/OpalElement.cpp	/^void OpalElement::printMultipoleStrength(std::ostream& os,$/;"	f	class:OpalElement
printNames	src/AbstractObjects/OpalData.cpp	/^void OpalData::printNames(std::ostream& os, const std::string& pattern) {$/;"	f	class:OpalData
printOperator	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^void DifferentialOperator::printOperator() const {$/;"	f	class:polynomial::DifferentialOperator
printOperator	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^void DifferentialOperatorTwo::printOperator() const {$/;"	f	class:polynomial::DifferentialOperatorTwo
printOperator	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.h	/^    void RecursionRelation::printOperator() const {$/;"	f	class:polynomial::RecursionRelation
printPolynomial	src/AbsBeamline/MultipoleTFunctions/Polynomial.cpp	/^void Polynomial::printPolynomial() const {$/;"	f	class:polynomial::Polynomial
printPolynomial	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^void PolynomialSum::printPolynomial() const {$/;"	f	class:polynomial::PolynomialSum
printPolynomial	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^void TwoPolynomial::printPolynomial() const {$/;"	f	class:polynomial::TwoPolynomial
printPrecision	src/AbstractObjects/Table.h	/^        int printPrecision;$/;"	m	struct:Table::Cell
printPythonArrays	src/PartBunch/Binning/BinHisto.h	/^        void printPythonArrays() const {$/;"	f	class:ParticleBinning::Histogram
printStdoutHeader	src/Main.cpp	/^    void printStdoutHeader() {$/;"	f	namespace:OPALXMAIN
printTitle	src/AbstractObjects/OpalData.cpp	/^void OpalData::printTitle(std::ostream& os) {$/;"	f	class:OpalData
printUsage	tools/Normalization2DMaps/normalization.py	/^def printUsage():$/;"	f
printUsage	tools/SDDSReader/main.cpp	/^void printUsage(char **argv) {$/;"	f
printUsage	tools/opal2sdds/main.cpp	/^void printUsage(char **argv) {$/;"	f
printUsage	tools/sdds2opal/main.cpp	/^void printUsage(char **argv) {$/;"	f
printValue	src/AbstractObjects/Object.h	/^void Object::printValue(std::ostream &os) const {$/;"	f	class:Object
printValue	src/ValueDefinitions/BoolConstant.cpp	/^void BoolConstant::printValue(std::ostream &os) const {$/;"	f	class:BoolConstant
printValue	src/ValueDefinitions/RealConstant.cpp	/^void RealConstant::printValue(std::ostream& os) const {$/;"	f	class:RealConstant
printValue	src/ValueDefinitions/RealVariable.cpp	/^void RealVariable::printValue(std::ostream &os) const {$/;"	f	class:RealVariable
printValue	src/ValueDefinitions/RealVector.cpp	/^void RealVector::printValue(std::ostream &os) const {$/;"	f	class:RealVector
printValue	src/ValueDefinitions/StringConstant.cpp	/^void StringConstant::printValue(std::ostream& os) const {$/;"	f	class:StringConstant
printWhere	src/OpalParser/Statement.cpp	/^void Statement::printWhere(Inform &msg, bool withToken) const {$/;"	f	class:Statement
printWidth	src/AbstractObjects/Table.h	/^        int printWidth;$/;"	m	struct:Table::Cell
prms_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> prms_m;$/;"	m	struct:SetStatistics
problemSize_m	src/AbstractObjects/OpalData.cpp	/^    std::map<std::string, unsigned int> problemSize_m;$/;"	m	struct:OpalDataImpl	file:
processElementRegister	src/Algorithms/OrbitThreader.cpp	/^void OrbitThreader::processElementRegister() {$/;"	f	class:OrbitThreader
procinfo_m	src/Structure/MemoryProfiler.h	/^    std::map<std::string, int> procinfo_m;$/;"	m	class:MemoryProfiler
prod_boost_vector	src/Algorithms/BoostMatrix.h	/^T prod_boost_vector(boost::numeric::ublas::matrix<double> rotation, const T& vect) {$/;"	f
proj1	tests/ippl_src/Field/BCond.cpp	/^    Vektor<double,Dim> proj1(const Vektor<double,Dim> &v) {$/;"	f	namespace:__anon15
proj2	tests/ippl_src/Field/BCond.cpp	/^    Vektor<double,Dim> proj2(const Vektor<double,Dim> &v) {$/;"	f	namespace:__anon15
protoTable_sm	src/Physics/Material.h	/^        std::map<std::string, std::shared_ptr<Material> > protoTable_sm;$/;"	m	class:Physics::Material
ps2s	src/Physics/Units.h	/^    constexpr double ps2s = 1 \/ s2ps;$/;"	m	namespace:Units
psDumpEachTurn	src/Utilities/Options.cpp	/^    bool psDumpEachTurn = false;$/;"	m	namespace:Options	file:
psDumpFrame	src/Utilities/Options.cpp	/^    DumpFrame psDumpFrame = DumpFrame::GLOBAL;$/;"	m	namespace:Options	file:
psDumpFreq	src/Utilities/Options.cpp	/^    int psDumpFreq = 10;$/;"	m	namespace:Options	file:
psi0_m	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    double psi0_m = magnetLength_m*2*M_PI\/r0_m; \/\/ radians$/;"	m	class:ScalingFFAMagnetTest	file:
psqsum_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> psqsum_m;$/;"	m	struct:SetStatistics
pts	src/Structure/BoundaryGeometry.cpp	/^    Vector_t<double, 3> pts[2];$/;"	m	class:Voxel	file:
pts	src/Structure/BoundaryGeometry.cpp	/^    Vector_t<double, 3> pts[3];$/;"	m	class:Triangle	file:
push	src/Steppers/BorisPusher.h	/^KOKKOS_INLINE_FUNCTION void BorisPusher::push($/;"	f	class:BorisPusher
pushParticles	src/Algorithms/ParallelTracker.h	/^inline void ParallelTracker::pushParticles(const BorisPusher& pusher) {$/;"	f	class:ParallelTracker
push_back	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::push_back(OpalParticle const& particle) {$/;"	f	class:PartBunch
push_back	src/Algorithms/StepSizeConfig.h	/^void StepSizeConfig::push_back(double dt,$/;"	f	class:StepSizeConfig
push_m	src/Steppers/LF2.hpp	/^void LF2<FieldFunction, Arguments...>::push_m($/;"	f	class:LF2
putBack	src/OpalParser/TokenStream.cpp	/^void TokenStream::putBack(const Token &token) {$/;"	f	class:TokenStream
putSumTogether	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^void PolynomialSum::putSumTogether($/;"	f	class:polynomial::PolynomialSum
put_back	src/OpalParser/TokenStream.h	/^    Token put_back;$/;"	m	class:TokenStream
put_back_flag	src/OpalParser/TokenStream.h	/^    bool put_back_flag;$/;"	m	class:TokenStream
pyplot	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^import matplotlib.pyplot$/;"	i
q_e	src/Physics/Physics.h	/^    constexpr double q_e        = 1.602176634e-19;$/;"	m	namespace:Physics
qi_m	src/PartBunch/PartBunch.hpp	/^    double qi_m;$/;"	m	class:PartBunch
qm	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    ParticleAttrib<double> qm;                                       \/\/ charge-to-mass ratio$/;"	m	class:ChargedParticles	file:
qstring	src/Utilities/SDDSParser/ast.cpp	/^template struct SDDS::parser::qstring<iterator_t, skipper_t>;$/;"	m	class:SDDS::parser	typeref:struct:SDDS::parser::	file:
qstring	src/Utilities/SDDSParser/ast.hpp	/^        struct qstring: qi::grammar<Iterator, std::string(), Skipper >$/;"	s	namespace:SDDS::parser
qstring	src/Utilities/SDDSParser/ast_def.hpp	/^    qstring<Iterator, Skipper>::qstring():$/;"	f	class:SDDS::parser::qstring
quadraticInterpolation	src/.Solvers/EllipticDomain.cpp	/^void EllipticDomain::quadraticInterpolation(int x, int y, int z,$/;"	f	class:EllipticDomain
quadraticInterpolation	src/.Solvers/IrregularDomain.cpp	/^void IrregularDomain::quadraticInterpolation(int \/*idx*\/, int \/*idy*\/, int \/*idz*\/,$/;"	f	class:IrregularDomain
query	src/Algorithms/IndexMap.cpp	/^IndexMap::value_t IndexMap::query(key_t::first_type s, key_t::second_type ds) {$/;"	f	class:IndexMap
query	src/Algorithms/OrbitThreader.h	/^IndexMap::value_t OrbitThreader::query(IndexMap::key_t::first_type pathLength,$/;"	f	class:OrbitThreader
quoted_string	src/Utilities/SDDSParser/array.hpp	/^                array_group, units, string, quoted_string;$/;"	m	struct:SDDS::parser::array_parser
quoted_string	src/Utilities/SDDSParser/associate.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > string, quoted_string,$/;"	m	struct:SDDS::parser::associate_parser
quoted_string	src/Utilities/SDDSParser/column.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > string, quoted_string, units;$/;"	m	struct:SDDS::parser::column_parser
quoted_string	src/Utilities/SDDSParser/description.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > quoted_string,$/;"	m	struct:SDDS::parser::description_parser
quoted_string	src/Utilities/SDDSParser/include.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > string, quoted_string,$/;"	m	struct:SDDS::parser::include_parser
quoted_string	src/Utilities/SDDSParser/parameter.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > string, quoted_string, units;$/;"	m	struct:SDDS::parser::parameter_parser
r	src/AbsBeamline/MultipoleTFunctions/tanhDeriv.cpp	/^    double r;$/;"	m	struct:tanhderiv::my_f_params	file:
r0_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    double r0_m = 0.;$/;"	m	class:ScalingFFAMagnet
r0_m	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    double r0_m = 24; \/\/ m$/;"	m	class:ScalingFFAMagnetTest	file:
rBegin_m	src/Fields/FM1DDynamic.h	/^    double rBegin_m;                        \/\/\/ Minimum radius of field.$/;"	m	class:FM1DDynamic
rBegin_m	src/Fields/FM1DDynamic_fast.h	/^    double rBegin_m;                        \/\/\/ Minimum radius of field.$/;"	m	class:FM1DDynamic_fast
rBegin_m	src/Fields/FM1DElectroStatic.h	/^    double rBegin_m;                        \/\/\/ Minimum radius of field.$/;"	m	class:FM1DElectroStatic
rBegin_m	src/Fields/FM1DElectroStatic_fast.h	/^    double rBegin_m;                        \/\/\/ Minimum radius of field.$/;"	m	class:FM1DElectroStatic_fast
rBegin_m	src/Fields/FM1DMagnetoStatic.h	/^    double rBegin_m;                        \/\/\/ Minimum radius of field.$/;"	m	class:FM1DMagnetoStatic
rBegin_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    double rBegin_m;                        \/\/\/ Minimum radius of field.$/;"	m	class:FM1DMagnetoStatic_fast
rEnd_m	src/Fields/FM1DDynamic.h	/^    double rEnd_m;                          \/\/\/ Maximum radius of field.$/;"	m	class:FM1DDynamic
rEnd_m	src/Fields/FM1DDynamic_fast.h	/^    double rEnd_m;                          \/\/\/ Maximum radius of field.$/;"	m	class:FM1DDynamic_fast
rEnd_m	src/Fields/FM1DElectroStatic.h	/^    double rEnd_m;                          \/\/\/ Maximum radius of field.$/;"	m	class:FM1DElectroStatic
rEnd_m	src/Fields/FM1DElectroStatic_fast.h	/^    double rEnd_m;                          \/\/\/ Maximum radius of field.$/;"	m	class:FM1DElectroStatic_fast
rEnd_m	src/Fields/FM1DMagnetoStatic.h	/^    double rEnd_m;                          \/\/\/ Maximum radius of field.$/;"	m	class:FM1DMagnetoStatic
rEnd_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    double rEnd_m;                          \/\/\/ Maximum radius of field.$/;"	m	class:FM1DMagnetoStatic_fast
rMax_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    double rMax_m = 0.; \/\/ maximum radius$/;"	m	class:ScalingFFAMagnet
rMin_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    double rMin_m = 0.; \/\/ minimum radius$/;"	m	class:ScalingFFAMagnet
r_e	src/Physics/Physics.h	/^    constexpr double r_e        = 2.8179403262e-15;$/;"	m	namespace:Physics
r_m	src/Algorithms/OrbitThreader.h	/^    Vector_t<double, 3> r_m;$/;"	m	class:OrbitThreader
r_p	src/Physics/Physics.h	/^    constexpr double r_p        = 1.53469857e-18;$/;"	m	namespace:Physics
rad	src/Utilities/MSLang/matheval.hpp	/^            T rad(T x) { return x*boost::math::constants::degree<T>(); }$/;"	f	namespace:matheval::detail::math
rad2deg	src/Physics/Units.h	/^    constexpr double rad2deg = 1 \/ deg2rad;$/;"	m	namespace:Units
rad2mrad	src/Physics/Units.h	/^    constexpr double rad2mrad = 1e3;$/;"	m	namespace:Units
radiationLength_m	src/Physics/Material.h	/^        const double radiationLength_m;$/;"	m	class:Physics::Material
radius_m	src/Structure/PeakFinder.h	/^    container_t radius_m;$/;"	m	class:PeakFinder
radius_m	tests/classic_src/AbsBeamline/RingTest.cpp	/^    double radius_m;$/;"	m	class:OffsetFactory	file:
randGen_m	src/Structure/BoundaryGeometry.h	/^    gsl_rng* randGen_m;  \/\/$/;"	m	class:BoundaryGeometry
ranf	src/Expressions/Expressions.cpp	/^    double ranf() {$/;"	f	namespace:Expressions
rangen	src/Utilities/Options.cpp	/^    Random rangen;$/;"	m	namespace:Options	file:
rbegin_m	src/Fields/FM2DDynamic.h	/^    double rbegin_m;$/;"	m	class:FM2DDynamic
rbegin_m	src/Fields/FM2DElectroStatic.h	/^    double rbegin_m;$/;"	m	class:FM2DElectroStatic
rbegin_m	src/Fields/FM2DMagnetoStatic.h	/^    double rbegin_m;$/;"	m	class:FM2DMagnetoStatic
re	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<double>    re(MMatrix<m_complex> mc)$/;"	f	namespace:interpolation
re	src/Fields/Interpolation/MVector.cpp	/^MVector<double>    re     (MVector<m_complex> c)$/;"	f	namespace:interpolation
re	src/Fields/Interpolation/MVector.h	/^inline const double& re(const m_complex& c) {return c.dat[0];}$/;"	f	namespace:interpolation
re	src/Fields/Interpolation/MVector.h	/^inline double&       re(m_complex& c)       {return c.dat[0];}$/;"	f	namespace:interpolation
re	tools/Normalization2DMaps/normalization.py	/^import sys,re,os,string,fileinput$/;"	i
reachedEnd	src/Algorithms/StepSizeConfig.h	/^bool StepSizeConfig::reachedEnd() const {$/;"	f	class:StepSizeConfig
reachedStart	src/Algorithms/StepSizeConfig.h	/^bool StepSizeConfig::reachedStart() const {$/;"	f	class:StepSizeConfig
read	src/Fields/Fieldmap.h	/^        bool read;$/;"	m	struct:Fieldmap::FieldmapDescription
readAttribute	tools/opal2sdds/main.cpp	/^Attribute readAttribute(file_t file,$/;"	f
readField	src/Fields/FM3DH5BlockBase.cpp	/^void FM3DH5BlockBase::readField(const char* name, double* x, double* y, double* z) {$/;"	f	class:FM3DH5BlockBase
readFieldData	src/Fields/Astra1D_fast.cpp	/^double Astra1D_fast::readFieldData(std::ifstream& file) {$/;"	f	class:Astra1D_fast
readFile	src/Distribution/LaserProfile.cpp	/^unsigned short* LaserProfile::readFile(const std::string& fileName, const std::string& imageName) {$/;"	f	class:LaserProfile
readFile	src/Utilities/SDDSParser.cpp	/^std::string SDDS::SDDSParser::readFile() {$/;"	f	class:SDDS::SDDSParser
readFileData	src/Fields/FM1DDynamic.cpp	/^double FM1DDynamic::readFileData($/;"	f	class:FM1DDynamic
readFileData	src/Fields/FM1DDynamic.cpp	/^double FM1DDynamic::readFileData(std::ifstream& fieldFile, double fieldData[]) {$/;"	f	class:FM1DDynamic
readFileData	src/Fields/FM1DDynamic_fast.cpp	/^double FM1DDynamic_fast::readFileData($/;"	f	class:FM1DDynamic_fast
readFileData	src/Fields/FM1DDynamic_fast.cpp	/^double FM1DDynamic_fast::readFileData(std::ifstream& fieldFile, double fieldData[]) {$/;"	f	class:FM1DDynamic_fast
readFileData	src/Fields/FM1DElectroStatic.cpp	/^double FM1DElectroStatic::readFileData(std::ifstream& fieldFile, double fieldData[]) {$/;"	f	class:FM1DElectroStatic
readFileData	src/Fields/FM1DElectroStatic_fast.cpp	/^double FM1DElectroStatic_fast::readFileData(std::ifstream& fieldFile, double fieldData[]) {$/;"	f	class:FM1DElectroStatic_fast
readFileData	src/Fields/FM1DMagnetoStatic.cpp	/^double FM1DMagnetoStatic::readFileData(std::ifstream& fieldFile, double fieldData[]) {$/;"	f	class:FM1DMagnetoStatic
readFileData	src/Fields/FM1DMagnetoStatic_fast.cpp	/^double FM1DMagnetoStatic_fast::readFileData(std::ifstream& fieldFile, double fieldData[]) {$/;"	f	class:FM1DMagnetoStatic_fast
readFileHeader	src/Fields/Astra1DDynamic_fast.cpp	/^bool Astra1DDynamic_fast::readFileHeader(std::ifstream& file) {$/;"	f	class:Astra1DDynamic_fast
readFileHeader	src/Fields/Astra1DElectroStatic_fast.cpp	/^bool Astra1DElectroStatic_fast::readFileHeader(std::ifstream& file) {$/;"	f	class:Astra1DElectroStatic_fast
readFileHeader	src/Fields/Astra1DMagnetoStatic_fast.cpp	/^bool Astra1DMagnetoStatic_fast::readFileHeader(std::ifstream& file) {$/;"	f	class:Astra1DMagnetoStatic_fast
readFileHeader	src/Fields/FM1DDynamic.cpp	/^bool FM1DDynamic::readFileHeader(std::ifstream& fieldFile) {$/;"	f	class:FM1DDynamic
readFileHeader	src/Fields/FM1DDynamic_fast.cpp	/^bool FM1DDynamic_fast::readFileHeader(std::ifstream& fieldFile) {$/;"	f	class:FM1DDynamic_fast
readFileHeader	src/Fields/FM1DElectroStatic.cpp	/^bool FM1DElectroStatic::readFileHeader(std::ifstream& fieldFile) {$/;"	f	class:FM1DElectroStatic
readFileHeader	src/Fields/FM1DElectroStatic_fast.cpp	/^bool FM1DElectroStatic_fast::readFileHeader(std::ifstream& fieldFile) {$/;"	f	class:FM1DElectroStatic_fast
readFileHeader	src/Fields/FM1DMagnetoStatic.cpp	/^bool FM1DMagnetoStatic::readFileHeader(std::ifstream& fieldFile) {$/;"	f	class:FM1DMagnetoStatic
readFileHeader	src/Fields/FM1DMagnetoStatic_fast.cpp	/^bool FM1DMagnetoStatic_fast::readFileHeader(std::ifstream& fieldFile) {$/;"	f	class:FM1DMagnetoStatic_fast
readH5HutFile	tools/opal2sdds/main.cpp	/^void readH5HutFile(const std::string &fname,$/;"	f
readHDF5File	src/Distribution/LaserProfile.cpp	/^unsigned short* LaserProfile::readHDF5File($/;"	f	class:LaserProfile
readHeader	src/Fields/Fieldmap.cpp	/^MapType Fieldmap::readHeader(std::string Filename) {$/;"	f	class:Fieldmap
readHeader	src/Structure/H5PartWrapperForPT.cpp	/^void H5PartWrapperForPT::readHeader() {$/;"	f	class:H5PartWrapperForPT
readHeader	src/Utilities/PortableBitmapReader.cpp	/^void PortableBitmapReader::readHeader(std::istream &in) {$/;"	f	class:PortableBitmapReader
readHeader	src/Utilities/PortableGraymapReader.cpp	/^void PortableGraymapReader::readHeader(std::istream &in) {$/;"	f	class:PortableGraymapReader
readImageAscii	src/Utilities/PortableBitmapReader.cpp	/^void PortableBitmapReader::readImageAscii(std::istream &in) {$/;"	f	class:PortableBitmapReader
readImageAscii	src/Utilities/PortableGraymapReader.cpp	/^void PortableGraymapReader::readImageAscii(std::istream &in) {$/;"	f	class:PortableGraymapReader
readImageBinary	src/Utilities/PortableBitmapReader.cpp	/^void PortableBitmapReader::readImageBinary(std::istream &in) {$/;"	f	class:PortableBitmapReader
readImageBinary	src/Utilities/PortableGraymapReader.cpp	/^void PortableGraymapReader::readImageBinary(std::istream &in) {$/;"	f	class:PortableGraymapReader
readLines	src/Fields/SectorMagneticFieldMap.cpp	/^std::vector< std::vector<double> > SectorMagneticFieldMap::IO::readLines$/;"	f	class:SectorMagneticFieldMap::IO
readMap	src/Fields/Astra1DDynamic.cpp	/^void Astra1DDynamic::readMap() {$/;"	f	class:Astra1DDynamic
readMap	src/Fields/Astra1DDynamic_fast.cpp	/^void Astra1DDynamic_fast::readMap() {$/;"	f	class:Astra1DDynamic_fast
readMap	src/Fields/Astra1DElectroStatic.cpp	/^void Astra1DElectroStatic::readMap() {$/;"	f	class:Astra1DElectroStatic
readMap	src/Fields/Astra1DElectroStatic_fast.cpp	/^void Astra1DElectroStatic_fast::readMap() {$/;"	f	class:Astra1DElectroStatic_fast
readMap	src/Fields/Astra1DMagnetoStatic.cpp	/^void Astra1DMagnetoStatic::readMap() {$/;"	f	class:Astra1DMagnetoStatic
readMap	src/Fields/Astra1DMagnetoStatic_fast.cpp	/^void Astra1DMagnetoStatic_fast::readMap() {$/;"	f	class:Astra1DMagnetoStatic_fast
readMap	src/Fields/Astra1D_fast.cpp	/^void Astra1D_fast::readMap() {$/;"	f	class:Astra1D_fast
readMap	src/Fields/FM1DDynamic.cpp	/^void FM1DDynamic::readMap() {$/;"	f	class:FM1DDynamic
readMap	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::readMap() {$/;"	f	class:FM1DDynamic_fast
readMap	src/Fields/FM1DElectroStatic.cpp	/^void FM1DElectroStatic::readMap() {$/;"	f	class:FM1DElectroStatic
readMap	src/Fields/FM1DElectroStatic_fast.cpp	/^void FM1DElectroStatic_fast::readMap() {$/;"	f	class:FM1DElectroStatic_fast
readMap	src/Fields/FM1DMagnetoStatic.cpp	/^void FM1DMagnetoStatic::readMap() {$/;"	f	class:FM1DMagnetoStatic
readMap	src/Fields/FM1DMagnetoStatic_fast.cpp	/^void FM1DMagnetoStatic_fast::readMap() {$/;"	f	class:FM1DMagnetoStatic_fast
readMap	src/Fields/FM1DProfile1.cpp	/^void FM1DProfile1::readMap() {$/;"	f	class:FM1DProfile1
readMap	src/Fields/FM1DProfile2.cpp	/^void FM1DProfile2::readMap() {$/;"	f	class:FM1DProfile2
readMap	src/Fields/FM2DDynamic.cpp	/^void FM2DDynamic::readMap() {$/;"	f	class:FM2DDynamic
readMap	src/Fields/FM2DElectroStatic.cpp	/^void FM2DElectroStatic::readMap() {$/;"	f	class:FM2DElectroStatic
readMap	src/Fields/FM2DMagnetoStatic.cpp	/^void FM2DMagnetoStatic::readMap() {$/;"	f	class:FM2DMagnetoStatic
readMap	src/Fields/FM3DDynamic.cpp	/^void FM3DDynamic::readMap() {$/;"	f	class:FM3DDynamic
readMap	src/Fields/FM3DH5Block.cpp	/^void FM3DH5Block::readMap() {$/;"	f	class:FM3DH5Block
readMap	src/Fields/FM3DH5BlockBase.h	/^    virtual void readMap ($/;"	f	class:FM3DH5BlockBase
readMap	src/Fields/FM3DH5Block_nonscale.cpp	/^void FM3DH5Block_nonscale::readMap() {$/;"	f	class:FM3DH5Block_nonscale
readMap	src/Fields/FM3DMagnetoStatic.cpp	/^void FM3DMagnetoStatic::readMap() {$/;"	f	class:FM3DMagnetoStatic
readMap	src/Fields/FM3DMagnetoStaticExtended.cpp	/^void FM3DMagnetoStaticExtended::readMap() {$/;"	f	class:FM3DMagnetoStaticExtended
readMap	src/Fields/FM3DMagnetoStaticH5Block.cpp	/^void FM3DMagnetoStaticH5Block::readMap() {$/;"	f	class:FM3DMagnetoStaticH5Block
readMap	src/Fields/FMDummy.cpp	/^void FMDummy::readMap() {$/;"	f	class:FMDummy
readMap	src/Fields/Fieldmap.cpp	/^void Fieldmap::readMap(std::string Filename) {$/;"	f	class:Fieldmap
readMap	src/Fields/SectorMagneticFieldMap.cpp	/^VectorMap* SectorMagneticFieldMap::IO::readMap($/;"	f	class:SectorMagneticFieldMap::IO
readMap	src/Fields/SectorMagneticFieldMap.cpp	/^void SectorMagneticFieldMap::readMap() {$/;"	f	class:SectorMagneticFieldMap
readNumber	src/OpalParser/AbsFileStream.cpp	/^Token AbsFileStream::readNumber() {$/;"	f	class:AbsFileStream
readNumber	src/OpalParser/StringStream.cpp	/^Token StringStream::readNumber() {$/;"	f	class:StringStream
readPGMFile	src/Distribution/LaserProfile.cpp	/^unsigned short* LaserProfile::readPGMFile(const std::string& fileName) {$/;"	f	class:LaserProfile
readSDDSFile	tools/sdds2opal/main.cpp	/^std::vector<std::vector<double> > readSDDSFile(std::string fname, bool temporal) {$/;"	f
readStatement	src/OpalParser/OpalParser.cpp	/^Statement* OpalParser::readStatement(TokenStream* is) const {$/;"	f	class:OpalParser
readStep	src/Structure/H5PartWrapperForPT.cpp	/^void H5PartWrapperForPT::readStep($/;"	f	class:H5PartWrapperForPT
readStepAttributes	tools/opal2sdds/main.cpp	/^attributes_t readStepAttributes(file_t file) {$/;"	f
readStepData	src/Structure/H5PartWrapperForPT.cpp	/^void H5PartWrapperForPT::readStepData($/;"	f	class:H5PartWrapperForPT
readStepData	tools/opal2sdds/main.cpp	/^data_t readStepData(file_t file, bool temporal) {$/;"	f
readStepHeader	src/Structure/H5PartWrapperForPT.cpp	/^void H5PartWrapperForPT::readStepHeader(PartBunch_t* bunch) {$/;"	f	class:H5PartWrapperForPT
readString	src/OpalParser/AbsFileStream.cpp	/^Token AbsFileStream::readString() {$/;"	f	class:AbsFileStream
readString	src/OpalParser/StringStream.cpp	/^Token StringStream::readString() {$/;"	f	class:StringStream
readToken	src/OpalParser/AbsFileStream.cpp	/^Token AbsFileStream::readToken() {$/;"	f	class:AbsFileStream
readToken	src/OpalParser/MacroStream.cpp	/^Token MacroStream::readToken() {$/;"	f	class:MacroStream
readToken	src/OpalParser/OpalParser.cpp	/^Token OpalParser::readToken() {$/;"	f	class:OpalParser
readToken	src/OpalParser/StringStream.cpp	/^Token StringStream::readToken() {$/;"	f	class:StringStream
readWord	src/OpalParser/AbsFileStream.cpp	/^Token AbsFileStream::readWord() {$/;"	f	class:AbsFileStream
readWord	src/OpalParser/StringStream.cpp	/^Token StringStream::readWord() {$/;"	f	class:StringStream
real	src/Algorithms/Quaternion.hpp	/^inline double Quaternion::real() const {$/;"	f	class:Quaternion
real	src/OpalParser/Statement.cpp	/^bool Statement::real(double &value) {$/;"	f	class:Statement
rebin	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::rebin() {$/;"	f	class:PartBunch
rebin	src/PartBunch/PartBunch.hpp	/^    void rebin() {$/;"	f	class:PartBunch
rebinFreq	src/Utilities/Options.cpp	/^    int rebinFreq = 100;$/;"	m	namespace:Options	file:
receiveFailureMessage	src/Structure/H5PartWrapper.cpp	/^void H5PartWrapper::receiveFailureMessage($/;"	f	class:H5PartWrapper
rectangular_m	src/Fields/FM1DProfile2.h	/^    bool rectangular_m;$/;"	m	class:FM1DProfile2
recursion_ConstRadius_m	src/AbsBeamline/MultipoleT.h	/^    std::vector<polynomial::RecursionRelation> recursion_ConstRadius_m;$/;"	m	class:MultipoleT
recursion_VarRadius_m	src/AbsBeamline/MultipoleT.h	/^    std::vector<polynomial::RecursionRelationTwo> recursion_VarRadius_m;$/;"	m	class:MultipoleT
recursion_m	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    std::vector<polynomial::RecursionRelation> recursion_m;$/;"	m	class:MultipoleTCurvedConstRadius
recursion_m	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    std::vector<polynomial::RecursionRelationTwo> recursion_m;$/;"	m	class:MultipoleTCurvedVarRadius
recycleBlocks	src/Utilities/Options.cpp	/^    int recycleBlocks = 0;$/;"	m	namespace:Options	file:
reduction_identity	src/PartBunch/Binning/ParallelReduceTools.h	/^    struct reduction_identity<ParticleBinning::ArrayReduction<SizeType, IndexType, N>> {$/;"	s	namespace:Kokkos
reduction_identity	src/PartBunch/Binning/ParallelReduceTools.h	/^    struct reduction_identity<ParticleBinning::HostArrayReduction<SizeType, IndexType>> {$/;"	s	namespace:Kokkos
ref	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^    SquarePolynomialVector ref;$/;"	m	class:PPSolveFactoryTestFixture	file:
ref2D	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^    SquarePolynomialVector ref2D;$/;"	m	class:PPSolveFactoryTestFixture	file:
refB	tests/opal_src/Utilities/MockComponent.h	/^    Vector_t refB;$/;"	m	class:MockComponent2
refCoeffs	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^    MMatrix<double> refCoeffs;$/;"	m	class:PPSolveFactoryTestFixture	file:
refCoeffs2D	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^    MMatrix<double> refCoeffs2D;$/;"	m	class:PPSolveFactoryTestFixture	file:
refCount	src/MemoryManagement/RCObject.h	/^    mutable int refCount;$/;"	m	class:RCObject
refPartBunch_m	src/AbsBeamline/Ring.h	/^    PartBunch_t* refPartBunch_m;$/;"	m	class:Ring
refTime_m	src/Structure/LossDataSink.h	/^    double refTime_m;  \/\/ ns$/;"	m	struct:SetStatistics
refTime_m	src/Structure/LossDataSink.h	/^    std::vector<double> refTime_m;$/;"	m	class:LossDataSink
reference	src/Channels/DirectChannel.h	/^    double &reference;$/;"	m	class:DirectChannel
reference	src/Structure/Beam.h	/^    PartData reference;$/;"	m	class:Beam
reference	src/Track/Track.h	/^    PartData reference;$/;"	m	class:Track
referenceMomentum	src/AbstractObjects/OpalData.cpp	/^    ValueDefinition* referenceMomentum;$/;"	m	struct:OpalDataImpl	file:
referencePhi	src/Algorithms/ParallelTracker.h	/^    double referencePhi;$/;"	m	class:ParallelTracker
referencePr	src/Algorithms/ParallelTracker.h	/^    double referencePr;$/;"	m	class:ParallelTracker
referencePsi	src/Algorithms/ParallelTracker.h	/^    double referencePsi;$/;"	m	class:ParallelTracker
referencePt	src/Algorithms/ParallelTracker.h	/^    double referencePt;$/;"	m	class:ParallelTracker
referencePtot	src/Algorithms/ParallelTracker.h	/^    double referencePtot;$/;"	m	class:ParallelTracker
referencePz	src/Algorithms/ParallelTracker.h	/^    double referencePz = 0.0;$/;"	m	class:ParallelTracker
referenceR	src/Algorithms/ParallelTracker.h	/^    double referenceR;$/;"	m	class:ParallelTracker
referenceTheta	src/Algorithms/ParallelTracker.h	/^    double referenceTheta;$/;"	m	class:ParallelTracker
referenceZ	src/Algorithms/ParallelTracker.h	/^    double referenceZ = 0.0;$/;"	m	class:ParallelTracker
reference_m	src/Algorithms/OrbitThreader.h	/^    const PartData &reference_m;$/;"	m	class:OrbitThreader
reference_m	src/PartBunch/PartBunch.hpp	/^    PartData* reference_m;$/;"	m	class:PartBunch
reference_t	src/AbsBeamline/SpecificElementVisitor.h	/^    typedef typename ElementList_t::reference reference_t;$/;"	t	class:SpecificElementVisitor
references	src/AbstractObjects/Object.h	/^    std::set <Invalidator *> references;$/;"	m	class:Object
references	src/Lines/SequenceParser.h	/^    mutable RefList references;$/;"	m	class:SequenceParser
refill	src/AbstractObjects/Table.h	/^    bool refill;$/;"	m	class:Table
registerAttributes	src/PartBunch/Binning/test/alpine/ParticleContainer.hpp	/^	void registerAttributes() {$/;"	f	class:ParticleContainer
registerAttributes	src/PartBunch/ParticleContainer.hpp	/^    void registerAttributes() {$/;"	f	class:ParticleContainer
registerElement	src/Algorithms/OrbitThreader.cpp	/^void OrbitThreader::registerElement($/;"	f	class:OrbitThreader
registerExpression	src/AbstractObjects/OpalData.cpp	/^void OpalData::registerExpression(AttributeBase* expr) {$/;"	f	class:OpalData
registerOwnership	src/AbstractObjects/Object.cpp	/^void Object::registerOwnership(const AttributeHandler::OwnerType &itsClass) const {$/;"	f	class:Object
registerOwnership	src/Elements/OpalElement.cpp	/^void OpalElement::registerOwnership() const {$/;"	f	class:OpalElement
registerReference	src/AbstractObjects/Object.cpp	/^void Object::registerReference(Invalidator *ref) {$/;"	f	class:Object
registerTable	src/AbstractObjects/OpalData.cpp	/^void OpalData::registerTable(Table* table) {$/;"	f	class:OpalData
registered_m	src/Structure/PeakFinder.h	/^    int registered_m;$/;"	m	class:PeakFinder
relativePositions_m	src/Beamlines/TBeamline.h	/^    bool relativePositions_m;$/;"	m	class:TBeamline
release	src/MemoryManagement/OwnPtr.h	/^inline Object *OwnPtr<Object>::release() {$/;"	f	class:OwnPtr
releasePosition	src/AbsBeamline/ElementBase.h	/^inline void ElementBase::releasePosition() {$/;"	f	class:ElementBase
remotePartDel	src/Utilities/Options.cpp	/^    double remotePartDel = 0.0;$/;"	m	namespace:Options	file:
remove	src/Fields/Interpolation/ThreeDGrid.cpp	/^void ThreeDGrid::remove(VectorMap* map) {$/;"	f	class:interpolation::ThreeDGrid
removeAttribute	src/AbsBeamline/AttributeSet.cpp	/^void AttributeSet::removeAttribute(const std::string &aKey) {$/;"	f	class:AttributeSet
removeAttribute	src/AbsBeamline/ElementBase.cpp	/^void ElementBase::removeAttribute(const std::string& aKey) {$/;"	f	class:ElementBase
removeFieldMap	tests/classic_src/AbsBeamline/SBend3DTest.cpp	/^    void removeFieldMap() {$/;"	f	class:LoadFieldMap
removeReference	src/MemoryManagement/RCObject.h	/^inline int RCObject::removeReference() const {$/;"	f	class:RCObject
rend_m	src/AbsBeamline/PluginElement.h	/^    double rend_m;$/;"	m	class:PluginElement
rend_m	src/Fields/FM2DDynamic.h	/^    double rend_m;$/;"	m	class:FM2DDynamic
rend_m	src/Fields/FM2DElectroStatic.h	/^    double rend_m;$/;"	m	class:FM2DElectroStatic
rend_m	src/Fields/FM2DMagnetoStatic.h	/^    double rend_m;$/;"	m	class:FM2DMagnetoStatic
repartFreq	src/Utilities/Options.cpp	/^    int repartFreq = 10;$/;"	m	namespace:Options	file:
repartFreq_m	src/Algorithms/ParallelTracker.h	/^    unsigned int repartFreq_m;$/;"	m	class:ParallelTracker
repartition	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        void repartition(ippl::FieldLayout<Dim>* fl, ippl::UniformCartesian<T, Dim>* mesh, bool& isFirstRepartition) {$/;"	f	class:LoadBalancer
repartition	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    void repartition(FieldLayout_t& fl, Mesh_t& mesh) {$/;"	f	class:ChargedParticles
repartition	src/PartBunch/LoadBalancer.hpp	/^    void repartition($/;"	f	class:LoadBalancer
replace	src/AbstractObjects/Object.cpp	/^void Object::replace(Object *, Object *) {$/;"	f	class:Object
replace	src/Lines/Line.cpp	/^void Line::replace(Object *oldObject, Object *newObject) {$/;"	f	class:Line
replace	src/Lines/Sequence.cpp	/^void Sequence::replace(Object* oldObject, Object* newObject) {$/;"	f	class:Sequence
replaceVersionString	src/Structure/SDDSWriter.cpp	/^void SDDSWriter::replaceVersionString() {$/;"	f	class:SDDSWriter
reportOnError	src/Structure/H5PartWrapper.h	/^inline void H5PartWrapper::reportOnError(h5_int64_t rc, const char* file, int line) {$/;"	f	class:H5PartWrapper
reportOnError	tools/opal2sdds/main.cpp	/^void reportOnError(h5_int64_t rc, const char* file, int line) {$/;"	f
rescale	src/AbsBeamline/EndFieldModel/AsymmetricEnge.cpp	/^void AsymmetricEnge::rescale(double scaleFactor) {$/;"	f	class:endfieldmodel::AsymmetricEnge
rescale	src/AbsBeamline/EndFieldModel/Enge.cpp	/^void Enge::rescale(double scaleFactor) {$/;"	f	class:endfieldmodel::Enge
rescale	src/AbsBeamline/EndFieldModel/Tanh.cpp	/^void Tanh::rescale(double scaleFactor) {$/;"	f	class:endfieldmodel::Tanh
reseed	src/Utilities/ClassicRandom.cpp	/^void Random::reseed(int seed) {$/;"	f	class:Random
reserve	src/Fields/BMultipoleField.cpp	/^void BMultipoleField::reserve(int n) {$/;"	f	class:BMultipoleField
reset	src/AbstractObjects/OpalData.cpp	/^void OpalData::reset() {$/;"	f	class:OpalData
reset	src/Algorithms/DistributionMoments.cpp	/^void DistributionMoments::reset() {$/;"	f	class:DistributionMoments
reset	src/Expressions/SFunction.cpp	/^void SFunction::reset() {$/;"	f	class:SFunction
reset	src/Utilities/MSLang/QuadTree.cpp	/^    void QuadTree::reset() {$/;"	f	class:mslang::QuadTree
resetAzimuths	src/AbsBeamline/Ring.cpp	/^void Ring::resetAzimuths() {$/;"	f	class:Ring
resetBins	src/Algorithms/PartBins.h	/^    void resetBins() {$/;"	f	class:PartBins
resetID	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::resetID() {$/;"	f	class:PartBunch
resetInterpolationCache	src/Algorithms/.PartBunch.cpp	/^void PartBunch::resetInterpolationCache(bool clearCache) {$/;"	f	class:PartBunch
resetInterpolationCache	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::resetInterpolationCache(bool \/*clearCache*\/) {$/;"	f	class:PartBunch
resetInterpolationCache	src/PartBunch/PartBunch.hpp	/^    void resetInterpolationCache(bool clearCache = false) {$/;"	f	class:PartBunch
resetIterator	src/Algorithms/StepSizeConfig.h	/^void StepSizeConfig::resetIterator() {$/;"	f	class:StepSizeConfig
resetM	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::resetM(double m)  {$/;"	f	class:PartBunch
resetPartBinBunch	src/PartBunch/PartBunch.hpp	/^    bool resetPartBinBunch() {$/;"	f	class:PartBunch
resetPartBinID2	src/PartBunch/PartBunch.hpp	/^    bool resetPartBinID2(const double eta) {$/;"	f	class:PartBunch
resetPartInBin_cyc	src/Algorithms/PartBins.cpp	/^void PartBins::resetPartInBin_cyc(size_t newPartNum[], int maxbinIndex) {$/;"	f	class:PartBins
resetPlasmaParameters	src/Algorithms/DistributionMoments.cpp	/^void DistributionMoments::resetPlasmaParameters() {$/;"	f	class:DistributionMoments
resetQ	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::resetQ(double q)  {$/;"	f	class:PartBunch
resizeMesh	src/.Solvers/IrregularDomain.cpp	/^void IrregularDomain::resizeMesh(Vector_t<double, 3>& origin, Vector_t<double, 3>& hr,$/;"	f	class:IrregularDomain
resizeMesh	src/.Solvers/PoissonSolver.h	/^    virtual void resizeMesh($/;"	f	class:PoissonSolver
resizeMesh	src/.Solvers/RegularDomain.cpp	/^void RegularDomain::resizeMesh(Vector_t<double, 3>& origin, Vector_t<double, 3>& hr, const Vector_t<double, 3>& rmin,$/;"	f	class:RegularDomain
resizeMesh	src/Algorithms/.PartBunch.cpp	/^void PartBunch::resizeMesh() {$/;"	f	class:PartBunch
resizeMesh	src/PartBunch/PartBunch.hpp	/^    void resizeMesh() {$/;"	f	class:PartBunch
resizeS	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^void DifferentialOperator::resizeS(const std::size_t &sDerivatives) {$/;"	f	class:polynomial::DifferentialOperator
resizeS	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^void DifferentialOperatorTwo::resizeS(const std::size_t &sDerivatives) {$/;"	f	class:polynomial::DifferentialOperatorTwo
resizeS	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.h	/^    void RecursionRelation::resizeS(const std::size_t &sDerivatives) {$/;"	f	class:polynomial::RecursionRelation
resizeS	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^    void RecursionRelationTwo::resizeS(const std::size_t &sDerivatives) {$/;"	f	class:polynomial::RecursionRelationTwo
resizeX	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^void DifferentialOperator::resizeX(const std::size_t &xDerivatives) {$/;"	f	class:polynomial::DifferentialOperator
resizeX	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^void DifferentialOperatorTwo::resizeX(const std::size_t &xDerivatives) {$/;"	f	class:polynomial::DifferentialOperatorTwo
resizeX	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.h	/^    void RecursionRelation::resizeX(const std::size_t &xDerivatives) {$/;"	f	class:polynomial::RecursionRelation
resizeX	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^    void RecursionRelationTwo::resizeX(const std::size_t &xDerivatives) {$/;"	f	class:polynomial::RecursionRelationTwo
restartFn_m	src/AbstractObjects/OpalData.cpp	/^    std::string restartFn_m;$/;"	m	struct:OpalDataImpl	file:
restartStep_m	src/AbstractObjects/OpalData.cpp	/^    int restartStep_m;$/;"	m	struct:OpalDataImpl	file:
restart_dump_freq_m	src/AbstractObjects/OpalData.cpp	/^    int restart_dump_freq_m;$/;"	m	struct:OpalDataImpl	file:
restore	src/OpalParser/Statement.cpp	/^void Statement::restore() {$/;"	f	class:Statement
restoreCavityPhases	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::restoreCavityPhases() {$/;"	f	class:ParallelTracker
result	src/Utilities/MSLang/matheval.hpp	/^            template < typename T > struct result { using type = T; };$/;"	s	struct:matheval::detail::binary_expr_
result	src/Utilities/MSLang/matheval.hpp	/^            template < typename T > struct result { using type = T; };$/;"	s	struct:matheval::detail::unary_expr_
result	src/Utilities/SDDSParser/column.hpp	/^        struct result { typedef void type; };$/;"	s	struct:SDDS::columnOrder
result	src/Utilities/SDDSParser/error_handler.hpp	/^        struct result { typedef void type; };$/;"	s	struct:SDDS::error_handler
result	src/Utilities/SDDSParser/parameter.hpp	/^        struct result { typedef void type; };$/;"	s	struct:SDDS::parameterOrder
reverseDirection	src/Algorithms/StepSizeConfig.cpp	/^void StepSizeConfig::reverseDirection() {$/;"	f	class:StepSizeConfig
rewindLines	src/Structure/DataSink.cpp	/^void DataSink::rewindLines() {$/;"	f	class:DataSink
rewindLines	src/Structure/SDDSWriter.cpp	/^void SDDSWriter::rewindLines(size_t numberOfLines) {$/;"	f	class:SDDSWriter
rewindLinesSDDS	src/Utilities/Util.cpp	/^    unsigned int rewindLinesSDDS(const std::string& fileName, double maxSPos, bool checkForTime) {$/;"	f	namespace:Util
rewindToSpos	src/Structure/StatBaseWriter.h	/^inline unsigned int StatBaseWriter::rewindToSpos(double maxSPos) {$/;"	f	class:StatBaseWriter
rfFreq_m	src/AbsBeamline/Ring.h	/^    double rfFreq_m;$/;"	m	class:Ring
rgt	src/Expressions/ABinary.h	/^        PtrToArray<U> rgt;$/;"	m	class:Expressions::ABinary
rgt	src/Expressions/Indexer.h	/^        PtrToScalar<double> rgt;$/;"	m	class:Expressions::Indexer
rgt	src/Expressions/SBinary.h	/^        PtrToScalar<U> rgt;$/;"	m	class:Expressions::SBinary
rho	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^    double rho;$/;"	m	struct:coordinatetransform::myParams
rho2_m	src/.Solvers/FFTPoissonSolver.h	/^    Field_t rho2_m;$/;"	m	class:FFTPoissonSolver
rho2tr_m	src/.Solvers/FFTPoissonSolver.h	/^    CxField_t rho2tr_m;$/;"	m	class:FFTPoissonSolver
rhoDump	src/Utilities/Options.cpp	/^    bool rhoDump = false;$/;"	m	namespace:Options	file:
rhoNorm_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    double rhoNorm_m;$/;"	m	class:AlpineManager
rho_m	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^    double rho_m;$/;"	m	class:coordinatetransform::CoordinateTransform
rho_m	src/Algorithms/.PartBunch.h	/^    Field_t rho_m;$/;"	m	class:PartBunch
rho_m	src/BeamlineGeometry/VarRadiusGeometry.h	/^    double rho_m;$/;"	m	class:VarRadiusGeometry
rho_m	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    Field_t<Dim> rho_m;$/;"	m	class:FieldContainer
rho_m	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    Field_t<Dim> *rho_m;$/;"	m	class:FieldSolver
rho_m	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        Field_t<Dim>* rho_m;$/;"	m	class:LoadBalancer
rho_m	src/PartBunch/FieldContainer.hpp	/^    Field_t<Dim> rho_m;$/;"	m	class:FieldContainer
rho_m	src/PartBunch/FieldSolver.hpp	/^    Field_t<Dim>* rho_m;$/;"	m	class:FieldSolver
rho_m	src/PartBunch/LoadBalancer.hpp	/^    Field_t<Dim>* rho_m;$/;"	m	class:LoadBalancer
rhs	src/Algorithms/.PartBunchBase.h	/^    PartBunch(const PartBunch& rhs) = delete;  \/\/ implement if needed$/;"	m	class:PartBunch
rhs	src/Utilities/MSLang/matheval.hpp	/^            expr_ast<real_t> rhs;$/;"	m	struct:matheval::detail::binary_op
rhs	src/Utilities/MSLang/matheval.hpp	/^            expr_ast<real_t> rhs;$/;"	m	struct:matheval::detail::unary_op
right	src/Algorithms/CoordinateSystemTrafo.h	/^    CoordinateSystemTrafo& operator=(const CoordinateSystemTrafo& right) = default;$/;"	m	class:CoordinateSystemTrafo
ringSections_m	src/AbsBeamline/Ring.h	/^    std::vector<RingSectionList> ringSections_m;$/;"	m	class:Ring
riseTime_m	src/Distribution/FlatTop.hpp	/^    double riseTime_m;$/;"	m	class:FlatTop
rmax_m	src/AbsBeamline/RFCavity.h	/^    double rmax_m;$/;"	m	class:RFCavity
rmax_m	src/Distribution/MultiVariateGaussian.hpp	/^    Vector_t<double, 3> rmax_m;$/;"	m	class:MultiVariateGaussian
rmax_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    Vector_t<double, Dim> rmax_m;$/;"	m	class:AlpineManager
rmax_m	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    Vector_t<double, Dim> rmax_m;$/;"	m	class:FieldContainer
rmax_m	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    Vector_t rmax_m;$/;"	m	class:ChargedParticles	file:
rmax_m	src/PartBunch/FieldContainer.hpp	/^    Vector_t<double, Dim> rmax_m;$/;"	m	class:FieldContainer
rmax_m	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> rmax_m;$/;"	m	class:PartBunch
rmax_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> rmax_m;$/;"	m	struct:SetStatistics
rmean_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> rmean_m;$/;"	m	struct:SetStatistics
rmin_m	src/AbsBeamline/PluginElement.h	/^    double rmin_m;    \/\/\/< radius closest to the origin$/;"	m	class:PluginElement
rmin_m	src/AbsBeamline/RFCavity.h	/^    double rmin_m;$/;"	m	class:RFCavity
rmin_m	src/Distribution/MultiVariateGaussian.hpp	/^    Vector_t<double, 3> rmin_m;$/;"	m	class:MultiVariateGaussian
rmin_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    Vector_t<double, Dim> rmin_m;$/;"	m	class:AlpineManager
rmin_m	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    Vector_t<double, Dim> rmin_m;$/;"	m	class:FieldContainer
rmin_m	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    Vector_t rmin_m;$/;"	m	class:ChargedParticles	file:
rmin_m	src/PartBunch/FieldContainer.hpp	/^    Vector_t<double, Dim> rmin_m;$/;"	m	class:FieldContainer
rmin_m	src/PartBunch/PartBunch.hpp	/^    Vector_t<double, Dim> rmin_m;$/;"	m	class:PartBunch
rmin_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> rmin_m;$/;"	m	struct:SetStatistics
rmsDensity_m	src/PartBunch/PartBunch.hpp	/^    double rmsDensity_m;$/;"	m	class:PartBunch
rng_m	src/Distribution/LaserProfile.h	/^    gsl_rng* rng_m;$/;"	m	class:LaserProfile
rngtype	src/Utilities/Options.cpp	/^    std::string rngtype = std::string("RANDOM");$/;"	m	namespace:Options	file:
robinBoundaryStencil	src/.Solvers/RegularDomain.cpp	/^void RegularDomain::robinBoundaryStencil(int z, double &F, double &B, double &C) const {$/;"	f	class:RegularDomain
rot_m	src/Utilities/MSLang/Repeat.h	/^        double rot_m;$/;"	m	struct:mslang::Repeat
rotate	src/AbsBeamline/Offset.cpp	/^Vector_t<double, 3> Offset::rotate(Vector_t<double, 3> vec, double theta) {$/;"	f	class:Offset
rotate	src/Algorithms/Quaternion.cpp	/^ippl::Vector<double, 3> Quaternion::rotate(const ippl::Vector<double, 3>& vec) const {$/;"	f	class:Quaternion
rotate	src/Utilities/RingSection.cpp	/^void RingSection::rotate(Vector_t<double, 3>& vector) const {$/;"	f	class:RingSection
rotateFrame	src/AbsBeamline/MultipoleT.cpp	/^Vector_t<double, 3> MultipoleT::rotateFrame(const Vector_t<double, 3>& R) {$/;"	f	class:MultipoleT
rotateFrame	src/AbsBeamline/MultipoleTBase.cpp	/^Vector_t<double, 3> MultipoleTBase::rotateFrame(const Vector_t<double, 3> &R) {$/;"	f	class:MultipoleTBase
rotateFrameInverse	src/AbsBeamline/MultipoleT.cpp	/^Vector_t<double, 3> MultipoleT::rotateFrameInverse(Vector_t<double, 3>& B) {$/;"	f	class:MultipoleT
rotateFrameInverse	src/AbsBeamline/MultipoleTBase.cpp	/^Vector_t<double, 3> MultipoleTBase::rotateFrameInverse(Vector_t<double, 3> &B) {$/;"	f	class:MultipoleTBase
rotateFrom	src/Algorithms/CoordinateSystemTrafo.h	/^inline ippl::Vector<double, 3> CoordinateSystemTrafo::rotateFrom($/;"	f	class:CoordinateSystemTrafo
rotateFrom	src/Elements/OpalBeamline.h	/^inline Vector_t<double, 3> OpalBeamline::rotateFrom(const Vector_t<double, 3>& r) const {$/;"	f	class:OpalBeamline
rotateFromLocalCS	src/Elements/OpalBeamline.h	/^inline Vector_t<double, 3> OpalBeamline::rotateFromLocalCS($/;"	f	class:OpalBeamline
rotateTo	src/Algorithms/CoordinateSystemTrafo.h	/^inline ippl::Vector<double, 3> CoordinateSystemTrafo::rotateTo($/;"	f	class:CoordinateSystemTrafo
rotateTo	src/Elements/OpalBeamline.h	/^inline Vector_t<double, 3> OpalBeamline::rotateTo(const Vector_t<double, 3>& r) const {$/;"	f	class:OpalBeamline
rotateToCyclCoordinates	src/AbsBeamline/Ring.cpp	/^void Ring::rotateToCyclCoordinates(Euclid3D& delta) const {$/;"	f	class:Ring
rotateToCyclCoordinates	src/Utilities/RingSection.h	/^void RingSection::rotateToCyclCoordinates(Vector_t<double, 3>& vec) const {$/;"	f	class:RingSection
rotateToLocalCS	src/Elements/OpalBeamline.h	/^inline Vector_t<double, 3> OpalBeamline::rotateToLocalCS($/;"	f	class:OpalBeamline
rotateToTCoordinates	src/Utilities/RingSection.h	/^void RingSection::rotateToTCoordinates(Vector_t<double, 3>& vec) const {$/;"	f	class:RingSection
rotate_back	src/Utilities/RingSection.cpp	/^void RingSection::rotate_back(Vector_t<double, 3>& vector) const {$/;"	f	class:RingSection
rotationMatrix_m	src/Algorithms/CoordinateSystemTrafo.h	/^    matrix_t rotationMatrix_m;$/;"	m	class:CoordinateSystemTrafo
rotationZAxis_m	src/AbsBeamline/ElementBase.h	/^    double rotationZAxis_m;$/;"	m	class:ElementBase
rotation_m	src/AbsBeamline/MultipoleT.h	/^    double rotation_m;$/;"	m	class:MultipoleT
rotation_m	src/AbsBeamline/MultipoleTBase.h	/^    double rotation_m;$/;"	m	class:MultipoleTBase
round2string	src/Elements/OpalBeamline.cpp	/^    std::string round2string(double num, const unsigned int maxDigits) {$/;"	f	namespace:__anon47
roundOffError	tests/ippl_src/Field/BCond.cpp	/^constexpr double   roundOffError = 1e-10;$/;"	v
roundOffError	tests/ippl_src/Field/Cell.cpp	/^constexpr double   roundOffError = 1e-10;$/;"	v
roundOffError	tests/ippl_src/Field/Eureka.cpp	/^constexpr double roundOffError = 1e-10;$/;"	v
roundOffError	tests/ippl_src/Field/Field.cpp	/^constexpr double   roundOffError = 1e-10;$/;"	v
roundOffError	tests/ippl_src/Field/FieldDebug2.cpp	/^constexpr double roundOffError = 1e-10;$/;"	v
roundOffError	tests/ippl_src/Field/FunctionFace.cpp	/^constexpr double roundOffError = 1e-10;$/;"	v
roundOffError	tests/ippl_src/Field/Periodic.cpp	/^constexpr double roundOffError = 1e-10;$/;"	v
roundOffError	tests/ippl_src/Index/Index.cpp	/^constexpr double   roundOffError = 1e-10;$/;"	v
roundOffError	tests/ippl_src/Meshes/Average.cpp	/^constexpr double roundOffError = 1e-10;$/;"	v
roundOffError	tests/ippl_src/Meshes/Cartesian.cpp	/^constexpr double roundOffError = 1e-10;$/;"	v
rprms_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> rprms_m;$/;"	m	struct:SetStatistics
rpsum_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> rpsum_m;$/;"	m	struct:SetStatistics
rrms_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> rrms_m;$/;"	m	struct:SetStatistics
rsqsum_m	src/Structure/LossDataSink.h	/^    Vector_t<double, 3> rsqsum_m;$/;"	m	struct:SetStatistics
rstart_m	src/AbsBeamline/PluginElement.h	/^    double rstart_m;$/;"	m	class:PluginElement
run	src/OpalParser/OpalParser.cpp	/^void OpalParser::run() const {$/;"	f	class:OpalParser
run	src/OpalParser/OpalParser.cpp	/^void OpalParser::run(TokenStream* is) const {$/;"	f	class:OpalParser
run	src/Utilities/SDDSParser.cpp	/^SDDS::file SDDS::SDDSParser::run() {$/;"	f	class:SDDS::SDDSParser
runBinnedSolver	src/PartBunch/Binning/test/alpine/BinningLandauDampingManager.h	/^    void runBinnedSolver() {$/;"	f	class:LandauDampingManager
runSolver	src/PartBunch/FieldSolver.cpp	/^void FieldSolver<double,3>::runSolver() {$/;"	f	class:FieldSolver
runTests	src/Algorithms/.PartBunch.cpp	/^void PartBunch::runTests() {$/;"	f	class:PartBunch
runTests	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::runTests() {$/;"	f	class:PartBunch
s0	src/AbsBeamline/MultipoleTFunctions/tanhDeriv.cpp	/^    double s0;$/;"	m	struct:tanhderiv::my_f_params	file:
s2ns	src/Physics/Units.h	/^    constexpr double s2ns = 1e+9;$/;"	m	namespace:Units
s2ps	src/Physics/Units.h	/^    constexpr double s2ps = 1e+12;$/;"	m	namespace:Units
s2us	src/Physics/Units.h	/^    constexpr double s2us = 1e+6;$/;"	m	namespace:Units
sBegin_m	src/Fields/FM1DProfile1.h	/^     double sBegin_m;                \/\/\/ Start of field map in s coordinates (m).$/;"	m	class:FM1DProfile1
sBins_m	src/Algorithms/PartBins.h	/^    int sBins_m;$/;"	m	class:PartBins
sDerivatives_m	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.h	/^    std::size_t sDerivatives_m;$/;"	m	class:polynomial::DifferentialOperator
sDerivatives_m	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.h	/^    std::size_t sDerivatives_m;$/;"	m	class:polynomial::DifferentialOperatorTwo
sEnd_m	src/Fields/FM1DProfile1.h	/^     double sEnd_m;                  \/\/\/ End of field map in s coordinates (m).$/;"	m	class:FM1DProfile1
s_0	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^    double s_0;$/;"	m	struct:coordinatetransform::myParams
s_0_m	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^    double s_0_m;$/;"	m	class:coordinatetransform::CoordinateTransform
s_0_m	src/BeamlineGeometry/VarRadiusGeometry.h	/^    double s_0_m;$/;"	m	class:VarRadiusGeometry
s_m	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^    double s_m;$/;"	m	class:coordinatetransform::CoordinateTransform
sa	tests/ippl_src/Particle/ParticleDebug.cpp	/^    ParticleAttrib<double> sa;$/;"	m	class:Particles	file:
sampleDist	src/Distribution/LaserProfile.cpp	/^void LaserProfile::sampleDist() {$/;"	f	class:LaserProfile
sampler_m	src/Track/TrackRun.h	/^    std::shared_ptr<SamplingBase> sampler_m;$/;"	m	class:TrackRun
samplingMethod_m	src/Distribution/SamplingBase.hpp	/^        std::string samplingMethod_m;$/;"	m	class:SamplingBase
save	src/AbsBeamline/PluginElement.cpp	/^void PluginElement::save() {$/;"	f	class:PluginElement
save	src/Structure/LossDataSink.cpp	/^void LossDataSink::save(unsigned int numSets, OpalData::OpenMode openMode) {$/;"	f	class:LossDataSink
save	src/Structure/PeakFinder.cpp	/^void PeakFinder::save() {$/;"	f	class:PeakFinder
save3DInput	src/Elements/OpalBeamline.cpp	/^void OpalBeamline::save3DInput() {$/;"	f	class:OpalBeamline
save3DLattice	src/Elements/OpalBeamline.cpp	/^void OpalBeamline::save3DLattice() {$/;"	f	class:OpalBeamline
saveASCII	src/Structure/LossDataSink.cpp	/^void LossDataSink::saveASCII() {$/;"	f	class:LossDataSink
saveASCII_m	src/Structure/PeakFinder.cpp	/^void PeakFinder::saveASCII_m() {$/;"	f	class:PeakFinder
saveCavityPhases	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::saveCavityPhases() {$/;"	f	class:ParallelTracker
saveData	src/Distribution/LaserProfile.cpp	/^void LaserProfile::saveData(const std::string& fname, unsigned short* image) {$/;"	f	class:LaserProfile
saveField	src/Fields/FM3DMagnetoStaticExtended.cpp	/^void FM3DMagnetoStaticExtended::saveField(const std::string& fname, unsigned int j) const {$/;"	f	class:FM3DMagnetoStaticExtended
saveH5	src/Structure/LossDataSink.cpp	/^void LossDataSink::saveH5(unsigned int setIdx) {$/;"	f	class:LossDataSink
saveHistogram	src/Distribution/LaserProfile.cpp	/^void LaserProfile::saveHistogram() {$/;"	f	class:LaserProfile
saveSDDS	src/Algorithms/IndexMap.cpp	/^void IndexMap::saveSDDS(double initialPathLength) const {$/;"	f	class:IndexMap
savgol	src/Filters/SavitzkyGolay.cpp	/^void savgol(std::vector<double> &c, const int &np, const int &nl, const int &nr, const int &ld, const int &m) {$/;"	f
sbend3d_m	tests/classic_src/AbsBeamline/SBend3DTest.cpp	/^    SBend3D* sbend3d_m;$/;"	m	class:LoadFieldMap	file:
scSolveFreq	src/Utilities/Options.cpp	/^    int scSolveFreq = 1;$/;"	m	namespace:Options	file:
scale	src/Fields/BDipoleField.cpp	/^void BDipoleField::scale(double scalar) {$/;"	f	class:BDipoleField
scale	src/Fields/BMultipoleField.cpp	/^void BMultipoleField::scale(double scalar) {$/;"	f	class:BMultipoleField
scale	src/Fields/BSingleMultipoleField.h	/^void BSingleMultipoleField<order>::scale(double scalar) {$/;"	f	class:BSingleMultipoleField
scale	src/Fields/ConstBzField.cpp	/^void ConstBzField::scale(double scalar) {$/;"	f	class:ConstBzField
scale	src/Fields/ConstEzField.cpp	/^void ConstEzField::scale(double scalar) {$/;"	f	class:ConstEzField
scale	src/Fields/NullField.cpp	/^void NullField::scale(double)$/;"	f	class:NullField
scale	src/Structure/BoundaryGeometry.cpp	/^    inline void scale(const Vector_t<double, 3>& scale) {$/;"	f	class:Voxel
scale	src/Structure/BoundaryGeometry.cpp	/^    inline void scale(const Vector_t<double, 3>& scaleby, const Vector_t<double, 3>& shiftby) {$/;"	f	class:Triangle
scaleCoreError_m	src/AbsBeamline/TravelingWave.h	/^    double scaleCoreError_m;$/;"	m	class:TravelingWave
scaleCore_m	src/AbsBeamline/TravelingWave.h	/^    double scaleCore_m;$/;"	m	class:TravelingWave
scaleError_m	src/AbsBeamline/RFCavity.h	/^    double scaleError_m; \/**< additive scale error*\/$/;"	m	class:RFCavity
scaleError_m	src/AbsBeamline/Solenoid.h	/^    double scaleError_m; \/**< scale multiplier error*\/$/;"	m	class:Solenoid
scaleField	src/Fields/FM1DDynamic.cpp	/^void FM1DDynamic::scaleField(double maxEz, std::vector<std::pair<double, double>>& eZ) {$/;"	f	class:FM1DDynamic
scaleField	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::scaleField(double maxEz, std::vector<std::pair<double, double>>& eZ) {$/;"	f	class:FM1DDynamic_fast
scale_m	src/AbsBeamline/RFCavity.h	/^    double scale_m;      \/**< scale multiplier*\/$/;"	m	class:RFCavity
scale_m	src/AbsBeamline/Ring.h	/^    double scale_m = 1.;$/;"	m	class:Ring
scale_m	src/AbsBeamline/Solenoid.h	/^    double scale_m;      \/**< scale multiplier*\/$/;"	m	class:Solenoid
scatterCIC	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    void scatterCIC() {$/;"	f	class:AlpineManager
scatterCIC	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    void scatterCIC(unsigned int totalP, int iteration) {$/;"	f	class:ChargedParticles
scatterCIC	src/PartBunch/PartBunch.hpp	/^    void scatterCIC() {$/;"	f	class:PartBunch
scatterCICPerBin	src/PartBunch/PartBunch.cpp	/^void PartBunch<T,Dim>::scatterCICPerBin(PartBunch<T,Dim>::binIndex_t binIndex) {$/;"	f	class:PartBunch
sddsArrays_m	src/Utilities/SDDSParser/file.hpp	/^        arrayList sddsArrays_m;                             \/\/ 6$/;"	m	struct:SDDS::file
sddsAssociates_m	src/Utilities/SDDSParser/file.hpp	/^        associateList sddsAssociates_m;                     \/\/ 5$/;"	m	struct:SDDS::file
sddsColumns_m	src/Utilities/SDDSParser/file.hpp	/^        columnList sddsColumns_m;                           \/\/ 3$/;"	m	struct:SDDS::file
sddsData_m	src/Utilities/SDDSParser.h	/^        SDDS::file sddsData_m;$/;"	m	class:SDDS::SDDSParser
sddsData_m	src/Utilities/SDDSParser/file.hpp	/^        data sddsData_m;                                    \/\/ 4$/;"	m	struct:SDDS::file
sddsDescription_m	src/Utilities/SDDSParser/file.hpp	/^        boost::optional<description> sddsDescription_m;     \/\/ 1$/;"	m	struct:SDDS::file
sddsFileName_m	src/Utilities/SDDSParser.h	/^        std::string sddsFileName_m;$/;"	m	class:SDDS::SDDSParser
sddsIncludes_m	src/Utilities/SDDSParser/file.hpp	/^        includeList sddsIncludes_m;                         \/\/ 7$/;"	m	struct:SDDS::file
sddsParameters_m	src/Utilities/SDDSParser/file.hpp	/^        parameterList sddsParameters_m;                     \/\/ 2$/;"	m	struct:SDDS::file
sddsVersion_m	src/Utilities/SDDSParser/file.hpp	/^        version sddsVersion_m;                              \/\/ 0$/;"	m	struct:SDDS::file
sddsWriter_m	src/Structure/DataSink.h	/^    std::vector<sddsWriter_t> sddsWriter_m;$/;"	m	class:DataSink
sddsWriter_t	src/Structure/DataSink.h	/^    typedef std::unique_ptr<SDDSWriter> sddsWriter_t;$/;"	t	class:DataSink
secondOperand_m	src/Utilities/MSLang/Intersection.h	/^        Function *secondOperand_m;$/;"	m	struct:mslang::Intersection
secondOperand_m	src/Utilities/MSLang/SymmetricDifference.h	/^        Function *secondOperand_m;$/;"	m	struct:mslang::SymmetricDifference
second_type	src/Algorithms/IndexMap.h	/^        typedef double second_type;$/;"	t	struct:IndexMap::Range
sectionCompare	src/AbsBeamline/Ring.cpp	/^bool Ring::sectionCompare(RingSection const* const sec1, RingSection const* const sec2) {$/;"	f	class:Ring
section_list_m	src/AbsBeamline/Ring.h	/^    RingSectionList section_list_m;$/;"	m	class:Ring
sector_m	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    ScalingFFAMagnet* sector_m;$/;"	m	class:ScalingFFAMagnetTest	file:
seed	src/Utilities/Options.cpp	/^    int seed = 123456789;$/;"	m	namespace:Options	file:
seen	src/AbstractObjects/PlaceRep.h	/^    mutable Data::size_type seen;$/;"	m	class:PlaceRep
select	src/BasicActions/Select.cpp	/^void Select::select(const Beamline& bl) {$/;"	f	class:Select
selectBestEar	src/Utilities/Mesher.cpp	/^unsigned int Mesher::selectBestEar(std::vector<unsigned int> &ears) const {$/;"	f	class:Mesher
selectDT	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::selectDT(bool backTrack) {$/;"	f	class:ParallelTracker
sendFailureMessage	src/Structure/H5PartWrapper.cpp	/^void H5PartWrapper::sendFailureMessage($/;"	f	class:H5PartWrapper
set	src/AbstractObjects/Attribute.cpp	/^void Attribute::set(AttributeBase *newBase) {$/;"	f	class:Attribute
set	src/BeamlineCore/DriftRep.cpp	/^        void (DriftRep::*set)(double);$/;"	m	struct:__anon75::Entry	file:
set	src/BeamlineCore/MonitorRep.cpp	/^        void (MonitorRep::*set)(double);$/;"	m	struct:__anon74::Entry	file:
set	src/BeamlineCore/MultipoleRep.cpp	/^        void (MultipoleRep::*set)(double);$/;"	m	struct:__anon70::Entry	file:
set	src/BeamlineCore/ProbeRep.cpp	/^        void (ProbeRep::*set)(double);$/;"	m	struct:__anon72::Entry	file:
set	src/BeamlineCore/RFCavityRep.cpp	/^        void (RFCavityRep::*set)(double);$/;"	m	struct:__anon71::Entry	file:
set	src/BeamlineCore/SolenoidRep.cpp	/^        void (SolenoidRep::*set)(double);$/;"	m	struct:__anon76::Entry	file:
set	src/BeamlineCore/TravelingWaveRep.cpp	/^        void (TravelingWaveRep::*set)(double);$/;"	m	struct:__anon73::Entry	file:
set	src/Channels/DirectChannel.h	/^inline bool DirectChannel::set(double value) {$/;"	f	class:DirectChannel
set	src/Channels/IndexedChannel.h	/^bool IndexedChannel<T>::set(double value) {$/;"	f	class:IndexedChannel
set	src/Channels/IndirectChannel.h	/^bool IndirectChannel<T>::set(double value) {$/;"	f	class:IndirectChannel
set	src/Expressions/SRefAttr.h	/^    void SRefAttr<T>::set(const T &value) const {$/;"	f	class:Expressions::SRefAttr
setActionRange	src/AbsBeamline/ElementBase.h	/^inline void ElementBase::setActionRange(const std::queue<std::pair<double, double> >& range) {$/;"	f	class:ElementBase
setActive	src/BeamlineCore/MonitorRep.cpp	/^void MonitorRep::setActive(bool flag) {$/;"	f	class:MonitorRep
setActive	src/BeamlineCore/ProbeRep.cpp	/^void ProbeRep::setActive(bool flag) {$/;"	f	class:ProbeRep
setAll	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^void Interpolator3dGridTo1d::setAll(ThreeDGrid* grid, double *** F) {$/;"	f	class:interpolation::Interpolator3dGridTo1d
setAll	src/Fields/Interpolation/Interpolator3dGridTo3d.cpp	/^void Interpolator3dGridTo3d::setAll(ThreeDGrid* grid,$/;"	f	class:interpolation::Interpolator3dGridTo3d
setAmplitude	src/BeamlineCore/RFCavityRep.cpp	/^void RFCavityRep::setAmplitude(double amplitude) {$/;"	f	class:RFCavityRep
setAmplitude	src/BeamlineCore/TravelingWaveRep.cpp	/^void TravelingWaveRep::setAmplitude(double amplitude) {$/;"	f	class:TravelingWaveRep
setAmplitudeError	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setAmplitudeError(double vPeakError) {$/;"	f	class:RFCavity
setAmplitudeModel	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setAmplitudeModel(std::shared_ptr<AbstractTimeDependence> amplitudeTD) {$/;"	f	class:RFCavity
setAmplitudeModelName	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setAmplitudeModelName(std::string name) {$/;"	f	class:RFCavity
setAmplitudem	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setAmplitudem(double vPeak) {$/;"	f	class:RFCavity
setAperture	src/AbsBeamline/ElementBase.h	/^inline void ElementBase::setAperture(const ApertureType& type, const std::vector<double>& args) {$/;"	f	class:ElementBase
setAperture	src/AbsBeamline/MultipoleT.cpp	/^void MultipoleT::setAperture(double vertAp, double horizAp) {$/;"	f	class:MultipoleT
setAperture	src/AbsBeamline/MultipoleTBase.h	/^inline void MultipoleTBase::setAperture(const double& vertAp, const double& horizAp) {$/;"	f	class:MultipoleTBase
setAttribute	src/AbsBeamline/AttributeSet.cpp	/^void AttributeSet::setAttribute(const std::string &aKey, double value) {$/;"	f	class:AttributeSet
setAttribute	src/AbsBeamline/ElementBase.cpp	/^void ElementBase::setAttribute(const std::string& aKey, double val) {$/;"	f	class:ElementBase
setAttributes	src/Distribution/Distribution.cpp	/^void Distribution::setAttributes() {$/;"	f	class:Distribution
setAttributes	tests/opal_src/BasicActions/DumpFieldsTest.cpp	/^void setAttributes(DumpFields* dump,$/;"	f	namespace:test
setAttributesCart	tests/opal_src/BasicActions/DumpEMFieldsTest.cpp	/^void setAttributesCart(DumpEMFields* dump,$/;"	f	namespace:DumpEMFieldsTest
setAttributesCyl	tests/opal_src/BasicActions/DumpEMFieldsTest.cpp	/^void setAttributesCyl(DumpEMFields* dump,$/;"	f	namespace:DumpEMFieldsTest
setAutophaseVeto	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setAutophaseVeto(bool veto) {$/;"	f	class:RFCavity
setAvrgPz	src/Distribution/Distribution.cpp	/^void Distribution::setAvrgPz(double avrgpz){$/;"	f	class:Distribution
setAzimuth	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::setAzimuth(double angle) {$/;"	f	class:RFCavity
setAzimuthalExtent	src/AbsBeamline/ScalingFFAMagnet.h	/^    void setAzimuthalExtent(double azimuthalExtent) {azimuthalExtent_m = azimuthalExtent;}$/;"	f	class:ScalingFFAMagnet
setB0	src/AbsBeamline/VerticalFFAMagnet.h	/^    void setB0(double Bz) {$/;"	f	class:VerticalFFAMagnet
setBBLength	src/AbsBeamline/VerticalFFAMagnet.h	/^    void setBBLength(double bbLength) {$/;"	f	class:VerticalFFAMagnet
setBCAllOpen	src/Algorithms/.PartBunch.cpp	/^void PartBunch::setBCAllOpen() {$/;"	f	class:PartBunch
setBCAllOpen	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setBCAllOpen() {$/;"	f	class:PartBunch
setBCAllOpen	src/PartBunch/PartBunch.hpp	/^    void setBCAllOpen() {$/;"	f	class:PartBunch
setBCAllPeriodic	src/Algorithms/.PartBunch.cpp	/^void PartBunch::setBCAllPeriodic() {$/;"	f	class:PartBunch
setBCAllPeriodic	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setBCAllPeriodic() {$/;"	f	class:PartBunch
setBCAllPeriodic	src/PartBunch/Binning/test/alpine/ParticleContainer.hpp	/^       void setBCAllPeriodic() { this->setParticleBC(ippl::BC::PERIODIC); }$/;"	f	class:ParticleContainer
setBCAllPeriodic	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    void setBCAllPeriodic() { this->setParticleBC(ippl::BC::PERIODIC); }$/;"	f	class:ChargedParticles	file:
setBCAllPeriodic	src/PartBunch/PartBunch.hpp	/^    void setBCAllPeriodic() {$/;"	f	class:PartBunch
setBCAllPeriodic	src/PartBunch/ParticleContainer.hpp	/^    void setBCAllPeriodic() {$/;"	f	class:ParticleContainer
setBCForDCBeam	src/Algorithms/.PartBunch.cpp	/^void PartBunch::setBCForDCBeam() {$/;"	f	class:PartBunch
setBCForDCBeam	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setBCForDCBeam() {$/;"	f	class:PartBunch
setBCForDCBeam	src/PartBunch/PartBunch.hpp	/^    void setBCForDCBeam() {$/;"	f	class:PartBunch
setBConds	src/Algorithms/.PartBunchBase.h	/^    void setBConds(const ParticleBConds<Position_t, Dimension>& bc) {$/;"	f	class:PartBunch
setBeamFrequency	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setBeamFrequency(double f) {$/;"	f	class:PartBunch
setBeamFrequency	src/PartBunch/PartBunch.hpp	/^    void setBeamFrequency(double v) {$/;"	f	class:PartBunch
setBeamPRInit	src/AbsBeamline/Ring.h	/^    void setBeamPRInit(double pRInit) {$/;"	f	class:Ring
setBeamPhiInit	src/AbsBeamline/Ring.h	/^    void setBeamPhiInit(double phiInit) {$/;"	f	class:Ring
setBeamRInit	src/AbsBeamline/Ring.h	/^    void setBeamRInit(double rInit) {$/;"	f	class:Ring
setBendAngle	src/AbsBeamline/MultipoleT.h	/^inline void MultipoleT::setBendAngle(double angle) {$/;"	f	class:MultipoleT
setBendAngle	src/AbsBeamline/MultipoleTBase.h	/^inline void MultipoleTBase::setBendAngle(const double& \/*angle*\/) {$/;"	f	class:MultipoleTBase
setBendAngle	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    void MultipoleTCurvedConstRadius::setBendAngle(const double &angle) {$/;"	f	class:MultipoleTCurvedConstRadius
setBendAngle	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    void MultipoleTCurvedVarRadius::setBendAngle(const double &angle) {$/;"	f	class:MultipoleTCurvedVarRadius
setBendAngle	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^void PlanarArcGeometry::setBendAngle(double phi) {$/;"	f	class:PlanarArcGeometry
setBendAngle	src/BeamlineGeometry/RBendGeometry.cpp	/^void RBendGeometry::setBendAngle(double angle) {$/;"	f	class:RBendGeometry
setBeta	src/Algorithms/PartData.cpp	/^void PartData::setBeta(double v) {$/;"	f	class:PartData
setBinCharge	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setBinCharge(int bin) {$/;"	f	class:PartBunch
setBinCharge	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setBinCharge(int bin, double q) {$/;"	f	class:PartBunch
setBinCharge	src/PartBunch/PartBunch.hpp	/^    void setBinCharge(int bin) {$/;"	f	class:PartBunch
setBinCharge	src/PartBunch/PartBunch.hpp	/^    void setBinCharge(int bin, double q) {$/;"	f	class:PartBunch
setBinEmitted	src/Algorithms/PartBins.h	/^    void setBinEmitted(int bin) {binsEmitted_m[bin] = true;}$/;"	f	class:PartBins
setBins	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    void setBins(std::shared_ptr<AdaptBins_t> bins) { bins_m = bins; } \/\/ TODO: Binning$/;"	f	class:AlpineManager
setBins	src/PartBunch/PartBunch.hpp	/^    void setBins(std::shared_ptr<AdaptBins_t> bins) { bins_m = bins; } \/\/ TODO: Binning$/;"	f	class:PartBunch
setBool	src/Attributes/Attributes.cpp	/^    void setBool(Attribute &attr, bool val) {$/;"	f	namespace:Attributes
setBoolArray	src/Attributes/Attributes.cpp	/^    void setBoolArray(Attribute &attr, const std::vector<bool> &value) {$/;"	f	namespace:Attributes
setBoundaryGeometry	src/AbsBeamline/ElementBase.cpp	/^void ElementBase::setBoundaryGeometry(BoundaryGeometry* geo) {$/;"	f	class:ElementBase
setBoundingBoxLength	src/AbsBeamline/MultipoleT.h	/^inline void MultipoleT::setBoundingBoxLength(const double& boundingBoxLength) {$/;"	f	class:MultipoleT
setBoundingBoxLength	src/AbsBeamline/MultipoleTBase.h	/^inline void MultipoleTBase::setBoundingBoxLength(const double& boundingBoxLength) {$/;"	f	class:MultipoleTBase
setBx	src/Fields/BDipoleField.cpp	/^void BDipoleField::setBx(double value) {$/;"	f	class:BDipoleField
setBx	src/Fields/ConstBField.cpp	/^void ConstBField::setBx(double \/*B*\/)$/;"	f	class:ConstBField
setBy	src/Fields/BDipoleField.cpp	/^void BDipoleField::setBy(double value) {$/;"	f	class:BDipoleField
setBy	src/Fields/ConstBField.cpp	/^void ConstBField::setBy(double \/*B*\/)$/;"	f	class:ConstBField
setBz	src/BeamlineCore/SolenoidRep.cpp	/^void SolenoidRep::setBz(double Bz) {$/;"	f	class:SolenoidRep
setBz	src/Fields/ConstBField.cpp	/^void ConstBField::setBz(double \/*B*\/)$/;"	f	class:ConstBField
setBz	src/Fields/ConstBzField.cpp	/^void ConstBzField::setBz(double value) {$/;"	f	class:ConstBzField
setCSTrafoGlobal2Local	src/AbsBeamline/ElementBase.h	/^inline void ElementBase::setCSTrafoGlobal2Local(const CoordinateSystemTrafo& trafo) {$/;"	f	class:ElementBase
setCavityType	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::setCavityType(const std::string& name) {$/;"	f	class:RFCavity
setCentre	src/AbsBeamline/ScalingFFAMagnet.h	/^    void setCentre(Vector_t<double, 3> centre) {centre_m = centre;}$/;"	f	class:ScalingFFAMagnet
setCharge	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setCharge(double q) {$/;"	f	class:PartBunch
setCharge	src/PartBunch/PartBunch.hpp	/^    void setCharge() {$/;"	f	class:PartBunch
setChargeZeroPart	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setChargeZeroPart(double q) {$/;"	f	class:PartBunch
setCoefficient	src/AbsBeamline/MultipoleTFunctions/Polynomial.cpp	/^void Polynomial::setCoefficient(const int &coefficient,$/;"	f	class:polynomial::Polynomial
setCoefficient	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^void TwoPolynomial::setCoefficient(const int &coefficient,$/;"	f	class:polynomial::TwoPolynomial
setCoefficients	src/AbsBeamline/EndFieldModel/Enge.h	/^    void setCoefficients(std::vector<double> a) {_a = a;}$/;"	f	class:endfieldmodel::Enge
setCollectionType	src/AbsBeamline/Monitor.h	/^inline void Monitor::setCollectionType(CollectionType type) {$/;"	f	class:Monitor
setComponent	src/Expressions/ADeferred.h	/^    void ADeferred<T>::setComponent$/;"	f	class:Expressions::ADeferred
setComponent	src/Fields/BSingleMultipoleField.h	/^void BSingleMultipoleField<order>::setComponent(double value) {$/;"	f	class:BSingleMultipoleField
setComponent	src/Utilities/RingSection.h	/^    inline void setComponent(Component* component) {$/;"	f	class:RingSection
setComponentOrientation	src/Utilities/RingSection.h	/^inline void RingSection::setComponentOrientation(Vector_t<double, 3> orientation) {$/;"	f	class:RingSection
setComponentPosition	src/Utilities/RingSection.h	/^    inline void setComponentPosition(Vector_t<double, 3> position) {$/;"	f	class:RingSection
setConstantSpacing	src/Fields/Interpolation/NDGrid.cpp	/^void NDGrid::setConstantSpacing(double tolerance_m) {$/;"	f	class:interpolation::NDGrid
setConstantSpacing	src/Fields/Interpolation/NDGrid.h	/^void NDGrid::setConstantSpacing(bool spacing) {$/;"	f	class:interpolation::NDGrid
setConstantSpacing	src/Fields/Interpolation/ThreeDGrid.cpp	/^void ThreeDGrid::setConstantSpacing() {$/;"	f	class:interpolation::ThreeDGrid
setConstantSpacing	src/Fields/Interpolation/ThreeDGrid.h	/^void ThreeDGrid::setConstantSpacing(bool spacing) {$/;"	f	class:interpolation::ThreeDGrid
setCoord	src/Fields/Interpolation/NDGrid.h	/^void NDGrid::setCoord(int dimension, int nCoords, double * x) {$/;"	f	class:interpolation::NDGrid
setCounter	src/Beamlines/FlaggedElmPtr.h	/^inline void FlaggedElmPtr::setCounter(int count) const {$/;"	f	class:FlaggedElmPtr
setCouplingConstant	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setCouplingConstant(double c) {$/;"	f	class:PartBunch
setCouplingConstant	src/PartBunch/PartBunch.hpp	/^    void setCouplingConstant(double c) {$/;"	f	class:PartBunch
setCurrentBinCount	src/PartBunch/Binning/AdaptBins.h	/^        void setCurrentBinCount(bin_index_type nBins) {$/;"	f	class:ParticleBinning::AdaptBins
setCurrentSCoordinate	src/AbsBeamline/ElementBase.cpp	/^void ElementBase::setCurrentSCoordinate(double s) {$/;"	f	class:ElementBase
setCurvature	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^void PlanarArcGeometry::setCurvature(double hh) {$/;"	f	class:PlanarArcGeometry
setDKS	src/AbsBeamline/Solenoid.cpp	/^void Solenoid::setDKS(double ks) {$/;"	f	class:Solenoid
setDR	tests/opal_test_utilities/Maxwell.h	/^    void setDR(Vector_t dR) {dR_m = dR;}$/;"	f	class:MaxwellTest
setDataSink	src/AbstractObjects/OpalData.cpp	/^void OpalData::setDataSink(DataSink* s) {$/;"	f	class:OpalData
setDecomp	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    void setDecomp(std::array<bool, Dim> decomp) { decomp_m = decomp; }$/;"	f	class:FieldContainer
setDecomp	src/PartBunch/FieldContainer.hpp	/^    void setDecomp(std::array<bool, Dim> decomp) {$/;"	f	class:FieldContainer
setDefault	src/AbstractObjects/Attribute.cpp	/^void Attribute::setDefault() {$/;"	f	class:Attribute
setDeferred	src/AbstractObjects/Attribute.cpp	/^void Attribute::setDeferred(bool flag) {$/;"	f	class:Attribute
setDeferred	src/AbstractObjects/AttributeHandler.cpp	/^void AttributeHandler::setDeferred(bool flag) {$/;"	f	class:AttributeHandler
setDesignEnergy	src/AbsBeamline/Component.h	/^inline void Component::setDesignEnergy(const double& \/*energy*\/, bool \/*changeable*\/) {$/;"	f	class:Component
setDesignEnergy	src/AbsBeamline/Corrector.cpp	/^void Corrector::setDesignEnergy(const double& ekin, bool changeable) {$/;"	f	class:Corrector
setDesignEnergy	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setDesignEnergy(const double& ekin, bool) {$/;"	f	class:RFCavity
setDesignEnergy	src/Algorithms/OrbitThreader.cpp	/^void OrbitThreader::setDesignEnergy($/;"	f	class:OrbitThreader
setDimensions	src/AbsBeamline/PluginElement.cpp	/^void PluginElement::setDimensions(double xstart, double xend, double ystart, double yend) {$/;"	f	class:PluginElement
setDipoleConstant	src/AbsBeamline/MultipoleT.cpp	/^void MultipoleT::setDipoleConstant(double B0) {$/;"	f	class:MultipoleT
setDipoleConstant	src/AbsBeamline/MultipoleTBase.h	/^inline void MultipoleTBase::setDipoleConstant(const double& B0) {$/;"	f	class:MultipoleTBase
setDipoleConstant	src/AbsBeamline/ScalingFFAMagnet.h	/^    void setDipoleConstant(double Bz) {Bz_m = Bz;}$/;"	f	class:ScalingFFAMagnet
setDirty	src/AbstractObjects/Object.cpp	/^void Object::setDirty(bool dirty) {$/;"	f	class:Object
setDisplacement	src/BeamlineGeometry/Euclid3D.cpp	/^void Euclid3D::setDisplacement(const Vector3D &v) {$/;"	f	class:Euclid3D
setDist	src/Distribution/Distribution.cpp	/^void Distribution::setDist() {$/;"	f	class:Distribution
setDistParametersFlatTop	src/Distribution/Distribution.cpp	/^void Distribution::setDistParametersFlatTop() {$/;"	f	class:Distribution
setDistParametersGauss	src/Distribution/Distribution.cpp	/^void Distribution::setDistParametersGauss() {$/;"	f	class:Distribution
setDistParametersMultiVariateGauss	src/Distribution/Distribution.cpp	/^void Distribution::setDistParametersMultiVariateGauss() {$/;"	f	class:Distribution
setDistType	src/Distribution/Distribution.cpp	/^void Distribution::setDistType() {$/;"	f	class:Distribution
setDistribution	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setDistribution(Distribution* d,$/;"	f	class:PartBunch
setE	src/Algorithms/PartData.cpp	/^void PartData::setE(double energy) {$/;"	f	class:PartData
setE	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    void setE(VField_t<T, Dim>& E) { E_m = E; }$/;"	f	class:FieldContainer
setE	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    void setE(VField_t<T, Dim> *E){ E_m = E; }$/;"	f	class:FieldSolver
setE	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        void setE(VField_t<T, Dim>* E) { E_m = E; }$/;"	f	class:LoadBalancer
setE	src/PartBunch/FieldContainer.hpp	/^    void setE(VField_t<T, Dim>& E) {$/;"	f	class:FieldContainer
setE	src/PartBunch/FieldSolver.hpp	/^    void setE(VField_t<T, Dim>* E) {$/;"	f	class:FieldSolver
setE	src/PartBunch/LoadBalancer.hpp	/^    void setE(VField_t<T, Dim>* E) {$/;"	f	class:LoadBalancer
setEcho	src/OpalParser/FileStream.cpp	/^void FileStream::setEcho(bool flag) {$/;"	f	class:FileStream
setEdgeConstants	src/Fields/FM1DProfile2.cpp	/^void FM1DProfile2::setEdgeConstants($/;"	f	class:FM1DProfile2
setEdgeConstants	src/Fields/Fieldmap.cpp	/^void Fieldmap::setEdgeConstants($/;"	f	class:Fieldmap
setElement	src/AbstractObjects/Element.h	/^inline void Element::setElement(ElementBase *base) {$/;"	f	class:Element
setElement	src/Beamlines/ElmPtr.h	/^inline void ElmPtr::setElement(ElementBase *elem) {$/;"	f	class:ElmPtr
setElementLength	src/AbsBeamline/ElementBase.h	/^inline void ElementBase::setElementLength(double length) {$/;"	f	class:ElementBase
setElementLength	src/BeamlineGeometry/Euclid3DGeometry.cpp	/^void Euclid3DGeometry::setElementLength(double length) {$/;"	f	class:Euclid3DGeometry
setElementLength	src/BeamlineGeometry/Geometry.cpp	/^void BGeometryBase::setElementLength(double)$/;"	f	class:BGeometryBase
setElementLength	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^void PlanarArcGeometry::setElementLength(double l) {$/;"	f	class:PlanarArcGeometry
setElementLength	src/BeamlineGeometry/StraightGeometry.cpp	/^void StraightGeometry::setElementLength(double l) {$/;"	f	class:StraightGeometry
setElementLength	src/BeamlineGeometry/VarRadiusGeometry.h	/^    void VarRadiusGeometry::setElementLength(double length) {$/;"	f	class:VarRadiusGeometry
setElementPosition	src/AbsBeamline/ElementBase.h	/^inline void ElementBase::setElementPosition(double elemedge) {$/;"	f	class:ElementBase
setEnd	src/Utilities/ClassicField.h	/^inline void ClassicField::setEnd(const double & z) {$/;"	f	class:ClassicField
setEndDirection	src/AbsBeamline/Offset.cpp	/^void Offset::setEndDirection(Vector_t<double, 3> direction) {$/;"	f	class:Offset
setEndField	src/AbsBeamline/ScalingFFAMagnet.cpp	/^void ScalingFFAMagnet::setEndField(endfieldmodel::EndFieldModel* endField) {$/;"	f	class:ScalingFFAMagnet
setEndField	src/AbsBeamline/VerticalFFAMagnet.cpp	/^void VerticalFFAMagnet::setEndField(endfieldmodel::EndFieldModel* endField) {$/;"	f	class:VerticalFFAMagnet
setEndFieldModel	src/AbsBeamline/EndFieldModel/EndFieldModel.cpp	/^void EndFieldModel::setEndFieldModel(std::string name, $/;"	f	class:endfieldmodel::EndFieldModel
setEndFieldName	src/AbsBeamline/ScalingFFAMagnet.h	/^    void setEndFieldName(std::string name) {endFieldName_m = name;}$/;"	f	class:ScalingFFAMagnet
setEndNormal	src/Utilities/RingSection.h	/^inline void RingSection::setEndNormal(Vector_t<double, 3> orientation) {$/;"	f	class:RingSection
setEndPosition	src/AbsBeamline/Offset.cpp	/^void Offset::setEndPosition(Vector_t<double, 3> position) {$/;"	f	class:Offset
setEndPosition	src/Utilities/RingSection.h	/^    inline void setEndPosition(Vector_t<double, 3> pos) {$/;"	f	class:RingSection
setEnergyBins	src/PartBunch/PartBunch.hpp	/^    void setEnergyBins(int numberOfEnergyBins) {$/;"	f	class:PartBunch
setEngeDiffIndices	src/AbsBeamline/EndFieldModel/Enge.cpp	/^void Enge::setEngeDiffIndices(size_t n) {$/;"	f	class:endfieldmodel::Enge
setEngeEnd	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^void AsymmetricEnge::setEngeEnd(std::shared_ptr<Enge> enge) {$/;"	f	class:endfieldmodel::AsymmetricEnge
setEngeStart	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^void AsymmetricEnge::setEngeStart(std::shared_ptr<Enge> enge) {$/;"	f	class:endfieldmodel::AsymmetricEnge
setEntranceAngle	src/AbsBeamline/MultipoleT.h	/^inline void MultipoleT::setEntranceAngle(double entranceAngle) {$/;"	f	class:MultipoleT
setEntranceAngle	src/AbsBeamline/MultipoleTBase.h	/^inline void MultipoleTBase::setEntranceAngle(const double& entranceAngle) {$/;"	f	class:MultipoleTBase
setExitFaceSlope	src/AbsBeamline/Component.h	/^inline void Component::setExitFaceSlope(const double& m) {$/;"	f	class:Component
setExitFaceSlope	src/Fields/FM1DProfile2.cpp	/^void FM1DProfile2::setExitFaceSlope(const double& m) {$/;"	f	class:FM1DProfile2
setEz	src/Fields/ConstEzField.cpp	/^void ConstEzField::setEz(double value) {$/;"	f	class:ConstEzField
setF	src/Channels/IndexedChannel.h	/^    void (T::*setF)(int, double);$/;"	m	class:IndexedChannel
setF	src/Channels/IndirectChannel.h	/^    void (T::*setF)(double);$/;"	m	class:IndirectChannel
setF	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^void Interpolator3dGridTo1d::setF(double*** inF) {$/;"	f	class:interpolation::Interpolator3dGridTo1d
setFL	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    void setFL(std::shared_ptr<FieldLayout_t<Dim>>& fl) { fl_m = fl; }$/;"	f	class:FieldContainer
setFL	src/PartBunch/FieldContainer.hpp	/^    void setFL(std::shared_ptr<FieldLayout_t<Dim>>& fl) {$/;"	f	class:FieldContainer
setFailed	tests/opal_test_utilities/SilenceTest.cpp	/^void OpalTestUtilities::SilenceTest::setFailed() {$/;"	f	class:OpalTestUtilities::SilenceTest
setFast	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setFast(bool fast) {$/;"	f	class:RFCavity
setFast	src/AbsBeamline/Solenoid.cpp	/^void Solenoid::setFast(bool fast) {$/;"	f	class:Solenoid
setField	src/BeamlineCore/MultipoleRep.cpp	/^void MultipoleRep::setField(const BMultipoleField &aField) {$/;"	f	class:MultipoleRep
setField	tests/opal_test_utilities/Maxwell.h	/^    void setField(Component* field) {field_m.reset(field);}$/;"	f	class:MaxwellTest
setFieldGap	src/Fields/FM1DProfile1.cpp	/^void FM1DProfile1::setFieldGap(double gap) {$/;"	f	class:FM1DProfile1
setFieldGap	src/Fields/Fieldmap.cpp	/^void Fieldmap::setFieldGap(double \/*gap*\/) {$/;"	f	class:Fieldmap
setFieldIndex	src/AbsBeamline/ScalingFFAMagnet.h	/^    void setFieldIndex(double k) {k_m = k;}$/;"	f	class:ScalingFFAMagnet
setFieldIndex	src/AbsBeamline/VerticalFFAMagnet.h	/^    void setFieldIndex(double index) {$/;"	f	class:VerticalFFAMagnet
setFieldLength	src/Fields/Fieldmap.cpp	/^void Fieldmap::setFieldLength(const double&){};$/;"	f	class:Fieldmap
setFieldMapFN	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setFieldMapFN(const std::string& fn) {$/;"	f	class:RFCavity
setFieldMapFN	src/AbsBeamline/Solenoid.cpp	/^void Solenoid::setFieldMapFN(std::string fn) {$/;"	f	class:Solenoid
setFieldSolver	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        void setFieldSolver(std::shared_ptr<FieldSolver_t> fs) { fs_m = fs; }$/;"	f	class:LoadBalancer
setFieldSolver	src/PartBunch/LoadBalancer.hpp	/^    void setFieldSolver(std::shared_ptr<FieldSolver_t> fs) {$/;"	f	class:LoadBalancer
setFieldSolverCmdType	src/Structure/FieldSolverCmd.cpp	/^void FieldSolverCmd::setFieldSolverCmdType() {$/;"	f	class:FieldSolverCmd
setFlag	src/AbstractObjects/Object.cpp	/^void Object::setFlag(bool flag) {$/;"	f	class:Object
setFlagDeleteOnTransverseExit	src/AbsBeamline/ElementBase.h	/^inline void ElementBase::setFlagDeleteOnTransverseExit(bool flag) {$/;"	f	class:ElementBase
setFrequency	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setFrequency(double freq) {$/;"	f	class:RFCavity
setFrequency	src/BeamlineCore/RFCavityRep.cpp	/^void RFCavityRep::setFrequency(double frequency) {$/;"	f	class:RFCavityRep
setFrequency	src/BeamlineCore/TravelingWaveRep.cpp	/^void TravelingWaveRep::setFrequency(double frequency) {$/;"	f	class:TravelingWaveRep
setFrequency	src/Fields/Astra1DDynamic.cpp	/^void Astra1DDynamic::setFrequency(double freq) {$/;"	f	class:Astra1DDynamic
setFrequency	src/Fields/Astra1DDynamic_fast.cpp	/^void Astra1DDynamic_fast::setFrequency(double freq) {$/;"	f	class:Astra1DDynamic_fast
setFrequency	src/Fields/Astra1DElectroStatic.cpp	/^void Astra1DElectroStatic::setFrequency(double \/*freq*\/) {$/;"	f	class:Astra1DElectroStatic
setFrequency	src/Fields/Astra1DElectroStatic_fast.cpp	/^void Astra1DElectroStatic_fast::setFrequency(double \/*freq*\/) {$/;"	f	class:Astra1DElectroStatic_fast
setFrequency	src/Fields/Astra1DMagnetoStatic.cpp	/^void Astra1DMagnetoStatic::setFrequency(double \/*freq*\/) {$/;"	f	class:Astra1DMagnetoStatic
setFrequency	src/Fields/Astra1DMagnetoStatic_fast.cpp	/^void Astra1DMagnetoStatic_fast::setFrequency(double \/*freq*\/) {$/;"	f	class:Astra1DMagnetoStatic_fast
setFrequency	src/Fields/FM1DDynamic.cpp	/^void FM1DDynamic::setFrequency(double frequency) {$/;"	f	class:FM1DDynamic
setFrequency	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::setFrequency(double freq) {$/;"	f	class:FM1DDynamic_fast
setFrequency	src/Fields/FM1DElectroStatic.cpp	/^void FM1DElectroStatic::setFrequency(double \/*freq*\/) {$/;"	f	class:FM1DElectroStatic
setFrequency	src/Fields/FM1DElectroStatic_fast.cpp	/^void FM1DElectroStatic_fast::setFrequency(double \/*freq*\/) {$/;"	f	class:FM1DElectroStatic_fast
setFrequency	src/Fields/FM1DMagnetoStatic.cpp	/^void FM1DMagnetoStatic::setFrequency(double \/*freq*\/) {$/;"	f	class:FM1DMagnetoStatic
setFrequency	src/Fields/FM1DMagnetoStatic_fast.cpp	/^void FM1DMagnetoStatic_fast::setFrequency(double \/*freq*\/) {$/;"	f	class:FM1DMagnetoStatic_fast
setFrequency	src/Fields/FM1DProfile1.cpp	/^void FM1DProfile1::setFrequency(double \/*freq*\/) {$/;"	f	class:FM1DProfile1
setFrequency	src/Fields/FM1DProfile2.cpp	/^void FM1DProfile2::setFrequency(double \/*freq*\/) {$/;"	f	class:FM1DProfile2
setFrequency	src/Fields/FM2DDynamic.cpp	/^void FM2DDynamic::setFrequency(double freq) {$/;"	f	class:FM2DDynamic
setFrequency	src/Fields/FM2DElectroStatic.cpp	/^void FM2DElectroStatic::setFrequency(double \/*freq*\/) {$/;"	f	class:FM2DElectroStatic
setFrequency	src/Fields/FM2DMagnetoStatic.cpp	/^void FM2DMagnetoStatic::setFrequency(double \/*freq*\/) {$/;"	f	class:FM2DMagnetoStatic
setFrequency	src/Fields/FM3DDynamic.cpp	/^void FM3DDynamic::setFrequency(double freq) {$/;"	f	class:FM3DDynamic
setFrequency	src/Fields/FM3DH5BlockBase.cpp	/^void FM3DH5BlockBase::setFrequency(double freq) {$/;"	f	class:FM3DH5BlockBase
setFrequency	src/Fields/FM3DMagnetoStatic.h	/^void FM3DMagnetoStatic::setFrequency(double \/*freq*\/) { }$/;"	f	class:FM3DMagnetoStatic
setFrequency	src/Fields/FM3DMagnetoStaticExtended.cpp	/^void FM3DMagnetoStaticExtended::setFrequency(double \/*freq*\/) {$/;"	f	class:FM3DMagnetoStaticExtended
setFrequency	src/Fields/FMDummy.cpp	/^void FMDummy::setFrequency(double \/*freq*\/) {$/;"	f	class:FMDummy
setFrequency	src/Fields/OscillatingField.h	/^void OscillatingField<Field>::setFrequency(double freq)$/;"	f	class:OscillatingField
setFrequency	src/Fields/SectorMagneticFieldMap.h	/^    void setFrequency(double) {}$/;"	f	class:SectorMagneticFieldMap
setFrequencyModel	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setFrequencyModel(std::shared_ptr<AbstractTimeDependence> frequencyTD) {$/;"	f	class:RFCavity
setFrequencyModelName	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setFrequencyModelName(std::string name) {$/;"	f	class:RFCavity
setFrequencym	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setFrequencym(double freq) {$/;"	f	class:RFCavity
setFringeField	src/AbsBeamline/MultipoleT.cpp	/^bool MultipoleT::setFringeField(double s0, double lambda_l, double lambda_r) {$/;"	f	class:MultipoleT
setFringeField	src/AbsBeamline/MultipoleTBase.cpp	/^bool MultipoleTBase::setFringeField(const double &s0,$/;"	f	class:MultipoleTBase
setGamma	src/Algorithms/PartBins.h	/^    void setGamma(double gamma) { gamma_m = gamma;}$/;"	f	class:PartBins
setGamma	src/Algorithms/PartData.cpp	/^void PartData::setGamma(double v) {$/;"	f	class:PartData
setGapWidth	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::setGapWidth(double gapwidth) {$/;"	f	class:RFCavity
setGeom	src/AbsBeamline/PluginElement.cpp	/^void PluginElement::setGeom(const double dist) {$/;"	f	class:PluginElement
setGlobalGeometry	src/AbstractObjects/OpalData.cpp	/^void OpalData::setGlobalGeometry(BoundaryGeometry* bg) {$/;"	f	class:OpalData
setGlobalMeanR	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setGlobalMeanR(Vector_t<double, 3> globalMeanR) {$/;"	f	class:PartBunch
setGlobalMeanR	src/PartBunch/PartBunch.hpp	/^    void setGlobalMeanR(Vector_t<double, Dim> globalMeanR) {$/;"	f	class:PartBunch
setGlobalPhaseShift	src/AbstractObjects/OpalData.cpp	/^void OpalData::setGlobalPhaseShift(double shift) {$/;"	f	class:OpalData
setGlobalToLocalQuaternion	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setGlobalToLocalQuaternion(Quaternion_t globalToLocalQuaternion) {$/;"	f	class:PartBunch
setGlobalToLocalQuaternion	src/PartBunch/PartBunch.hpp	/^    void setGlobalToLocalQuaternion(Quaternion_t globalToLocalQuaternion) {$/;"	f	class:PartBunch
setGlobalTrackStep	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setGlobalTrackStep(long long n) {$/;"	f	class:PartBunch
setGlobalTrackStep	src/PartBunch/PartBunch.hpp	/^    void setGlobalTrackStep(long long n) {$/;"	f	class:PartBunch
setGrid	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^void Interpolator3dGridTo1d::setGrid(ThreeDGrid* grid) {$/;"	f	class:interpolation::Interpolator3dGridTo1d
setGrid	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^void Interpolator3dGridTo3d::setGrid(ThreeDGrid* grid) {$/;"	f	class:interpolation::Interpolator3dGridTo3d
setHarmonicNumber	src/AbsBeamline/Ring.h	/^    void setHarmonicNumber(double cyclHarm) {$/;"	f	class:Ring
setHr	src/.Solvers/IrregularDomain.h	/^    void setHr(Vector_t<double, 3> hr) {$/;"	f	class:IrregularDomain
setHr	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    void setHr(const Vector_t<double, Dim>& hr) { hr_m = hr; }$/;"	f	class:FieldContainer
setHr	src/PartBunch/FieldContainer.hpp	/^    void setHr(const Vector_t<double, Dim>& hr) {$/;"	f	class:FieldContainer
setIgnore	src/BeamlineCore/RFCavityRep.cpp	/^void RFCavityRep::setIgnore(bool ignore) {$/;"	f	class:RFCavityRep
setIgnore	src/BeamlineCore/TravelingWaveRep.cpp	/^void TravelingWaveRep::setIgnore(bool ignore) {$/;"	f	class:TravelingWaveRep
setInOPALCyclMode	src/AbstractObjects/OpalData.cpp	/^void OpalData::setInOPALCyclMode() {$/;"	f	class:OpalData
setInOPALTMode	src/AbstractObjects/OpalData.cpp	/^void OpalData::setInOPALTMode() {$/;"	f	class:OpalData
setInPrepState	src/AbstractObjects/OpalData.cpp	/^void OpalData::setInPrepState(bool state) {$/;"	f	class:OpalData
setInitialDirection	src/Beamlines/TBeamline.h	/^inline void TBeamline<T>::setInitialDirection(const Quaternion& trafoTo) {$/;"	f	class:TBeamline
setInput	src/Utilities/SDDSParser.cpp	/^void SDDS::SDDSParser::setInput(const std::string &input) {$/;"	f	class:SDDS::SDDSParser
setInterpolator	src/Fields/SectorMagneticFieldMap.cpp	/^void SectorMagneticFieldMap::setInterpolator(VectorMap* interpolator) {$/;"	f	class:SectorMagneticFieldMap
setIsClosed	src/AbsBeamline/Ring.h	/^    void setIsClosed(bool isClosed) {$/;"	f	class:Ring
setIsLocal	src/AbsBeamline/Offset.cpp	/^void Offset::setIsLocal(bool isLocal) {$/;"	f	class:Offset
setKS	src/AbsBeamline/Solenoid.cpp	/^void Solenoid::setKS(double ks) {$/;"	f	class:Solenoid
setKickField	src/AbsBeamline/Corrector.h	/^void Corrector::setKickField(const Vector_t<double, 3> &k0) {$/;"	f	class:Corrector
setKickX	src/AbsBeamline/Corrector.h	/^void Corrector::setKickX(double k) {$/;"	f	class:Corrector
setKickY	src/AbsBeamline/Corrector.h	/^void Corrector::setKickY(double k) {$/;"	f	class:Corrector
setLambda	src/AbsBeamline/EndFieldModel/Enge.h	/^    inline void setLambda(double lambda) {_lambda = lambda;}$/;"	f	class:endfieldmodel::Enge
setLambda	src/AbsBeamline/EndFieldModel/Tanh.h	/^    inline void setLambda(double lambda) {_lambda = lambda;}$/;"	f	class:endfieldmodel::Tanh
setLambdaLeft	src/BeamlineGeometry/VarRadiusGeometry.h	/^    void VarRadiusGeometry::setLambdaLeft(const double &lambda_left) {$/;"	f	class:VarRadiusGeometry
setLambdaRight	src/BeamlineGeometry/VarRadiusGeometry.h	/^    void VarRadiusGeometry::setLambdaRight(const double &lambda_right) {$/;"	f	class:VarRadiusGeometry
setLastStep	src/AbstractObjects/OpalData.cpp	/^void OpalData::setLastStep(const int& step) {$/;"	f	class:OpalData
setLatticePhiInit	src/AbsBeamline/Ring.h	/^    void setLatticePhiInit(double phiInit) {$/;"	f	class:Ring
setLatticeRInit	src/AbsBeamline/Ring.h	/^    void setLatticeRInit(double rInit) {$/;"	f	class:Ring
setLatticeThetaInit	src/AbsBeamline/Ring.h	/^    void setLatticeThetaInit(double thetaInit) {$/;"	f	class:Ring
setLength	src/AbsBeamline/MultipoleT.h	/^inline void MultipoleT::setLength(double length) {$/;"	f	class:MultipoleT
setLength	src/AbsBeamline/MultipoleTBase.h	/^inline void MultipoleTBase::setLength(const double& length) {$/;"	f	class:MultipoleTBase
setLength	src/Lines/SequenceMember.cpp	/^void SequenceMember::setLength(double drift) {$/;"	f	class:SequenceMember
setLoadBalanceThreshold	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    void setLoadBalanceThreshold(double lbt_) { lbt_m = lbt_; }$/;"	f	class:AlpineManager
setLoadBalanceThreshold	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        void setLoadBalanceThreshold(double threshold) { loadbalancethreshold_m = threshold; }$/;"	f	class:LoadBalancer
setLoadBalanceThreshold	src/PartBunch/LoadBalancer.hpp	/^    void setLoadBalanceThreshold(double threshold) {$/;"	f	class:LoadBalancer
setLocalBinCount	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setLocalBinCount(size_t num, int bin) {$/;"	f	class:PartBunch
setLocalBinCount	src/PartBunch/PartBunch.hpp	/^    void setLocalBinCount(size_t num, int bin) {$/;"	f	class:PartBunch
setLocalNum	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setLocalNum(size_t n) {$/;"	f	class:PartBunch
setLocalTrackStep	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setLocalTrackStep(long long n) {$/;"	f	class:PartBunch
setLocalTrackStep	src/PartBunch/PartBunch.hpp	/^    void setLocalTrackStep(long long n) {$/;"	f	class:PartBunch
setLossDataSink	src/AbsBeamline/Ring.cpp	/^void Ring::setLossDataSink(LossDataSink* sink) {$/;"	f	class:Ring
setM	src/Algorithms/PartData.h	/^    inline void setM(double m){mass = m;}$/;"	f	class:PartData
setMass	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setMass(double mass) {$/;"	f	class:PartBunch
setMass	src/PartBunch/PartBunch.hpp	/^    void setMass() {$/;"	f	class:PartBunch
setMassZeroPart	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setMassZeroPart(double mass) {$/;"	f	class:PartBunch
setMaxOrder	src/AbsBeamline/MultipoleT.cpp	/^void MultipoleT::setMaxOrder(std::size_t maxOrder) {$/;"	f	class:MultipoleT
setMaxOrder	src/AbsBeamline/MultipoleTBase.h	/^inline void MultipoleTBase::setMaxOrder(const std::size_t& maxOrder) {$/;"	f	class:MultipoleTBase
setMaxOrder	src/AbsBeamline/MultipoleTCurvedConstRadius.cpp	/^void MultipoleTCurvedConstRadius::setMaxOrder(const std::size_t &maxOrder) {$/;"	f	class:MultipoleTCurvedConstRadius
setMaxOrder	src/AbsBeamline/MultipoleTCurvedVarRadius.cpp	/^void MultipoleTCurvedVarRadius::setMaxOrder(const std::size_t &maxOrder) {$/;"	f	class:MultipoleTCurvedVarRadius
setMaxOrder	src/AbsBeamline/MultipoleTStraight.cpp	/^void MultipoleTStraight::setMaxOrder(const std::size_t &maxOrder) {$/;"	f	class:MultipoleTStraight
setMaxOrder	src/AbsBeamline/ScalingFFAMagnet.h	/^    void setMaxOrder(size_t maxOrder) {maxOrder_m = maxOrder;}$/;"	f	class:ScalingFFAMagnet
setMaxOrder	src/AbsBeamline/VerticalFFAMagnet.cpp	/^void VerticalFFAMagnet::setMaxOrder(size_t maxOrder) {$/;"	f	class:VerticalFFAMagnet
setMaxPhase	src/AbstractObjects/OpalData.cpp	/^void OpalData::setMaxPhase(std::string elName, double phi) {$/;"	f	class:OpalData
setMaxSorder	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^void TwoPolynomial::setMaxSorder(const std::size_t &maxSorder) {$/;"	f	class:polynomial::TwoPolynomial
setMaxTrackSteps	src/AbstractObjects/OpalData.cpp	/^void OpalData::setMaxTrackSteps(unsigned long long s) {$/;"	f	class:OpalData
setMaxXOrder	src/AbsBeamline/MultipoleT.h	/^inline void MultipoleT::setMaxXOrder(std::size_t maxOrderX) {$/;"	f	class:MultipoleT
setMaxXOrder	src/AbsBeamline/MultipoleTCurvedConstRadius.h	/^    void MultipoleTCurvedConstRadius::setMaxXOrder($/;"	f	class:MultipoleTCurvedConstRadius
setMaxXOrder	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    void MultipoleTCurvedVarRadius::setMaxXOrder($/;"	f	class:MultipoleTCurvedVarRadius
setMaxXorder	src/AbsBeamline/MultipoleTFunctions/Polynomial.h	/^    void Polynomial::setMaxXorder(const std::size_t &maxXorder) {$/;"	f	class:polynomial::Polynomial
setMaxXorder	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^void TwoPolynomial::setMaxXorder(const std::size_t &maxXorder) {$/;"	f	class:polynomial::TwoPolynomial
setMaximumDerivative	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^void AsymmetricEnge::setMaximumDerivative(size_t n) {$/;"	f	class:endfieldmodel::AsymmetricEnge
setMaximumDerivative	src/AbsBeamline/EndFieldModel/Enge.h	/^void Enge::setMaximumDerivative(size_t n) {$/;"	f	class:endfieldmodel::Enge
setMaximumDerivative	src/AbsBeamline/EndFieldModel/Tanh.cpp	/^void Tanh::setMaximumDerivative(size_t n) {$/;"	f	class:endfieldmodel::Tanh
setMesh	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    void setMesh(Mesh_t<Dim> & mesh) { mesh_m = mesh; }$/;"	f	class:FieldContainer
setMesh	src/PartBunch/FieldContainer.hpp	/^    void setMesh(Mesh_t<Dim>& mesh) {$/;"	f	class:FieldContainer
setMinMaxZ	src/.Solvers/IrregularDomain.h	/^    void setMinMaxZ(double minz, double maxz) {$/;"	f	class:IrregularDomain
setMisalignment	src/AbsBeamline/ElementBase.h	/^inline void ElementBase::setMisalignment(const CoordinateSystemTrafo& cst) {$/;"	f	class:ElementBase
setMode	src/AbsBeamline/TravelingWave.h	/^inline void TravelingWave::setMode(double mode) {$/;"	f	class:TravelingWave
setNSlices	src/AbsBeamline/Drift.cpp	/^void Drift::setNSlices(const std::size_t& nSlices) { $/;"	f	class:Drift
setNSlices	src/AbsBeamline/Multipole.cpp	/^void Multipole::setNSlices(const std::size_t& nSlices) {$/;"	f	class:Multipole
setNX	src/Structure/FieldSolverCmd.cpp	/^void FieldSolverCmd::setNX(double value) {$/;"	f	class:FieldSolverCmd
setNY	src/Structure/FieldSolverCmd.cpp	/^void FieldSolverCmd::setNY(double value) {$/;"	f	class:FieldSolverCmd
setNZ	src/Structure/FieldSolverCmd.cpp	/^void FieldSolverCmd::setNZ(double value) {$/;"	f	class:FieldSolverCmd
setName	src/AbsBeamline/ElementBase.cpp	/^void ElementBase::setName(const std::string& name) {$/;"	f	class:ElementBase
setNegativeVerticalExtent	src/AbsBeamline/VerticalFFAMagnet.h	/^void VerticalFFAMagnet::setNegativeVerticalExtent(double negativeExtent) {$/;"	f	class:VerticalFFAMagnet
setNormalComponent	src/AbsBeamline/Multipole.cpp	/^void Multipole::setNormalComponent(int n, double v, double vError) {$/;"	f	class:Multipole
setNormalComponent	src/AbsBeamline/Multipole.h	/^inline void Multipole::setNormalComponent(int n, double v) {$/;"	f	class:Multipole
setNormalComponent	src/Fields/BMultipoleField.cpp	/^void BMultipoleField::setNormalComponent(int n, double b) {$/;"	f	class:BMultipoleField
setNr	src/.Solvers/IrregularDomain.h	/^    void setNr(IntVector_t<double, 3> nr) {$/;"	f	class:IrregularDomain
setNr	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    void setNr(const Vector_t<int, Dim>& nr_) { nr_m = nr_; }$/;"	f	class:AlpineManager
setNt	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    void setNt(int nt_) { nt_m = nt_; }$/;"	f	class:AlpineManager
setNumBunch	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setNumBunch(short n) {$/;"	f	class:PartBunch
setNumBunch	src/Algorithms/Tracker.h	/^    virtual void setNumBunch(short){};$/;"	f	class:Tracker
setNumBunch	src/PartBunch/PartBunch.hpp	/^    void setNumBunch(short n) {$/;"	f	class:PartBunch
setNumCells	src/AbsBeamline/TravelingWave.h	/^inline void TravelingWave::setNumCells(int NumCells) {$/;"	f	class:TravelingWave
setNumXY	src/.Solvers/RegularDomain.h	/^    void setNumXY(int nxy) { nxy_m = nxy; }$/;"	f	class:RegularDomain
setOff	src/Utilities/ClassicField.cpp	/^void ClassicField::setOff() {$/;"	f	class:ClassicField
setOn	src/Utilities/ClassicField.cpp	/^void ClassicField::setOn(const double& kineticEnergy) {$/;"	f	class:ClassicField
setOneAttribute	tests/opal_src/BasicActions/DumpEMFieldsTest.cpp	/^void setOneAttribute(DumpEMFields* dump, std::string name, double value) {$/;"	f	namespace:DumpEMFieldsTest
setOneAttribute	tests/opal_src/BasicActions/DumpFieldsTest.cpp	/^void setOneAttribute(DumpFields* dump, std::string name, double value) {$/;"	f	namespace:test
setOpalName	src/AbstractObjects/Object.cpp	/^void Object::setOpalName(const std::string &name) {$/;"	f	class:Object
setOpenMode	src/AbstractObjects/OpalData.cpp	/^void OpalData::setOpenMode(OpenMode openMode) {$/;"	f	class:OpalData
setOptimizerFlag	src/AbstractObjects/OpalData.cpp	/^void OpalData::setOptimizerFlag() {$/;"	f	class:OpalData
setOptionalVariables	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::setOptionalVariables() {$/;"	f	class:ParallelTracker
setOrigin3D	src/Beamlines/TBeamline.h	/^inline void TBeamline<T>::setOrigin3D(const Vector_t<double, 3>& ori) {$/;"	f	class:TBeamline
setOutputFN	src/AbsBeamline/ElementBase.cpp	/^void ElementBase::setOutputFN(const std::string fn) {$/;"	f	class:ElementBase
setP	src/AbstractObjects/OpalParticle.h	/^inline void OpalParticle::setP(Vector_t<double, 3> const& P) {$/;"	f	class:OpalParticle
setP	src/Algorithms/OpalParticle.h	/^inline void OpalParticle::setP(Vector_t<double, 3> const& P) {$/;"	f	class:OpalParticle
setP	src/Algorithms/PartData.cpp	/^void PartData::setP(double p) {$/;"	f	class:PartData
setP0	src/AbstractObjects/OpalData.cpp	/^void OpalData::setP0(ValueDefinition* p0) {$/;"	f	class:OpalData
setPL	src/PartBunch/Binning/test/alpine/ParticleContainer.hpp	/^        void setPL(std::shared_ptr<PLayout_t<T, Dim>>& pl) { pl_m = pl; }$/;"	f	class:ParticleContainer
setPOrigin	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setPOrigin(ParticleOrigin origin) {$/;"	f	class:PartBunch
setPType	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setPType(const std::string& type) {$/;"	f	class:PartBunch
setParameters	src/Distribution/FlatTop.hpp	/^    void setParameters(const std::shared_ptr<Distribution_t> &opalDist) {$/;"	f	class:FlatTop
setParent	src/AbstractObjects/Object.cpp	/^void Object::setParent(Object *parent) {$/;"	f	class:Object
setPartBunch	src/AbstractObjects/OpalData.cpp	/^void OpalData::setPartBunch(PartBunch_t* b) {$/;"	f	class:OpalData
setPartNum	src/Algorithms/PartBins.h	/^    void setPartNum(int bin, long long num) {nBin_m[bin] = num;}$/;"	f	class:PartBins
setParticleContainer	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        void setParticleContainer(std::shared_ptr<ParticleContainer<T, Dim>> pc) { pc_m = pc; }$/;"	f	class:LoadBalancer
setParticleContainer	src/PartBunch/LoadBalancer.hpp	/^    void setParticleContainer(std::shared_ptr<ParticleContainer<T, Dim>> pc) {$/;"	f	class:LoadBalancer
setParticleMatterInteraction	src/AbsBeamline/ElementBase.cpp	/^void ElementBase::setParticleMatterInteraction(ParticleMatterInteractionHandler* parmatint) {$/;"	f	class:ElementBase
setPerpenDistance	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::setPerpenDistance(double pdis) {$/;"	f	class:RFCavity
setPhase	src/BeamlineCore/RFCavityRep.cpp	/^void RFCavityRep::setPhase(double phase) {$/;"	f	class:RFCavityRep
setPhase	src/BeamlineCore/TravelingWaveRep.cpp	/^void TravelingWaveRep::setPhase(double phase) {$/;"	f	class:TravelingWaveRep
setPhase	src/Fields/OscillatingField.h	/^void OscillatingField<Field>::setPhase(double phi)$/;"	f	class:OscillatingField
setPhaseError	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setPhaseError(double phaseError) {$/;"	f	class:RFCavity
setPhaseModel	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setPhaseModel(std::shared_ptr<AbstractTimeDependence> phaseTD) {$/;"	f	class:RFCavity
setPhaseModelName	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setPhaseModelName(std::string name) {$/;"	f	class:RFCavity
setPhasem	src/AbsBeamline/RFCavity.h	/^inline void RFCavity::setPhasem(double phase) {$/;"	f	class:RFCavity
setPhasem	src/AbsBeamline/TravelingWave.h	/^inline void TravelingWave::setPhasem(double phase) {$/;"	f	class:TravelingWave
setPhi	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    void setPhi(Field<T, Dim>& phi) { phi_m = phi; }$/;"	f	class:FieldContainer
setPhi	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    void setPhi(Field<T, Dim> *phi){ phi_m = phi; }$/;"	f	class:FieldSolver
setPhi	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        void setPhi(Field<T, Dim>* phi) { phi_m = phi; }$/;"	f	class:LoadBalancer
setPhi	src/PartBunch/FieldContainer.hpp	/^    void setPhi(Field<T, Dim>& phi) {$/;"	f	class:FieldContainer
setPhi	src/PartBunch/FieldSolver.hpp	/^    void setPhi(Field<T, Dim>* phi) {$/;"	f	class:FieldSolver
setPhi	src/PartBunch/LoadBalancer.hpp	/^    void setPhi(Field<T, Dim>* phi) {$/;"	f	class:LoadBalancer
setPhi0	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::setPhi0(double phi0) {$/;"	f	class:RFCavity
setPhiEnd	src/AbsBeamline/ScalingFFAMagnet.h	/^    void setPhiEnd(double phiEnd) {phiEnd_m = phiEnd;}$/;"	f	class:ScalingFFAMagnet
setPhiOffset	src/Fields/SectorMagneticFieldMap.h	/^    void setPhiOffset(double dphi) {phiOffset_m = dphi;}$/;"	f	class:SectorMagneticFieldMap
setPhiStart	src/AbsBeamline/ScalingFFAMagnet.h	/^    void setPhiStart(double phiStart) {phiStart_m = phiStart;}$/;"	f	class:ScalingFFAMagnet
setPlace	src/Attributes/Attributes.cpp	/^    void setPlace(Attribute &attr, const PlaceRep &rep) {$/;"	f	namespace:Attributes
setPolarBoundingBox	src/Fields/SectorField.cpp	/^void SectorField::setPolarBoundingBox$/;"	f	class:SectorField
setPolynomial	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^void DifferentialOperator::setPolynomial(const std::vector<int> &poly,$/;"	f	class:polynomial::DifferentialOperator
setPolynomial	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^void DifferentialOperatorTwo::setPolynomial(const TwoPolynomial &poly,$/;"	f	class:polynomial::DifferentialOperatorTwo
setPositiveVerticalExtent	src/AbsBeamline/VerticalFFAMagnet.h	/^void VerticalFFAMagnet::setPositiveVerticalExtent(double positiveExtent) {$/;"	f	class:VerticalFFAMagnet
setPotentialBCs	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    void setPotentialBCs() {$/;"	f	class:FieldSolver
setPotentialBCs	src/PartBunch/FieldSolver.cpp	/^void FieldSolver<double,3>::setPotentialBCs() {$/;"	f	class:FieldSolver
setPredefinedString	src/Attributes/Attributes.cpp	/^    void setPredefinedString(Attribute &attr, const std::string &val) {$/;"	f	namespace:Attributes
setPredefinedValues	src/AbstractObjects/AttributeHandler.cpp	/^void AttributeHandler::setPredefinedValues(const std::set<std::string>& predefinedValues,$/;"	f	class:AttributeHandler
setPriorTrack	src/AbstractObjects/OpalData.cpp	/^void OpalData::setPriorTrack(const bool& value) {$/;"	f	class:OpalData
setPx	src/AbstractObjects/OpalParticle.h	/^inline void OpalParticle::setPx(double val) {$/;"	f	class:OpalParticle
setPx	src/Algorithms/OpalParticle.h	/^inline void OpalParticle::setPx(double val) {$/;"	f	class:OpalParticle
setPy	src/AbstractObjects/OpalParticle.h	/^inline void OpalParticle::setPy(double val) {$/;"	f	class:OpalParticle
setPy	src/Algorithms/OpalParticle.h	/^inline void OpalParticle::setPy(double val) {$/;"	f	class:OpalParticle
setPz	src/AbstractObjects/OpalParticle.h	/^inline void OpalParticle::setPz(double val) {$/;"	f	class:OpalParticle
setPz	src/Algorithms/OpalParticle.h	/^inline void OpalParticle::setPz(double val) {$/;"	f	class:OpalParticle
setQ	src/Algorithms/PartData.h	/^    inline void setQ(double q) {charge = q;}$/;"	f	class:PartData
setR	src/AbstractObjects/OpalParticle.h	/^inline void OpalParticle::setR(Vector_t<double, 3> const& R) {$/;"	f	class:OpalParticle
setR	src/Algorithms/OpalParticle.h	/^inline void OpalParticle::setR(Vector_t<double, 3> const& R) {$/;"	f	class:OpalParticle
setR0	src/AbsBeamline/ScalingFFAMagnet.h	/^    void setR0(double r0) {r0_m = r0;}$/;"	f	class:ScalingFFAMagnet
setRFFreq	src/AbsBeamline/Ring.h	/^    void setRFFreq(double rfFreq) {$/;"	f	class:Ring
setRMax	src/AbsBeamline/ScalingFFAMagnet.h	/^    void setRMax(double rMax) {rMax_m = rMax;}$/;"	f	class:ScalingFFAMagnet
setRMax	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    void setRMax(const Vector_t<double, Dim>& rmax) { rmax_m = rmax; }$/;"	f	class:FieldContainer
setRMax	src/PartBunch/FieldContainer.hpp	/^    void setRMax(const Vector_t<double, Dim>& rmax) {$/;"	f	class:FieldContainer
setRMin	src/AbsBeamline/ScalingFFAMagnet.h	/^    void setRMin(double rMin) {rMin_m = rMin;}$/;"	f	class:ScalingFFAMagnet
setRMin	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    void setRMin(const Vector_t<double, Dim>& rmin) { rmin_m = rmin; }$/;"	f	class:FieldContainer
setRMin	src/PartBunch/FieldContainer.hpp	/^    void setRMin(const Vector_t<double, Dim>& rmin) {$/;"	f	class:FieldContainer
setRadius	src/BeamlineGeometry/VarRadiusGeometry.h	/^    void VarRadiusGeometry::setRadius(const double &rho) {$/;"	f	class:VarRadiusGeometry
setRange	src/Attributes/Attributes.cpp	/^    void setRange(Attribute &attr, const RangeRep &rep) {$/;"	f	namespace:Attributes
setRangeMax	src/.Solvers/IrregularDomain.h	/^    void setRangeMax(const Vector_t<double, 3>& max) {$/;"	f	class:IrregularDomain
setRangeMin	src/.Solvers/IrregularDomain.h	/^    void setRangeMin(const Vector_t<double, 3>& min) {$/;"	f	class:IrregularDomain
setReadOnly	src/AbstractObjects/Attribute.cpp	/^void Attribute::setReadOnly(bool flag) {$/;"	f	class:Attribute
setReadOnly	src/AbstractObjects/AttributeHandler.cpp	/^void AttributeHandler::setReadOnly(bool flag) {$/;"	f	class:AttributeHandler
setReal	src/Attributes/Attributes.cpp	/^    void setReal(Attribute &attr, double val) {$/;"	f	namespace:Attributes
setRealArray	src/Attributes/Attributes.cpp	/^    void setRealArray(Attribute &attr, const std::vector<double> &value) {$/;"	f	namespace:Attributes
setRefPartBunch	src/AbsBeamline/Ring.cpp	/^void Ring::setRefPartBunch(PartBunch_t* bunch) {$/;"	f	class:Ring
setReflectionFlag	src/Beamlines/FlaggedElmPtr.h	/^inline void FlaggedElmPtr::setReflectionFlag(bool flag) const {$/;"	f	class:FlaggedElmPtr
setRelativeFlag	src/Beamlines/TBeamline.h	/^inline void TBeamline<T>::setRelativeFlag(bool flag) {$/;"	f	class:TBeamline
setRestartDumpFreq	src/AbstractObjects/OpalData.cpp	/^void OpalData::setRestartDumpFreq(const int& N) {$/;"	f	class:OpalData
setRestartFileName	src/AbstractObjects/OpalData.cpp	/^void OpalData::setRestartFileName(std::string s) {$/;"	f	class:OpalData
setRestartRun	src/AbstractObjects/OpalData.cpp	/^void OpalData::setRestartRun(const bool& value) {$/;"	f	class:OpalData
setRestartStep	src/AbstractObjects/OpalData.cpp	/^void OpalData::setRestartStep(int s) {$/;"	f	class:OpalData
setRho	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    void setRho(Field_t<Dim>& rho) { rho_m = rho; }$/;"	f	class:FieldContainer
setRho	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    void setRho(Field_t<Dim> *rho){ rho_m = rho; }$/;"	f	class:FieldSolver
setRho	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        void setRho(Field_t<Dim>* rho) { rho_m = rho; }$/;"	f	class:LoadBalancer
setRho	src/PartBunch/FieldContainer.hpp	/^    void setRho(Field_t<Dim>& rho) {$/;"	f	class:FieldContainer
setRho	src/PartBunch/FieldSolver.hpp	/^    void setRho(Field_t<Dim>* rho) {$/;"	f	class:FieldSolver
setRho	src/PartBunch/LoadBalancer.hpp	/^    void setRho(Field_t<Dim>* rho) {$/;"	f	class:LoadBalancer
setRingAperture	src/AbsBeamline/Ring.cpp	/^void Ring::setRingAperture(double minR, double maxR) {$/;"	f	class:Ring
setRmax	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::setRmax(double rmax) {$/;"	f	class:RFCavity
setRmin	src/AbsBeamline/RFCavity.cpp	/^void RFCavity::setRmin(double rmin) {$/;"	f	class:RFCavity
setRotation	src/AbsBeamline/MultipoleT.h	/^inline void MultipoleT::setRotation(double rot) {$/;"	f	class:MultipoleT
setRotation	src/AbsBeamline/MultipoleTBase.h	/^inline void MultipoleTBase::setRotation(const double& rot) {$/;"	f	class:MultipoleTBase
setRotation	src/BeamlineGeometry/Euclid3D.cpp	/^void Euclid3D::setRotation(const Rotation3D &rot) {$/;"	f	class:Euclid3D
setRotationAboutZ	src/AbsBeamline/ElementBase.h	/^inline void ElementBase::setRotationAboutZ(double rotation) {$/;"	f	class:ElementBase
setRunMethod	src/Track/TrackRun.cpp	/^void TrackRun::setRunMethod() {$/;"	f	class:TrackRun
setS0	src/BeamlineGeometry/VarRadiusGeometry.h	/^    void VarRadiusGeometry::setS0(const double &s_0) {$/;"	f	class:VarRadiusGeometry
setScale	src/AbsBeamline/Ring.h	/^    void setScale(double scale) {$/;"	f	class:Ring
setSelectionFlag	src/Beamlines/FlaggedElmPtr.h	/^inline void FlaggedElmPtr::setSelectionFlag(bool flag) const {$/;"	f	class:FlaggedElmPtr
setShared	src/AbstractObjects/Element.cpp	/^void Element::setShared(bool flag) {$/;"	f	class:Element
setShared	src/AbstractObjects/Object.cpp	/^void Object::setShared(bool flag) {$/;"	f	class:Object
setSigmaP_m	src/Distribution/Distribution.cpp	/^void Distribution::setSigmaP_m() {$/;"	f	class:Distribution
setSigmaR_m	src/Distribution/Distribution.cpp	/^void Distribution::setSigmaR_m() {$/;"	f	class:Distribution
setSkewComponent	src/AbsBeamline/Multipole.cpp	/^void Multipole::setSkewComponent(int n, double v, double vError) {$/;"	f	class:Multipole
setSkewComponent	src/AbsBeamline/Multipole.h	/^inline void Multipole::setSkewComponent(int n, double v) {$/;"	f	class:Multipole
setSkewComponent	src/Fields/BMultipoleField.cpp	/^void BMultipoleField::setSkewComponent(int n, double a) {$/;"	f	class:BMultipoleField
setSolver	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setSolver(FieldSolver *fs) {$/;"	f	class:PartBunch
setSolver	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    void setSolver(const std::string& solver_) { solver_m = solver_; }$/;"	f	class:AlpineManager
setSolver	src/PartBunch/PartBunch.cpp	/^void PartBunch<double,3>::setSolver(std::string solver) {$/;"	f	class:PartBunch
setSpline	src/Algorithms/SplineTimeDependence.cpp	/^void SplineTimeDependence::setSpline(size_t splineOrder,$/;"	f	class:SplineTimeDependence
setStart	src/Utilities/ClassicField.h	/^inline void ClassicField::setStart(const double & z) {$/;"	f	class:ClassicField
setStartNormal	src/Utilities/RingSection.h	/^inline void RingSection::setStartNormal(Vector_t<double, 3> orientation) {$/;"	f	class:RingSection
setStartPosition	src/Utilities/RingSection.h	/^    inline void setStartPosition(Vector_t<double, 3> pos) {$/;"	f	class:RingSection
setStep	src/AbsBeamline/Probe.cpp	/^void Probe::setStep(double step) {$/;"	f	class:Probe
setStep	src/Fields/FM3DH5BlockBase.cpp	/^void FM3DH5BlockBase::setStep(long long step) {$/;"	f	class:FM3DH5BlockBase
setStepMethod	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    void setStepMethod(const std::string& stepMethod_) { stepMethod_m = stepMethod_; }$/;"	f	class:AlpineManager
setStepsPerTurn	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setStepsPerTurn(int n) {$/;"	f	class:PartBunch
setStepsPerTurn	src/PartBunch/PartBunch.hpp	/^    void setStepsPerTurn(int n) {$/;"	f	class:PartBunch
setSteptoLastInj	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setSteptoLastInj(int n) {$/;"	f	class:PartBunch
setSteptoLastInj	src/PartBunch/PartBunch.hpp	/^    void setSteptoLastInj(int n) {$/;"	f	class:PartBunch
setString	src/Attributes/Attributes.cpp	/^    void setString(Attribute &attr, const std::string &val) {$/;"	f	namespace:Attributes
setStringArray	src/Attributes/Attributes.cpp	/^    void setStringArray(Attribute &attr, const std::vector<std::string> &value) {$/;"	f	namespace:Attributes
setSymmetry	src/AbsBeamline/Ring.h	/^    void setSymmetry(double symmetry) {$/;"	f	class:Ring
setSymmetry	src/Fields/SectorMagneticFieldMap.cpp	/^void SectorMagneticFieldMap::setSymmetry(std::string name) {$/;"	f	class:SectorMagneticFieldMap
setT	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setT(double t) {$/;"	f	class:PartBunch
setT	src/PartBunch/PartBunch.hpp	/^    void setT(double t) {$/;"	f	class:PartBunch
setTEmission	src/Distribution/Distribution.cpp	/^void Distribution::setTEmission(double tEmission) {$/;"	f	class:Distribution
setTEmission	src/PartBunch/PartBunch.hpp	/^    void setTEmission(double t) {$/;"	f	class:PartBunch
setTableRow	src/Attributes/Attributes.cpp	/^    void setTableRow(Attribute &attr, const TableRowRep &rep) {$/;"	f	namespace:Attributes
setTanDelta	src/AbsBeamline/ScalingFFAMagnet.h	/^    void setTanDelta(double tanDelta) {tanDelta_m = tanDelta;}$/;"	f	class:ScalingFFAMagnet
setTanhDiffIndices	src/AbsBeamline/EndFieldModel/Tanh.cpp	/^void Tanh::setTanhDiffIndices(size_t n) {$/;"	f	class:endfieldmodel::Tanh
setTempEField	src/PartBunch/PartBunch.hpp	/^    void setTempEField(std::shared_ptr<VField_t<T, Dim>> Etmp) { this->Etmp_m = Etmp; }$/;"	f	class:PartBunch
setTime	src/AbstractObjects/OpalParticle.h	/^inline void OpalParticle::setTime(double t) {$/;"	f	class:OpalParticle
setTime	src/Algorithms/OpalParticle.h	/^inline void OpalParticle::setTime(double t) {$/;"	f	class:OpalParticle
setTime	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::setTime() {$/;"	f	class:ParallelTracker
setTime	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    void setTime(double time_) { time_m = time_; }$/;"	f	class:AlpineManager
setTimeDependence	src/Algorithms/AbstractTimeDependence.cpp	/^void AbstractTimeDependence::setTimeDependence(std::string name,$/;"	f	class:AbstractTimeDependence
setTokenList	src/Attributes/Attributes.cpp	/^    void setTokenList(Attribute &attr, const std::list<Token> &val) {$/;"	f	namespace:Attributes
setTokenListArray	src/Attributes/Attributes.cpp	/^    setTokenListArray(Attribute &attr,$/;"	f	namespace:Attributes
setTotalNum	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setTotalNum(size_t n) {$/;"	f	class:PartBunch
setTotalP	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    void setTotalP(size_type totalP_) { totalP_m = totalP_; }$/;"	f	class:AlpineManager
setTransMaxOrder	src/AbsBeamline/MultipoleT.h	/^inline void MultipoleT::setTransMaxOrder(std::size_t transMaxOrder) {$/;"	f	class:MultipoleT
setTransMaxOrder	src/AbsBeamline/MultipoleTBase.h	/^inline void MultipoleTBase::setTransMaxOrder(const std::size_t& transMaxOrder) {$/;"	f	class:MultipoleTBase
setTransProfile	src/AbsBeamline/MultipoleT.cpp	/^void MultipoleT::setTransProfile(std::size_t n, double dTn) {$/;"	f	class:MultipoleT
setTransProfile	src/AbsBeamline/MultipoleTBase.h	/^inline void MultipoleTBase::setTransProfile(const std::size_t& n, const double& dTn) {$/;"	f	class:MultipoleTBase
setUpdateFlag	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setUpdateFlag(UpdateFlags_t f, bool val) {$/;"	f	class:PartBunch
setUpperCaseString	src/Attributes/Attributes.cpp	/^    void setUpperCaseString(Attribute &attr, const std::string &val) {$/;"	f	namespace:Attributes
setUpperCaseStringArray	src/Attributes/Attributes.cpp	/^    void setUpperCaseStringArray(Attribute &attr, const std::vector<std::string> &value) {$/;"	f	namespace:Attributes
setVarRadius	src/AbsBeamline/MultipoleT.h	/^inline void MultipoleT::setVarRadius() {$/;"	f	class:MultipoleT
setVerticalExtent	src/AbsBeamline/ScalingFFAMagnet.h	/^    void setVerticalExtent(double verticalExtent) {verticalExtent_m = verticalExtent;}$/;"	f	class:ScalingFFAMagnet
setWake	src/AbsBeamline/ElementBase.cpp	/^void ElementBase::setWake(WakeFunction* wk) {$/;"	f	class:ElementBase
setWidth	src/AbsBeamline/VerticalFFAMagnet.h	/^    void setWidth(double width) {$/;"	f	class:VerticalFFAMagnet
setX	src/AbstractObjects/OpalParticle.h	/^inline void OpalParticle::setX(double val) {$/;"	f	class:OpalParticle
setX	src/Algorithms/OpalParticle.h	/^inline void OpalParticle::setX(double val) {$/;"	f	class:OpalParticle
setX	src/BeamlineGeometry/Euclid3D.cpp	/^void Euclid3D::setX(double x) {$/;"	f	class:Euclid3D
setX	src/BeamlineGeometry/Vector3D.h	/^inline void Vector3D::setX(double x)$/;"	f	class:Vector3D
setX	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^void Interpolator3dGridTo1d::setX(int nCoords, double* x) {$/;"	f	class:interpolation::Interpolator3dGridTo1d
setX	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^void Interpolator3dGridTo3d::setX(int nCoords, double* x) {$/;"	f	class:interpolation::Interpolator3dGridTo3d
setX	src/Fields/Interpolation/ThreeDGrid.h	/^void ThreeDGrid::setX(int nXCoords, double * x) {$/;"	f	class:interpolation::ThreeDGrid
setX0	src/AbsBeamline/EndFieldModel/Enge.h	/^    inline void setX0(double x0) {_x0 = x0;}$/;"	f	class:endfieldmodel::Enge
setX0	src/AbsBeamline/EndFieldModel/Tanh.h	/^    inline void setX0(double x0)     {_x0 = x0;}$/;"	f	class:endfieldmodel::Tanh
setX0End	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^void AsymmetricEnge::setX0End(double x0) {$/;"	f	class:endfieldmodel::AsymmetricEnge
setX0Start	src/AbsBeamline/EndFieldModel/AsymmetricEnge.h	/^void AsymmetricEnge::setX0Start(double x0) {$/;"	f	class:endfieldmodel::AsymmetricEnge
setY	src/AbstractObjects/OpalParticle.h	/^inline void OpalParticle::setY(double val) {$/;"	f	class:OpalParticle
setY	src/Algorithms/OpalParticle.h	/^inline void OpalParticle::setY(double val) {$/;"	f	class:OpalParticle
setY	src/BeamlineGeometry/Euclid3D.cpp	/^void Euclid3D::setY(double y) {$/;"	f	class:Euclid3D
setY	src/BeamlineGeometry/Vector3D.h	/^inline void Vector3D::setY(double y)$/;"	f	class:Vector3D
setY	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^void Interpolator3dGridTo1d::setY(int nCoords, double* y) {$/;"	f	class:interpolation::Interpolator3dGridTo1d
setY	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^void Interpolator3dGridTo3d::setY(int nCoords, double* y) {$/;"	f	class:interpolation::Interpolator3dGridTo3d
setY	src/Fields/Interpolation/ThreeDGrid.h	/^void ThreeDGrid::setY(int nYCoords, double * y) {$/;"	f	class:interpolation::ThreeDGrid
setZ	src/AbstractObjects/OpalParticle.h	/^inline void OpalParticle::setZ(double val) {$/;"	f	class:OpalParticle
setZ	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setZ(int \/*i*\/, double \/*zcoo*\/) {$/;"	f	class:PartBunch
setZ	src/Algorithms/OpalParticle.h	/^inline void OpalParticle::setZ(double val) {$/;"	f	class:OpalParticle
setZ	src/BeamlineGeometry/Euclid3D.cpp	/^void Euclid3D::setZ(double z) {$/;"	f	class:Euclid3D
setZ	src/BeamlineGeometry/Vector3D.h	/^inline void Vector3D::setZ(double z)$/;"	f	class:Vector3D
setZ	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^void Interpolator3dGridTo1d::setZ(int nCoords, double* z) {$/;"	f	class:interpolation::Interpolator3dGridTo1d
setZ	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^void Interpolator3dGridTo3d::setZ(int nCoords, double* z) {$/;"	f	class:interpolation::Interpolator3dGridTo3d
setZ	src/Fields/Interpolation/ThreeDGrid.h	/^void ThreeDGrid::setZ(int nZCoords, double * z) {$/;"	f	class:interpolation::ThreeDGrid
setZ	src/PartBunch/PartBunch.hpp	/^    void setZ(int i, double zcoo) {$/;"	f	class:PartBunch
setZero	src/AbsBeamline/MultipoleTFunctions/Polynomial.h	/^    void Polynomial::setZero() {$/;"	f	class:polynomial::Polynomial
setZero	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^void TwoPolynomial::setZero() {$/;"	f	class:polynomial::TwoPolynomial
set_m	src/Structure/SDDSColumn.h	/^    mutable bool set_m;$/;"	m	class:SDDSColumn
set_meshEnlargement	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::set_meshEnlargement(double dh) {$/;"	f	class:PartBunch
set_sPos	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::set_sPos(double s) {$/;"	f	class:PartBunch
set_sPos	src/PartBunch/PartBunch.hpp	/^    void set_sPos(double s) {$/;"	f	class:PartBunch
setdSfactors	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    void TwoPolynomial::setdSfactors($/;"	f	class:polynomial::TwoPolynomial
setdT	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setdT(double dt) {$/;"	f	class:PartBunch
setdT	src/PartBunch/PartBunch.hpp	/^    void setdT(double dt) {$/;"	f	class:PartBunch
setup	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::setup(AbstractParticle<T, Dim>* pb) {$/;"	f	class:PartBunch
setupBCs	src/PartBunch/Binning/test/alpine/ParticleContainer.hpp	/^	void setupBCs() { setBCAllPeriodic(); }$/;"	f	class:ParticleContainer
setupBCs	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    void setupBCs() { setBCAllPeriodic(); }$/;"	f	class:ChargedParticles
setupBCs	src/PartBunch/PartBunch.hpp	/^    void setupBCs() {$/;"	f	class:PartBunch
setupBCs	src/PartBunch/ParticleContainer.hpp	/^    void setupBCs() {$/;"	f	class:ParticleContainer
setupBoundaryGeometry	src/Track/TrackRun.cpp	/^void TrackRun::setupBoundaryGeometry() {$/;"	f	class:TrackRun
setupEndField	src/AbsBeamline/ScalingFFAMagnet.cpp	/^void ScalingFFAMagnet::setupEndField() {$/;"	f	class:ScalingFFAMagnet
setupRNG	src/Distribution/LaserProfile.cpp	/^void LaserProfile::setupRNG() {$/;"	f	class:LaserProfile
setup_plots	tests/classic_src/Fields/Interpolation/PPSolveFactoryTestPlot.py	/^    def setup_plots(self):$/;"	m	class:PlotInterpolation
sfun	src/Expressions/SFunction.cpp	/^const SFunction *SFunction::sfun = 0;$/;"	m	class:SFunction	file:
sfun	src/Expressions/SFunction.h	/^    static const SFunction *sfun;$/;"	m	class:SFunction
sgn	src/Utilities/MSLang/matheval.hpp	/^            T sgn(T x) { return (T{0} < x) - (x < T{0}); }$/;"	f	namespace:matheval::detail::math
shareFlag	src/AbsBeamline/ElementBase.h	/^    mutable bool shareFlag;$/;"	m	class:ElementBase
shared	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^    std::shared_ptr<endfieldmodel::EndFieldModel> shared;$/;"	m	class:VariableRFCavityFringeFieldTest	file:
sharedFlag	src/AbstractObjects/Object.h	/^    bool sharedFlag;$/;"	m	class:Object
shiftZStopLeft	src/Algorithms/StepSizeConfig.cpp	/^void StepSizeConfig::shiftZStopLeft(double back) {$/;"	f	class:StepSizeConfig
shiftZStopRight	src/Algorithms/StepSizeConfig.cpp	/^void StepSizeConfig::shiftZStopRight(double front) {$/;"	f	class:StepSizeConfig
shiftedIntGreensFunction	src/.Solvers/FFTPoissonSolver.cpp	/^void FFTPoissonSolver::shiftedIntGreensFunction(double zshift) {$/;"	f	class:FFTPoissonSolver
shiftx_m	src/Utilities/MSLang/Repeat.h	/^        double shiftx_m;$/;"	m	struct:mslang::Repeat
shiftx_m	src/Utilities/MSLang/Translation.h	/^        double shiftx_m;$/;"	m	struct:mslang::Translation
shifty_m	src/Utilities/MSLang/Repeat.h	/^        double shifty_m;$/;"	m	struct:mslang::Repeat
shifty_m	src/Utilities/MSLang/Translation.h	/^        double shifty_m;$/;"	m	struct:mslang::Translation
shouldTrace	src/AbstractObjects/Action.cpp	/^bool Action::shouldTrace() const {$/;"	f	class:Action
shouldTrace	src/AbstractObjects/Definition.cpp	/^bool Definition::shouldTrace() const {$/;"	f	class:Definition
shouldTrace	src/AbstractObjects/Element.cpp	/^bool Element::shouldTrace() const {$/;"	f	class:Element
shouldTrace	src/AbstractObjects/Table.cpp	/^bool Table::shouldTrace() const {$/;"	f	class:Table
shouldTrace	src/AbstractObjects/ValueDefinition.cpp	/^bool ValueDefinition::shouldTrace() const {$/;"	f	class:ValueDefinition
shouldTrace	src/OpalParser/Macro.cpp	/^bool Macro::shouldTrace() const {$/;"	f	class:Macro
shouldUpdate	src/AbstractObjects/Action.cpp	/^bool Action::shouldUpdate() const {$/;"	f	class:Action
shouldUpdate	src/AbstractObjects/Definition.cpp	/^bool Definition::shouldUpdate() const {$/;"	f	class:Definition
shouldUpdate	src/AbstractObjects/Element.cpp	/^bool Element::shouldUpdate() const {$/;"	f	class:Element
shouldUpdate	src/AbstractObjects/Table.cpp	/^bool Table::shouldUpdate() const {$/;"	f	class:Table
shouldUpdate	src/AbstractObjects/ValueDefinition.cpp	/^bool ValueDefinition::shouldUpdate() const {$/;"	f	class:ValueDefinition
shouldUpdate	src/OpalParser/Macro.cpp	/^bool Macro::shouldUpdate() const {$/;"	f	class:Macro
sigmaP_m	src/Distribution/Distribution.h	/^    ippl::Vector<double, 3> pmean_m, xmean_m, sigmaR_m, sigmaP_m, cutoffR_m, cutoffP_m;$/;"	m	class:Distribution
sigmaR_m	src/Distribution/Distribution.h	/^    ippl::Vector<double, 3> pmean_m, xmean_m, sigmaR_m, sigmaP_m, cutoffR_m, cutoffP_m;$/;"	m	class:Distribution
sigmaTFall_m	src/Distribution/Distribution.h	/^    double sigmaTFall_m;$/;"	m	class:Distribution
sigmaTFall_m	src/Distribution/FlatTop.hpp	/^    double sigmaTFall_m;$/;"	m	class:FlatTop
sigmaTRise_m	src/Distribution/Distribution.h	/^    double sigmaTRise_m;$/;"	m	class:Distribution
sigmaTRise_m	src/Distribution/FlatTop.hpp	/^    double sigmaTRise_m;$/;"	m	class:FlatTop
sign	src/Structure/BoundaryGeometry.cpp	/^    int sign[3];$/;"	m	class:Ray	file:
silencer	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^    OpalTestUtilities::SilenceTest silencer;$/;"	m	class:VariableRFCavityFringeFieldTest	file:
silencer	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^    OpalTestUtilities::SilenceTest silencer;$/;"	m	class:ndgridtest::NDGridTest	file:
silencer_m	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    OpalTestUtilities::SilenceTest silencer_m;$/;"	m	class:ScalingFFAMagnetTest	file:
silencer_m	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^    OpalTestUtilities::SilenceTest silencer_m;$/;"	m	class:VerticalFFAMagnetTest	file:
sin2_m	src/Utilities/RingSection.h	/^    double sin2_m;$/;"	m	class:RingSection
sinAngle_m	src/AbsBeamline/RFCavity.h	/^    double sinAngle_m;$/;"	m	class:RFCavity
sinExitRotation_m	src/Fields/FM1DProfile2.h	/^    double sinExitRotation_m;$/;"	m	class:FM1DProfile2
sinRefTheta_m	src/Algorithms/ParallelTracker.h	/^    double sinRefTheta_m;$/;"	m	class:ParallelTracker
singleInitNode	src/Algorithms/.PartBunchBase.hpp	/^bool PartBunch<T, Dim>::singleInitNode() const {$/;"	f	class:PartBunch
singlemode_m	src/Structure/PeakFinder.h	/^    bool singlemode_m;$/;"	m	class:PeakFinder
sixtyEightPercentile_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> sixtyEightPercentile_m;$/;"	m	class:DistributionMoments
size	src/AbsBeamline/SpecificElementVisitor.h	/^size_t SpecificElementVisitor<ELEM>::size() const{$/;"	f	class:SpecificElementVisitor
size	src/Algorithms/IndexMap.h	/^size_t IndexMap::size() const {$/;"	f	class:IndexMap
size	src/Beamlines/TBeamline.h	/^size_t TBeamline<T>::size() const {$/;"	f	class:TBeamline
size	src/Fields/BSingleMultipoleField.h	/^int BSingleMultipoleField<order>::size() const {$/;"	f	class:BSingleMultipoleField
size	src/Fields/Interpolation/NDGrid.h	/^int NDGrid::size(const int& dimension) const {$/;"	f	class:interpolation::NDGrid
size	src/Structure/LossDataSink.h	/^inline size_t LossDataSink::size() const {$/;"	f	class:LossDataSink
size	tests/ippl_src/AppTypes/VektorTz.cpp	/^int size = 8;$/;"	v
sizeOfVoxel	src/Structure/BoundaryGeometry.h	/^        Vector_t<double, 3> sizeOfVoxel;$/;"	m	struct:BoundaryGeometry::__anon60
sizeX_m	src/Distribution/LaserProfile.h	/^    hsize_t sizeX_m, sizeY_m;$/;"	m	class:LaserProfile
sizeY_m	src/Distribution/LaserProfile.h	/^    hsize_t sizeX_m, sizeY_m;$/;"	m	class:LaserProfile
sizeof	src/Fields/FM3DH5BlockBase.h	/^static_assert (sizeof(double) == sizeof (h5_float64_t),$/;"	v
sizeof	src/Fields/FM3DH5BlockBase.h	/^static_assert (sizeof(long long) == sizeof (h5_int64_t),$/;"	v
skew	src/Fields/BMultipoleField.h	/^inline double &BMultipoleField::skew(int n)$/;"	f	class:BMultipoleField
skew	src/Fields/BMultipoleField.h	/^inline double BMultipoleField::skew(int n) const$/;"	f	class:BMultipoleField
skip	src/OpalParser/Statement.cpp	/^void Statement::skip() {$/;"	f	class:Statement
skipComments	src/OpalParser/AbsFileStream.cpp	/^bool AbsFileStream::skipComments() {$/;"	f	class:AbsFileStream
skipper	src/Utilities/SDDSParser/skipper.hpp	/^        skipper() : skipper::base_type(start)$/;"	f	struct:SDDS::parser::skipper
skipper	src/Utilities/SDDSParser/skipper.hpp	/^    struct skipper : qi::grammar<Iterator>$/;"	s	namespace:SDDS::parser
skipper_t	src/Utilities/SDDSParser/ast.cpp	/^typedef SDDS::parser::skipper<iterator_t> skipper_t;$/;"	t	file:
smoothData	src/Fields/FM3DMagnetoStaticExtended.cpp	/^void FM3DMagnetoStaticExtended::smoothData(double* data, unsigned j) {$/;"	f	class:FM3DMagnetoStaticExtended
smoothingOrder_m	src/Fields/Interpolation/PPSolveFactory.h	/^    int smoothingOrder_m;$/;"	m	class:interpolation::PPSolveFactory
smoothingPoints_m	src/Fields/Interpolation/PPSolveFactory.h	/^    std::vector< std::vector<int> > smoothingPoints_m;$/;"	m	class:interpolation::PPSolveFactory
smoothing_order_m	src/Fields/SectorMagneticFieldMap.h	/^    int smoothing_order_m;$/;"	m	class:SectorMagneticFieldMap
solve	src/Fields/FM1DProfile2.cpp	/^    void solve($/;"	f	namespace:QRDecomposition
solve	src/Fields/Interpolation/PPSolveFactory.cpp	/^PolynomialPatch* PPSolveFactory::solve() {$/;"	f	class:interpolation::PPSolveFactory
solver_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    std::string solver_m;$/;"	m	class:AlpineManager
solver_m	src/PartBunch/PartBunch.hpp	/^    std::string solver_m;$/;"	m	class:PartBunch
sortArray	src/Algorithms/PartBins.cpp	/^void PartBins::sortArray() {$/;"	f	class:PartBins
sortAscendingZStop	src/Algorithms/StepSizeConfig.cpp	/^void StepSizeConfig::sortAscendingZStop() {$/;"	f	class:StepSizeConfig
sortContainerByBin	src/PartBunch/Binning/AdaptBins.hpp	/^    void AdaptBins<BunchType, BinningSelector>::sortContainerByBin() {$/;"	f	class:ParticleBinning::AdaptBins
sortOrder_m	src/Fields/SectorMagneticFieldMap.cpp	/^const int SectorMagneticFieldMap::IO::sortOrder_m[3] = {0, 1, 2};$/;"	m	class:SectorMagneticFieldMap::IO	file:
sortOrder_m	src/Fields/SectorMagneticFieldMap.h	/^    static const int sortOrder_m[3];$/;"	m	class:SectorMagneticFieldMap::IO
sortTerms	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^void DifferentialOperatorTwo::sortTerms() {$/;"	f	class:polynomial::DifferentialOperatorTwo
sortTerms	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^void PolynomialSum::sortTerms() {$/;"	f	class:polynomial::PolynomialSum
sortTerms	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^    void RecursionRelationTwo::sortTerms() {$/;"	f	class:polynomial::RecursionRelationTwo
sort_comparator	tests/classic_src/Utilities/RingSectionTest.cpp	/^    bool sort_comparator(Vector_t v1, Vector_t v2) {$/;"	f	namespace:__anon1
sortedIndexArr_m	src/PartBunch/Binning/AdaptBins.h	/^        hash_type sortedIndexArr_m;                  \/\/\/< Hash table for sorting particles by bin index.$/;"	m	class:ParticleBinning::AdaptBins
south	src/.Solvers/IrregularDomain.h	/^        T south;   \/\/ x,   y-1, z$/;"	m	struct:IrregularDomain::Stencil
spaceChargeEFieldCheck	src/PartBunch/PartBunch.cpp	/^void PartBunch<double,3>::spaceChargeEFieldCheck() {$/;"	f	class:PartBunch
spline	src/AbsBeamline/RFCavity.cpp	/^double RFCavity::spline(double z, double* za) {$/;"	f	class:RFCavity
splineOrder_m	src/Algorithms/SplineTimeDependence.h	/^    size_t splineOrder_m;$/;"	m	class:SplineTimeDependence
spline_m	src/Algorithms/SplineTimeDependence.h	/^    gsl_spline* spline_m;$/;"	m	class:SplineTimeDependence
splitSets	src/Structure/LossDataSink.cpp	/^void LossDataSink::splitSets(unsigned int numSets) {$/;"	f	class:LossDataSink
spos_m	src/PartBunch/PartBunch.hpp	/^    double spos_m;$/;"	m	class:PartBunch
spos_m	src/Structure/LossDataSink.h	/^    double spos_m;$/;"	m	struct:SetStatistics
spos_m	src/Structure/LossDataSink.h	/^    std::vector<double> spos_m;$/;"	m	class:LossDataSink
sptDumpFreq	src/Utilities/Options.cpp	/^    int sptDumpFreq = 1;$/;"	m	namespace:Options	file:
square_deriv_nearby_points_	src/Fields/Interpolation/SolveFactory.h	/^    std::vector< std::vector<int> > square_deriv_nearby_points_;$/;"	m	class:interpolation::SolveFactory
square_points_	src/Fields/Interpolation/SolveFactory.h	/^    std::vector< std::vector<int> > square_points_;$/;"	m	class:interpolation::SolveFactory
square_temp_	src/Fields/Interpolation/SolveFactory.h	/^    SquarePolynomialVector square_temp_;$/;"	m	class:interpolation::SolveFactory
st	src/Utilities/MSLang/matheval.hpp	/^            symbol_table_t st;$/;"	m	class:matheval::detail::eval_ast
standardDeviation_m	src/Distribution/LaserProfile.h	/^    Vector_t<double, 3> standardDeviation_m;$/;"	m	class:LaserProfile
start	src/OpalParser/MacroStream.cpp	/^void MacroStream::start() {$/;"	f	class:MacroStream
start	src/OpalParser/Statement.cpp	/^void Statement::start() {$/;"	f	class:Statement
start	src/Utilities/SDDSParser/array.hpp	/^        qi::rule<Iterator, array(), skipper<Iterator> > start;$/;"	m	struct:SDDS::parser::array_parser
start	src/Utilities/SDDSParser/associate.hpp	/^        qi::rule<Iterator, associate(), skipper<Iterator> > start;$/;"	m	struct:SDDS::parser::associate_parser
start	src/Utilities/SDDSParser/ast.hpp	/^            boost::spirit::qi::rule<Iterator, std::string(), Skipper> start;$/;"	m	struct:SDDS::parser::qstring
start	src/Utilities/SDDSParser/ast.hpp	/^            boost::spirit::qi::rule<Iterator, std::string(), Skipper> start;$/;"	m	struct:SDDS::parser::string
start	src/Utilities/SDDSParser/column.hpp	/^        qi::rule<Iterator, column(), skipper<Iterator> > start;$/;"	m	struct:SDDS::parser::column_parser
start	src/Utilities/SDDSParser/data.hpp	/^        qi::rule<Iterator, data(), skipper<Iterator> > start;$/;"	m	struct:SDDS::parser::data_parser
start	src/Utilities/SDDSParser/description.hpp	/^        qi::rule<Iterator, description(), skipper<Iterator> > start;$/;"	m	struct:SDDS::parser::description_parser
start	src/Utilities/SDDSParser/file.hpp	/^        qi::rule<Iterator, file(), skipper<Iterator> > start;$/;"	m	struct:SDDS::parser::file_parser
start	src/Utilities/SDDSParser/include.hpp	/^        qi::rule<Iterator, include(), skipper<Iterator> > start;$/;"	m	struct:SDDS::parser::include_parser
start	src/Utilities/SDDSParser/parameter.hpp	/^        qi::rule<Iterator, parameter(), skipper<Iterator> > start;$/;"	m	struct:SDDS::parser::parameter_parser
start	src/Utilities/SDDSParser/skipper.hpp	/^        qi::rule<Iterator> start;$/;"	m	struct:SDDS::parser::listskipper
start	src/Utilities/SDDSParser/skipper.hpp	/^        qi::rule<Iterator> start;$/;"	m	struct:SDDS::parser::skipper
start	src/Utilities/SDDSParser/version.hpp	/^        qi::rule<Iterator, version(), skipper<Iterator> > start;$/;"	m	struct:SDDS::parser::version_parser
startCoreField_m	src/AbsBeamline/TravelingWave.h	/^    double startCoreField_m; \/**< starting point of field(m)*\/$/;"	m	class:TravelingWave
startExitField_m	src/AbsBeamline/TravelingWave.h	/^    double startExitField_m;$/;"	m	class:TravelingWave
startField_m	src/AbsBeamline/Drift.h	/^    double startField_m;$/;"	m	class:Drift
startField_m	src/AbsBeamline/RFCavity.h	/^    double startField_m; \/**< starting point of field(m)*\/$/;"	m	class:RFCavity
startField_m	src/AbsBeamline/Solenoid.h	/^    double startField_m; \/**< startingpoint of field, m*\/$/;"	m	class:Solenoid
startField_m	src/Algorithms/OrbitThreader.h	/^        double startField_m;$/;"	m	struct:OrbitThreader::elementPosition
startOrientation_m	src/Utilities/RingSection.h	/^    Vector_t<double, 3> startOrientation_m;$/;"	m	class:RingSection
startPosition_m	src/Utilities/RingSection.h	/^    Vector_t<double, 3> startPosition_m;$/;"	m	class:RingSection
startSet_m	src/Structure/LossDataSink.h	/^    std::vector<unsigned long> startSet_m;$/;"	m	class:LossDataSink
start_m	src/Utilities/ClassicField.h	/^    double start_m;$/;"	m	class:ClassicField
startedFromExistingFile_m	src/Structure/H5PartWrapper.h	/^    bool startedFromExistingFile_m;$/;"	m	class:H5PartWrapper
stashInstance	src/AbstractObjects/OpalData.cpp	/^void OpalData::stashInstance() {$/;"	f	class:OpalData
stashedInstances	src/AbstractObjects/OpalData.cpp	/^std::stack<OpalData*> OpalData::stashedInstances;$/;"	m	class:OpalData	file:
stashedInstances	src/AbstractObjects/OpalData.h	/^    static std::stack<OpalData*> stashedInstances;$/;"	m	class:OpalData
stashedTrack	src/Track/Track.h	/^    static std::stack<Track*> stashedTrack;$/;"	m	class:Track
statDumpFreq	src/Utilities/Options.cpp	/^    int statDumpFreq = 10;$/;"	m	namespace:Options	file:
statFileEntries_sm	src/AbsBeamline/Monitor.cpp	/^std::map<double, SetStatistics> Monitor::statFileEntries_sm;$/;"	m	class:Monitor	file:
statFileEntries_sm	src/AbsBeamline/Monitor.h	/^    static std::map<double, SetStatistics> statFileEntries_sm;$/;"	m	class:Monitor
statWriter_m	src/Structure/DataSink.h	/^    statWriter_t statWriter_m;$/;"	m	class:DataSink
statWriter_t	src/Structure/DataSink.h	/^    typedef std::unique_ptr<StatWriter> statWriter_t;$/;"	t	class:DataSink
stat_line	src/OpalParser/Statement.h	/^    int stat_line;$/;"	m	class:Statement
state	src/Utilities/RegularExpression.h	/^    int state;$/;"	m	class:RegularExpression
state_m	src/Fields/Interpolation/Mesh.h	/^    std::vector<int> state_m;$/;"	m	class:interpolation::Mesh::Iterator
status	src/AbstractObjects/PlaceRep.h	/^    mutable bool status;$/;"	m	class:PlaceRep
status	src/AbstractObjects/RangeRep.h	/^    mutable bool status;$/;"	m	class:RangeRep
std	src/Structure/LossDataSink.h	/^namespace std {$/;"	n
stdKineticEnergy_m	src/Algorithms/DistributionMoments.h	/^    double stdKineticEnergy_m;$/;"	m	class:DistributionMoments
stdP_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> stdP_m;$/;"	m	class:DistributionMoments
stdRP_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> stdRP_m;$/;"	m	class:DistributionMoments
stdR_m	src/Algorithms/DistributionMoments.h	/^    Vector_t<double, 3> stdR_m;$/;"	m	class:DistributionMoments
stdTime_m	src/Algorithms/DistributionMoments.h	/^    double stdTime_m;$/;"	m	class:DistributionMoments
stepMethod_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    std::string stepMethod_m;$/;"	m	class:AlpineManager
stepRange_m	src/Algorithms/OrbitThreader.h	/^    ValueRange<long> stepRange_m;$/;"	m	class:OrbitThreader
stepSizes_m	src/Algorithms/OrbitThreader.h	/^    StepSizeConfig stepSizes_m;$/;"	m	class:OrbitThreader
stepSizes_m	src/Algorithms/ParallelTracker.h	/^    StepSizeConfig stepSizes_m;$/;"	m	class:ParallelTracker
step_m	src/AbsBeamline/Probe.h	/^    double step_m; \/\/\/< Step size of the probe (bin width in histogram file)$/;"	m	class:Probe
stepsPerTurn	src/Track/Track.h	/^    int stepsPerTurn;$/;"	m	class:Track
stepsPerTurn_m	src/PartBunch/PartBunch.hpp	/^    int stepsPerTurn_m;$/;"	m	class:PartBunch
stop	src/OpalParser/OpalParser.cpp	/^void OpalParser::stop() const {$/;"	f	class:OpalParser
stopFlag	src/OpalParser/OpalParser.h	/^    mutable bool stopFlag;$/;"	m	class:OpalParser
stoppingPowerFitCoefficients_m	src/Physics/Material.h	/^        const std::array<double,10> stoppingPowerFitCoefficients_m;$/;"	m	class:Physics::Material
storeArguments	src/AbstractObjects/OpalData.cpp	/^void OpalData::storeArguments(int argc, char* argv[]) {$/;"	f	class:OpalData
storeCavityInformation	src/Structure/DataSink.cpp	/^void DataSink::storeCavityInformation() {$/;"	f	class:DataSink
storeCavityInformation	src/Structure/H5PartWrapper.cpp	/^void H5PartWrapper::storeCavityInformation() {$/;"	f	class:H5PartWrapper
storeCavityInformation	src/Structure/H5Writer.h	/^inline void H5Writer::storeCavityInformation() {$/;"	f	class:H5Writer
storeInputFn	src/AbstractObjects/OpalData.cpp	/^void OpalData::storeInputFn(const std::string& fn) {$/;"	f	class:OpalData
storeLine	src/Lines/Sequence.cpp	/^void Sequence::storeLine(TLine& newLine) {$/;"	f	class:Sequence
storeTitle	src/AbstractObjects/OpalData.cpp	/^void OpalData::storeTitle(const std::string& title) {$/;"	f	class:OpalData
str	src/OpalParser/Statement.cpp	/^bool Statement::str(std::string &value) {$/;"	f	class:Statement
str	src/OpalParser/Statement.cpp	/^std::string Statement::str() const {$/;"	f	class:Statement
str	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	28;"	d	file:
straightGeometry_m	src/AbsBeamline/MultipoleTStraight.h	/^    StraightGeometry straightGeometry_m;$/;"	m	class:MultipoleTStraight
straightGeometry_m	src/AbsBeamline/VerticalFFAMagnet.h	/^    StraightGeometry straightGeometry_m;$/;"	m	class:VerticalFFAMagnet
stream_name	src/OpalParser/TokenStream.h	/^    std::string stream_name;$/;"	m	class:TokenStream
strength	src/Fields/BSingleMultipoleField.h	/^    double strength;$/;"	m	class:BSingleMultipoleField
string	src/Fields/Fieldmap.cpp	/^REGISTER_PARSE_TYPE(std::string);$/;"	v
string	src/Utilities/SDDSParser/array.hpp	/^                array_group, units, string, quoted_string;$/;"	m	struct:SDDS::parser::array_parser
string	src/Utilities/SDDSParser/associate.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > string, quoted_string,$/;"	m	struct:SDDS::parser::associate_parser
string	src/Utilities/SDDSParser/ast.cpp	/^template struct SDDS::parser::string<iterator_t, skipper_t>;$/;"	m	class:SDDS::parser	typeref:struct:SDDS::parser::	file:
string	src/Utilities/SDDSParser/ast.hpp	/^        struct string: qi::grammar<Iterator, std::string(), Skipper >$/;"	s	namespace:SDDS::parser
string	src/Utilities/SDDSParser/ast_def.hpp	/^    string<Iterator, Skipper>::string():$/;"	f	class:SDDS::parser::string
string	src/Utilities/SDDSParser/column.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > string, quoted_string, units;$/;"	m	struct:SDDS::parser::column_parser
string	src/Utilities/SDDSParser/include.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > string, quoted_string,$/;"	m	struct:SDDS::parser::include_parser
string	src/Utilities/SDDSParser/parameter.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > string, quoted_string, units;$/;"	m	struct:SDDS::parser::parameter_parser
string	tools/Normalization2DMaps/normalization.py	/^import sys,re,os,string,fileinput$/;"	i
stringMethod_s	src/Track/TrackRun.cpp	/^const boost::bimap<TrackRun::RunMethod, std::string> TrackRun::stringMethod_s =$/;"	m	class:TrackRun	file:
stringMethod_s	src/Track/TrackRun.h	/^    static const boost::bimap<RunMethod, std::string> stringMethod_s;$/;"	m	class:TrackRun
stringTimeIntegrator_s	src/Track/TrackCmd.cpp	/^const std::map<std::string, Steppers::TimeIntegrator> TrackCmd::stringTimeIntegrator_s = {$/;"	m	class:TrackCmd	file:
stringTimeIntegrator_s	src/Track/TrackCmd.h	/^    static const std::map<std::string, Steppers::TimeIntegrator> stringTimeIntegrator_s;$/;"	m	class:TrackCmd
stringifyVariable	src/Attributes/Attributes.cpp	/^    std::string stringifyVariable(Object *obj) {$/;"	f	namespace:__anon77
stripFileHeader	src/Fields/Astra1DDynamic_fast.cpp	/^int Astra1DDynamic_fast::stripFileHeader(std::ifstream& file) {$/;"	f	class:Astra1DDynamic_fast
stripFileHeader	src/Fields/Astra1DElectroStatic_fast.cpp	/^int Astra1DElectroStatic_fast::stripFileHeader(std::ifstream& file) {$/;"	f	class:Astra1DElectroStatic_fast
stripFileHeader	src/Fields/Astra1DMagnetoStatic_fast.cpp	/^int Astra1DMagnetoStatic_fast::stripFileHeader(std::ifstream& file) {$/;"	f	class:Astra1DMagnetoStatic_fast
stripFileHeader	src/Fields/FM1DDynamic.cpp	/^void FM1DDynamic::stripFileHeader(std::ifstream& fieldFile) {$/;"	f	class:FM1DDynamic
stripFileHeader	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::stripFileHeader(std::ifstream& fieldFile) {$/;"	f	class:FM1DDynamic_fast
stripFileHeader	src/Fields/FM1DElectroStatic.cpp	/^void FM1DElectroStatic::stripFileHeader(std::ifstream& fieldFile) {$/;"	f	class:FM1DElectroStatic
stripFileHeader	src/Fields/FM1DElectroStatic_fast.cpp	/^void FM1DElectroStatic_fast::stripFileHeader(std::ifstream& fieldFile) {$/;"	f	class:FM1DElectroStatic_fast
stripFileHeader	src/Fields/FM1DMagnetoStatic.cpp	/^void FM1DMagnetoStatic::stripFileHeader(std::ifstream& fieldFile) {$/;"	f	class:FM1DMagnetoStatic
stripFileHeader	src/Fields/FM1DMagnetoStatic_fast.cpp	/^void FM1DMagnetoStatic_fast::stripFileHeader(std::ifstream& fieldFile) {$/;"	f	class:FM1DMagnetoStatic_fast
sub	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<Tmplt>  MMatrix<Tmplt>::sub(size_t min_row, size_t max_row, size_t min_col, size_t max_col) const$/;"	f	class:interpolation::MMatrix
sub	src/Fields/Interpolation/MVector.cpp	/^MVector<Tmplt> MVector<Tmplt>::sub(size_t n1, size_t n2) const$/;"	f	class:interpolation::MVector
subEquals	src/Fields/Interpolation/NDGrid.cpp	/^Mesh::Iterator& NDGrid::subEquals(Mesh::Iterator& lhs, const Mesh::Iterator& rhs) const {$/;"	f	class:interpolation::NDGrid
subEquals	src/Fields/Interpolation/NDGrid.cpp	/^Mesh::Iterator& NDGrid::subEquals(Mesh::Iterator& lhs, int difference) const {$/;"	f	class:interpolation::NDGrid
subEquals	src/Fields/Interpolation/ThreeDGrid.cpp	/^Mesh::Iterator& ThreeDGrid::subEquals$/;"	f	class:interpolation::ThreeDGrid
subOne	src/Fields/Interpolation/NDGrid.cpp	/^Mesh::Iterator& NDGrid::subOne(Mesh::Iterator& lhs) const {$/;"	f	class:interpolation::NDGrid
subOne	src/Fields/Interpolation/ThreeDGrid.cpp	/^Mesh::Iterator& ThreeDGrid::subOne(Mesh::Iterator& lhs) const {$/;"	f	class:interpolation::ThreeDGrid
subtractField	src/Fields/BDipoleField.cpp	/^BDipoleField &BDipoleField::subtractField(const BDipoleField &field) {$/;"	f	class:BDipoleField
subtractField	src/Fields/BMultipoleField.cpp	/^BMultipoleField &BMultipoleField::subtractField(const BMultipoleField &field) {$/;"	f	class:BMultipoleField
sum	src/PartBunch/Binning/ParallelReduceTools.h	/^        KOKKOS_FORCEINLINE_FUNCTION static ParticleBinning::ArrayReduction<SizeType, IndexType, N> sum() {$/;"	f	struct:Kokkos::reduction_identity
sum	src/PartBunch/Binning/ParallelReduceTools.h	/^        KOKKOS_FORCEINLINE_FUNCTION static ParticleBinning::HostArrayReduction<SizeType, IndexType> sum() {$/;"	f	struct:Kokkos::reduction_identity
sum	src/Utilities/Util.h	/^        long double sum;$/;"	m	struct:Util::KahanAccumulation
swap	src/Algorithms/.PartBunch.cpp	/^void PartBunch::swap(unsigned int i, unsigned int j) {$/;"	f	class:PartBunch
swap	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::swap(unsigned int i, unsigned int j) {$/;"	f	class:PartBunch
swap	src/Elements/OpalBeamline.cpp	/^void OpalBeamline::swap(OpalBeamline& rhs) {$/;"	f	class:OpalBeamline
swap	src/Fields/Astra1DDynamic.cpp	/^void Astra1DDynamic::swap() {$/;"	f	class:Astra1DDynamic
swap	src/Fields/Astra1DDynamic_fast.cpp	/^void Astra1DDynamic_fast::swap() {$/;"	f	class:Astra1DDynamic_fast
swap	src/Fields/Astra1DElectroStatic.cpp	/^void Astra1DElectroStatic::swap() {$/;"	f	class:Astra1DElectroStatic
swap	src/Fields/Astra1DElectroStatic_fast.cpp	/^void Astra1DElectroStatic_fast::swap() {$/;"	f	class:Astra1DElectroStatic_fast
swap	src/Fields/Astra1DMagnetoStatic.cpp	/^void Astra1DMagnetoStatic::swap() {$/;"	f	class:Astra1DMagnetoStatic
swap	src/Fields/Astra1DMagnetoStatic_fast.cpp	/^void Astra1DMagnetoStatic_fast::swap() {$/;"	f	class:Astra1DMagnetoStatic_fast
swap	src/Fields/FM1DDynamic.cpp	/^void FM1DDynamic::swap() {$/;"	f	class:FM1DDynamic
swap	src/Fields/FM1DDynamic_fast.cpp	/^void FM1DDynamic_fast::swap() {$/;"	f	class:FM1DDynamic_fast
swap	src/Fields/FM1DElectroStatic.cpp	/^void FM1DElectroStatic::swap() {$/;"	f	class:FM1DElectroStatic
swap	src/Fields/FM1DElectroStatic_fast.cpp	/^void FM1DElectroStatic_fast::swap() {$/;"	f	class:FM1DElectroStatic_fast
swap	src/Fields/FM1DMagnetoStatic.cpp	/^void FM1DMagnetoStatic::swap() {$/;"	f	class:FM1DMagnetoStatic
swap	src/Fields/FM1DMagnetoStatic_fast.cpp	/^void FM1DMagnetoStatic_fast::swap() {$/;"	f	class:FM1DMagnetoStatic_fast
swap	src/Fields/FM1DProfile1.cpp	/^void FM1DProfile1::swap() {$/;"	f	class:FM1DProfile1
swap	src/Fields/FM1DProfile2.cpp	/^void FM1DProfile2::swap() {$/;"	f	class:FM1DProfile2
swap	src/Fields/FM2DDynamic.cpp	/^void FM2DDynamic::swap() {$/;"	f	class:FM2DDynamic
swap	src/Fields/FM2DElectroStatic.cpp	/^void FM2DElectroStatic::swap() {$/;"	f	class:FM2DElectroStatic
swap	src/Fields/FM2DMagnetoStatic.cpp	/^void FM2DMagnetoStatic::swap() {$/;"	f	class:FM2DMagnetoStatic
swap	src/Fields/FM3DDynamic.cpp	/^void FM3DDynamic::swap() {$/;"	f	class:FM3DDynamic
swap	src/Fields/FM3DH5BlockBase.h	/^    virtual void swap($/;"	f	class:FM3DH5BlockBase
swap	src/Fields/FM3DMagnetoStatic.cpp	/^void FM3DMagnetoStatic::swap() {$/;"	f	class:FM3DMagnetoStatic
swap	src/Fields/FM3DMagnetoStaticExtended.cpp	/^void FM3DMagnetoStaticExtended::swap() {$/;"	f	class:FM3DMagnetoStaticExtended
swap	src/Fields/FMDummy.cpp	/^void FMDummy::swap() {$/;"	f	class:FMDummy
swap	src/Fields/SectorMagneticFieldMap.cpp	/^void SectorMagneticFieldMap::swap() {}$/;"	f	class:SectorMagneticFieldMap
swap	src/PartBunch/PartBunch.hpp	/^    void swap(unsigned int i, unsigned int j) {$/;"	f	class:PartBunch
swapXY	src/Distribution/LaserProfile.cpp	/^void LaserProfile::swapXY(unsigned short* image) {$/;"	f	class:LaserProfile
swap_m	src/Fields/FM2DDynamic.h	/^    bool swap_m;$/;"	m	class:FM2DDynamic
swap_m	src/Fields/FM2DElectroStatic.h	/^    bool swap_m;$/;"	m	class:FM2DElectroStatic
swap_m	src/Fields/FM2DMagnetoStatic.h	/^    bool swap_m;$/;"	m	class:FM2DMagnetoStatic
swap_m	src/Fields/FM3DH5BlockBase.h	/^    bool swap_m;$/;"	m	class:FM3DH5BlockBase
switchElements	src/Elements/OpalBeamline.cpp	/^void OpalBeamline::switchElements($/;"	f	class:OpalBeamline
switchElementsOff	src/Elements/OpalBeamline.cpp	/^void OpalBeamline::switchElementsOff() {$/;"	f	class:OpalBeamline
switchOffUnitlessPositions	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::switchOffUnitlessPositions(bool use_dt_per_particle) {$/;"	f	class:PartBunch
switchOffUnitlessPositions	src/PartBunch/PartBunch.hpp	/^    void switchOffUnitlessPositions(bool use_dt_per_particle = false) {$/;"	f	class:PartBunch
switchToUnitlessPositions	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::switchToUnitlessPositions(bool use_dt_per_particle) {$/;"	f	class:PartBunch
switchToUnitlessPositions	src/PartBunch/PartBunch.hpp	/^    void switchToUnitlessPositions(bool use_dt_per_particle = false) {$/;"	f	class:PartBunch
symmetry	src/Fields/SectorMagneticFieldMap.h	/^    enum symmetry {none, dipole};$/;"	g	class:SectorMagneticFieldMap
symmetry_m	src/AbsBeamline/Ring.h	/^    int symmetry_m;$/;"	m	class:Ring
symmetry_m	src/Fields/SectorMagneticFieldMap.h	/^    symmetry symmetry_m;$/;"	m	class:SectorMagneticFieldMap
sync	src/PartBunch/Binning/BinHisto.h	/^        void sync() {$/;"	f	class:ParticleBinning::Histogram
sys	tools/Normalization2DMaps/normalization.py	/^import sys,re,os,string,fileinput$/;"	i
t0_m	src/Track/Track.h	/^    double t0_m;$/;"	m	class:Track
tEmission_m	src/Distribution/Distribution.h	/^    double tEmission_m;$/;"	m	class:Distribution
tEmission_m	src/PartBunch/PartBunch.hpp	/^    double tEmission_m;$/;"	m	class:PartBunch
tPulseLengthFWHM_m	src/Distribution/Distribution.h	/^    double tPulseLengthFWHM_m;$/;"	m	class:Distribution
t_m	src/PartBunch/PartBunch.hpp	/^    double t_m;$/;"	m	class:PartBunch
tabName	src/AbstractObjects/TableRowRep.h	/^    std::string tabName;      \/\/ Table name.$/;"	m	class:TableRowRep
tabName	src/Expressions/ARow.h	/^        const std::string tabName;$/;"	m	class:Expressions::ARow
tab_name	src/Expressions/AColumn.h	/^        const std::string tab_name;$/;"	m	class:Expressions::AColumn
tab_name	src/Expressions/SCell.h	/^        const std::string tab_name;$/;"	m	class:Expressions::SCell
table0	src/Expressions/Expressions.cpp	/^    static TFunction0<double> table0[] = {$/;"	m	namespace:Expressions	file:
table1	src/Expressions/Expressions.cpp	/^    static const TFunction1<double, double> table1[] = {$/;"	m	namespace:Expressions	file:
table2	src/Expressions/Expressions.cpp	/^    static const TFunction2<double, double> table2[] = {{"ATAN2", -1, atan2}, {"MAX", -1, Max},$/;"	m	namespace:Expressions	file:
tableDirectory	src/AbstractObjects/OpalData.cpp	/^    std::list<Table*> tableDirectory;$/;"	m	struct:OpalDataImpl	file:
tableIterator	src/AbstractObjects/OpalData.cpp	/^    typedef std::list<Table*>::iterator tableIterator;$/;"	t	struct:OpalDataImpl	file:
tablea	src/Expressions/Expressions.cpp	/^    static const ArrayFun tablea[] = {$/;"	m	namespace:Expressions	file:
tanDelta_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    double tanDelta_m = 0.;$/;"	m	class:ScalingFFAMagnet
tanh_m	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^    endfieldmodel::Tanh* tanh_m; \/\/ magnet_m owns this memory$/;"	m	class:VerticalFFAMagnetTest	file:
tanhderiv	src/AbsBeamline/MultipoleTFunctions/tanhDeriv.cpp	/^namespace tanhderiv {$/;"	n	file:
tanhderiv	src/AbsBeamline/MultipoleTFunctions/tanhDeriv.h	/^namespace tanhderiv {$/;"	n
td_map	src/Algorithms/AbstractTimeDependence.cpp	/^std::map<std::string, std::shared_ptr<AbstractTimeDependence> > AbstractTimeDependence::td_map =$/;"	m	class:AbstractTimeDependence	file:
td_map	src/Algorithms/AbstractTimeDependence.h	/^    static std::map<std::string, std::shared_ptr<AbstractTimeDependence> > td_map;$/;"	m	class:AbstractTimeDependence
temperature_m	src/Algorithms/DistributionMoments.h	/^    double temperature_m;$/;"	m	class:DistributionMoments
term	src/Utilities/MSLang/matheval.hpp	/^            qi::rule<Iterator, expr_ast<real_t>(), ascii::space_type> term;$/;"	m	struct:matheval::detail::grammar
tesla	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^    const double tesla = 10.;$/;"	m	class:VerticalFFAMagnetTest	file:
test	src/.Solvers/FFTPoissonSolver.h	/^    void test(PartBunch_t* \/*bunch*\/) {$/;"	f	class:FFTPoissonSolver
test	tests/opal_src/BasicActions/DumpFieldsTest.cpp	/^namespace test {$/;"	n	file:
test	tests/opal_src/BasicActions/DumpFieldsTest.cpp	/^void test() {}$/;"	f	namespace:test
testEmitParticles	src/Distribution/SamplingBase.hpp	/^       virtual void testEmitParticles(size_t nsteps, double dt) {}$/;"	f	class:SamplingBase
testField	tests/classic_src/AbsBeamline/RingTest.cpp	/^void testField(double s, double r, double y, double phi,$/;"	f
testField	tests/classic_src/AbsBeamline/SBend3DTest.cpp	/^void testField(double r, double y, double phi,$/;"	f
testFieldLookup	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^void testFieldLookup(VariableRFCavityFringeField& cav, Vector_t R, double t, Vector_t E, Vector_t B) {$/;"	f
testGetSet	tests/classic_src/AbsBeamline/VariableRFCavityTest.cpp	/^void testGetSet(VariableRFCavity& cav1,$/;"	f
testLambda	tests/classic_src/Solvers/TestLambda.h	/^const double testLambda[294] = {$/;"	v
testMaxwell1and2	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^std::vector<double> testMaxwell1and2(VariableRFCavityFringeField& cav, Vector_t pos, double t, double deltaPos) {$/;"	f
testMaxwell3	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^Vector_t testMaxwell3(VariableRFCavityFringeField& cav, Vector_t pos, double t, double deltaPos, double deltaT) {$/;"	f
testMaxwell4	tests/classic_src/AbsBeamline/VariableRFCavityFringeFieldTest.cpp	/^Vector_t testMaxwell4(VariableRFCavityFringeField& cav, Vector_t pos, double t, double deltaPos, double deltaT) {$/;"	f
testNull	tests/classic_src/AbsBeamline/UndulatorTest.cpp	/^void testNull(Undulator& und) {$/;"	f
testNull	tests/classic_src/AbsBeamline/VariableRFCavityTest.cpp	/^void testNull(VariableRFCavity& cav1) {$/;"	f
testNumEmitParticles	src/Distribution/SamplingBase.hpp	/^       virtual void testNumEmitParticles(size_t nsteps, double dt) {}$/;"	f	class:SamplingBase
testOffset	tests/classic_src/AbsBeamline/OffsetTest.cpp	/^void testOffset(Offset& off, double refRotIn, double refRotOut, double length,$/;"	f
testTensorUnaryOps	tests/ippl_src/AppTypes/Tensor.cpp	/^class testTensorUnaryOps$/;"	c	file:
test_points	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^void test_points(int dim, int lower, int upper, std::vector< std::vector<int> > pts) {$/;"	f	namespace:__anon3
text_m	src/Utilities/SDDSParser/description.hpp	/^        boost::optional<std::string> text_m;$/;"	m	struct:SDDS::description
the_array	src/PartBunch/Binning/ParallelReduceTools.h	/^        SizeType the_array[N];$/;"	m	struct:ParticleBinning::ArrayReduction
the_array	src/PartBunch/Binning/ParallelReduceTools.h	/^        SizeType* the_array;$/;"	m	struct:ParticleBinning::HostArrayReduction
thediff	tests/ippl_src/Field/BCond.cpp	/^bool thediff(std::string filename1, std::string filename2)$/;"	f	namespace:__anon16
thediff	tests/ippl_src/Field/FieldDebug.cpp	/^    bool thediff(std::string filename1, std::string filename2)$/;"	f	namespace:__anon13
thediff	tests/ippl_src/Meshes/CartesianCentering.cpp	/^bool thediff(std::string filename1, std::string filename2)$/;"	f	namespace:__anon9
thediff	tests/ippl_src/Particle/ParticleDebug.cpp	/^    bool thediff(std::string filename1, std::string filename2)$/;"	f	namespace:__anon7
then_block	src/OpalParser/IfStatement.h	/^    Statement *then_block;$/;"	m	class:IfStatement
thetaSum_m	tests/classic_src/AbsBeamline/RingTest.cpp	/^    double thetaSum_m;$/;"	m	class:OffsetFactory	file:
thisPoints_m	src/Fields/Interpolation/PPSolveFactory.h	/^    std::vector< std::vector<double> > thisPoints_m;$/;"	m	class:interpolation::PPSolveFactory
thisValues_m	src/Fields/Interpolation/PPSolveFactory.h	/^    std::vector< std::vector<double> > thisValues_m;$/;"	m	class:interpolation::PPSolveFactory
threegridtest	tests/classic_src/Fields/Interpolation/ThreeDGridTest.cpp	/^namespace threegridtest {$/;"	n	file:
threshold_m	src/Filters/RelativeFFTLowPass.h	/^    double threshold_m;$/;"	m	class:RelativeFFTLowPassFilter
tidyUp	src/Algorithms/IndexMap.cpp	/^void IndexMap::tidyUp(double zstop) {$/;"	f	class:IndexMap
time	src/Utilities/Timer.cpp	/^    std::string Timer::time() const {$/;"	f	class:OPALTimer::Timer
timeIntegration1	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::timeIntegration1(BorisPusher& pusher) {$/;"	f	class:ParallelTracker
timeIntegration2	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::timeIntegration2(BorisPusher& pusher) {$/;"	f	class:ParallelTracker
timeIntegrationTimer1_m	src/Algorithms/ParallelTracker.h	/^    IpplTimings::TimerRef timeIntegrationTimer1_m;$/;"	m	class:ParallelTracker
timeIntegrationTimer2_m	src/Algorithms/ParallelTracker.h	/^    IpplTimings::TimerRef timeIntegrationTimer2_m;$/;"	m	class:ParallelTracker
timeIntegrator	src/Track/Track.h	/^    Steppers::TimeIntegrator timeIntegrator;$/;"	m	class:Track
timeStamp	src/AbstractObjects/Object.h	/^    double timeStamp;$/;"	m	class:Object
time_m	src/AbstractObjects/OpalParticle.h	/^    double time_m;$/;"	m	class:OpalParticle
time_m	src/Algorithms/OpalParticle.h	/^    double time_m;$/;"	m	class:OpalParticle
time_m	src/Algorithms/OrbitThreader.h	/^    double time_m;$/;"	m	class:OrbitThreader
time_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    double time_m;$/;"	m	class:AlpineManager
time_m	src/PartBunch/PartBunch.hpp	/^    double time_m;$/;"	m	class:PartBunch
timer	src/Utilities/Timer.h	/^        time_t timer;$/;"	m	class:OPALTimer::Timer
times	src/Expressions/Expressions.cpp	/^    static TFunction2<double, double> times = {"*", 5, Mpy};$/;"	m	namespace:Expressions	file:
times_m	src/Algorithms/SplineTimeDependence.h	/^    std::vector<double> times_m;$/;"	m	class:SplineTimeDependence
times_m	tests/classic_src/Algorithms/SplineTimeDependenceTest.cpp	/^    std::vector<double> times_m;$/;"	m	class:SplineTimeDependenceTest	file:
titanium	src/Physics/Material.cpp	/^    auto titanium      = Material::addMaterial("Titanium",$/;"	m	namespace:__anon18	file:
tmean_m	src/Structure/LossDataSink.h	/^    double tmean_m;    \/\/ ns$/;"	m	struct:SetStatistics
tmpgreen_m	src/.Solvers/FFTPoissonSolver.h	/^    Field_t tmpgreen_m;$/;"	m	class:FFTPoissonSolver
tmppart_m	src/Algorithms/PartBins.h	/^    std::vector< std::vector<double> > tmppart_m;$/;"	m	class:PartBins
toCoordIdx	src/.Solvers/ArbitraryDomain.h	/^    int toCoordIdx(int idx, int idy, int idz) const {$/;"	f	class:ArbitraryDomain
toCoordIdx	src/.Solvers/EllipticDomain.h	/^    int toCoordIdx(int x, int y) const { return y * nr_m[0] + x; }$/;"	f	class:EllipticDomain
toInteger	src/Fields/Interpolation/NDGrid.cpp	/^int NDGrid::toInteger(const Mesh::Iterator& lhs) const {$/;"	f	class:interpolation::NDGrid
toInteger	src/Fields/Interpolation/ThreeDGrid.h	/^int ThreeDGrid::toInteger(const Mesh::Iterator& lhs) const {$/;"	f	class:interpolation::ThreeDGrid
toLabTrafo_m	src/PartBunch/PartBunch.hpp	/^    CoordinateSystemTrafo toLabTrafo_m; $/;"	m	class:PartBunch
toString	src/Structure/SDDSWriter.h	/^std::string SDDSWriter::toString(const T& val) {$/;"	f	class:SDDSWriter
toString	src/Utilities/Util.h	/^void Util::toString(IteratorIn first, IteratorIn last, IteratorOut out) {$/;"	f	class:Util
toStringWithThousandSep	src/Utilities/Util.h	/^std::string Util::toStringWithThousandSep(T value, char sep) {$/;"	f	class:Util
toUpper	src/Utilities/Util.cpp	/^    std::string toUpper(const std::string& str) {$/;"	f	namespace:Util
tokens	src/OpalParser/CompoundStatement.h	/^    std::shared_ptr<MacroStream> tokens;$/;"	m	class:CompoundStatement
tokens	src/OpalParser/Statement.h	/^    TokenList tokens;$/;"	m	class:Statement
totalBinWidth_m	src/PartBunch/Binning/BinHisto.h	/^        value_type totalBinWidth_m; \/\/\/ \\brief Total width of all bins combined.$/;"	m	class:ParticleBinning::Histogram
totalCharge_m	src/Algorithms/DistributionMoments.h	/^    double totalCharge_m;$/;"	m	class:DistributionMoments
totalMass_m	src/Algorithms/DistributionMoments.h	/^    double totalMass_m;$/;"	m	class:DistributionMoments
totalN_m	src/Distribution/FlatTop.hpp	/^    size_type totalN_m;$/;"	m	class:FlatTop
totalNumParticles_m	src/Algorithms/DistributionMoments.h	/^    unsigned int totalNumParticles_m;$/;"	m	class:DistributionMoments
totalNumberParticles_m	src/Distribution/Distribution.h	/^    size_t totalNumberParticles_m;$/;"	m	class:Distribution
totalP_m	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    size_type totalP_m;$/;"	m	class:AlpineManager
totalP_m	src/PartBunch/PartBunch.hpp	/^    size_type totalP_m;$/;"	m	class:PartBunch
totalPathLength_m	src/Algorithms/IndexMap.h	/^    double totalPathLength_m;$/;"	m	class:IndexMap
trace	src/Fields/Interpolation/MMatrix.cpp	/^Tmplt MMatrix<Tmplt>::trace() const$/;"	f	class:interpolation::MMatrix
track	src/Algorithms/CavityAutophaser.cpp	/^double CavityAutophaser::track($/;"	f	class:CavityAutophaser
trackBack	src/Algorithms/OrbitThreader.cpp	/^void OrbitThreader::trackBack() {$/;"	f	class:OrbitThreader
trackBunch	src/AbsBeamline/Component.cpp	/^void Component::trackBunch(PartBunch_t*, const PartData&, bool, bool) const {$/;"	f	class:Component
trackDirectory	src/Track/TrackParser.h	/^    Directory trackDirectory;$/;"	m	class:TrackParser
trackMap	src/AbsBeamline/Component.cpp	/^void Component::trackMap(FVps<double, 6>&, const PartData&, bool, bool) const {$/;"	f	class:Component
trackOnAxisParticle	src/AbsBeamline/RFCavity.cpp	/^std::pair<double, double> RFCavity::trackOnAxisParticle($/;"	f	class:RFCavity
trafo_m	src/Utilities/MSLang.h	/^        AffineTransformation trafo_m;$/;"	m	struct:mslang::Base
transMaxOrder_m	src/AbsBeamline/MultipoleT.h	/^    std::size_t transMaxOrder_m = 0;$/;"	m	class:MultipoleT
transMaxOrder_m	src/AbsBeamline/MultipoleTBase.h	/^    std::size_t transMaxOrder_m = 0;$/;"	m	class:MultipoleTBase
transProfile_m	src/AbsBeamline/MultipoleT.h	/^    std::vector<double> transProfile_m;$/;"	m	class:MultipoleT
transProfile_m	src/AbsBeamline/MultipoleTBase.h	/^    std::vector<double> transProfile_m;$/;"	m	class:MultipoleTBase
transferIfInside	src/Utilities/MSLang/QuadTree.cpp	/^    void QuadTree::transferIfInside(std::list<std::shared_ptr<Base> > &objs) {$/;"	f	class:mslang::QuadTree
transformBField	src/AbsBeamline/MultipoleTCurvedConstRadius.cpp	/^void MultipoleTCurvedConstRadius::transformBField(Vector_t<double, 3> &B,$/;"	f	class:MultipoleTCurvedConstRadius
transformBField	src/AbsBeamline/MultipoleTCurvedVarRadius.cpp	/^void MultipoleTCurvedVarRadius::transformBField(Vector_t<double, 3> &B,$/;"	f	class:MultipoleTCurvedVarRadius
transformBField	src/AbsBeamline/MultipoleTStraight.h	/^    void MultipoleTStraight::transformBField(Vector_t<double, 3> &\/*B*\/, const Vector_t<double, 3> &\/*R*\/) {$/;"	f	class:MultipoleTStraight
transformBunch	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::transformBunch(const CoordinateSystemTrafo& trafo) {$/;"	f	class:ParallelTracker
transformCoords	src/AbsBeamline/MultipoleT.cpp	/^Vector_t<double, 3> MultipoleT::transformCoords(const Vector_t<double, 3>& R) {$/;"	f	class:MultipoleT
transformCoords	src/AbsBeamline/MultipoleTCurvedConstRadius.cpp	/^void MultipoleTCurvedConstRadius::transformCoords(Vector_t<double, 3> &R) {$/;"	f	class:MultipoleTCurvedConstRadius
transformCoords	src/AbsBeamline/MultipoleTCurvedVarRadius.cpp	/^void MultipoleTCurvedVarRadius::transformCoords(Vector_t<double, 3> &R) {$/;"	f	class:MultipoleTCurvedVarRadius
transformCoords	src/AbsBeamline/MultipoleTStraight.cpp	/^void MultipoleTStraight::transformCoords(Vector_t<double, 3> &\/*R*\/) {$/;"	f	class:MultipoleTStraight
transformFrom	src/Algorithms/CoordinateSystemTrafo.h	/^inline ippl::Vector<double, 3> CoordinateSystemTrafo::transformFrom($/;"	f	class:CoordinateSystemTrafo
transformFrom	src/Elements/OpalBeamline.h	/^inline Vector_t<double, 3> OpalBeamline::transformFrom(const Vector_t<double, 3>& r) const {$/;"	f	class:OpalBeamline
transformFrom	src/Utilities/MSLang/AffineTransformation.h	/^        Vector_t<double, 3> transformFrom(const Vector_t<double, 3> &v) const {$/;"	f	struct:mslang::AffineTransformation
transformFromEntranceCoordinates	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^void CoordinateTransform::transformFromEntranceCoordinates($/;"	f	class:coordinatetransform::CoordinateTransform
transformFromLocalCS	src/Elements/OpalBeamline.h	/^inline Vector_t<double, 3> OpalBeamline::transformFromLocalCS($/;"	f	class:OpalBeamline
transformTo	src/Algorithms/CoordinateSystemTrafo.h	/^inline ippl::Vector<double, 3> CoordinateSystemTrafo::transformTo($/;"	f	class:CoordinateSystemTrafo
transformTo	src/Elements/OpalBeamline.h	/^inline Vector_t<double, 3> OpalBeamline::transformTo(const Vector_t<double, 3>& r) const {$/;"	f	class:OpalBeamline
transformTo	src/Utilities/MSLang/AffineTransformation.h	/^        Vector_t<double, 3> transformTo(const Vector_t<double, 3> &v) const {$/;"	f	struct:mslang::AffineTransformation
transformToLocalCS	src/Elements/OpalBeamline.h	/^inline Vector_t<double, 3> OpalBeamline::transformToLocalCS($/;"	f	class:OpalBeamline
transformation_m	src/BeamlineGeometry/Euclid3DGeometry.h	/^    Euclid3D transformation_m;$/;"	m	class:Euclid3DGeometry
translation	src/BeamlineGeometry/Euclid3D.cpp	/^Euclid3D Euclid3D::translation(double x, double y, double z) {$/;"	f	class:Euclid3D
transpose	src/BeamlineGeometry/Matrix3D.cpp	/^Matrix3D Matrix3D::transpose() const {$/;"	f	class:Matrix3D
tree	src/Utilities/MSLang/matheval.hpp	/^            tree_t tree;$/;"	m	struct:matheval::detail::expr_ast
triangle_intersects_cube	src/Structure/BoundaryGeometry.cpp	/^static int triangle_intersects_cube(const Triangle& t) {$/;"	f	file:
triangles_m	src/Structure/MeshGenerator.h	/^    std::vector<Vector<unsigned int, 3>> triangles_m;$/;"	m	class:MeshData
triangles_m	src/Utilities/MSLang/Polygon.h	/^        std::vector<Triangle> triangles_m;$/;"	m	struct:mslang::Polygon
triangles_m	src/Utilities/Mesher.h	/^    std::vector<mslang::Triangle> triangles_m;$/;"	m	class:Mesher
triangulize	src/Utilities/MSLang/Polygon.cpp	/^    void Polygon::triangulize(std::vector<Vector_t<double, 3>> &nodes) {$/;"	f	class:mslang::Polygon
trms_m	src/Structure/LossDataSink.h	/^    double trms_m;     \/\/ ns$/;"	m	struct:SetStatistics
truncOrder	src/Track/Track.h	/^    int truncOrder;$/;"	m	class:Track
truncate	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^void DifferentialOperator::truncate(const std::size_t &truncateOrder) {$/;"	f	class:polynomial::DifferentialOperator
truncate	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^void DifferentialOperatorTwo::truncate($/;"	f	class:polynomial::DifferentialOperatorTwo
truncate	src/AbsBeamline/MultipoleTFunctions/Polynomial.h	/^    void Polynomial::truncate(const std::size_t &truncateOrder) {$/;"	f	class:polynomial::Polynomial
truncate	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^void PolynomialSum::truncate(const std::size_t &truncateOrder) {$/;"	f	class:polynomial::PolynomialSum
truncate	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.cpp	/^void RecursionRelation::truncate(std::size_t highestXorder) {$/;"	f	class:polynomial::RecursionRelation
truncate	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h	/^    void RecursionRelationTwo::truncate(std::size_t highestXorder) {$/;"	f	class:polynomial::RecursionRelationTwo
truncate	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^    void TwoPolynomial::truncate(const std::size_t &truncateOrder) {$/;"	f	class:polynomial::TwoPolynomial
turnNumber_m	src/Structure/LossDataSink.h	/^    std::vector<size_t> turnNumber_m;$/;"	m	class:LossDataSink
turn_m	src/Structure/PeakFinder.h	/^    int turn_m;$/;"	m	class:PeakFinder
turnnumber_m	src/Algorithms/ParallelTracker.h	/^    unsigned turnnumber_m;$/;"	m	class:ParallelTracker
twice	tests/ippl_src/Field/FunctionFace.cpp	/^double twice(const double& x) { return 2.0*x; }$/;"	f
twoPiOverLambdaSq_m	src/Fields/FM1DDynamic.h	/^    double twoPiOverLambdaSq_m;             \/\/\/ 2 Pi divided by the field RF wavelength squared.$/;"	m	class:FM1DDynamic
twoPiOverLambdaSq_m	src/Fields/FM1DDynamic_fast.h	/^    double twoPiOverLambdaSq_m;             \/\/\/ 2 Pi divided by the field RF wavelength squared.$/;"	m	class:FM1DDynamic_fast
two_pi	src/Physics/Physics.h	/^    constexpr double two_pi     = 2 * pi;$/;"	m	namespace:Physics
type	src/OpalParser/Token.h	/^    Type type;$/;"	m	class:Token
type	src/Utilities/SDDSParser/column.hpp	/^        struct result { typedef void type; };$/;"	t	struct:SDDS::columnOrder::result
type	src/Utilities/SDDSParser/error_handler.hpp	/^        struct result { typedef void type; };$/;"	t	struct:SDDS::error_handler::result
type	src/Utilities/SDDSParser/parameter.hpp	/^        struct result { typedef void type; };$/;"	t	struct:SDDS::parameterOrder::result
type	tests/opal_src/Elements/OpalPolynomialTimeDependenceTest.cpp	/^    std::string type;$/;"	m	class:TestElement	file:
typeName	src/Expressions/SRefAttr.h	/^        static const std::string typeName;$/;"	m	class:Expressions::SRefAttr
type_m	src/AbsBeamline/Monitor.h	/^    CollectionType type_m;$/;"	m	class:Monitor
type_m	src/AbsBeamline/RFCavity.h	/^    CavityType type_m;$/;"	m	class:RFCavity
type_m	src/Structure/MeshGenerator.h	/^    int type_m;$/;"	m	class:MeshData
type_m	src/Utilities/PortableBitmapReader.h	/^    FileType type_m;$/;"	m	class:PortableBitmapReader
type_m	src/Utilities/PortableGraymapReader.h	/^    FileType type_m;$/;"	m	class:PortableGraymapReader
type_m	src/Utilities/SDDSParser/column.hpp	/^        boost::optional<ast::datatype> type_m;$/;"	m	struct:SDDS::column
type_m	src/Utilities/SDDSParser/parameter.hpp	/^        boost::optional<ast::datatype> type_m;$/;"	m	struct:SDDS::parameter
type_pair	src/Algorithms/ParallelTracker.h	/^    typedef std::pair<ElementType, element_pair> type_pair;$/;"	t	class:ParallelTracker
typeset_msg	src/Fields/Fieldmap.cpp	/^std::string Fieldmap::typeset_msg(const std::string& msg, const std::string& title) {$/;"	f	class:Fieldmap
u_two_pi	src/Physics/Physics.h	/^    constexpr double u_two_pi   = 1.0 \/ two_pi;$/;"	m	namespace:Physics
ufunc	src/Utilities/MSLang/matheval.hpp	/^            } ufunc;$/;"	m	struct:matheval::detail::grammar	typeref:struct:matheval::detail::grammar::ufunc_
ufunc_	src/Utilities/MSLang/matheval.hpp	/^                ufunc_()$/;"	f	struct:matheval::detail::grammar::ufunc_
ufunc_	src/Utilities/MSLang/matheval.hpp	/^            struct ufunc_$/;"	s	struct:matheval::detail::grammar
unary_expr_	src/Utilities/MSLang/matheval.hpp	/^        struct unary_expr_ {$/;"	s	namespace:matheval::detail
unary_op	src/Utilities/MSLang/matheval.hpp	/^            unary_op(op_t op, expr_ast<real_t> rhs)$/;"	f	struct:matheval::detail::unary_op
unary_op	src/Utilities/MSLang/matheval.hpp	/^        struct unary_op$/;"	s	namespace:matheval::detail
uniform	src/Utilities/ClassicRandom.cpp	/^double Random::uniform() {$/;"	f	class:Random
unique	src/MemoryManagement/Pointer.h	/^inline void Pointer<Object>::unique() {$/;"	f	class:Pointer
unit	tools/opal2sdds/main.cpp	/^    std::string unit;$/;"	m	struct:Attribute	file:
unit_m	src/Structure/MemoryProfiler.h	/^    units_t unit_m;$/;"	m	class:MemoryProfiler
unitless	src/Algorithms/.PartBunchBase.h	/^    enum UnitState_t { units = 0, unitless = 1 };$/;"	e	enum:PartBunch::UnitState_t
unitless	src/OPALTypes.h	/^enum UnitState_t { units = 0, unitless = 1 };$/;"	e	enum:UnitState_t
units	src/Algorithms/.PartBunchBase.h	/^    enum UnitState_t { units = 0, unitless = 1 };$/;"	e	enum:PartBunch::UnitState_t
units	src/OPALTypes.h	/^enum UnitState_t { units = 0, unitless = 1 };$/;"	e	enum:UnitState_t
units	src/Utilities/SDDSParser/array.hpp	/^                array_group, units, string, quoted_string;$/;"	m	struct:SDDS::parser::array_parser
units	src/Utilities/SDDSParser/column.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > string, quoted_string, units;$/;"	m	struct:SDDS::parser::column_parser
units	src/Utilities/SDDSParser/parameter.hpp	/^        qi::rule<Iterator, std::string(), skipper<Iterator> > string, quoted_string, units;$/;"	m	struct:SDDS::parser::parameter_parser
units	tests/classic_src/AbsBeamline/OffsetTest.cpp	/^const double units = 1e3;$/;"	v
units_m	src/Fields/SectorMagneticFieldMap.h	/^    std::vector<double> units_m;$/;"	m	class:SectorMagneticFieldMap
units_m	src/Utilities/SDDSParser/column.hpp	/^        boost::optional<std::string> units_m;$/;"	m	struct:SDDS::column
units_m	src/Utilities/SDDSParser/parameter.hpp	/^        boost::optional<std::string> units_m;$/;"	m	struct:SDDS::parameter
units_t	src/Structure/MemoryProfiler.h	/^    typedef std::vector<std::string> units_t;$/;"	t	class:MemoryProfiler
unregisterExpression	src/AbstractObjects/OpalData.cpp	/^void OpalData::unregisterExpression(AttributeBase* expr) {$/;"	f	class:OpalData
unregisterReference	src/AbstractObjects/Object.cpp	/^void Object::unregisterReference(Invalidator *ref) {$/;"	f	class:Object
unregisterTable	src/AbstractObjects/OpalData.cpp	/^void OpalData::unregisterTable(Table* table) {$/;"	f	class:OpalData
update	src/AbsBeamline/ElementBase.cpp	/^bool ElementBase::update(const AttributeSet& set) {$/;"	f	class:ElementBase
update	src/AbstractObjects/Object.cpp	/^void Object::update() {$/;"	f	class:Object
update	src/AbstractObjects/OpalData.cpp	/^void OpalData::update() {$/;"	f	class:OpalData
update	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::update() {$/;"	f	class:PartBunch
update	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::update(const ParticleAttrib<char>& canSwap) {$/;"	f	class:PartBunch
update	src/BasicActions/Option.cpp	/^void Option::update(const std::vector<Attribute>& othersAttributes) {$/;"	f	class:Option
update	src/Distribution/Distribution.cpp	/^void Distribution::update() {$/;"	f	class:Distribution
update	src/Elements/OpalCavity.cpp	/^void OpalCavity::update() {$/;"	f	class:OpalCavity
update	src/Elements/OpalDrift.cpp	/^void OpalDrift::update() {$/;"	f	class:OpalDrift
update	src/Elements/OpalElement.cpp	/^void OpalElement::update() {$/;"	f	class:OpalElement
update	src/Elements/OpalMarker.cpp	/^void OpalMarker::update() {$/;"	f	class:OpalMarker
update	src/Elements/OpalMonitor.cpp	/^void OpalMonitor::update() {$/;"	f	class:OpalMonitor
update	src/Elements/OpalMultipole.cpp	/^void OpalMultipole::update() {$/;"	f	class:OpalMultipole
update	src/Elements/OpalMultipoleT.cpp	/^void OpalMultipoleT::update() {$/;"	f	class:OpalMultipoleT
update	src/Elements/OpalOffset/OpalGlobalCartesianOffset.cpp	/^void OpalGlobalCartesianOffset::update() {$/;"	f	class:OpalOffset::OpalGlobalCartesianOffset
update	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.cpp	/^void OpalGlobalCylindricalOffset::update() {$/;"	f	class:OpalOffset::OpalGlobalCylindricalOffset
update	src/Elements/OpalOffset/OpalLocalCartesianOffset.cpp	/^void OpalLocalCartesianOffset::update() {$/;"	f	class:OpalOffset::OpalLocalCartesianOffset
update	src/Elements/OpalOffset/OpalLocalCylindricalOffset.cpp	/^void OpalLocalCylindricalOffset::update() {$/;"	f	class:OpalOffset::OpalLocalCylindricalOffset
update	src/Elements/OpalProbe.cpp	/^void OpalProbe::update() {$/;"	f	class:OpalProbe
update	src/Elements/OpalRingDefinition.cpp	/^void OpalRingDefinition::update() {$/;"	f	class:OpalRingDefinition
update	src/Elements/OpalSolenoid.cpp	/^void OpalSolenoid::update() {$/;"	f	class:OpalSolenoid
update	src/Elements/OpalTravelingWave.cpp	/^void OpalTravelingWave::update() {$/;"	f	class:OpalTravelingWave
update	src/Elements/OpalVacuum.cpp	/^void OpalVacuum::update() {$/;"	f	class:OpalVacuum
update	src/Elements/OpalVerticalFFAMagnet.cpp	/^void OpalVerticalFFAMagnet::update() {$/;"	f	class:OpalVerticalFFAMagnet
update	src/Expressions/SFunction.cpp	/^void SFunction::update(double length) {$/;"	f	class:SFunction
update	src/Lines/Sequence.cpp	/^void Sequence::update() {$/;"	f	class:Sequence
update	src/Structure/Beam.cpp	/^void Beam::update() {$/;"	f	class:Beam
update	src/Structure/BoundaryGeometry.cpp	/^void BoundaryGeometry::update() {$/;"	f	class:BoundaryGeometry
update	src/Structure/FieldSolverCmd.cpp	/^void FieldSolverCmd::update() {$/;"	f	class:FieldSolverCmd
update	src/Structure/MemoryProfiler.cpp	/^void MemoryProfiler::update() {$/;"	f	class:MemoryProfiler
update	src/Utilities/OpalFilter.cpp	/^void OpalFilter::update() {$/;"	f	class:OpalFilter
updateBoundingBoxWithCurrentPosition	src/Algorithms/OrbitThreader.cpp	/^void OrbitThreader::updateBoundingBoxWithCurrentPosition() {$/;"	f	class:OrbitThreader
updateCache	src/Utilities/MSLang/Mask.cpp	/^    void Mask::updateCache(const std::vector<bool> &pixels, std::vector<unsigned int> &cache, unsigned int y) const {$/;"	f	class:mslang::Mask
updateComponentOrientation	src/Utilities/RingSection.cpp	/^void RingSection::updateComponentOrientation() {$/;"	f	class:RingSection
updateDataArr	src/PartBunch/Binning/BinningTools.h	/^        void updateDataArr(std::shared_ptr<bunch_type> bunch) { data_arr = bunch->R.getView(); }$/;"	f	struct:ParticleBinning::CoordinateSelector
updateDomainLength	src/Algorithms/.PartBunch.cpp	/^void PartBunch::updateDomainLength(Vektor<int, 3>& grid) {$/;"	f	class:PartBunch
updateElement	src/Structure/BoundaryGeometry.cpp	/^void BoundaryGeometry::updateElement(ElementBase* \/*element*\/) {$/;"	f	class:BoundaryGeometry
updateFields	src/Algorithms/.PartBunch.cpp	/^void PartBunch::updateFields(const Vector_t<double, 3>& \/*hr*\/, const Vector_t<double, 3>& origin) {$/;"	f	class:PartBunch
updateFields	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::updateFields(const Vector_t<double, 3>& \/*hr*\/, const Vector_t<double, 3>& \/*origin*\/) {$/;"	f	class:PartBunch
updateGeometry	src/AbsBeamline/Offset.cpp	/^void Offset::updateGeometry($/;"	f	class:Offset
updateGeometry	src/AbsBeamline/Offset.cpp	/^void Offset::updateGeometry() {$/;"	f	class:Offset
updateLayout	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        void updateLayout(ippl::FieldLayout<Dim>* fl, ippl::UniformCartesian<T, Dim>* mesh, bool& isFirstRepartition) {$/;"	f	class:LoadBalancer
updateLayout	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    void updateLayout(FieldLayout_t& fl, Mesh_t& mesh) {$/;"	f	class:ChargedParticles
updateLayout	src/PartBunch/LoadBalancer.hpp	/^    void updateLayout($/;"	f	class:LoadBalancer
updateList	src/Lines/Sequence.cpp	/^void Sequence::updateList(Sequence* seq, TLine* line) {$/;"	f	class:Sequence
updateMoments	src/PartBunch/PartBunch.hpp	/^    void updateMoments(){$/;"	f	class:PartBunch
updateMoments	src/PartBunch/ParticleContainer.hpp	/^    void updateMoments(){$/;"	f	class:ParticleContainer
updateNumTotal	src/Algorithms/.PartBunchBase.hpp	/^void PartBunch<T, Dim>::updateNumTotal() {$/;"	f	class:PartBunch
updateNumTotal	src/PartBunch/PartBunch.hpp	/^    void updateNumTotal() {$/;"	f	class:PartBunch
updatePartInBin_cyc	src/Algorithms/PartBins.cpp	/^void PartBins::updatePartInBin_cyc(size_t countLost[]) {$/;"	f	class:PartBins
updateRFElement	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::updateRFElement(std::string elName, double maxPhase) {$/;"	f	class:ParallelTracker
updateRefToLabCSTrafo	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::updateRefToLabCSTrafo() {$/;"	f	class:ParallelTracker
updateReference	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::updateReference(const BorisPusher& pusher) {$/;"	f	class:ParallelTracker
updateReferenceParticle	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::updateReferenceParticle(const BorisPusher& pusher) {$/;"	f	class:ParallelTracker
updateUnknown	src/Elements/OpalElement.cpp	/^void OpalElement::updateUnknown(ElementBase* base) {$/;"	f	class:OpalElement
upperRightCorner_m	src/Structure/BoundingBox.h	/^    Vector_t<double, 3> upperRightCorner_m;$/;"	m	class:BoundingBox
us2s	src/Physics/Units.h	/^    constexpr double us2s = 1 \/ s2us;$/;"	m	namespace:Units
use	src/Track/Track.h	/^    BeamSequence* use;$/;"	m	class:Track
userAttribs	src/AbsBeamline/ElementBase.h	/^    AttributeSet userAttribs;$/;"	m	class:ElementBase
v	src/BeamlineGeometry/Vector3D.h	/^    double v[3];$/;"	m	class:Vector3D
v1	src/Structure/BoundaryGeometry.cpp	/^    inline const Vector_t<double, 3>& v1() const {$/;"	f	class:Triangle
v1	src/Structure/BoundaryGeometry.cpp	/^    inline double v1(int i) const {$/;"	f	class:Triangle
v2	src/Structure/BoundaryGeometry.cpp	/^    inline const Vector_t<double, 3>& v2() const {$/;"	f	class:Triangle
v2	src/Structure/BoundaryGeometry.cpp	/^    inline double v2(int i) const {$/;"	f	class:Triangle
v3	src/Structure/BoundaryGeometry.cpp	/^    inline const Vector_t<double, 3>& v3() const {$/;"	f	class:Triangle
v3	src/Structure/BoundaryGeometry.cpp	/^    inline double v3(int i) const {$/;"	f	class:Triangle
vabs	tests/ippl_src/AppTypes/VektorTz.cpp	/^    Vek vabs(Vek v1)$/;"	f
validity_region_	src/Fields/Interpolation/PolynomialPatch.h	/^    Mesh* validity_region_;$/;"	m	class:interpolation::PolynomialPatch
value	src/AbstractObjects/ValueDefinition.cpp	/^Attribute &ValueDefinition::value() {$/;"	f	class:ValueDefinition
value	src/AbstractObjects/ValueDefinition.cpp	/^const Attribute &ValueDefinition::value() const {$/;"	f	class:ValueDefinition
value	src/Expressions/AValue.h	/^        mutable std::vector<T> value;$/;"	m	class:Expressions::AValue
value	src/Expressions/SConstant.h	/^        T value;$/;"	m	class:Expressions::SConstant
value	src/Expressions/SValue.h	/^        mutable T value;$/;"	m	class:Expressions::SValue
value	tools/opal2sdds/main.cpp	/^    std::vector<double> value;$/;"	m	struct:Attribute	file:
valueDim_m	src/Fields/Interpolation/PPSolveFactory.h	/^    int valueDim_m;$/;"	m	class:interpolation::PPSolveFactory
value_dimension_	src/Fields/Interpolation/PolynomialPatch.h	/^    unsigned int value_dimension_;$/;"	m	class:interpolation::PolynomialPatch
value_m	src/Structure/SDDSColumn.h	/^    variant_t value_m;$/;"	m	class:SDDSColumn
value_m	src/Utilities/SDDSParser/parameter.hpp	/^        ast::variant_t value_m;$/;"	m	struct:SDDS::parameter
value_t	src/Algorithms/IndexMap.h	/^    typedef std::set<std::shared_ptr<Component> > value_t;$/;"	t	class:IndexMap
values	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^    std::vector<std::vector<double> > values;$/;"	m	class:PPSolveFactoryTestFixture	file:
values2D	tests/classic_src/Fields/Interpolation/PPSolveFactoryTest.cpp	/^    std::vector<std::vector<double> > values2D;$/;"	m	class:PPSolveFactoryTestFixture	file:
values_m	src/Algorithms/SplineTimeDependence.h	/^    std::vector<double> values_m;$/;"	m	class:SplineTimeDependence
values_m	src/Fields/Interpolation/PPSolveFactory.h	/^    std::vector<std::vector<double> > values_m;$/;"	m	class:interpolation::PPSolveFactory
values_m	src/Utilities/SDDSParser/column.hpp	/^        ast::columnData_t values_m;$/;"	m	struct:SDDS::column
values_m	tests/classic_src/Algorithms/SplineTimeDependenceTest.cpp	/^    std::vector<double> values_m;$/;"	m	class:SplineTimeDependenceTest	file:
varRadiusGeometry_m	src/AbsBeamline/MultipoleTCurvedVarRadius.h	/^    VarRadiusGeometry varRadiusGeometry_m;$/;"	m	class:MultipoleTCurvedVarRadius
var_selector_m	src/PartBunch/Binning/AdaptBins.h	/^        BinningSelector var_selector_m;        \/\/\/< Variable selector for binning.$/;"	m	class:ParticleBinning::AdaptBins
variable	src/Utilities/MSLang/matheval.hpp	/^            qi::rule<Iterator, std::string()> variable;$/;"	m	struct:matheval::detail::grammar
variableRadius_m	src/AbsBeamline/MultipoleT.h	/^    bool variableRadius_m;$/;"	m	class:MultipoleT
variant_t	src/Structure/SDDSColumn.h	/^                           std::string> variant_t;$/;"	t	class:SDDSColumn
variant_t	src/Utilities/SDDSParser/ast.hpp	/^                               std::string> variant_t;$/;"	t	namespace:SDDS::ast
vbc_m	src/.Solvers/FFTPoissonSolver.h	/^    BConds<Vector_t<double, 3>, 3, Mesh_t, Center_t> vbc_m;$/;"	m	class:FFTPoissonSolver
vbc_m	src/Algorithms/.PartBunch.h	/^    BConds<Vector_t<double, 3>, 3, Mesh_t, Center_t> vbc_m;$/;"	m	class:PartBunch
vectorFace	tests/ippl_src/Field/BCond.cpp	/^CenteringEnum CCCEnums<2U,2U,0U>::vectorFace[2U*2U];$/;"	m	class:CCCEnums	file:
vectorFace	tests/ippl_src/Meshes/CartesianCentering.cpp	/^CenteringEnum CCCEnums<3U,3U,0U>::vectorFace[3U*3U];$/;"	m	class:CCCEnums	file:
vectorLengths	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.h	/^struct vectorLengths {$/;"	s	namespace:polynomial
vectorLowerBound	src/Fields/Interpolation/ThreeDGrid.cpp	/^void ThreeDGrid::vectorLowerBound(std::vector<double> vec,$/;"	f	class:interpolation::ThreeDGrid
version	src/Utilities/Options.cpp	/^    int version = 10000;$/;"	m	namespace:Options	file:
version	src/Utilities/SDDSParser/version.hpp	/^    struct version$/;"	s	namespace:SDDS
version_m	src/Utilities/SDDSParser/file.hpp	/^        version_parser<Iterator> version_m;$/;"	m	struct:SDDS::parser::file_parser
version_parser	src/Utilities/SDDSParser/version.cpp	/^template struct SDDS::parser::version_parser<iterator_t>;$/;"	m	class:SDDS::parser	typeref:struct:SDDS::parser::	file:
version_parser	src/Utilities/SDDSParser/version.hpp	/^    struct version_parser: qi::grammar<Iterator, version(), skipper<Iterator> >$/;"	s	namespace:SDDS::parser
version_parser	src/Utilities/SDDSParser/version_def.hpp	/^    version_parser<Iterator>::version_parser(error_handler<Iterator> & _error_handler):$/;"	f	class:SDDS::parser::version_parser
verticalApert_m	src/AbsBeamline/MultipoleT.h	/^    double verticalApert_m;$/;"	m	class:MultipoleT
verticalApert_m	src/AbsBeamline/MultipoleTBase.h	/^    double verticalApert_m;$/;"	m	class:MultipoleTBase
verticalExtent_m	src/AbsBeamline/ScalingFFAMagnet.h	/^    double verticalExtent_m = 0.; \/\/ maximum allowed distance from the midplane$/;"	m	class:ScalingFFAMagnet
vertices_m	src/Structure/MeshGenerator.h	/^    std::vector<Vector_t<double, 3>> vertices_m;$/;"	m	class:MeshData
vertices_m	src/Utilities/Mesher.h	/^    std::vector<Vector_t<double, 3>> vertices_m;$/;"	m	class:Mesher
viewIsSorted	src/PartBunch/Binning/BinningTools.h	/^    bool viewIsSorted (const Kokkos::View<ValueType*> view, HashType indices, SizeType npart) {$/;"	f	namespace:ParticleBinning
visit	src/Elements/OpalBeamline.h	/^inline void OpalBeamline::visit(const T& element, BeamlineVisitor&, PartBunch_t* bunch) {$/;"	f	class:OpalBeamline
visit	src/Elements/OpalBeamline.h	/^inline void OpalBeamline::visit<Marker>(const Marker& \/*element*\/, BeamlineVisitor&, PartBunch_t*) {$/;"	f	class:OpalBeamline
visitBeamline	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitBeamline(const Beamline &element) {$/;"	f	class:SpecificElementVisitor
visitBeamline	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitBeamline(const Beamline& bl) {$/;"	f	class:DefaultVisitor
visitBeamline	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::visitBeamline(const Beamline& bl) {$/;"	f	class:ParallelTracker
visitCCollimator	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitCCollimator(const CCollimator &element) {$/;"	f	class:SpecificElementVisitor
visitComponent	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitComponent(const Component &element) {$/;"	f	class:SpecificElementVisitor
visitComponent	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitComponent(const Component& comp) {$/;"	f	class:DefaultVisitor
visitComponent	src/Algorithms/Tracker.cpp	/^void Tracker::visitComponent(const Component& comp) {$/;"	f	class:Tracker
visitCorrector	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitCorrector(const Corrector &element) {$/;"	f	class:SpecificElementVisitor
visitCyclotron	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitCyclotron(const Cyclotron &element) {$/;"	f	class:SpecificElementVisitor
visitDegrader	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitDegrader(const Degrader &element) {$/;"	f	class:SpecificElementVisitor
visitDrift	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitDrift(const Drift &element) {$/;"	f	class:SpecificElementVisitor
visitDrift	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitDrift(const Drift& drf) {$/;"	f	class:DefaultVisitor
visitDrift	src/Algorithms/ParallelTracker.h	/^inline void ParallelTracker::visitDrift(const Drift& drift) {$/;"	f	class:ParallelTracker
visitFlaggedElmPtr	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitFlaggedElmPtr(const FlaggedElmPtr &element) {$/;"	f	class:SpecificElementVisitor
visitFlaggedElmPtr	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitFlaggedElmPtr(const FlaggedElmPtr& fep) {$/;"	f	class:DefaultVisitor
visitFlaggedElmPtr	src/Algorithms/Flagger.cpp	/^void Flagger::visitFlaggedElmPtr(const FlaggedElmPtr &fep) {$/;"	f	class:Flagger
visitFlaggedElmPtr	src/Lines/Replacer.cpp	/^void Replacer::visitFlaggedElmPtr(const FlaggedElmPtr &fep) {$/;"	f	class:Replacer
visitFlaggedElmPtr	src/Tables/RangeSelector.cpp	/^void RangeSelector::visitFlaggedElmPtr(const FlaggedElmPtr &fep) {$/;"	f	class:RangeSelector
visitFlexibleCollimator	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitFlexibleCollimator(const FlexibleCollimator &element) {$/;"	f	class:SpecificElementVisitor
visitMarker	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitMarker(const Marker &element) {$/;"	f	class:SpecificElementVisitor
visitMarker	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitMarker(const Marker& mark) {$/;"	f	class:DefaultVisitor
visitMarker	src/Algorithms/ParallelTracker.h	/^inline void ParallelTracker::visitMarker(const Marker& marker) {$/;"	f	class:ParallelTracker
visitMonitor	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitMonitor(const Monitor &element) {$/;"	f	class:SpecificElementVisitor
visitMonitor	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitMonitor(const Monitor& mon) {$/;"	f	class:DefaultVisitor
visitMultipole	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitMultipole(const Multipole &element) {$/;"	f	class:SpecificElementVisitor
visitMultipole	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitMultipole(const Multipole& mult) {$/;"	f	class:DefaultVisitor
visitMultipole	src/Algorithms/ParallelTracker.h	/^inline void ParallelTracker::visitMultipole(const Multipole& mult) {$/;"	f	class:ParallelTracker
visitMultipoleT	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitMultipoleT(const MultipoleT &element) {$/;"	f	class:SpecificElementVisitor
visitMultipoleT	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitMultipoleT(const MultipoleT& multT) {$/;"	f	class:DefaultVisitor
visitMultipoleT	src/Algorithms/ParallelTracker.h	/^inline void ParallelTracker::visitMultipoleT(const MultipoleT& mult) {$/;"	f	class:ParallelTracker
visitMultipoleTCurvedConstRadius	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitMultipoleTCurvedConstRadius(const MultipoleTCurvedConstRadius &element) {$/;"	f	class:SpecificElementVisitor
visitMultipoleTCurvedConstRadius	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitMultipoleTCurvedConstRadius($/;"	f	class:DefaultVisitor
visitMultipoleTCurvedVarRadius	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitMultipoleTCurvedVarRadius(const MultipoleTCurvedVarRadius &element) {$/;"	f	class:SpecificElementVisitor
visitMultipoleTCurvedVarRadius	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitMultipoleTCurvedVarRadius(const MultipoleTCurvedVarRadius& multTvcurv) {$/;"	f	class:DefaultVisitor
visitMultipoleTStraight	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitMultipoleTStraight(const MultipoleTStraight &element) {$/;"	f	class:SpecificElementVisitor
visitMultipoleTStraight	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitMultipoleTStraight(const MultipoleTStraight& multTstraight) {$/;"	f	class:DefaultVisitor
visitOffset	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitOffset(const Offset &element) {$/;"	f	class:SpecificElementVisitor
visitOffset	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitOffset(const Offset& off) {$/;"	f	class:DefaultVisitor
visitOffset	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::visitOffset(const Offset& off) {$/;"	f	class:ParallelTracker
visitProbe	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitProbe(const Probe &element) {$/;"	f	class:SpecificElementVisitor
visitProbe	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitProbe(const Probe& probe) {$/;"	f	class:DefaultVisitor
visitRBend	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitRBend(const RBend &element) {$/;"	f	class:SpecificElementVisitor
visitRBend3D	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitRBend3D(const RBend3D &element) {$/;"	f	class:SpecificElementVisitor
visitRFCavity	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitRFCavity(const RFCavity &element) {$/;"	f	class:SpecificElementVisitor
visitRFCavity	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitRFCavity(const RFCavity& cav) {$/;"	f	class:DefaultVisitor
visitRFCavity	src/Algorithms/ParallelTracker.h	/^inline void ParallelTracker::visitRFCavity(const RFCavity& as) {$/;"	f	class:ParallelTracker
visitRing	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitRing(const Ring &element) {$/;"	f	class:SpecificElementVisitor
visitRing	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitRing(const Ring& ring) {$/;"	f	class:DefaultVisitor
visitRing	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::visitRing(const Ring& ring) {$/;"	f	class:ParallelTracker
visitSBend	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitSBend(const SBend &element) {$/;"	f	class:SpecificElementVisitor
visitSBend3D	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitSBend3D(const SBend3D &element) {$/;"	f	class:SpecificElementVisitor
visitScalingFFAMagnet	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitScalingFFAMagnet(const ScalingFFAMagnet &element) {$/;"	f	class:SpecificElementVisitor
visitScalingFFAMagnet	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitScalingFFAMagnet(const ScalingFFAMagnet& spiral) {$/;"	f	class:DefaultVisitor
visitScalingFFAMagnet	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::visitScalingFFAMagnet(const ScalingFFAMagnet& bend) {$/;"	f	class:ParallelTracker
visitSeptum	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitSeptum(const Septum &element) {$/;"	f	class:SpecificElementVisitor
visitSolenoid	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitSolenoid(const Solenoid &element) {$/;"	f	class:SpecificElementVisitor
visitSolenoid	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitSolenoid(const Solenoid& so) {$/;"	f	class:DefaultVisitor
visitSolenoid	src/Algorithms/ParallelTracker.h	/^inline void ParallelTracker::visitSolenoid(const Solenoid& so) {$/;"	f	class:ParallelTracker
visitSource	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitSource(const Source &element) {$/;"	f	class:SpecificElementVisitor
visitStripper	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitStripper(const Stripper &element) {$/;"	f	class:SpecificElementVisitor
visitTravelingWave	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitTravelingWave(const TravelingWave &element) {$/;"	f	class:SpecificElementVisitor
visitTravelingWave	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitTravelingWave(const TravelingWave& trw) {$/;"	f	class:DefaultVisitor
visitTravelingWave	src/Algorithms/ParallelTracker.h	/^inline void ParallelTracker::visitTravelingWave(const TravelingWave& as) {$/;"	f	class:ParallelTracker
visitUndulator	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitUndulator(const Undulator &element) {$/;"	f	class:SpecificElementVisitor
visitVacuum	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitVacuum(const Vacuum &element) {$/;"	f	class:SpecificElementVisitor
visitVariableRFCavity	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitVariableRFCavity$/;"	f	class:SpecificElementVisitor
visitVariableRFCavityFringeField	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitVariableRFCavityFringeField$/;"	f	class:SpecificElementVisitor
visitVerticalFFAMagnet	src/AbsBeamline/SpecificElementVisitor.h	/^void SpecificElementVisitor<ELEM>::visitVerticalFFAMagnet(const VerticalFFAMagnet &element) {$/;"	f	class:SpecificElementVisitor
visitVerticalFFAMagnet	src/Algorithms/DefaultVisitor.cpp	/^void DefaultVisitor::visitVerticalFFAMagnet(const VerticalFFAMagnet& mag) {$/;"	f	class:DefaultVisitor
visitVerticalFFAMagnet	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::visitVerticalFFAMagnet(const VerticalFFAMagnet& mag) {$/;"	f	class:ParallelTracker
vm_t	src/Structure/MemoryProfiler.h	/^    typedef std::vector<long double> vm_t;$/;"	t	class:MemoryProfiler
vmax	tests/ippl_src/AppTypes/VektorTz.cpp	/^    Vek vmax(Vek v1, Vek v2)$/;"	f
vmem_m	src/Structure/MemoryProfiler.h	/^    vm_t vmem_m;$/;"	m	class:MemoryProfiler
vnorm	src/PartBunch/Binning/ParallelReduceTools.h	/^    T vnorm(const VField_t<T, Dim>& field, int p = 2) {$/;"	f	namespace:ParticleBinning
voxelMesh_m	src/Structure/BoundaryGeometry.h	/^    } voxelMesh_m;$/;"	m	class:BoundaryGeometry	typeref:struct:BoundaryGeometry::__anon60
vselect1	tests/ippl_src/AppTypes/VektorTz.cpp	/^    Vek vselect1(Vek v1, Vek v2)$/;"	f
vselect2	tests/ippl_src/AppTypes/VektorTz.cpp	/^    Vek vselect2(Vek diff, Vek cutoff)$/;"	f
wakeFunction_m	src/Algorithms/ParallelTracker.h	/^    WakeFunction* wakeFunction_m;$/;"	m	class:ParallelTracker
wakeStatus_m	src/Algorithms/ParallelTracker.h	/^    bool wakeStatus_m;$/;"	m	class:ParallelTracker
wake_m	src/AbsBeamline/ElementBase.h	/^    WakeFunction* wake_m;$/;"	m	class:ElementBase
warn	src/Utilities/Options.cpp	/^    bool warn     = true;$/;"	m	namespace:Options	file:
warnLevel	src/Utilities/Options.cpp	/^    int warnLevel = 1;$/;"	m	namespace:Options	file:
warnLevel_m	src/Structure/IpplInfoWrapper.h	/^    unsigned int warnLevel_m;$/;"	m	class:IpplInfoWrapper
warn_m	src/Structure/IpplInfoWrapper.h	/^    unsigned int warn_m;$/;"	m	class:IpplInfoWrapper
water	src/Physics/Material.cpp	/^    auto water         = Material::addMaterial("Water",$/;"	m	namespace:__anon18	file:
weHaveBins	src/Algorithms/PartBins.h	/^    virtual bool weHaveBins() {$/;"	f	class:PartBins
weHaveBins	src/PartBunch/PartBunch.hpp	/^    bool weHaveBins() {$/;"	f	class:PartBunch
weHaveEnergyBins	src/Algorithms/.PartBunchBase.hpp	/^bool PartBunch<T, Dim>::weHaveEnergyBins() {$/;"	f	class:PartBunch
weHaveEnergyBins	src/PartBunch/PartBunch.hpp	/^    bool weHaveEnergyBins() {$/;"	f	class:PartBunch
weight	src/Fields/FM3DH5BlockBase.h	/^        Vector_t<double, 3> weight;$/;"	m	struct:FM3DH5BlockBase::IndexTriplet
weight	src/Fields/FM3DMagnetoStatic.h	/^        Vector_t<double, 3> weight;$/;"	m	struct:FM3DMagnetoStatic::IndexTriplet
weight	src/Fields/FM3DMagnetoStaticExtended.h	/^        Vector_t<double, 3> weight;$/;"	m	struct:FM3DMagnetoStaticExtended::IndexTriplet
west	src/.Solvers/IrregularDomain.h	/^        T west;    \/\/ x-1, y,   z$/;"	m	struct:IrregularDomain::Stencil
what	src/Utilities/ClassicException.cpp	/^const std::string &ClassicException::what() const {$/;"	f	class:ClassicException
what	src/Utilities/SDDSParser/SDDSParserException.h	/^    virtual const char* what() const throw() {$/;"	f	class:SDDSParserException
where	src/Utilities/ClassicException.cpp	/^const std::string &ClassicException::where() const {$/;"	f	class:ClassicException
where	src/Utilities/SDDSParser/SDDSParserException.h	/^    virtual const char* where() const throw() {$/;"	f	class:SDDSParserException
while_block	src/OpalParser/WhileStatement.h	/^    Statement *while_block;$/;"	m	class:WhileStatement
who	src/Algorithms/ParallelTracker.cpp	/^    unsigned int who;$/;"	m	struct:DistributionInfo	file:
whom	src/Algorithms/ParallelTracker.cpp	/^    unsigned int whom;$/;"	m	struct:DistributionInfo	file:
width_m	src/Utilities/MSLang/BoundingBox2D.h	/^        double width_m;$/;"	m	struct:mslang::BoundingBox2D
width_m	src/Utilities/MSLang/Ellipse.h	/^        double width_m;$/;"	m	struct:mslang::Ellipse
width_m	src/Utilities/MSLang/Rectangle.h	/^        double width_m;$/;"	m	struct:mslang::Rectangle
width_m	src/Utilities/PortableBitmapReader.h	/^    unsigned int width_m;$/;"	m	class:PortableBitmapReader
width_m	src/Utilities/PortableGraymapReader.h	/^    unsigned int width_m;$/;"	m	class:PortableGraymapReader
willDoAperture_m	src/AbsBeamline/Ring.h	/^    bool willDoAperture_m = false;$/;"	m	class:Ring
word	src/OpalParser/Statement.cpp	/^bool Statement::word(std::string &value) {$/;"	f	class:Statement
workspaceSize	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^const int CoordinateTransform::workspaceSize = 1000;$/;"	m	class:coordinatetransform::CoordinateTransform	file:
workspaceSize	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^    static const int workspaceSize;$/;"	m	class:coordinatetransform::CoordinateTransform
write	src/Structure/LBalWriter.cpp	/^void LBalWriter::write(const PartBunch_t* beam) {$/;"	f	class:LBalWriter
write	src/Structure/MemoryProfiler.cpp	/^void MemoryProfiler::write(const PartBunch_t* beam) {$/;"	f	class:MemoryProfiler
write	src/Structure/MeshGenerator.cpp	/^void MeshGenerator::write(const std::string& fname) {$/;"	f	class:MeshGenerator
write	src/Structure/SDDSWriter.h	/^    virtual void write(const PartBunch_t* \/*beam*\/){};$/;"	f	class:SDDSWriter
write	src/Structure/StatWriter.cpp	/^void StatWriter::write($/;"	f	class:StatWriter
write3DField	src/Fields/Fieldmap.cpp	/^void Fieldmap::write3DField($/;"	f	class:Fieldmap
writeBendTrajectories	src/Utilities/Options.cpp	/^    bool writeBendTrajectories = false;$/;"	m	namespace:Options	file:
writeColumns	src/Structure/SDDSWriter.cpp	/^void SDDSWriter::writeColumns() {$/;"	f	class:SDDSWriter
writeDescription	src/Structure/SDDSWriter.cpp	/^void SDDSWriter::writeDescription() {$/;"	f	class:SDDSWriter
writeFieldLine	src/BasicActions/DumpEMFields.cpp	/^void DumpEMFields::writeFieldLine(Component* field,$/;"	f	class:DumpEMFields
writeFieldMap	tests/classic_src/AbsBeamline/SBend3DTest.cpp	/^    void writeFieldMap(int skip_line) {$/;"	f	class:LoadFieldMap
writeFieldThis	src/BasicActions/DumpEMFields.cpp	/^void DumpEMFields::writeFieldThis(Component* field) {$/;"	f	class:DumpEMFields
writeFieldThis	src/BasicActions/DumpFields.cpp	/^void DumpFields::writeFieldThis(Component* field) {$/;"	f	class:DumpFields
writeFields	src/BasicActions/DumpEMFields.cpp	/^void DumpEMFields::writeFields(Component* field) {$/;"	f	class:DumpEMFields
writeFields	src/BasicActions/DumpFields.cpp	/^void DumpFields::writeFields(Component* field) {$/;"	f	class:DumpFields
writeFlags_m	src/Structure/SDDSColumn.h	/^    std::ios_base::fmtflags writeFlags_m;$/;"	m	class:SDDSColumn
writeGeomToVtk	src/Structure/BoundaryGeometry.cpp	/^void BoundaryGeometry::writeGeomToVtk(std::string fn) {$/;"	f	class:BoundaryGeometry
writeGeomToVtk	src/Structure/DataSink.cpp	/^void DataSink::writeGeomToVtk(BoundaryGeometry& bg, std::string fn) {$/;"	f	class:DataSink
writeGnuplot	src/Utilities/MSLang/BoundingBox2D.cpp	/^    void BoundingBox2D::writeGnuplot(std::ostream &out) const {$/;"	f	class:mslang::BoundingBox2D
writeGnuplot	src/Utilities/MSLang/Ellipse.cpp	/^    void Ellipse::writeGnuplot(std::ofstream &out) const {$/;"	f	class:mslang::Ellipse
writeGnuplot	src/Utilities/MSLang/QuadTree.cpp	/^    void QuadTree::writeGnuplot(std::ostream &out) const {$/;"	f	class:mslang::QuadTree
writeGnuplot	src/Utilities/MSLang/Rectangle.cpp	/^    void Rectangle::writeGnuplot(std::ofstream &out) const {$/;"	f	class:mslang::Rectangle
writeGnuplot	src/Utilities/MSLang/Triangle.cpp	/^    void Triangle::writeGnuplot(std::ofstream &out) const {$/;"	f	class:mslang::Triangle
writeHeader	src/BasicActions/DumpEMFields.cpp	/^void DumpEMFields::writeHeader(std::ofstream& fout) const {$/;"	f	class:DumpEMFields
writeHeader	src/Structure/H5PartWrapperForPT.cpp	/^void H5PartWrapperForPT::writeHeader() {$/;"	f	class:H5PartWrapperForPT
writeHeader	src/Structure/SDDSColumn.cpp	/^void SDDSColumn::writeHeader(std::ostream& os,$/;"	f	class:SDDSColumn
writeHeader	src/Structure/SDDSColumnSet.cpp	/^void SDDSColumnSet::writeHeader(std::ostream& os,$/;"	f	class:SDDSColumnSet
writeHeader	src/Structure/SDDSWriter.cpp	/^void SDDSWriter::writeHeader() {$/;"	f	class:SDDSWriter
writeHeaderASCII	src/Structure/LossDataSink.cpp	/^void LossDataSink::writeHeaderASCII() {$/;"	f	class:LossDataSink
writeHeaderH5	src/Structure/LossDataSink.cpp	/^void LossDataSink::writeHeaderH5() {$/;"	f	class:LossDataSink
writeImpactStatistics	src/Structure/DataSink.cpp	/^void DataSink::writeImpactStatistics($/;"	f	class:DataSink
writeInfo	src/Structure/SDDSWriter.cpp	/^void SDDSWriter::writeInfo() {$/;"	f	class:SDDSWriter
writeParameters	src/Structure/SDDSWriter.cpp	/^void SDDSWriter::writeParameters() {$/;"	f	class:SDDSWriter
writePerRank	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    void writePerRank() {$/;"	f	class:ChargedParticles
writePhaseSpace	src/Algorithms/ParallelTracker.cpp	/^void ParallelTracker::writePhaseSpace(const long long \/*step*\/, bool psDump, bool statDump) {$/;"	f	class:ParallelTracker
writePhaseSpace	src/Structure/H5Writer.cpp	/^int H5Writer::writePhaseSpace(PartBunch_t *beam, Vector_t<double, 3> FDext[], double \/*meanEnergy*\/,$/;"	f	class:H5Writer
writePhaseSpace	src/Structure/H5Writer.cpp	/^void H5Writer::writePhaseSpace(PartBunch_t *beam, Vector_t<double, 3> FDext[]) {$/;"	f	class:H5Writer
writePrecision_m	src/Structure/SDDSColumn.h	/^    unsigned short writePrecision_m;$/;"	m	class:SDDSColumn
writeRow	src/Structure/SDDSColumnSet.cpp	/^void SDDSColumnSet::writeRow(std::ostream& os) const {$/;"	f	class:SDDSColumnSet
writeRow	src/Structure/SDDSWriter.h	/^inline void SDDSWriter::writeRow() {$/;"	f	class:SDDSWriter
writeSDDSFile	tools/opal2sdds/main.cpp	/^void writeSDDSFile(const std::string &fname, const data_t &data, const attributes_t &attr, FORMAT form) {$/;"	f
writeStatistics	src/AbsBeamline/Monitor.cpp	/^void Monitor::writeStatistics() {$/;"	f	class:Monitor
writeStep	src/Structure/H5PartWrapperForPT.cpp	/^void H5PartWrapperForPT::writeStep($/;"	f	class:H5PartWrapperForPT
writeStepData	src/Structure/H5PartWrapperForPT.cpp	/^void H5PartWrapperForPT::writeStepData(PartBunch_t* bunch) {$/;"	f	class:H5PartWrapperForPT
writeStepHeader	src/Structure/H5PartWrapperForPT.cpp	/^void H5PartWrapperForPT::writeStepHeader($/;"	f	class:H5PartWrapperForPT
writeValue	src/Structure/SDDSColumn.cpp	/^void SDDSColumn::writeValue(std::ostream& os) const {$/;"	f	class:SDDSColumn
write_voxel_mesh	src/Structure/BoundaryGeometry.cpp	/^    static void write_voxel_mesh($/;"	f	namespace:__anon57
x	src/AbsBeamline/Component.h	/^    double x;$/;"	m	struct:Point
x	src/Fields/EMField.h	/^    double x, y, z;$/;"	m	class:Point3D
x	src/Fields/Interpolation/ThreeDGrid.h	/^    inline const double& x(const int& i) const {return x_m[i-1];}$/;"	f	class:interpolation::ThreeDGrid
x	src/Fields/Interpolation/ThreeDGrid.h	/^    inline double& x(const int& i) {return x_m[i-1];}$/;"	f	class:interpolation::ThreeDGrid
xDerivatives_m	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.h	/^    std::size_t xDerivatives_m;$/;"	m	class:polynomial::DifferentialOperator
xDerivatives_m	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.h	/^    std::size_t xDerivatives_m;$/;"	m	class:polynomial::DifferentialOperatorTwo
xExit_m	src/Fields/FM1DProfile2.h	/^    double xExit_m;$/;"	m	class:FM1DProfile2
xLowerBound	src/Fields/Interpolation/ThreeDGrid.h	/^void ThreeDGrid::xLowerBound(const double& x, int& xIndex) const {$/;"	f	class:interpolation::ThreeDGrid
xMax_m	src/PartBunch/Binning/AdaptBins.h	/^        value_type xMax_m;                     \/\/\/< Maximum boundary for bins.$/;"	m	class:ParticleBinning::AdaptBins
xMin_m	src/PartBunch/Binning/AdaptBins.h	/^        value_type xMin_m;                     \/\/\/< Minimum boundary for bins.$/;"	m	class:ParticleBinning::AdaptBins
xSize	src/Fields/Interpolation/ThreeDGrid.h	/^    inline int     xSize() const {return static_cast<int>(x_m.size());}$/;"	f	class:interpolation::ThreeDGrid
xSize_m	src/Fields/Interpolation/ThreeDGrid.h	/^    int                     xSize_m;$/;"	m	class:interpolation::ThreeDGrid
xVector	src/Fields/Interpolation/ThreeDGrid.h	/^    std::vector<double> xVector() {return std::vector<double>(x_m);}$/;"	f	class:interpolation::ThreeDGrid
x_m	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^    double x_m;$/;"	m	class:coordinatetransform::CoordinateTransform
x_m	src/Fields/Interpolation/ThreeDGrid.h	/^    std::vector<double>     x_m;$/;"	m	class:interpolation::ThreeDGrid
x_m	src/Utilities/MSLang/Mask.h	/^            int x_m;$/;"	m	struct:mslang::Mask::IntPoint
xbegin_m	src/Fields/FM3DDynamic.h	/^    double xbegin_m;$/;"	m	class:FM3DDynamic
xbegin_m	src/Fields/FM3DH5BlockBase.h	/^    double xbegin_m;$/;"	m	class:FM3DH5BlockBase
xbegin_m	src/Fields/FM3DMagnetoStatic.h	/^    double xbegin_m;$/;"	m	class:FM3DMagnetoStatic
xbegin_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    double xbegin_m;$/;"	m	class:FM3DMagnetoStaticExtended
xbinmax_m	src/Algorithms/PartBins.h	/^    std::unique_ptr<double[]> xbinmax_m;$/;"	m	class:PartBins
xbinmin_m	src/Algorithms/PartBins.h	/^    std::unique_ptr<double[]> xbinmin_m;$/;"	m	class:PartBins
xend_m	src/AbsBeamline/PluginElement.h	/^    double xend_m;$/;"	m	class:PluginElement
xend_m	src/Fields/FM3DDynamic.h	/^    double xend_m;$/;"	m	class:FM3DDynamic
xend_m	src/Fields/FM3DH5BlockBase.h	/^    double xend_m;$/;"	m	class:FM3DH5BlockBase
xend_m	src/Fields/FM3DMagnetoStatic.h	/^    double xend_m;$/;"	m	class:FM3DMagnetoStatic
xend_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    double xend_m;$/;"	m	class:FM3DMagnetoStaticExtended
xlrep_m	src/Fields/Astra1DDynamic.h	/^    double xlrep_m;$/;"	m	class:Astra1DDynamic
xlrep_m	src/Fields/Astra1DDynamic_fast.h	/^    double xlrep_m;$/;"	m	class:Astra1DDynamic_fast
xmax_m	src/Algorithms/PartBins.h	/^    double xmax_m;$/;"	m	class:PartBins
xmean_m	src/Distribution/Distribution.h	/^    ippl::Vector<double, 3> pmean_m, xmean_m, sigmaR_m, sigmaP_m, cutoffR_m, cutoffP_m;$/;"	m	class:Distribution
xmin_m	src/Algorithms/PartBins.h	/^    double xmin_m;$/;"	m	class:PartBins
xstart_m	src/AbsBeamline/PluginElement.h	/^    double xstart_m;$/;"	m	class:PluginElement
xstr	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	29;"	d	file:
y	src/AbsBeamline/Component.h	/^    double y;$/;"	m	struct:Point
y	src/Fields/EMField.h	/^    double x, y, z;$/;"	m	class:Point3D
y	src/Fields/Interpolation/ThreeDGrid.h	/^    inline const double& y(const int& j) const {return y_m[j-1];}$/;"	f	class:interpolation::ThreeDGrid
y	src/Fields/Interpolation/ThreeDGrid.h	/^    inline double& y(const int& j) {return y_m[j-1];}$/;"	f	class:interpolation::ThreeDGrid
yLowerBound	src/Fields/Interpolation/ThreeDGrid.h	/^void ThreeDGrid::yLowerBound(const double& y, int& yIndex) const {$/;"	f	class:interpolation::ThreeDGrid
ySize	src/Fields/Interpolation/ThreeDGrid.h	/^    inline int     ySize() const {return static_cast<int>(y_m.size());}$/;"	f	class:interpolation::ThreeDGrid
ySize_m	src/Fields/Interpolation/ThreeDGrid.h	/^    int                     ySize_m;$/;"	m	class:interpolation::ThreeDGrid
yVector	src/Fields/Interpolation/ThreeDGrid.h	/^    std::vector<double> yVector() {return std::vector<double>(y_m);}$/;"	f	class:interpolation::ThreeDGrid
y_m	src/Fields/Interpolation/ThreeDGrid.h	/^    std::vector<double>     y_m;$/;"	m	class:interpolation::ThreeDGrid
y_m	src/Utilities/MSLang/Mask.h	/^            int y_m;$/;"	m	struct:mslang::Mask::IntPoint
ybegin_m	src/Fields/FM3DDynamic.h	/^    double ybegin_m;$/;"	m	class:FM3DDynamic
ybegin_m	src/Fields/FM3DH5BlockBase.h	/^    double ybegin_m;$/;"	m	class:FM3DH5BlockBase
ybegin_m	src/Fields/FM3DMagnetoStatic.h	/^    double ybegin_m;$/;"	m	class:FM3DMagnetoStatic
ybegin_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    double ybegin_m;$/;"	m	class:FM3DMagnetoStaticExtended
yend_m	src/AbsBeamline/PluginElement.h	/^    double yend_m;$/;"	m	class:PluginElement
yend_m	src/Fields/FM3DDynamic.h	/^    double yend_m;$/;"	m	class:FM3DDynamic
yend_m	src/Fields/FM3DH5BlockBase.h	/^    double yend_m;$/;"	m	class:FM3DH5BlockBase
yend_m	src/Fields/FM3DMagnetoStatic.h	/^    double yend_m;$/;"	m	class:FM3DMagnetoStatic
yend_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    double yend_m;$/;"	m	class:FM3DMagnetoStaticExtended
yield	tests/classic_src/AbsBeamline/RingTest.cpp	/^    Component* yield() {$/;"	f	class:OffsetFactory
yieldComp1	tests/classic_src/AbsBeamline/RingTest.cpp	/^    Component* yieldComp1() {$/;"	f	class:OffsetFactory
yieldComp2	tests/classic_src/AbsBeamline/RingTest.cpp	/^    Component* yieldComp2() {$/;"	f	class:OffsetFactory
ystart_m	src/AbsBeamline/PluginElement.h	/^    double ystart_m;$/;"	m	class:PluginElement
z	src/Fields/EMField.h	/^    double x, y, z;$/;"	m	class:Point3D
z	src/Fields/Interpolation/ThreeDGrid.h	/^    inline const double& z(const int& j) const {return z_m[j-1];}$/;"	f	class:interpolation::ThreeDGrid
z	src/Fields/Interpolation/ThreeDGrid.h	/^    inline double& z(const int& k) {return z_m[k-1];}$/;"	f	class:interpolation::ThreeDGrid
zBegin_m	src/Fields/FM1DDynamic.h	/^    double zBegin_m;                        \/\/\/ Longitudinal start of field.$/;"	m	class:FM1DDynamic
zBegin_m	src/Fields/FM1DDynamic_fast.h	/^    double zBegin_m;                        \/\/\/ Longitudinal start of field.$/;"	m	class:FM1DDynamic_fast
zBegin_m	src/Fields/FM1DElectroStatic.h	/^    double zBegin_m;                        \/\/\/ Longitudinal start of field.$/;"	m	class:FM1DElectroStatic
zBegin_m	src/Fields/FM1DElectroStatic_fast.h	/^    double zBegin_m;                        \/\/\/ Longitudinal start of field.$/;"	m	class:FM1DElectroStatic_fast
zBegin_m	src/Fields/FM1DMagnetoStatic.h	/^    double zBegin_m;                        \/\/\/ Longitudinal start of field.$/;"	m	class:FM1DMagnetoStatic
zBegin_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    double zBegin_m;                        \/\/\/ Longitudinal start of field.$/;"	m	class:FM1DMagnetoStatic_fast
zEnd_m	src/Fields/FM1DDynamic.h	/^    double zEnd_m;                          \/\/\/ Longitudinal end of field.$/;"	m	class:FM1DDynamic
zEnd_m	src/Fields/FM1DDynamic_fast.h	/^    double zEnd_m;                          \/\/\/ Longitudinal end of field.$/;"	m	class:FM1DDynamic_fast
zEnd_m	src/Fields/FM1DElectroStatic.h	/^    double zEnd_m;                          \/\/\/ Longitudinal end of field.$/;"	m	class:FM1DElectroStatic
zEnd_m	src/Fields/FM1DElectroStatic_fast.h	/^    double zEnd_m;                          \/\/\/ Longitudinal end of field.$/;"	m	class:FM1DElectroStatic_fast
zEnd_m	src/Fields/FM1DMagnetoStatic.h	/^    double zEnd_m;                          \/\/\/ Longitudinal end of field.$/;"	m	class:FM1DMagnetoStatic
zEnd_m	src/Fields/FM1DMagnetoStatic_fast.h	/^    double zEnd_m;                          \/\/\/ Longitudinal end of field.$/;"	m	class:FM1DMagnetoStatic_fast
zExit_m	src/Fields/FM1DProfile2.h	/^    double zExit_m;$/;"	m	class:FM1DProfile2
zLowerBound	src/Fields/Interpolation/ThreeDGrid.h	/^void ThreeDGrid::zLowerBound(const double& z, int& zIndex) const {$/;"	f	class:interpolation::ThreeDGrid
zMax_m	src/.Solvers/IrregularDomain.h	/^    double zMax_m;$/;"	m	class:IrregularDomain
zMin_m	src/.Solvers/IrregularDomain.h	/^    double zMin_m;$/;"	m	class:IrregularDomain
zNegExtent_m	src/AbsBeamline/VerticalFFAMagnet.h	/^    double zNegExtent_m = 0.;  \/\/ extent downwards from the midplane$/;"	m	class:VerticalFFAMagnet
zPosExtent_m	src/AbsBeamline/VerticalFFAMagnet.h	/^    double zPosExtent_m = 0.;  \/\/ extent upwards from the midplane$/;"	m	class:VerticalFFAMagnet
zSize	src/Fields/Interpolation/ThreeDGrid.h	/^    inline int     zSize() const {return static_cast<int>(z_m.size());}$/;"	f	class:interpolation::ThreeDGrid
zSize_m	src/Fields/Interpolation/ThreeDGrid.h	/^    int                     zSize_m;$/;"	m	class:interpolation::ThreeDGrid
zVector	src/Fields/Interpolation/ThreeDGrid.h	/^    std::vector<double> zVector() {return std::vector<double>(z_m);}$/;"	f	class:interpolation::ThreeDGrid
z_m	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.h	/^    double z_m;$/;"	m	class:coordinatetransform::CoordinateTransform
z_m	src/Fields/Interpolation/ThreeDGrid.h	/^    std::vector<double>     z_m;$/;"	m	class:interpolation::ThreeDGrid
z_p	src/Physics/Physics.h	/^    constexpr double z_p        = 1;$/;"	m	namespace:Physics
zbegin_entry_m	src/Fields/FM1DProfile2.h	/^    double zbegin_entry_m;$/;"	m	class:FM1DProfile2
zbegin_exit_m	src/Fields/FM1DProfile2.h	/^    double zbegin_exit_m;$/;"	m	class:FM1DProfile2
zbegin_m	src/Fields/Astra1DDynamic.h	/^    double zbegin_m;$/;"	m	class:Astra1DDynamic
zbegin_m	src/Fields/Astra1DElectroStatic.h	/^    double zbegin_m;$/;"	m	class:Astra1DElectroStatic
zbegin_m	src/Fields/Astra1DMagnetoStatic.h	/^    double zbegin_m;$/;"	m	class:Astra1DMagnetoStatic
zbegin_m	src/Fields/Astra1D_fast.h	/^    double zbegin_m;$/;"	m	class:Astra1D_fast
zbegin_m	src/Fields/FM2DDynamic.h	/^    double zbegin_m;$/;"	m	class:FM2DDynamic
zbegin_m	src/Fields/FM2DElectroStatic.h	/^    double zbegin_m;$/;"	m	class:FM2DElectroStatic
zbegin_m	src/Fields/FM2DMagnetoStatic.h	/^    double zbegin_m;$/;"	m	class:FM2DMagnetoStatic
zbegin_m	src/Fields/FM3DDynamic.h	/^    double zbegin_m;$/;"	m	class:FM3DDynamic
zbegin_m	src/Fields/FM3DH5BlockBase.h	/^    double zbegin_m;$/;"	m	class:FM3DH5BlockBase
zbegin_m	src/Fields/FM3DMagnetoStatic.h	/^    double zbegin_m;$/;"	m	class:FM3DMagnetoStatic
zbegin_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    double zbegin_m;$/;"	m	class:FM3DMagnetoStaticExtended
zbegin_m	src/Fields/FMDummy.h	/^    double zbegin_m;$/;"	m	class:FMDummy
zend_entry_m	src/Fields/FM1DProfile2.h	/^    double zend_entry_m;$/;"	m	class:FM1DProfile2
zend_exit_m	src/Fields/FM1DProfile2.h	/^    double zend_exit_m;$/;"	m	class:FM1DProfile2
zend_m	src/Fields/Astra1DDynamic.h	/^    double zend_m;$/;"	m	class:Astra1DDynamic
zend_m	src/Fields/Astra1DElectroStatic.h	/^    double zend_m;$/;"	m	class:Astra1DElectroStatic
zend_m	src/Fields/Astra1DMagnetoStatic.h	/^    double zend_m;$/;"	m	class:Astra1DMagnetoStatic
zend_m	src/Fields/Astra1D_fast.h	/^    double zend_m;$/;"	m	class:Astra1D_fast
zend_m	src/Fields/FM2DDynamic.h	/^    double zend_m;$/;"	m	class:FM2DDynamic
zend_m	src/Fields/FM2DElectroStatic.h	/^    double zend_m;$/;"	m	class:FM2DElectroStatic
zend_m	src/Fields/FM2DMagnetoStatic.h	/^    double zend_m;$/;"	m	class:FM2DMagnetoStatic
zend_m	src/Fields/FM3DDynamic.h	/^    double zend_m;$/;"	m	class:FM3DDynamic
zend_m	src/Fields/FM3DH5BlockBase.h	/^    double zend_m;$/;"	m	class:FM3DH5BlockBase
zend_m	src/Fields/FM3DMagnetoStatic.h	/^    double zend_m;$/;"	m	class:FM3DMagnetoStatic
zend_m	src/Fields/FM3DMagnetoStaticExtended.h	/^    double zend_m;$/;"	m	class:FM3DMagnetoStaticExtended
zend_m	src/Fields/FMDummy.h	/^    double zend_m;$/;"	m	class:FMDummy
zero	tests/ippl_src/Field/FunctionFace.cpp	/^double zero (const double&)   { return 0.0; }$/;"	f
zstart	src/Track/Track.h	/^    double zstart;$/;"	m	class:Track
zstart_m	src/Algorithms/ParallelTracker.h	/^    double zstart_m;$/;"	m	class:ParallelTracker
zstop	src/Track/Track.h	/^    std::vector<double> zstop;$/;"	m	class:Track
zstop_m	src/Algorithms/OrbitThreader.h	/^    const double zstop_m;$/;"	m	class:OrbitThreader
zvals_m	src/Fields/Astra1D_fast.h	/^    double* zvals_m;$/;"	m	class:Astra1D_fast
~AAutomatic	src/Expressions/AAutomatic.h	/^    AAutomatic<T>::~AAutomatic() {$/;"	f	class:Expressions::AAutomatic
~ABinary	src/Expressions/ABinary.h	/^    ABinary<T, U>::~ABinary()$/;"	f	class:Expressions::ABinary
~AColumn	src/Expressions/AColumn.cpp	/^    AColumn::~AColumn()$/;"	f	class:Expressions::AColumn
~ADeferred	src/Expressions/ADeferred.h	/^    ADeferred<T>::~ADeferred()$/;"	f	class:Expressions::ADeferred
~AList	src/Expressions/AList.h	/^    AList<T>::~AList()$/;"	f	class:Expressions::AList
~ARefExpr	src/Expressions/ARefExpr.h	/^    ARefExpr<T>::~ARefExpr() {$/;"	f	class:Expressions::ARefExpr
~ARow	src/Expressions/ARow.cpp	/^    ARow::~ARow()$/;"	f	class:Expressions::ARow
~ASUnary	src/Expressions/ASUnary.h	/^    ASUnary<T>::~ASUnary()$/;"	f	class:Expressions::ASUnary
~ATable	src/Expressions/ATable.cpp	/^    ATable::~ATable()$/;"	f	class:Expressions::ATable
~AUnary	src/Expressions/AUnary.h	/^    AUnary<T, U>::~AUnary()$/;"	f	class:Expressions::AUnary
~AValue	src/Expressions/AValue.h	/^    AValue<T>::~AValue()$/;"	f	class:Expressions::AValue
~AbsFileStream	src/OpalParser/AbsFileStream.cpp	/^AbsFileStream::~AbsFileStream()$/;"	f	class:AbsFileStream
~AbstractTimeDependence	src/Algorithms/AbstractTimeDependence.h	/^    virtual ~AbstractTimeDependence() {}$/;"	f	class:AbstractTimeDependence
~AbstractTracker	src/Algorithms/AbstractTracker.cpp	/^AbstractTracker::~AbstractTracker()$/;"	f	class:AbstractTracker
~Action	src/AbstractObjects/Action.cpp	/^Action::~Action()$/;"	f	class:Action
~AlpineManager	src/PartBunch/Binning/test/alpine/AlpineManager.h	/^    ~AlpineManager(){}$/;"	f	class:AlpineManager
~ArbitraryDomain	src/.Solvers/ArbitraryDomain.cpp	/^ArbitraryDomain::~ArbitraryDomain() {$/;"	f	class:ArbitraryDomain
~ArithmeticError	src/Utilities/ArithmeticError.cpp	/^ArithmeticError::~ArithmeticError()$/;"	f	class:ArithmeticError
~ArrayOfPtrs	src/AbstractObjects/Expressions.h	/^    ArrayOfPtrs<T>::~ArrayOfPtrs()$/;"	f	class:Expressions::ArrayOfPtrs
~Astra1DDynamic	src/Fields/Astra1DDynamic.cpp	/^Astra1DDynamic::~Astra1DDynamic() {$/;"	f	class:Astra1DDynamic
~Astra1DDynamic_fast	src/Fields/Astra1DDynamic_fast.cpp	/^Astra1DDynamic_fast::~Astra1DDynamic_fast() {$/;"	f	class:Astra1DDynamic_fast
~Astra1DElectroStatic	src/Fields/Astra1DElectroStatic.cpp	/^Astra1DElectroStatic::~Astra1DElectroStatic() {$/;"	f	class:Astra1DElectroStatic
~Astra1DElectroStatic_fast	src/Fields/Astra1DElectroStatic_fast.cpp	/^Astra1DElectroStatic_fast::~Astra1DElectroStatic_fast() {$/;"	f	class:Astra1DElectroStatic_fast
~Astra1DMagnetoStatic	src/Fields/Astra1DMagnetoStatic.cpp	/^Astra1DMagnetoStatic::~Astra1DMagnetoStatic() {$/;"	f	class:Astra1DMagnetoStatic
~Astra1DMagnetoStatic_fast	src/Fields/Astra1DMagnetoStatic_fast.cpp	/^Astra1DMagnetoStatic_fast::~Astra1DMagnetoStatic_fast() {$/;"	f	class:Astra1DMagnetoStatic_fast
~Astra1D_fast	src/Fields/Astra1D_fast.cpp	/^Astra1D_fast::~Astra1D_fast() {$/;"	f	class:Astra1D_fast
~Attribute	src/AbstractObjects/Attribute.cpp	/^Attribute::~Attribute()$/;"	f	class:Attribute
~AttributeBase	src/AbstractObjects/AttributeBase.cpp	/^AttributeBase::~AttributeBase()$/;"	f	class:AttributeBase
~AttributeHandler	src/AbstractObjects/AttributeHandler.cpp	/^AttributeHandler::~AttributeHandler()$/;"	f	class:AttributeHandler
~AttributeSet	src/AbsBeamline/AttributeSet.cpp	/^AttributeSet::~AttributeSet()$/;"	f	class:AttributeSet
~BDipoleField	src/Fields/BDipoleField.cpp	/^BDipoleField::~BDipoleField()$/;"	f	class:BDipoleField
~BGeometryBase	src/BeamlineGeometry/Geometry.cpp	/^BGeometryBase::~BGeometryBase()$/;"	f	class:BGeometryBase
~BMultipoleField	src/Fields/BMultipoleField.cpp	/^BMultipoleField::~BMultipoleField() {$/;"	f	class:BMultipoleField
~BSingleMultipoleField	src/Fields/BSingleMultipoleField.h	/^BSingleMultipoleField<order>::~BSingleMultipoleField()$/;"	f	class:BSingleMultipoleField
~Base	src/Utilities/MSLang.h	/^        virtual ~Base() {$/;"	f	struct:mslang::Base
~Beam	src/Structure/Beam.cpp	/^Beam::~Beam() {$/;"	f	class:Beam
~BeamSequence	src/AbstractObjects/BeamSequence.cpp	/^BeamSequence::~BeamSequence()$/;"	f	class:BeamSequence
~Beamline	src/Beamlines/Beamline.cpp	/^Beamline::~Beamline()$/;"	f	class:Beamline
~BeamlineGeometry	src/Beamlines/BeamlineGeometry.cpp	/^BeamlineGeometry::~BeamlineGeometry()$/;"	f	class:BeamlineGeometry
~BeamlineVisitor	src/AbsBeamline/BeamlineVisitor.cpp	/^BeamlineVisitor::~BeamlineVisitor()$/;"	f	class:BeamlineVisitor
~BinomialBehaviorSplitter	src/Distribution/Distribution.h	/^        virtual ~BinomialBehaviorSplitter() {$/;"	f	class:Distribution::BinomialBehaviorSplitter
~Bool	src/Attributes/Bool.cpp	/^    Bool::~Bool()$/;"	f	class:Attributes::Bool
~BoolArray	src/Attributes/BoolArray.cpp	/^    BoolArray::~BoolArray()$/;"	f	class:Attributes::BoolArray
~BoolConstant	src/ValueDefinitions/BoolConstant.cpp	/^BoolConstant::~BoolConstant()$/;"	f	class:BoolConstant
~BoundaryGeometry	src/Structure/BoundaryGeometry.cpp	/^BoundaryGeometry::~BoundaryGeometry() {$/;"	f	class:BoundaryGeometry
~CLRangeError	src/Utilities/CLRangeError.cpp	/^CLRangeError::~CLRangeError()$/;"	f	class:CLRangeError
~Call	src/BasicActions/Call.cpp	/^Call::~Call()$/;"	f	class:Call
~CavityAutophaser	src/Algorithms/CavityAutophaser.cpp	/^CavityAutophaser::~CavityAutophaser() {$/;"	f	class:CavityAutophaser
~Channel	src/Channels/Channel.cpp	/^Channel::~Channel()$/;"	f	class:Channel
~ChargedParticles	src/PartBunch/Binning/test/pic3d/Binning_pic3d.cpp	/^    ~ChargedParticles() {}$/;"	f	class:ChargedParticles
~ClassicException	src/Utilities/ClassicException.cpp	/^ClassicException::~ClassicException()$/;"	f	class:ClassicException
~ClassicField	src/Utilities/ClassicField.cpp	/^ClassicField::~ClassicField() {$/;"	f	class:ClassicField
~Component	src/AbsBeamline/Component.cpp	/^Component::~Component() {$/;"	f	class:Component
~CompoundStatement	src/OpalParser/CompoundStatement.cpp	/^CompoundStatement::~CompoundStatement()$/;"	f	class:CompoundStatement
~ConstBField	src/Fields/ConstBField.cpp	/^ConstBField::~ConstBField()$/;"	f	class:ConstBField
~ConstBzField	src/Fields/ConstBzField.cpp	/^ConstBzField::~ConstBzField()$/;"	f	class:ConstBzField
~ConstChannel	src/Channels/ConstChannel.cpp	/^ConstChannel::~ConstChannel()$/;"	f	class:ConstChannel
~ConstEzField	src/Fields/ConstEzField.cpp	/^ConstEzField::~ConstEzField()$/;"	f	class:ConstEzField
~ConstIterator	src/Algorithms/.PartBunchBase.h	/^        ~ConstIterator() {$/;"	f	class:PartBunch::ConstIterator
~ConvergenceError	src/Utilities/ConvergenceError.cpp	/^ConvergenceError::~ConvergenceError()$/;"	f	class:ConvergenceError
~CoordinateTransform	src/AbsBeamline/MultipoleTFunctions/CoordinateTransform.cpp	/^CoordinateTransform::~CoordinateTransform() {$/;"	f	class:coordinatetransform::CoordinateTransform
~Corrector	src/AbsBeamline/Corrector.cpp	/^Corrector::~Corrector() {$/;"	f	class:Corrector
~DefaultVisitor	src/Algorithms/DefaultVisitor.cpp	/^DefaultVisitor::~DefaultVisitor() {$/;"	f	class:DefaultVisitor
~Definition	src/AbstractObjects/Definition.cpp	/^Definition::~Definition()$/;"	f	class:Definition
~Difference	src/Utilities/MSLang/Difference.h	/^        virtual ~Difference() {$/;"	f	struct:mslang::Difference
~DifferentialOperator	src/AbsBeamline/MultipoleTFunctions/DifferentialOperator.cpp	/^DifferentialOperator::~DifferentialOperator() {$/;"	f	class:polynomial::DifferentialOperator
~DifferentialOperatorTwo	src/AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.cpp	/^DifferentialOperatorTwo::~DifferentialOperatorTwo() {$/;"	f	class:polynomial::DifferentialOperatorTwo
~DirectChannel	src/Channels/DirectChannel.h	/^inline DirectChannel::~DirectChannel()$/;"	f	class:DirectChannel
~Directory	src/AbstractObjects/Directory.cpp	/^Directory::~Directory() {$/;"	f	class:Directory
~Distribution	src/Distribution/Distribution.cpp	/^Distribution::~Distribution() {$/;"	f	class:Distribution
~DivideError	src/Utilities/DivideError.cpp	/^DivideError::~DivideError()$/;"	f	class:DivideError
~DomainError	src/Utilities/DomainError.cpp	/^DomainError::~DomainError()$/;"	f	class:DomainError
~Drift	src/AbsBeamline/Drift.cpp	/^Drift::~Drift()$/;"	f	class:Drift
~DriftRep	src/BeamlineCore/DriftRep.cpp	/^DriftRep::~DriftRep()$/;"	f	class:DriftRep
~DumpEMFields	src/BasicActions/DumpEMFields.cpp	/^DumpEMFields::~DumpEMFields() {$/;"	f	class:DumpEMFields
~DumpFields	src/BasicActions/DumpFields.cpp	/^DumpFields::~DumpFields() {$/;"	f	class:DumpFields
~EMField	src/Fields/EMField.cpp	/^EMField::~EMField()$/;"	f	class:EMField
~EarlyLeaveException	src/Utilities/EarlyLeaveException.cpp	/^EarlyLeaveException::~EarlyLeaveException()$/;"	f	class:EarlyLeaveException
~Echo	src/BasicActions/Echo.cpp	/^Echo::~Echo() {$/;"	f	class:Echo
~Element	src/AbstractObjects/Element.cpp	/^Element::~Element()$/;"	f	class:Element
~ElementBase	src/AbsBeamline/ElementBase.cpp	/^ElementBase::~ElementBase()$/;"	f	class:ElementBase
~Ellipse	src/Utilities/MSLang/Ellipse.h	/^        virtual ~Ellipse() { }$/;"	f	struct:mslang::Ellipse
~EllipticDomain	src/.Solvers/EllipticDomain.cpp	/^EllipticDomain::~EllipticDomain() {$/;"	f	class:EllipticDomain
~ElmPtr	src/Beamlines/ElmPtr.cpp	/^ElmPtr::~ElmPtr()$/;"	f	class:ElmPtr
~EndFieldModel	src/AbsBeamline/EndFieldModel/EndFieldModel.h	/^  virtual ~EndFieldModel() {;}$/;"	f	class:endfieldmodel::EndFieldModel
~Enge	src/AbsBeamline/EndFieldModel/Enge.h	/^    ~Enge() {}$/;"	f	class:endfieldmodel::Enge
~Euclid3DGeometry	src/BeamlineGeometry/Euclid3DGeometry.cpp	/^Euclid3DGeometry::~Euclid3DGeometry() {}$/;"	f	class:Euclid3DGeometry
~FFTPoissonSolver	src/.Solvers/FFTPoissonSolver.cpp	/^FFTPoissonSolver::~FFTPoissonSolver() {$/;"	f	class:FFTPoissonSolver
~FM1DDynamic	src/Fields/FM1DDynamic.cpp	/^FM1DDynamic::~FM1DDynamic() {$/;"	f	class:FM1DDynamic
~FM1DDynamic_fast	src/Fields/FM1DDynamic_fast.cpp	/^FM1DDynamic_fast::~FM1DDynamic_fast() {$/;"	f	class:FM1DDynamic_fast
~FM1DElectroStatic	src/Fields/FM1DElectroStatic.cpp	/^FM1DElectroStatic::~FM1DElectroStatic() {$/;"	f	class:FM1DElectroStatic
~FM1DElectroStatic_fast	src/Fields/FM1DElectroStatic_fast.cpp	/^FM1DElectroStatic_fast::~FM1DElectroStatic_fast() {$/;"	f	class:FM1DElectroStatic_fast
~FM1DMagnetoStatic	src/Fields/FM1DMagnetoStatic.cpp	/^FM1DMagnetoStatic::~FM1DMagnetoStatic() {$/;"	f	class:FM1DMagnetoStatic
~FM1DMagnetoStatic_fast	src/Fields/FM1DMagnetoStatic_fast.cpp	/^FM1DMagnetoStatic_fast::~FM1DMagnetoStatic_fast() {$/;"	f	class:FM1DMagnetoStatic_fast
~FM1DProfile1	src/Fields/FM1DProfile1.cpp	/^FM1DProfile1::~FM1DProfile1() {$/;"	f	class:FM1DProfile1
~FM1DProfile2	src/Fields/FM1DProfile2.cpp	/^FM1DProfile2::~FM1DProfile2() {$/;"	f	class:FM1DProfile2
~FM2DDynamic	src/Fields/FM2DDynamic.cpp	/^FM2DDynamic::~FM2DDynamic() {$/;"	f	class:FM2DDynamic
~FM2DElectroStatic	src/Fields/FM2DElectroStatic.cpp	/^FM2DElectroStatic::~FM2DElectroStatic() {$/;"	f	class:FM2DElectroStatic
~FM2DMagnetoStatic	src/Fields/FM2DMagnetoStatic.cpp	/^FM2DMagnetoStatic::~FM2DMagnetoStatic() {$/;"	f	class:FM2DMagnetoStatic
~FM3DDynamic	src/Fields/FM3DDynamic.cpp	/^FM3DDynamic::~FM3DDynamic() {$/;"	f	class:FM3DDynamic
~FM3DH5Block	src/Fields/FM3DH5Block.cpp	/^FM3DH5Block::~FM3DH5Block() {$/;"	f	class:FM3DH5Block
~FM3DH5BlockBase	src/Fields/FM3DH5BlockBase.h	/^    virtual ~FM3DH5BlockBase ($/;"	f	class:FM3DH5BlockBase
~FM3DH5Block_nonscale	src/Fields/FM3DH5Block_nonscale.cpp	/^FM3DH5Block_nonscale::~FM3DH5Block_nonscale() {$/;"	f	class:FM3DH5Block_nonscale
~FM3DMagnetoStatic	src/Fields/FM3DMagnetoStatic.cpp	/^FM3DMagnetoStatic::~FM3DMagnetoStatic() {$/;"	f	class:FM3DMagnetoStatic
~FM3DMagnetoStaticExtended	src/Fields/FM3DMagnetoStaticExtended.cpp	/^FM3DMagnetoStaticExtended::~FM3DMagnetoStaticExtended() {$/;"	f	class:FM3DMagnetoStaticExtended
~FM3DMagnetoStaticH5Block	src/Fields/FM3DMagnetoStaticH5Block.cpp	/^FM3DMagnetoStaticH5Block::~FM3DMagnetoStaticH5Block() {$/;"	f	class:FM3DMagnetoStaticH5Block
~FMDummy	src/Fields/FMDummy.cpp	/^FMDummy::~FMDummy() {$/;"	f	class:FMDummy
~FailureTester	tests/opal_test_utilities/SilenceTest.h	/^        ~FailureTester() { }$/;"	f	class:OpalTestUtilities::FailureTester
~FieldContainer	src/PartBunch/Binning/test/alpine/FieldContainer.hpp	/^    ~FieldContainer(){}$/;"	f	class:FieldContainer
~FieldContainer	src/PartBunch/FieldContainer.hpp	/^    ~FieldContainer() {$/;"	f	class:FieldContainer
~FieldSolver	src/PartBunch/Binning/test/alpine/FieldSolver.hpp	/^    ~FieldSolver(){}$/;"	f	class:FieldSolver
~FieldSolver	src/PartBunch/FieldSolver.hpp	/^    ~FieldSolver() {$/;"	f	class:FieldSolver
~FieldSolverCmd	src/Structure/FieldSolverCmd.cpp	/^FieldSolverCmd::~FieldSolverCmd() {$/;"	f	class:FieldSolverCmd
~Fieldmap	src/Fields/Fieldmap.h	/^    virtual ~Fieldmap() {$/;"	f	class:Fieldmap
~FileStream	src/OpalParser/FileStream.cpp	/^FileStream::~FileStream() {$/;"	f	class:FileStream
~Filter	src/Filters/Filter.h	/^    virtual ~Filter() { };$/;"	f	class:Filter
~FlaggedElmPtr	src/Beamlines/FlaggedElmPtr.cpp	/^FlaggedElmPtr::~FlaggedElmPtr()$/;"	f	class:FlaggedElmPtr
~Flagger	src/Algorithms/Flagger.cpp	/^Flagger::~Flagger()$/;"	f	class:Flagger
~FormatError	src/Utilities/FormatError.cpp	/^FormatError::~FormatError()$/;"	f	class:FormatError
~Function	src/Utilities/MSLang.h	/^        virtual ~Function() {};$/;"	f	struct:mslang::Function
~GeneralClassicException	src/Utilities/GeneralClassicException.cpp	/^GeneralClassicException::~GeneralClassicException()$/;"	f	class:GeneralClassicException
~H5PartWrapper	src/Structure/H5PartWrapper.cpp	/^H5PartWrapper::~H5PartWrapper() {$/;"	f	class:H5PartWrapper
~H5PartWrapperForPT	src/Structure/H5PartWrapperForPT.cpp	/^H5PartWrapperForPT::~H5PartWrapperForPT() {$/;"	f	class:H5PartWrapperForPT
~Help	src/BasicActions/Help.cpp	/^Help::~Help() {$/;"	f	class:Help
~HostArrayReduction	src/PartBunch/Binning/ParallelReduceTools.h	/^        ~HostArrayReduction() { delete[] the_array; }$/;"	f	struct:ParticleBinning::HostArrayReduction
~IfStatement	src/OpalParser/IfStatement.cpp	/^IfStatement::~IfStatement() {$/;"	f	class:IfStatement
~IndexedChannel	src/Channels/IndexedChannel.h	/^IndexedChannel<T>::~IndexedChannel()$/;"	f	class:IndexedChannel
~Indexer	src/Expressions/Indexer.h	/^    Indexer<T>::~Indexer()$/;"	f	class:Expressions::Indexer
~IndirectChannel	src/Channels/IndirectChannel.h	/^IndirectChannel<T>::~IndirectChannel()$/;"	f	class:IndirectChannel
~Interpolator3dGridTo1d	src/Fields/Interpolation/Interpolator3dGridTo1d.h	/^Interpolator3dGridTo1d::~Interpolator3dGridTo1d() {$/;"	f	class:interpolation::Interpolator3dGridTo1d
~Interpolator3dGridTo3d	src/Fields/Interpolation/Interpolator3dGridTo3d.h	/^  ~Interpolator3dGridTo3d() {clear();}$/;"	f	class:interpolation::Interpolator3dGridTo3d
~Intersection	src/Utilities/MSLang/Intersection.h	/^        virtual ~Intersection() {$/;"	f	struct:mslang::Intersection
~IpplInfoWrapper	src/Structure/IpplInfoWrapper.cpp	/^IpplInfoWrapper::~IpplInfoWrapper() {$/;"	f	class:IpplInfoWrapper
~IrregularDomain	src/.Solvers/IrregularDomain.h	/^    virtual ~IrregularDomain(){};$/;"	f	class:IrregularDomain
~LandauDampingManager	src/PartBunch/Binning/test/alpine/BinningLandauDampingManager.h	/^    ~LandauDampingManager(){}$/;"	f	class:LandauDampingManager
~LaserProfile	src/Distribution/LaserProfile.cpp	/^LaserProfile::~LaserProfile() {$/;"	f	class:LaserProfile
~Line	src/Lines/Line.cpp	/^Line::~Line()$/;"	f	class:Line
~LineTemplate	src/Lines/LineTemplate.cpp	/^LineTemplate::~LineTemplate()$/;"	f	class:LineTemplate
~LoadBalancer	src/PartBunch/Binning/test/alpine/LoadBalancer.hpp	/^        ~LoadBalancer() {  }$/;"	f	class:LoadBalancer
~LoadBalancer	src/PartBunch/LoadBalancer.hpp	/^    ~LoadBalancer() {$/;"	f	class:LoadBalancer
~LoadFieldMap	tests/classic_src/AbsBeamline/SBend3DTest.cpp	/^    ~LoadFieldMap() {$/;"	f	class:LoadFieldMap
~LogicalError	src/Utilities/LogicalError.cpp	/^LogicalError::~LogicalError()$/;"	f	class:LogicalError
~MMatrix	src/Fields/Interpolation/MMatrix.cpp	/^MMatrix<Tmplt>::~MMatrix()$/;"	f	class:interpolation::MMatrix
~MVector	src/Fields/Interpolation/MVector.h	/^inline MVector<Tmplt>::~MVector() { delete_vector();}$/;"	f	class:interpolation::MVector
~Macro	src/OpalParser/Macro.cpp	/^Macro::~Macro()$/;"	f	class:Macro
~MacroCmd	src/OpalParser/MacroCmd.cpp	/^MacroCmd::~MacroCmd()$/;"	f	class:MacroCmd
~MacroStream	src/OpalParser/MacroStream.cpp	/^MacroStream::~MacroStream()$/;"	f	class:MacroStream
~Marker	src/AbsBeamline/Marker.cpp	/^Marker::~Marker()$/;"	f	class:Marker
~MarkerRep	src/BeamlineCore/MarkerRep.cpp	/^MarkerRep::~MarkerRep()$/;"	f	class:MarkerRep
~MockComponent	tests/opal_src/Utilities/MockComponent.h	/^    ~MockComponent() { };\/\/std::cout << "MOCK DESTRUCTOR " << this << std::endl;}$/;"	f	class:MockComponent
~MockComponent2	tests/opal_src/Utilities/MockComponent.h	/^    ~MockComponent2() { };$/;"	f	class:MockComponent2
~Monitor	src/AbsBeamline/Monitor.cpp	/^Monitor::~Monitor() {$/;"	f	class:Monitor
~MonitorRep	src/BeamlineCore/MonitorRep.cpp	/^MonitorRep::~MonitorRep()$/;"	f	class:MonitorRep
~Multipole	src/AbsBeamline/Multipole.cpp	/^Multipole::~Multipole() {$/;"	f	class:Multipole
~MultipoleRep	src/BeamlineCore/MultipoleRep.cpp	/^MultipoleRep::~MultipoleRep()$/;"	f	class:MultipoleRep
~MultipoleT	src/AbsBeamline/MultipoleT.cpp	/^MultipoleT::~MultipoleT() {$/;"	f	class:MultipoleT
~MultipoleTBase	src/AbsBeamline/MultipoleTBase.cpp	/^MultipoleTBase::~MultipoleTBase() {$/;"	f	class:MultipoleTBase
~MultipoleTCurvedConstRadius	src/AbsBeamline/MultipoleTCurvedConstRadius.cpp	/^MultipoleTCurvedConstRadius::~MultipoleTCurvedConstRadius() {$/;"	f	class:MultipoleTCurvedConstRadius
~MultipoleTCurvedVarRadius	src/AbsBeamline/MultipoleTCurvedVarRadius.cpp	/^MultipoleTCurvedVarRadius::~MultipoleTCurvedVarRadius() {$/;"	f	class:MultipoleTCurvedVarRadius
~MultipoleTStraight	src/AbsBeamline/MultipoleTStraight.cpp	/^MultipoleTStraight::~MultipoleTStraight() {$/;"	f	class:MultipoleTStraight
~NDGrid	src/Fields/Interpolation/NDGrid.h	/^    ~NDGrid() {;}$/;"	f	class:interpolation::NDGrid
~NDGridTest	tests/classic_src/Fields/Interpolation/NDGridTest.cpp	/^    ~NDGridTest() {$/;"	f	class:ndgridtest::NDGridTest
~NullField	src/Fields/NullField.cpp	/^NullField::~NullField()$/;"	f	class:NullField
~NullGeometry	src/BeamlineGeometry/NullGeometry.cpp	/^NullGeometry::~NullGeometry()$/;"	f	class:NullGeometry
~OArray	src/AbstractObjects/Expressions.h	/^    OArray<T>::~OArray()$/;"	f	class:Expressions::OArray
~Object	src/AbstractObjects/Object.cpp	/^Object::~Object() {$/;"	f	class:Object
~ObjectFunction	src/AbstractObjects/ObjectFunction.cpp	/^ObjectFunction::~ObjectFunction()$/;"	f	class:ObjectFunction
~Offset	src/AbsBeamline/Offset.cpp	/^Offset::~Offset() {$/;"	f	class:Offset
~OpalBeamline	src/Elements/OpalBeamline.cpp	/^OpalBeamline::~OpalBeamline() {$/;"	f	class:OpalBeamline
~OpalCavity	src/Elements/OpalCavity.cpp	/^OpalCavity::~OpalCavity() {$/;"	f	class:OpalCavity
~OpalData	src/AbstractObjects/OpalData.cpp	/^OpalData::~OpalData() {$/;"	f	class:OpalData
~OpalDataImpl	src/AbstractObjects/OpalData.cpp	/^OpalDataImpl::~OpalDataImpl() {$/;"	f	class:OpalDataImpl
~OpalDrift	src/Elements/OpalDrift.cpp	/^OpalDrift::~OpalDrift() {$/;"	f	class:OpalDrift
~OpalElement	src/Elements/OpalElement.cpp	/^OpalElement::~OpalElement()$/;"	f	class:OpalElement
~OpalException	src/Utilities/OpalException.cpp	/^OpalException::~OpalException()$/;"	f	class:OpalException
~OpalFilter	src/Utilities/OpalFilter.cpp	/^OpalFilter::~OpalFilter() {$/;"	f	class:OpalFilter
~OpalGlobalCartesianOffset	src/Elements/OpalOffset/OpalGlobalCartesianOffset.cpp	/^OpalGlobalCartesianOffset::~OpalGlobalCartesianOffset() {}$/;"	f	class:OpalOffset::OpalGlobalCartesianOffset
~OpalGlobalCylindricalOffset	src/Elements/OpalOffset/OpalGlobalCylindricalOffset.cpp	/^OpalGlobalCylindricalOffset::~OpalGlobalCylindricalOffset() {}$/;"	f	class:OpalOffset::OpalGlobalCylindricalOffset
~OpalLocalCartesianOffset	src/Elements/OpalOffset/OpalLocalCartesianOffset.cpp	/^OpalLocalCartesianOffset::~OpalLocalCartesianOffset() {}$/;"	f	class:OpalOffset::OpalLocalCartesianOffset
~OpalLocalCylindricalOffset	src/Elements/OpalOffset/OpalLocalCylindricalOffset.cpp	/^OpalLocalCylindricalOffset::~OpalLocalCylindricalOffset() {}$/;"	f	class:OpalOffset::OpalLocalCylindricalOffset
~OpalMarker	src/Elements/OpalMarker.cpp	/^OpalMarker::~OpalMarker()$/;"	f	class:OpalMarker
~OpalMonitor	src/Elements/OpalMonitor.cpp	/^OpalMonitor::~OpalMonitor()$/;"	f	class:OpalMonitor
~OpalMultipole	src/Elements/OpalMultipole.cpp	/^OpalMultipole::~OpalMultipole()$/;"	f	class:OpalMultipole
~OpalMultipoleT	src/Elements/OpalMultipoleT.cpp	/^OpalMultipoleT::~OpalMultipoleT()$/;"	f	class:OpalMultipoleT
~OpalParser	src/OpalParser/OpalParser.cpp	/^OpalParser::~OpalParser() {$/;"	f	class:OpalParser
~OpalProbe	src/Elements/OpalProbe.cpp	/^OpalProbe::~OpalProbe() {$/;"	f	class:OpalProbe
~OpalRingDefinition	src/Elements/OpalRingDefinition.cpp	/^OpalRingDefinition::~OpalRingDefinition() {$/;"	f	class:OpalRingDefinition
~OpalSolenoid	src/Elements/OpalSolenoid.cpp	/^OpalSolenoid::~OpalSolenoid()$/;"	f	class:OpalSolenoid
~OpalTravelingWave	src/Elements/OpalTravelingWave.cpp	/^OpalTravelingWave::~OpalTravelingWave() {$/;"	f	class:OpalTravelingWave
~OpalVacuum	src/Elements/OpalVacuum.cpp	/^OpalVacuum::~OpalVacuum() {$/;"	f	class:OpalVacuum
~OpalVerticalFFAMagnet	src/Elements/OpalVerticalFFAMagnet.cpp	/^OpalVerticalFFAMagnet::~OpalVerticalFFAMagnet() {$/;"	f	class:OpalVerticalFFAMagnet
~Option	src/BasicActions/Option.cpp	/^Option::~Option() {$/;"	f	class:Option
~OscillatingField	src/Fields/OscillatingField.h	/^OscillatingField<Field>::~OscillatingField()$/;"	f	class:OscillatingField
~OutOfBounds	src/Algorithms/IndexMap.h	/^        virtual ~OutOfBounds() { }$/;"	f	class:IndexMap::OutOfBounds
~OverflowError	src/Utilities/OverflowError.cpp	/^OverflowError::~OverflowError()$/;"	f	class:OverflowError
~OwnPtr	src/MemoryManagement/OwnPtr.h	/^inline OwnPtr<Object>::~OwnPtr() {$/;"	f	class:OwnPtr
~PPSolveFactory	src/Fields/Interpolation/PPSolveFactory.h	/^    ~PPSolveFactory() {}$/;"	f	class:interpolation::PPSolveFactory
~PSystem	src/BasicActions/PSystem.cpp	/^PSystem::~PSystem() {$/;"	f	class:PSystem
~Pair	src/Fields/BMultipoleField.cpp	/^inline BMultipoleField::Pair::~Pair()$/;"	f	class:BMultipoleField::Pair
~ParallelTracker	src/Algorithms/ParallelTracker.cpp	/^ParallelTracker::~ParallelTracker() {$/;"	f	class:ParallelTracker
~ParseError	src/Utilities/ParseError.cpp	/^ParseError::~ParseError()$/;"	f	class:ParseError
~Parser	src/OpalParser/Parser.h	/^Parser::~Parser()$/;"	f	class:Parser
~PartBins	src/Algorithms/PartBins.cpp	/^PartBins::~PartBins() {$/;"	f	class:PartBins
~PartBunch	src/Algorithms/.PartBunch.cpp	/^PartBunch::~PartBunch() {$/;"	f	class:PartBunch
~PartBunch	src/Algorithms/.PartBunchBase.h	/^    virtual ~PartBunch() {$/;"	f	class:PartBunch
~PartBunch	src/PartBunch/PartBunch.hpp	/^    ~PartBunch() {$/;"	f	class:PartBunch
~ParticleContainer	src/PartBunch/Binning/test/alpine/ParticleContainer.hpp	/^        ~ParticleContainer(){}$/;"	f	class:ParticleContainer
~ParticleContainer	src/PartBunch/ParticleContainer.hpp	/^    ~ParticleContainer() {$/;"	f	class:ParticleContainer
~Particles	tests/ippl_src/Particle/ParticleDebug.cpp	/^    virtual ~Particles() {}$/;"	f	class:Particles
~Place	src/Attributes/Place.cpp	/^    Place::~Place()$/;"	f	class:Attributes::Place
~PlaceRep	src/AbstractObjects/PlaceRep.cpp	/^PlaceRep::~PlaceRep()$/;"	f	class:PlaceRep
~PlanarArcGeometry	src/BeamlineGeometry/PlanarArcGeometry.cpp	/^PlanarArcGeometry::~PlanarArcGeometry()$/;"	f	class:PlanarArcGeometry
~PluginElement	src/AbsBeamline/PluginElement.cpp	/^PluginElement::~PluginElement() {$/;"	f	class:PluginElement
~Pointer	src/MemoryManagement/Pointer.h	/^inline Pointer<Object>::~Pointer() {$/;"	f	class:Pointer
~PoissonSolver	src/.Solvers/PoissonSolver.h	/^    virtual ~PoissonSolver(){};$/;"	f	class:PoissonSolver
~Polynomial	src/AbsBeamline/MultipoleTFunctions/Polynomial.cpp	/^Polynomial::~Polynomial() {$/;"	f	class:polynomial::Polynomial
~PolynomialPatch	src/Fields/Interpolation/PolynomialPatch.cpp	/^PolynomialPatch::~PolynomialPatch() {$/;"	f	class:interpolation::PolynomialPatch
~PolynomialSum	src/AbsBeamline/MultipoleTFunctions/PolynomialSum.cpp	/^PolynomialSum::~PolynomialSum() {$/;"	f	class:polynomial::PolynomialSum
~PolynomialTimeDependence	src/Algorithms/PolynomialTimeDependence.h	/^    ~PolynomialTimeDependence() {}$/;"	f	class:PolynomialTimeDependence
~PredefinedString	src/Attributes/PredefinedString.cpp	/^    PredefinedString::~PredefinedString()$/;"	f	class:Attributes::PredefinedString
~Probe	src/AbsBeamline/Probe.cpp	/^Probe::~Probe() {$/;"	f	class:Probe
~ProbeRep	src/BeamlineCore/ProbeRep.cpp	/^ProbeRep::~ProbeRep()$/;"	f	class:ProbeRep
~PtrToArray	src/AbstractObjects/Expressions.h	/^    PtrToArray<T>::~PtrToArray()$/;"	f	class:Expressions::PtrToArray
~PtrToScalar	src/AbstractObjects/Expressions.h	/^    PtrToScalar<T>::~PtrToScalar()$/;"	f	class:Expressions::PtrToScalar
~QuadTree	src/Utilities/MSLang/QuadTree.cpp	/^    QuadTree::~QuadTree() {$/;"	f	class:mslang::QuadTree
~Quit	src/BasicActions/Quit.cpp	/^Quit::~Quit()$/;"	f	class:Quit
~RBendGeometry	src/BeamlineGeometry/RBendGeometry.cpp	/^RBendGeometry::~RBendGeometry()$/;"	f	class:RBendGeometry
~RCObject	src/MemoryManagement/RCObject.h	/^inline RCObject::~RCObject()$/;"	f	class:RCObject
~RFCavity	src/AbsBeamline/RFCavity.cpp	/^RFCavity::~RFCavity() {$/;"	f	class:RFCavity
~RFCavityRep	src/BeamlineCore/RFCavityRep.cpp	/^RFCavityRep::~RFCavityRep()$/;"	f	class:RFCavityRep
~Random	src/Utilities/ClassicRandom.cpp	/^Random::~Random()$/;"	f	class:Random
~Range	src/Attributes/Range.cpp	/^    Range::~Range()$/;"	f	class:Attributes::Range
~RangeRep	src/AbstractObjects/RangeRep.cpp	/^RangeRep::~RangeRep()$/;"	f	class:RangeRep
~RangeSelector	src/Tables/RangeSelector.cpp	/^RangeSelector::~RangeSelector()$/;"	f	class:RangeSelector
~Real	src/Attributes/Real.cpp	/^    Real::~Real()$/;"	f	class:Attributes::Real
~RealArray	src/Attributes/RealArray.cpp	/^    RealArray::~RealArray()$/;"	f	class:Attributes::RealArray
~RealConstant	src/ValueDefinitions/RealConstant.cpp	/^RealConstant::~RealConstant() {$/;"	f	class:RealConstant
~RealVariable	src/ValueDefinitions/RealVariable.cpp	/^RealVariable::~RealVariable()$/;"	f	class:RealVariable
~RealVector	src/ValueDefinitions/RealVector.cpp	/^RealVector::~RealVector()$/;"	f	class:RealVector
~Rectangle	src/Utilities/MSLang/Rectangle.h	/^        virtual ~Rectangle() { }$/;"	f	struct:mslang::Rectangle
~RecursionRelation	src/AbsBeamline/MultipoleTFunctions/RecursionRelation.cpp	/^RecursionRelation::~RecursionRelation() {$/;"	f	class:polynomial::RecursionRelation
~RecursionRelationTwo	src/AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.cpp	/^RecursionRelationTwo::~RecursionRelationTwo() {$/;"	f	class:polynomial::RecursionRelationTwo
~Reference	src/Attributes/Reference.cpp	/^    Reference::~Reference()$/;"	f	class:Attributes::Reference
~Reference	src/Lines/SequenceParser.h	/^        ~Reference()$/;"	f	struct:SequenceParser::Reference
~RegularExpression	src/Utilities/RegularExpression.cpp	/^RegularExpression::~RegularExpression() {$/;"	f	class:RegularExpression
~Repeat	src/Utilities/MSLang/Repeat.h	/^        virtual ~Repeat() {$/;"	f	struct:mslang::Repeat
~Replacer	src/Lines/Replacer.cpp	/^Replacer::~Replacer()$/;"	f	class:Replacer
~Ring	src/AbsBeamline/Ring.cpp	/^Ring::~Ring() {$/;"	f	class:Ring
~RingSection	src/Utilities/RingSection.cpp	/^RingSection::~RingSection() {$/;"	f	class:RingSection
~Rotation	src/Utilities/MSLang/Rotation.h	/^        virtual ~Rotation() {$/;"	f	struct:mslang::Rotation
~SAutomatic	src/Expressions/SAutomatic.h	/^    SAutomatic<T>::~SAutomatic() {$/;"	f	class:Expressions::SAutomatic
~SBinary	src/Expressions/SBinary.h	/^    SBinary<T, U>::~SBinary()$/;"	f	class:Expressions::SBinary
~SCell	src/Expressions/SCell.cpp	/^    SCell::~SCell() {$/;"	f	class:Expressions::SCell
~SConstant	src/Expressions/SConstant.h	/^    SConstant<T>::~SConstant()$/;"	f	class:Expressions::SConstant
~SDDSWriter	src/Structure/SDDSWriter.h	/^    virtual ~SDDSWriter(){};$/;"	f	class:SDDSWriter
~SDeferred	src/Expressions/SDeferred.h	/^    SDeferred<T>::~SDeferred()$/;"	f	class:Expressions::SDeferred
~SFunction	src/Expressions/SFunction.cpp	/^SFunction::~SFunction() {$/;"	f	class:SFunction
~SHash	src/Expressions/SHash.cpp	/^    SHash::~SHash()$/;"	f	class:Expressions::SHash
~SNull	src/Expressions/SNull.h	/^    SNull<T>::~SNull()$/;"	f	class:Expressions::SNull
~SRefAttr	src/Expressions/SRefAttr.h	/^    SRefAttr<T>::~SRefAttr() {$/;"	f	class:Expressions::SRefAttr
~SRefExpr	src/Expressions/SRefExpr.h	/^    SRefExpr<T>::~SRefExpr() {$/;"	f	class:Expressions::SRefExpr
~SUnary	src/Expressions/SUnary.h	/^    SUnary<T, U>::~SUnary()$/;"	f	class:Expressions::SUnary
~SValue	src/Expressions/SValue.h	/^    SValue<T>::~SValue()$/;"	f	class:Expressions::SValue
~SamplingBase	src/Distribution/SamplingBase.hpp	/^       virtual ~SamplingBase() {}$/;"	f	class:SamplingBase
~SavitzkyGolayFilter	src/Filters/SavitzkyGolay.h	/^    ~SavitzkyGolayFilter()$/;"	f	class:SavitzkyGolayFilter
~Scalar	src/AbstractObjects/Expressions.h	/^    Scalar<T>::~Scalar()$/;"	f	class:Expressions::Scalar
~ScalingFFAMagnet	src/AbsBeamline/ScalingFFAMagnet.cpp	/^ScalingFFAMagnet::~ScalingFFAMagnet() {$/;"	f	class:ScalingFFAMagnet
~ScalingFFAMagnetTest	tests/classic_src/AbsBeamline/ScalingFFAMagnetTest.cpp	/^    ~ScalingFFAMagnetTest() {$/;"	f	class:ScalingFFAMagnetTest
~SectorField	src/Fields/SectorField.cpp	/^SectorField::~SectorField() {}$/;"	f	class:SectorField
~SectorMagneticFieldMap	src/Fields/SectorMagneticFieldMap.cpp	/^SectorMagneticFieldMap::~SectorMagneticFieldMap() {$/;"	f	class:SectorMagneticFieldMap
~Select	src/BasicActions/Select.cpp	/^Select::~Select()$/;"	f	class:Select
~Selector	src/Tables/Selector.cpp	/^Selector::~Selector() {$/;"	f	class:Selector
~Sequence	src/Lines/Sequence.cpp	/^Sequence::~Sequence() {$/;"	f	class:Sequence
~SequenceMember	src/Lines/SequenceMember.cpp	/^SequenceMember::~SequenceMember()$/;"	f	class:SequenceMember
~SequenceParser	src/Lines/SequenceParser.cpp	/^SequenceParser::~SequenceParser()$/;"	f	class:SequenceParser
~SequenceTemplate	src/Lines/SequenceTemplate.cpp	/^SequenceTemplate::~SequenceTemplate()$/;"	f	class:SequenceTemplate
~Shear	src/Utilities/MSLang/Shear.h	/^        virtual ~Shear() {$/;"	f	struct:mslang::Shear
~SilenceTest	tests/opal_test_utilities/SilenceTest.cpp	/^OpalTestUtilities::SilenceTest::~SilenceTest() { \/\/ return buffer to normal on delete$/;"	f	class:OpalTestUtilities::SilenceTest
~SimpleStatement	src/OpalParser/SimpleStatement.cpp	/^SimpleStatement::~SimpleStatement()$/;"	f	class:SimpleStatement
~Solenoid	src/AbsBeamline/Solenoid.cpp	/^Solenoid::~Solenoid() {$/;"	f	class:Solenoid
~SolenoidRep	src/BeamlineCore/SolenoidRep.cpp	/^SolenoidRep::~SolenoidRep()$/;"	f	class:SolenoidRep
~SolveFactory	src/Fields/Interpolation/SolveFactory.h	/^    ~SolveFactory() {}$/;"	f	class:interpolation::SolveFactory
~SplineTimeDependence	src/Algorithms/SplineTimeDependence.cpp	/^SplineTimeDependence::~SplineTimeDependence() {$/;"	f	class:SplineTimeDependence
~SquarePolynomialVector	src/Fields/Interpolation/SquarePolynomialVector.h	/^    ~SquarePolynomialVector() {;}$/;"	f	class:interpolation::SquarePolynomialVector
~Statement	src/OpalParser/Statement.cpp	/^Statement::~Statement() {$/;"	f	class:Statement
~StaticElectricField	src/Fields/StaticElectricField.cpp	/^StaticElectricField::~StaticElectricField()$/;"	f	class:StaticElectricField
~StaticMagneticField	src/Fields/StaticMagneticField.cpp	/^StaticMagneticField::~StaticMagneticField()$/;"	f	class:StaticMagneticField
~Stepper	src/Steppers/Stepper.h	/^    virtual ~Stepper(){};$/;"	f	class:Stepper
~Stop	src/BasicActions/Stop.cpp	/^Stop::~Stop()$/;"	f	class:Stop
~StraightGeometry	src/BeamlineGeometry/StraightGeometry.cpp	/^StraightGeometry::~StraightGeometry()$/;"	f	class:StraightGeometry
~String	src/Attributes/String.cpp	/^    String::~String()$/;"	f	class:Attributes::String
~StringArray	src/Attributes/StringArray.cpp	/^    StringArray::~StringArray()$/;"	f	class:Attributes::StringArray
~StringConstant	src/ValueDefinitions/StringConstant.cpp	/^StringConstant::~StringConstant() {$/;"	f	class:StringConstant
~StringStream	src/OpalParser/StringStream.cpp	/^StringStream::~StringStream()$/;"	f	class:StringStream
~SymmetricDifference	src/Utilities/MSLang/SymmetricDifference.h	/^        virtual ~SymmetricDifference() {$/;"	f	struct:mslang::SymmetricDifference
~System	src/BasicActions/System.cpp	/^System::~System() {$/;"	f	class:System
~TBeamline	src/Beamlines/TBeamline.h	/^TBeamline<T>::~TBeamline() {$/;"	f	class:TBeamline
~Table	src/AbstractObjects/Table.cpp	/^Table::~Table() {$/;"	f	class:Table
~TableRow	src/Attributes/TableRow.cpp	/^    TableRow::~TableRow()$/;"	f	class:Attributes::TableRow
~TableRowRep	src/AbstractObjects/TableRowRep.cpp	/^TableRowRep::~TableRowRep()$/;"	f	class:TableRowRep
~Tanh	src/AbsBeamline/EndFieldModel/Tanh.cpp	/^Tanh::~Tanh() {}$/;"	f	class:endfieldmodel::Tanh
~ThreeDGrid	src/Fields/Interpolation/ThreeDGrid.cpp	/^ThreeDGrid::~ThreeDGrid() {$/;"	f	class:interpolation::ThreeDGrid
~Timer	src/Utilities/Timer.cpp	/^    Timer::~Timer()$/;"	f	class:OPALTimer::Timer
~Title	src/BasicActions/Title.cpp	/^Title::~Title()$/;"	f	class:Title
~Token	src/OpalParser/Token.cpp	/^Token::~Token()$/;"	f	class:Token
~TokenList	src/Attributes/TokenList.cpp	/^    TokenList::~TokenList()$/;"	f	class:Attributes::TokenList
~TokenListArray	src/Attributes/TokenListArray.cpp	/^    TokenListArray::~TokenListArray()$/;"	f	class:Attributes::TokenListArray
~TokenStream	src/OpalParser/TokenStream.cpp	/^TokenStream::~TokenStream()$/;"	f	class:TokenStream
~Track	src/Track/Track.cpp	/^Track::~Track() {$/;"	f	class:Track
~TrackCmd	src/Track/TrackCmd.cpp	/^TrackCmd::~TrackCmd() {$/;"	f	class:TrackCmd
~TrackEnd	src/Track/TrackEnd.cpp	/^TrackEnd::~TrackEnd()$/;"	f	class:TrackEnd
~TrackParser	src/Track/TrackParser.cpp	/^TrackParser::~TrackParser()$/;"	f	class:TrackParser
~TrackRun	src/Track/TrackRun.cpp	/^TrackRun::~TrackRun() {$/;"	f	class:TrackRun
~Tracker	src/Algorithms/Tracker.cpp	/^Tracker::~Tracker() {$/;"	f	class:Tracker
~Translation	src/Utilities/MSLang/Translation.h	/^        virtual ~Translation() {$/;"	f	struct:mslang::Translation
~TravelingWave	src/AbsBeamline/TravelingWave.cpp	/^TravelingWave::~TravelingWave() {$/;"	f	class:TravelingWave
~TravelingWaveRep	src/BeamlineCore/TravelingWaveRep.cpp	/^TravelingWaveRep::~TravelingWaveRep()$/;"	f	class:TravelingWaveRep
~TriLinearInterpolator	src/Fields/Interpolation/TriLinearInterpolator.h	/^TriLinearInterpolator::~TriLinearInterpolator() {$/;"	f	class:interpolation::TriLinearInterpolator
~Triangle	src/Utilities/MSLang/Triangle.h	/^        virtual ~Triangle()$/;"	f	struct:mslang::Triangle
~TwoPolynomial	src/AbsBeamline/MultipoleTFunctions/TwoPolynomial.cpp	/^TwoPolynomial::~TwoPolynomial() {$/;"	f	class:polynomial::TwoPolynomial
~Union	src/Utilities/MSLang/Union.h	/^        virtual ~Union () {$/;"	f	struct:mslang::Union
~UpperCaseString	src/Attributes/UpperCaseString.cpp	/^    UpperCaseString::~UpperCaseString()$/;"	f	class:Attributes::UpperCaseString
~UpperCaseStringArray	src/Attributes/UpperCaseStringArray.cpp	/^    UpperCaseStringArray::~UpperCaseStringArray()$/;"	f	class:Attributes::UpperCaseStringArray
~Value	src/BasicActions/Value.cpp	/^Value::~Value()$/;"	f	class:Value
~ValueDefinition	src/AbstractObjects/ValueDefinition.cpp	/^ValueDefinition::~ValueDefinition()$/;"	f	class:ValueDefinition
~VarRadiusGeometry	src/BeamlineGeometry/VarRadiusGeometry.h	/^    VarRadiusGeometry::~VarRadiusGeometry() {$/;"	f	class:VarRadiusGeometry
~VectorMap	src/Fields/Interpolation/VectorMap.h	/^    virtual             ~VectorMap() {;}$/;"	f	class:interpolation::VectorMap
~VerticalFFAMagnet	src/AbsBeamline/VerticalFFAMagnet.cpp	/^VerticalFFAMagnet::~VerticalFFAMagnet() {$/;"	f	class:VerticalFFAMagnet
~VerticalFFAMagnetTest	tests/classic_src/AbsBeamline/VerticalFFAMagnetTest.cpp	/^    ~VerticalFFAMagnetTest() {$/;"	f	class:VerticalFFAMagnetTest
~WhileStatement	src/OpalParser/WhileStatement.cpp	/^WhileStatement::~WhileStatement() {$/;"	f	class:WhileStatement
