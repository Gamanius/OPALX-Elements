			dcf2brick
			---------

dcf2brick is a converter program, to convert from IPPL DiscField
format to simple "brick of bytes" format.  The brick format is just a
simple block of unsigned char's, organized in column-major format.  In 
this case the brick will always be cubical with each side's length a
power of two.  The source data is a DiscField of some type, and the
output is one or a series of files with names like filename.0000.dat,
filename.0001.dat, filename.0002.dat, and so forth.  To get to a cube
with sides of lengths equal to powers of two, this program will just
add zeros to pad out the original domain if it is too small in any
dimension.

The command-line options used by dcf2brick are:

	dcf2brick -file <infile> [-ofile <outfile>] [options]

where [options] may be any of the following:
   -conf <file>       : configuration file
   -field <n>         : which field to print from file (0 to numfields-1)
   -startrecord <n>   : starting rec from file (0 to numrecs-1)
   -endrecord <n>     : ending rec from file (0 to numrecs-1)
   -minsize <n>       : minimum size of the output field (pow of 2)
   -redominmax        : recalc min & max each record, instead of global min/max
   -sum               : combine multipple-field file into one field
   -dim <dim>         : dim of field (will be inferred if not given)
   -vec or -vector    : assume vector instead of scalar data
   -tens or -tensor   : assume tensor instead of scalar data
   -sym or -symtensor : assume symtensor instead of scalar data
   -anti or -antisymtensor: assume antisymtensor instead of scalar data
   -i or -int         : assume integer instead of double data
   -f or -flt         : assume float instead of double data
   -d or -dbl         : assume double for the data (default)

If -ofile option is not given, then the output filenames will be
<infile>.NNNN.dat.

By default, dcf2brick will assume the field data type is just 'double'.
If it is some other type, use the "-f" or "-i" options.  Also, if the
field is some other IPPL type like Vektor, Tenzor, etc., use the
"-vec", "-tens", etc. flags.  NOTE: The dimension of the Vektor or
Tenzor will be assumed to be the dimension of the total field.  There
is currently no way to specify anything else with dcf2brick.

You should not ever have to use the "-dim <dim>" option anymore,
dcf2brick will figure out the dimension properly.  You only have to
specify a "conf" file if it is needed.

For example, to convert a DiscField file "A", containing Vektors, that 
has four records each with two fields, and only use the 1st field in
each record, you say

	dcf2brick -file A -ofile brick -vec -field 0

This creates the files brick.0000.dat, brick.0001.dat ... brick.0003.dat.


To convert to this brick format, all values must be rescaled from
their original value to the range 0 ... 255.  To do this, a minimum
and maximum is computed for the data and the data is scaled based on
these values.  There are two options to compute the minimum and
maximum:

1. A "global" minimum and maximum, where the program reads the data
once to compute the global min and max of all the data in the file,
then uses that during a second read through the data to write out the
values.  This is the default.

2. A "local" minimum and maximum, where the data is only read once,
and min and max values are recomputed for each record and field.  This 
is faster, but sometimes not the best option for visual presentation.
Use the "-redominmax" flag to request this option.


One other option available here is a "sum" option, where, for each
record in the input file, you sum all the fields in that record into
one single field before converting and writing out the results.  In
that case, the value specified by any "-field <N>" argument is
ignored.  Use the "-sum" flag to request this option.


dcf2brick will return an error code upon completion that signals what
happened when it tried to read and convert the file contents.  The
possible error codes:

   0: OK, file converted successfully
   1: Error in reading
   2: Error in writing
   3: Error in command-line parameters
   4: Unsupported dimension

Use '--connect aclvis' to also visually display the data as it is read 
in, if you have compiled IPPL with this option.  This will display
the input data as-is, and the converted byte field.

Since dcf2brick is a IPPL program, you can use the standard IPPL
command-line options to start this program running in parallel.
