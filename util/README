
			IPPL  UTILITIES
			------------------

This directory contains a set of utility programs that may be useful
to users of the IPPL  Framework.  They are mostly related to
manipulation of the parallel data files generated by IPPL ,
commonly referred to as "DiscField" and "DiscParticle" files.


COMPILING THE PROGRAMS
----------------------

Each utility program is in a separate directory; to build any of the
programs, follow these steps:

1. Compile the IPPL  library in some location, and set the
environment variables IPPL_ROOT and IPPL_ARCH to point to the
location of the library you want to use.  If you want to be able to
use run-time graphics display from the programs that have that
ability, make sure to include the "ACLVIS" conf option when building
IPPL.  This is optional, however.  Many of the utilities can also be
run in parallel, so include a parallel message library conf option
when building IPPL if you would like to be able to do this.  Again,
this is optional.

2. cd to the directory containing the utility program you want to
build

3. type 'make'.  Many of the programs are constructed in a way as to
facilitate parallel compilation and linking (where available), in that 
case you can use a command like

	gmake -j N PARALLEL=N LD_PARALLEL=N

to run an N-way parallel build.  The dcf* programs are all set up for
this, not all of the dcp* programs may have this option yet.


WHAT IS INCLUDED HERE
---------------------

The utility programs that are currently available are:

dcfdump ............ dumps the contents of a DiscField file to the console
dcfdiff ............ calculates the difference between two DiscFields
dcf2brick .......... converts from DiscField to a simple "brick" byte file
dcpdump ............ dumps the contents of a DiscParticle file to the console
dcpdiff ............ calculates the difference between two DiscParticles

All the programs have similar (but not necessarily identical)
command-line arguments.  See the README file in each of the utility
program subdirectories for a more complete description of each file.
Once compiled, each program will print a summary of its command-line
options if it is run with no arguments, or with the "-h" or "-?"
flags.
