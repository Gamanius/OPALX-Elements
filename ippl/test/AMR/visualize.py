##
# @file visualize.py
# @author Matthias Frey
# @date 14. October 2016, LBNL
# 
# @pre Environment variable OPAL_BUILD has to be set.
# @details Plot the electric self-field, density and self-field
# potential using the yt framework.
# 1. mpirun -np #cores testSolver
# 2. python visualize.py (make sure you sourced the yt directory $YT_DIR/yt-x86_64/bin/activate)
# @brief Slice plots of plotfiles generated by writePlotFile.H

import os
import yt

opal = os.environ['OPAL_BUILD']
ds = yt.load(opal + "ippl/test/AMR/plt0000", unit_system='accel')

ds.print_stats()


print ("Field list:")
print (ds.field_list)

print ("Derived field list:")
print (ds.derived_field_list)


slc = yt.SlicePlot(ds, normal='z', fields='rho')
slc.annotate_grids()
slc.save()

slc = yt.ProjectionPlot(ds, 'x', fields='rho')
slc.annotate_grids()
slc.save()


slc = yt.ProjectionPlot(ds, 'y', fields='rho')
slc.annotate_grids()
slc.save()

slc = yt.ProjectionPlot(ds, 'z', fields='rho', width=(0.05, 0.05))
slc.annotate_grids()
slc.save()

slc = yt.SlicePlot(ds, normal='z', fields='Ex')
slc.annotate_grids()
slc.save()

slc = yt.SlicePlot(ds, normal='z', fields='Ey')
slc.annotate_grids()
slc.save()

#slc = yt.SlicePlot(ds, normal='x', fields='Ez')
#slc.annotate_grids()
#slc.save()

slc = yt.SlicePlot(ds, normal='z', fields='potential')
slc.annotate_grids()
slc.save()

#ad = ds.all_data()

#phi = ad['potential']
#print ( phi.max() )
#print ( phi.min() )

#dx = ad['dx']
#print ( "dx = ", dx )