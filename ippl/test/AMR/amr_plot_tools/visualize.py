##
# @file visualize.py
# @author Matthias Frey
# @date 14. October 2016, LBNL
# @version 1.1 (21. Dec. 2016)
# 
# @pre Environment variable OPAL_BUILD has to be set.
# @details Plot the electric self-field, density and self-field
# potential using the yt framework.
# 1. mpirun -np #cores testSolver
# 2. python visualize.py (make sure you sourced the yt directory $YT_DIR/yt-x86_64/bin/activate)
# @brief Slice plots of plotfiles generated by writePlotFile.H

import os
import yt

try:
    opal = os.environ['OPAL_BUILD']
    ds = yt.load(opal + "ippl/test/AMR/plt0000", unit_system='mks')
    
    ds.print_stats()
    
    print ("Field list:", ds.field_list)
    print ("Derived field list:", ds.derived_field_list)

    ##
    # @param ds is the data
    # @param direct is the direction 'x', 'y' or 'z' (normal)
    # @param field to plot
    # @param unit the data should be converted to (otherwise it
    #        takes the default given by the data)
    # @param col is the color for the time stamp and scale annotation
    def doSlicePlot(ds, direct, field, unit, col = 'white'):
        slc = yt.SlicePlot(ds, normal=direct, fields=field)
        
        if unit is not None:
            slc.set_unit(field, unit)
        
        slc.annotate_grids()
        slc.annotate_timestamp(corner='upper_left', redshift=False, draw_inset_box=True)
        slc.annotate_scale(corner='upper_right', size_bar_args={'color':col})
        slc.save()
    
    ##
    # @param ds is the data
    # @param direct is the direction 'x', 'y' or 'z' (normal)
    # @param field to plot
    # @param unit the data should be converted to (otherwise it
    #        takes the default given by the data)
    # @param col is the color for the time stamp and scale annotation
    def doProjectionPlot(ds, direct, field, unit, col = 'white'):
        slc = yt.ProjectionPlot(ds, direct, fields=field)
        
        if unit is not None:
            slc.set_unit(field, unit)
        
        slc.annotate_grids()
        slc.annotate_timestamp(corner='upper_left', redshift=False, draw_inset_box=True)
        slc.annotate_scale(corner='upper_right', size_bar_args={'color':col})
        slc.save()
    
    
    
    doSlicePlot(ds, 'z', 'rho', 'C/m**3', 'gray')
    
    doSlicePlot(ds, 'y', 'rho', 'C/m**3', 'gray')
    
    doSlicePlot(ds, 'x', 'rho', 'C/m**3', 'gray')
    
    doProjectionPlot(ds, 'x', 'rho', 'C/m**2', 'gray')
    
    doProjectionPlot(ds, 'y', 'rho', 'C/m**2', 'gray')
    
    doProjectionPlot(ds, 'z', 'rho', 'C/m**2', 'gray')
    
    doSlicePlot(ds, 'z', 'Ex', 'V/m')
    
    doSlicePlot(ds, 'z', 'Ey', 'V/m')
    
    doSlicePlot(ds, 'x', 'Ez', 'V/m')
    
    doSlicePlot(ds, 'z', 'potential', 'V')

    ad = ds.all_data()
    
    print ( ad.quantities.extrema("rho").in_units('C/m**3') )
    print ( ad.quantities.extrema("Ex").in_units('V/m') )
    print ( ad.quantities.extrema("potential").in_units('V') )
    
except KeyError:
    print ("Please export the environment variable 'OPAL_BUILD'.")
except IOError as e:
    print (e.strerror)
